// Type: ns0.Form1
// Assembly: JungleFlasher, Version=1.0.5004.40451, Culture=neutral, PublicKeyToken=7240d12d147b2b97
// MVID: 86B778B8-1293-454B-A759-8F0EBE32074A
// Assembly location: C:\Documents and Settings\User\Desktop\JungleFlasher-cleaned.exe

using AxSHDocVw;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.Threading;
using System.Windows.Forms;

namespace ns0
{
  public class Form1 : Form
  {
    private TabControl tabControl1;
    private TabControl tabControl2;
    private TabPage tabPage9;
    private Label label3;
    private Label label4;
    private Label label5;
    private Label label6;
    private Label label7;
    private Label label8;
    private TabPage tabPage10;
    private Label label9;
    private Label label10;
    private Label label11;
    private Label label12;
    private Label label13;
    private Label label14;
    private Label label15;
    private Label label16;
    private Label label17;
    private Label label18;
    private Button button6;
    private Button OpenSource;
    private Button DumpDrive;
    private Button SaveTarget;
    private Button OpeniXtreme;
    private TextBox textBox9;
    private Label label19;
    private Label label20;
    private TextBox textBox11;
    private TabControl tabControl3;
    private TabPage tabPage3;
    private Label label21;
    private TextBox textBox3;
    private Label label22;
    private Label label23;
    private Label label24;
    private Label label25;
    private Label label26;
    private Label label27;
    private Label label28;
    private Label label29;
    private TabPage tabPage7;
    private TextBox textBox7;
    private TabPage tabPage11;
    public TextBox textBox10;
    private TabPage tabPage12;
    private TextBox textBox12;
    private TabControl tabControl4;
    private TabPage tabPage1;
    private Label label1;
    private Label label2;
    private Label label30;
    private Label label31;
    private Label label32;
    private Label label33;
    private Label label34;
    private Label label35;
    private Label label36;
    private TextBox textBox1;
    private TabPage tabPage2;
    private TextBox textBox2;
    private TabPage tabPage4;
    private TextBox textBox4;
    private TabPage tabPage13;
    private TextBox textBox13;
    private CheckBox checkBox3;
    private TextBox textBox8;
    private TextBox textBox14;
    private TextBox textBox15;
    private TextBox textBox16;
    private Label label37;
    private Label label38;
    private Label label39;
    private Label label40;
    private Label label41;
    private Label label42;
    private Label label43;
    private Label label44;
    private Label label45;
    private Label label46;
    public TextBox textBox17;
    private TextBox textBox18;
    private Label label47;
    private Label label48;
    private Label label49;
    private Label label50;
    private Label label51;
    private Label label52;
    private Label label53;
    private Label label54;
    private Label label55;
    private Label label56;
    private Button button2;
    private TabControl tabControl5;
    public TextBox textBox6;
    private Label label57;
    private GroupBox groupBox2;
    private Label label64;
    private Label label65;
    private Label label66;
    private GroupBox groupBox4;
    private Label label69;
    private Label label70;
    private Button button13;
    private Button button14;
    private Button button15;
    private GroupBox groupBox6;
    private Label label77;
    private Label label78;
    private Label label79;
    private Label label80;
    private Button button17;
    private Button button18;
    private Label label87;
    private Label label88;
    private Label label102;
    private Label label104;
    private Label label105;
    private Label label63;
    private Label label103;
    private ListBox listBox5;
    private Button button26;
    private Button button29;
    private TabPage Firmtools;
    private TabPage Benq;
    private TabPage DVDKey32;
    private TabPage Hitachi;
    private Label label114;
    private Label label118;
    private Label label119;
    private Label label120;
    private Label label121;
    private Label label122;
    private Button button21;
    private GroupBox groupBox8;
    private RadioButton radioButton1;
    private RadioButton radioButton2;
    private RadioButton radioButton3;
    private RadioButton radioButton4;
    private RadioButton radioButton5;
    private GroupBox groupBox11;
    private RadioButton radioButton6;
    private RadioButton radioButton7;
    private RadioButton radioButton8;
    private RadioButton radioButton9;
    private RadioButton radioButton10;
    private Button button3;
    private GroupBox groupBox13;
    private Label label82;
    private Label label89;
    private Label label90;
    private Label label91;
    private Button button11;
    private GroupBox groupBox12;
    private GroupBox groupBox14;
    private Button button12;
    private GroupBox groupBox15;
    private ComboBox comboBox16;
    private ComboBox comboBox13;
    private ComboBox comboBox10;
    private GroupBox groupBox16;
    private Label label92;
    private Label label93;
    private Label label94;
    private Label label106;
    private Label label107;
    private Label label108;
    private Label label109;
    private Label label110;
    private ComboBox comboBox1;
    private Label label111;
    private GroupBox groupBox17;
    private Label label112;
    private Label label113;
    private Label label115;
    private Label label116;
    private Label label117;
    private Label label123;
    private Label label124;
    private Label label125;
    private Label label126;
    private Label label127;
    private GroupBox groupBox1;
    private Label label58;
    private Label label59;
    private Label label60;
    private Label label61;
    private Label label62;
    private Label label67;
    private Label label68;
    private Label label72;
    private ComboBox comboBox7;
    private Label label73;
    private GroupBox groupBox3;
    private Label label74;
    private Label label75;
    private Label label76;
    private Label label81;
    private Label label83;
    private Label label84;
    private Label label85;
    private Label label86;
    private Label label95;
    private Label label96;
    private Label label97;
    private Label label98;
    private Label label99;
    private Label label100;
    private Button button7;
    private Button button16;
    private GroupBox groupBox5;
    private RadioButton radioButton12;
    private RadioButton radioButton13;
    private RadioButton radioButton14;
    private RadioButton radioButton15;
    private Button button5;
    private Button button19;
    private Button button20;
    private Button button22;
    private RadioButton radioButton11;
    private Button button23;
    private Button button24;
    private CheckBox checkBox1;
    private CheckBox checkBox2;
    private GroupBox groupBox7;
    private GroupBox groupBox9;
    private CheckBox checkBox4;
    private TextBox textBox5;
    private CheckBox checkBox5;
    private TextBox textBox19;
    private Button button27;
    private CheckBox checkBox6;
    private CheckBox checkBox7;
    private Button button28;
    private LinkLabel linkLabel1;
    private LinkLabel linkLabel2;
    private LinkLabel linkLabel3;
    private RadioButton radioButton16;
    private Label label71;
    private Label label101;
    private Label label128;
    private Label label129;
    private RadioButton radioButton17;
    private RadioButton radioButton18;
    private ToolTip toolTip_0;
    private CheckBox checkBox8;
    private LinkLabel linkLabel4;
    private PictureBox pictureBox1;
    private CheckBox checkBox9;
    private ContextMenu contextMenu_0;
    private MenuItem menuItem_0;
    private MenuItem menuItem_1;
    private ContextMenu contextMenu_1;
    private MenuItem menuItem_2;
    private MenuItem menuItem_3;
    private MenuItem menuItem_4;
    private ContextMenu contextMenu_2;
    private MenuItem menuItem_5;
    private MenuItem menuItem_6;
    private MenuItem menuItem_7;
    private TextBox textBox20;
    private MenuItem menuItem_8;
    private MenuItem menuItem_9;
    private MenuItem menuItem_10;
    private Button button1;
    private Button button4;
    private MenuItem menuItem_11;
    private MenuItem menuItem_12;
    private Button button8;
    private CheckBox checkBox10;
    private CheckBox checkBox11;
    private MenuItem menuItem_13;
    private Button button9;
    private Button button10;
    private Button button25;
    //private AxWebBrowser axWebBrowser_0;
    //private AxWebBrowser axWebBrowser_1;
    private PictureBox pictureBox3;
    private TabPage tabPage5;
    private Button button30;
    private Button button31;
    private PictureBox pictureBox4;
    private ContextMenu contextMenu_3;
    private MenuItem menuItem_14;
    private MenuItem menuItem_15;
    private MenuItem menuItem_16;
    private MenuItem menuItem_17;
    private MenuItem menuItem_18;
    private PictureBox pictureBox2;
    private Label label130;
    private Label label131;
    private Label label132;
    private Label label133;
    private PictureBox pictureBox6;
    private PictureBox pictureBox7;
    private PictureBox pictureBox5;
    private Button button32;
    private MenuItem menuItem_19;
    private MenuItem menuItem_20;
    private ContextMenu contextMenu_4;
    private MenuItem menuItem_21;
    private MenuItem menuItem_22;
    private MenuItem menuItem_23;
    private MenuItem menuItem_24;
    private ContextMenu contextMenu_5;
    private MenuItem menuItem_25;
    private MenuItem menuItem_26;
    private MenuItem menuItem_27;
    private MenuItem menuItem_28;
    private MenuItem menuItem_29;
    private MenuItem menuItem_30;
    private MenuItem menuItem_31;
    private MenuItem menuItem_32;
    private Label label135;
    private PictureBox pictureBox8;
    private PictureBox pictureBox9;
    private PictureBox pictureBox10;
    private PictureBox pictureBox11;
    private CheckBox checkBox15;
    private CheckBox checkBox16;
    private Button button38;
    private RadioButton radioButton19;
    private RadioButton radioButton20;
    private Button button39;
    private Button button40;
    private Button button41;
    private Button button42;
    private MenuItem menuItem_33;
    private GroupBox groupBox18;
    private Button button43;
    private Button button44;
    private Button button45;
    private Button button46;
    private Button button47;
    private Button button48;
    private ContextMenu contextMenu_6;
    private MenuItem menuItem_34;
    private MenuItem menuItem_35;
    private MenuItem menuItem_36;
    private RadioButton radioButton21;
    private MenuItem menuItem_37;
    private MenuItem menuItem_38;
    private MenuItem menuItem_39;
    private MenuItem menuItem_40;
    private MenuItem menuItem_41;
    private MenuItem menuItem_42;
    private MenuItem menuItem_43;
    private MenuItem menuItem_44;
    private MenuItem menuItem_45;
    private MenuItem menuItem_46;
    private MenuItem menuItem_47;
    private MenuItem menuItem_48;
    private MenuItem menuItem_49;
    private MenuItem menuItem_50;
    private MenuItem menuItem_51;
    private MenuItem menuItem_52;
    private IContainer icontainer_0;
    public string string_0;
    public bool bool_0;
    public bool bool_1;
    public bool bool_2;
    public bool bool_3;
    public bool bool_4;
    public int int_0;
    public int int_1;
    public int int_2;
    public int int_3;
    public int int_4;
    public int int_5;
    public int int_6;
    public int int_7;
    public int int_8;
    public Thread thread_0;
    public Thread thread_1;
    public string string_1;
    public string string_2;
    public string string_3;
    public string string_4;
    public string string_5;
    public string string_6;
    public string string_7;
    public string string_8;
    public string string_9;
    public string string_10;
    public string string_11;
    public string string_12;
    public string string_13;
    public string string_14;
    public string string_15;
    public string string_16;
    public string string_17;
    public string string_18;
    public bool bool_5;
    public bool bool_6;
    public bool bool_7;
    public bool bool_8;
    public bool bool_9;
    public int int_9;
    public int int_10;
    public int int_11;
    public unsafe GStruct11* pGstruct11_0;
    private bool bool_10;
    private bool bool_11;
    private unsafe void* pVoid_0;
    private unsafe void* pVoid_1;
    private unsafe void* pVoid_2;
    private int int_12;
    public string string_19;
    public int int_13;
    public string string_20;
    public int int_14;
    public string string_21;
    public int int_15;
    public string string_22;
    private unsafe void** ppVoid_0;
    public string string_23;
        private IContainer components;
        public string string_24;

    public Form1()
    {
      this.Cursor = Cursors.AppStarting;
      AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(this.method_0);
      this.InitializeComponent();
    }

    protected override void Dispose([MarshalAs(UnmanagedType.U1)] bool disposing)
    {
      if (disposing && this.icontainer_0 != null)
        this.icontainer_0.Dispose();
      base.Dispose(disposing);
    }

    [PermissionSet(SecurityAction.Demand, XML = "<PermissionSet class=\"System.Security.PermissionSet\"\r\n               version=\"1\"\r\n               Unrestricted=\"true\"/>\r\n")]
    protected override void WndProc(ref Message message_0)
    {
      if (message_0.Msg == 537)
      {
        this.bool_6 = this.bool_5;
        this.method_410();
        if (this.bool_6 != this.bool_5)
        {
          if (this.bool_5)
          {
            this.textBox6.AppendText("XECUTER X360USB PRO attached." + "\r\n\r\n");
            this.method_170();
          }
          else
          {
            this.textBox6.AppendText("XECUTER X360USB PRO removed." + "\r\n\r\n");
            this.method_422();
            this.method_170();
          }
        }
        this.bool_8 = this.bool_7;
        this.method_411();
        if (this.bool_8 != this.bool_7)
        {
          if (this.bool_7)
          {
            this.textBox6.AppendText("XECUTER X360USB BAD ASS attached." + "\r\n\r\n");
            this.method_170();
          }
          else
          {
            this.textBox6.AppendText("XECUTER X360USB BAD ASS removed." + "\r\n\r\n");
            this.method_423();
            this.method_170();
          }
        }
        IntPtr num1 = new IntPtr(32768);
        if (message_0.WParam == num1 && Marshal.ReadInt32(message_0.LParam, 4) == 2)
        {
          this.int_11 = this.int_10;
          this.method_360();
          if (this.int_11 < this.int_10)
          {
            this.textBox6.AppendText("New CD/DVD detected." + "\r\n");
            this.method_361();
          }
        }
        IntPtr num2 = new IntPtr(32772);
        if (message_0.WParam == num2 && Marshal.ReadInt32(message_0.LParam, 4) == 2)
        {
          this.method_360();
          this.int_11 = this.int_10;
        }
      }
      base.WndProc(ref message_0);
    }

    private void InitializeComponent()
    {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Form1));
            this.tabControl1 = new System.Windows.Forms.TabControl();
            this.tabPage9 = new System.Windows.Forms.TabPage();
            this.contextMenu_2 = new System.Windows.Forms.ContextMenu();
            this.menuItem_5 = new System.Windows.Forms.MenuItem();
            this.menuItem_6 = new System.Windows.Forms.MenuItem();
            this.menuItem_7 = new System.Windows.Forms.MenuItem();
            this.menuItem_12 = new System.Windows.Forms.MenuItem();
            this.menuItem_13 = new System.Windows.Forms.MenuItem();
            this.menuItem_19 = new System.Windows.Forms.MenuItem();
            this.menuItem_33 = new System.Windows.Forms.MenuItem();
            this.label40 = new System.Windows.Forms.Label();
            this.label44 = new System.Windows.Forms.Label();
            this.label43 = new System.Windows.Forms.Label();
            this.label41 = new System.Windows.Forms.Label();
            this.label37 = new System.Windows.Forms.Label();
            this.textBox15 = new System.Windows.Forms.TextBox();
            this.textBox14 = new System.Windows.Forms.TextBox();
            this.label19 = new System.Windows.Forms.Label();
            this.textBox9 = new System.Windows.Forms.TextBox();
            this.label15 = new System.Windows.Forms.Label();
            this.label7 = new System.Windows.Forms.Label();
            this.label6 = new System.Windows.Forms.Label();
            this.label5 = new System.Windows.Forms.Label();
            this.label4 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.label16 = new System.Windows.Forms.Label();
            this.label8 = new System.Windows.Forms.Label();
            this.label101 = new System.Windows.Forms.Label();
            this.textBox19 = new System.Windows.Forms.TextBox();
            this.tabControl2 = new System.Windows.Forms.TabControl();
            this.tabPage10 = new System.Windows.Forms.TabPage();
            this.contextMenu_1 = new System.Windows.Forms.ContextMenu();
            this.menuItem_2 = new System.Windows.Forms.MenuItem();
            this.menuItem_3 = new System.Windows.Forms.MenuItem();
            this.menuItem_4 = new System.Windows.Forms.MenuItem();
            this.menuItem_11 = new System.Windows.Forms.MenuItem();
            this.menuItem_20 = new System.Windows.Forms.MenuItem();
            this.menuItem_32 = new System.Windows.Forms.MenuItem();
            this.menuItem_37 = new System.Windows.Forms.MenuItem();
            this.label71 = new System.Windows.Forms.Label();
            this.label50 = new System.Windows.Forms.Label();
            this.textBox11 = new System.Windows.Forms.TextBox();
            this.label55 = new System.Windows.Forms.Label();
            this.label48 = new System.Windows.Forms.Label();
            this.label47 = new System.Windows.Forms.Label();
            this.textBox17 = new System.Windows.Forms.TextBox();
            this.label17 = new System.Windows.Forms.Label();
            this.label18 = new System.Windows.Forms.Label();
            this.label9 = new System.Windows.Forms.Label();
            this.label10 = new System.Windows.Forms.Label();
            this.label11 = new System.Windows.Forms.Label();
            this.label12 = new System.Windows.Forms.Label();
            this.label13 = new System.Windows.Forms.Label();
            this.label14 = new System.Windows.Forms.Label();
            this.label20 = new System.Windows.Forms.Label();
            this.label49 = new System.Windows.Forms.Label();
            this.textBox5 = new System.Windows.Forms.TextBox();
            this.OpenSource = new System.Windows.Forms.Button();
            this.DumpDrive = new System.Windows.Forms.Button();
            this.SaveTarget = new System.Windows.Forms.Button();
            this.OpeniXtreme = new System.Windows.Forms.Button();
            this.button6 = new System.Windows.Forms.Button();
            this.tabControl3 = new System.Windows.Forms.TabControl();
            this.tabPage3 = new System.Windows.Forms.TabPage();
            this.label45 = new System.Windows.Forms.Label();
            this.label128 = new System.Windows.Forms.Label();
            this.label39 = new System.Windows.Forms.Label();
            this.label46 = new System.Windows.Forms.Label();
            this.label42 = new System.Windows.Forms.Label();
            this.label38 = new System.Windows.Forms.Label();
            this.textBox3 = new System.Windows.Forms.TextBox();
            this.label21 = new System.Windows.Forms.Label();
            this.label22 = new System.Windows.Forms.Label();
            this.label23 = new System.Windows.Forms.Label();
            this.label24 = new System.Windows.Forms.Label();
            this.label25 = new System.Windows.Forms.Label();
            this.label26 = new System.Windows.Forms.Label();
            this.label27 = new System.Windows.Forms.Label();
            this.label28 = new System.Windows.Forms.Label();
            this.label29 = new System.Windows.Forms.Label();
            this.textBox16 = new System.Windows.Forms.TextBox();
            this.textBox8 = new System.Windows.Forms.TextBox();
            this.tabPage7 = new System.Windows.Forms.TabPage();
            this.textBox7 = new System.Windows.Forms.TextBox();
            this.tabPage11 = new System.Windows.Forms.TabPage();
            this.textBox10 = new System.Windows.Forms.TextBox();
            this.tabPage12 = new System.Windows.Forms.TabPage();
            this.textBox12 = new System.Windows.Forms.TextBox();
            this.tabControl4 = new System.Windows.Forms.TabControl();
            this.tabPage1 = new System.Windows.Forms.TabPage();
            this.label129 = new System.Windows.Forms.Label();
            this.label54 = new System.Windows.Forms.Label();
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.label56 = new System.Windows.Forms.Label();
            this.label53 = new System.Windows.Forms.Label();
            this.label52 = new System.Windows.Forms.Label();
            this.label51 = new System.Windows.Forms.Label();
            this.textBox18 = new System.Windows.Forms.TextBox();
            this.label1 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.label30 = new System.Windows.Forms.Label();
            this.label31 = new System.Windows.Forms.Label();
            this.label32 = new System.Windows.Forms.Label();
            this.label33 = new System.Windows.Forms.Label();
            this.label34 = new System.Windows.Forms.Label();
            this.label35 = new System.Windows.Forms.Label();
            this.label36 = new System.Windows.Forms.Label();
            this.tabPage2 = new System.Windows.Forms.TabPage();
            this.textBox2 = new System.Windows.Forms.TextBox();
            this.tabPage4 = new System.Windows.Forms.TabPage();
            this.textBox4 = new System.Windows.Forms.TextBox();
            this.tabPage13 = new System.Windows.Forms.TabPage();
            this.textBox13 = new System.Windows.Forms.TextBox();
            this.checkBox3 = new System.Windows.Forms.CheckBox();
            this.button2 = new System.Windows.Forms.Button();
            this.tabControl5 = new System.Windows.Forms.TabControl();
            this.Firmtools = new System.Windows.Forms.TabPage();
            this.button41 = new System.Windows.Forms.Button();
            this.linkLabel1 = new System.Windows.Forms.LinkLabel();
            this.button29 = new System.Windows.Forms.Button();
            this.pictureBox1 = new System.Windows.Forms.PictureBox();
            this.linkLabel4 = new System.Windows.Forms.LinkLabel();
            this.DVDKey32 = new System.Windows.Forms.TabPage();
            this.button39 = new System.Windows.Forms.Button();
            this.button38 = new System.Windows.Forms.Button();
            this.checkBox15 = new System.Windows.Forms.CheckBox();
            this.button32 = new System.Windows.Forms.Button();
            this.button10 = new System.Windows.Forms.Button();
            this.button8 = new System.Windows.Forms.Button();
            this.button4 = new System.Windows.Forms.Button();
            this.button1 = new System.Windows.Forms.Button();
            this.checkBox9 = new System.Windows.Forms.CheckBox();
            this.checkBox8 = new System.Windows.Forms.CheckBox();
            this.button28 = new System.Windows.Forms.Button();
            this.checkBox4 = new System.Windows.Forms.CheckBox();
            this.checkBox2 = new System.Windows.Forms.CheckBox();
            this.button5 = new System.Windows.Forms.Button();
            this.contextMenu_3 = new System.Windows.Forms.ContextMenu();
            this.menuItem_14 = new System.Windows.Forms.MenuItem();
            this.menuItem_15 = new System.Windows.Forms.MenuItem();
            this.menuItem_16 = new System.Windows.Forms.MenuItem();
            this.menuItem_17 = new System.Windows.Forms.MenuItem();
            this.menuItem_18 = new System.Windows.Forms.MenuItem();
            this.groupBox16 = new System.Windows.Forms.GroupBox();
            this.contextMenu_4 = new System.Windows.Forms.ContextMenu();
            this.menuItem_21 = new System.Windows.Forms.MenuItem();
            this.menuItem_22 = new System.Windows.Forms.MenuItem();
            this.menuItem_23 = new System.Windows.Forms.MenuItem();
            this.menuItem_24 = new System.Windows.Forms.MenuItem();
            this.pictureBox5 = new System.Windows.Forms.PictureBox();
            this.pictureBox7 = new System.Windows.Forms.PictureBox();
            this.label131 = new System.Windows.Forms.Label();
            this.label130 = new System.Windows.Forms.Label();
            this.label92 = new System.Windows.Forms.Label();
            this.label93 = new System.Windows.Forms.Label();
            this.label94 = new System.Windows.Forms.Label();
            this.label106 = new System.Windows.Forms.Label();
            this.label107 = new System.Windows.Forms.Label();
            this.label108 = new System.Windows.Forms.Label();
            this.label109 = new System.Windows.Forms.Label();
            this.label110 = new System.Windows.Forms.Label();
            this.comboBox1 = new System.Windows.Forms.ComboBox();
            this.label111 = new System.Windows.Forms.Label();
            this.groupBox17 = new System.Windows.Forms.GroupBox();
            this.pictureBox10 = new System.Windows.Forms.PictureBox();
            this.pictureBox8 = new System.Windows.Forms.PictureBox();
            this.label112 = new System.Windows.Forms.Label();
            this.label113 = new System.Windows.Forms.Label();
            this.label115 = new System.Windows.Forms.Label();
            this.label116 = new System.Windows.Forms.Label();
            this.label117 = new System.Windows.Forms.Label();
            this.label123 = new System.Windows.Forms.Label();
            this.label124 = new System.Windows.Forms.Label();
            this.label125 = new System.Windows.Forms.Label();
            this.label126 = new System.Windows.Forms.Label();
            this.label127 = new System.Windows.Forms.Label();
            this.comboBox10 = new System.Windows.Forms.ComboBox();
            this.label57 = new System.Windows.Forms.Label();
            this.groupBox2 = new System.Windows.Forms.GroupBox();
            this.contextMenu_5 = new System.Windows.Forms.ContextMenu();
            this.menuItem_25 = new System.Windows.Forms.MenuItem();
            this.menuItem_26 = new System.Windows.Forms.MenuItem();
            this.menuItem_27 = new System.Windows.Forms.MenuItem();
            this.menuItem_29 = new System.Windows.Forms.MenuItem();
            this.menuItem_28 = new System.Windows.Forms.MenuItem();
            this.menuItem_30 = new System.Windows.Forms.MenuItem();
            this.menuItem_31 = new System.Windows.Forms.MenuItem();
            this.label103 = new System.Windows.Forms.Label();
            this.label63 = new System.Windows.Forms.Label();
            this.label105 = new System.Windows.Forms.Label();
            this.label104 = new System.Windows.Forms.Label();
            this.label102 = new System.Windows.Forms.Label();
            this.label64 = new System.Windows.Forms.Label();
            this.label65 = new System.Windows.Forms.Label();
            this.label66 = new System.Windows.Forms.Label();
            this.groupBox4 = new System.Windows.Forms.GroupBox();
            this.label88 = new System.Windows.Forms.Label();
            this.label87 = new System.Windows.Forms.Label();
            this.label69 = new System.Windows.Forms.Label();
            this.label70 = new System.Windows.Forms.Label();
            this.Benq = new System.Windows.Forms.TabPage();
            this.checkBox16 = new System.Windows.Forms.CheckBox();
            this.checkBox10 = new System.Windows.Forms.CheckBox();
            this.checkBox11 = new System.Windows.Forms.CheckBox();
            this.linkLabel2 = new System.Windows.Forms.LinkLabel();
            this.groupBox9 = new System.Windows.Forms.GroupBox();
            this.radioButton21 = new System.Windows.Forms.RadioButton();
            this.button42 = new System.Windows.Forms.Button();
            this.radioButton20 = new System.Windows.Forms.RadioButton();
            this.radioButton19 = new System.Windows.Forms.RadioButton();
            this.button14 = new System.Windows.Forms.Button();
            this.button13 = new System.Windows.Forms.Button();
            this.button15 = new System.Windows.Forms.Button();
            this.button17 = new System.Windows.Forms.Button();
            this.button16 = new System.Windows.Forms.Button();
            this.groupBox7 = new System.Windows.Forms.GroupBox();
            this.button40 = new System.Windows.Forms.Button();
            this.button18 = new System.Windows.Forms.Button();
            this.button7 = new System.Windows.Forms.Button();
            this.button21 = new System.Windows.Forms.Button();
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.pictureBox2 = new System.Windows.Forms.PictureBox();
            this.pictureBox6 = new System.Windows.Forms.PictureBox();
            this.label133 = new System.Windows.Forms.Label();
            this.label132 = new System.Windows.Forms.Label();
            this.label72 = new System.Windows.Forms.Label();
            this.label58 = new System.Windows.Forms.Label();
            this.label59 = new System.Windows.Forms.Label();
            this.label60 = new System.Windows.Forms.Label();
            this.label61 = new System.Windows.Forms.Label();
            this.label62 = new System.Windows.Forms.Label();
            this.label67 = new System.Windows.Forms.Label();
            this.label68 = new System.Windows.Forms.Label();
            this.comboBox7 = new System.Windows.Forms.ComboBox();
            this.label73 = new System.Windows.Forms.Label();
            this.groupBox3 = new System.Windows.Forms.GroupBox();
            this.pictureBox11 = new System.Windows.Forms.PictureBox();
            this.pictureBox9 = new System.Windows.Forms.PictureBox();
            this.label74 = new System.Windows.Forms.Label();
            this.label75 = new System.Windows.Forms.Label();
            this.label76 = new System.Windows.Forms.Label();
            this.label81 = new System.Windows.Forms.Label();
            this.label83 = new System.Windows.Forms.Label();
            this.label84 = new System.Windows.Forms.Label();
            this.label85 = new System.Windows.Forms.Label();
            this.label86 = new System.Windows.Forms.Label();
            this.label95 = new System.Windows.Forms.Label();
            this.label96 = new System.Windows.Forms.Label();
            this.groupBox6 = new System.Windows.Forms.GroupBox();
            this.label118 = new System.Windows.Forms.Label();
            this.label122 = new System.Windows.Forms.Label();
            this.label121 = new System.Windows.Forms.Label();
            this.label120 = new System.Windows.Forms.Label();
            this.label119 = new System.Windows.Forms.Label();
            this.label114 = new System.Windows.Forms.Label();
            this.label77 = new System.Windows.Forms.Label();
            this.label78 = new System.Windows.Forms.Label();
            this.label79 = new System.Windows.Forms.Label();
            this.label80 = new System.Windows.Forms.Label();
            this.checkBox5 = new System.Windows.Forms.CheckBox();
            this.button9 = new System.Windows.Forms.Button();
            this.Hitachi = new System.Windows.Forms.TabPage();
            this.radioButton18 = new System.Windows.Forms.RadioButton();
            this.radioButton17 = new System.Windows.Forms.RadioButton();
            this.groupBox8 = new System.Windows.Forms.GroupBox();
            this.radioButton5 = new System.Windows.Forms.RadioButton();
            this.radioButton4 = new System.Windows.Forms.RadioButton();
            this.radioButton3 = new System.Windows.Forms.RadioButton();
            this.radioButton2 = new System.Windows.Forms.RadioButton();
            this.radioButton1 = new System.Windows.Forms.RadioButton();
            this.groupBox15 = new System.Windows.Forms.GroupBox();
            this.button22 = new System.Windows.Forms.Button();
            this.button3 = new System.Windows.Forms.Button();
            this.comboBox16 = new System.Windows.Forms.ComboBox();
            this.contextMenu_0 = new System.Windows.Forms.ContextMenu();
            this.menuItem_0 = new System.Windows.Forms.MenuItem();
            this.menuItem_1 = new System.Windows.Forms.MenuItem();
            this.menuItem_8 = new System.Windows.Forms.MenuItem();
            this.menuItem_9 = new System.Windows.Forms.MenuItem();
            this.menuItem_10 = new System.Windows.Forms.MenuItem();
            this.menuItem_38 = new System.Windows.Forms.MenuItem();
            this.menuItem_39 = new System.Windows.Forms.MenuItem();
            this.menuItem_40 = new System.Windows.Forms.MenuItem();
            this.menuItem_41 = new System.Windows.Forms.MenuItem();
            this.menuItem_42 = new System.Windows.Forms.MenuItem();
            this.menuItem_49 = new System.Windows.Forms.MenuItem();
            this.menuItem_48 = new System.Windows.Forms.MenuItem();
            this.menuItem_44 = new System.Windows.Forms.MenuItem();
            this.menuItem_46 = new System.Windows.Forms.MenuItem();
            this.menuItem_50 = new System.Windows.Forms.MenuItem();
            this.menuItem_45 = new System.Windows.Forms.MenuItem();
            this.menuItem_51 = new System.Windows.Forms.MenuItem();
            this.menuItem_47 = new System.Windows.Forms.MenuItem();
            this.menuItem_52 = new System.Windows.Forms.MenuItem();
            this.menuItem_43 = new System.Windows.Forms.MenuItem();
            this.button27 = new System.Windows.Forms.Button();
            this.button23 = new System.Windows.Forms.Button();
            this.groupBox14 = new System.Windows.Forms.GroupBox();
            this.button24 = new System.Windows.Forms.Button();
            this.button12 = new System.Windows.Forms.Button();
            this.checkBox1 = new System.Windows.Forms.CheckBox();
            this.linkLabel3 = new System.Windows.Forms.LinkLabel();
            this.groupBox12 = new System.Windows.Forms.GroupBox();
            this.listBox5 = new System.Windows.Forms.ListBox();
            this.groupBox13 = new System.Windows.Forms.GroupBox();
            this.button25 = new System.Windows.Forms.Button();
            this.label99 = new System.Windows.Forms.Label();
            this.label97 = new System.Windows.Forms.Label();
            this.label98 = new System.Windows.Forms.Label();
            this.label100 = new System.Windows.Forms.Label();
            this.button11 = new System.Windows.Forms.Button();
            this.label82 = new System.Windows.Forms.Label();
            this.label89 = new System.Windows.Forms.Label();
            this.label91 = new System.Windows.Forms.Label();
            this.comboBox13 = new System.Windows.Forms.ComboBox();
            this.button20 = new System.Windows.Forms.Button();
            this.button19 = new System.Windows.Forms.Button();
            this.label90 = new System.Windows.Forms.Label();
            this.groupBox11 = new System.Windows.Forms.GroupBox();
            this.radioButton16 = new System.Windows.Forms.RadioButton();
            this.radioButton11 = new System.Windows.Forms.RadioButton();
            this.radioButton10 = new System.Windows.Forms.RadioButton();
            this.radioButton9 = new System.Windows.Forms.RadioButton();
            this.radioButton8 = new System.Windows.Forms.RadioButton();
            this.radioButton7 = new System.Windows.Forms.RadioButton();
            this.radioButton6 = new System.Windows.Forms.RadioButton();
            this.button26 = new System.Windows.Forms.Button();
            this.groupBox5 = new System.Windows.Forms.GroupBox();
            this.radioButton12 = new System.Windows.Forms.RadioButton();
            this.radioButton13 = new System.Windows.Forms.RadioButton();
            this.radioButton14 = new System.Windows.Forms.RadioButton();
            this.radioButton15 = new System.Windows.Forms.RadioButton();
            this.tabPage5 = new System.Windows.Forms.TabPage();
            this.pictureBox4 = new System.Windows.Forms.PictureBox();
            this.button31 = new System.Windows.Forms.Button();
            this.button30 = new System.Windows.Forms.Button();
            this.checkBox7 = new System.Windows.Forms.CheckBox();
            this.checkBox6 = new System.Windows.Forms.CheckBox();
            this.textBox6 = new System.Windows.Forms.TextBox();
            this.toolTip_0 = new System.Windows.Forms.ToolTip(this.components);
            this.pictureBox3 = new System.Windows.Forms.PictureBox();
            this.button48 = new System.Windows.Forms.Button();
            this.button47 = new System.Windows.Forms.Button();
            this.button46 = new System.Windows.Forms.Button();
            this.button45 = new System.Windows.Forms.Button();
            this.button44 = new System.Windows.Forms.Button();
            this.button43 = new System.Windows.Forms.Button();
            this.textBox20 = new System.Windows.Forms.TextBox();
            this.label135 = new System.Windows.Forms.Label();
            this.groupBox18 = new System.Windows.Forms.GroupBox();
            this.contextMenu_6 = new System.Windows.Forms.ContextMenu();
            this.menuItem_34 = new System.Windows.Forms.MenuItem();
            this.menuItem_35 = new System.Windows.Forms.MenuItem();
            this.menuItem_36 = new System.Windows.Forms.MenuItem();
            this.tabControl1.SuspendLayout();
            this.tabPage9.SuspendLayout();
            this.tabControl2.SuspendLayout();
            this.tabPage10.SuspendLayout();
            this.tabControl3.SuspendLayout();
            this.tabPage3.SuspendLayout();
            this.tabPage7.SuspendLayout();
            this.tabPage11.SuspendLayout();
            this.tabPage12.SuspendLayout();
            this.tabControl4.SuspendLayout();
            this.tabPage1.SuspendLayout();
            this.tabPage2.SuspendLayout();
            this.tabPage4.SuspendLayout();
            this.tabPage13.SuspendLayout();
            this.tabControl5.SuspendLayout();
            this.Firmtools.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).BeginInit();
            this.DVDKey32.SuspendLayout();
            this.groupBox16.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox5)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox7)).BeginInit();
            this.groupBox17.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox10)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox8)).BeginInit();
            this.groupBox2.SuspendLayout();
            this.groupBox4.SuspendLayout();
            this.Benq.SuspendLayout();
            this.groupBox9.SuspendLayout();
            this.groupBox7.SuspendLayout();
            this.groupBox1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox2)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox6)).BeginInit();
            this.groupBox3.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox11)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox9)).BeginInit();
            this.groupBox6.SuspendLayout();
            this.Hitachi.SuspendLayout();
            this.groupBox8.SuspendLayout();
            this.groupBox15.SuspendLayout();
            this.groupBox14.SuspendLayout();
            this.groupBox12.SuspendLayout();
            this.groupBox13.SuspendLayout();
            this.groupBox11.SuspendLayout();
            this.groupBox5.SuspendLayout();
            this.tabPage5.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox4)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox3)).BeginInit();
            this.groupBox18.SuspendLayout();
            this.SuspendLayout();
            // 
            // tabControl1
            // 
            this.tabControl1.AllowDrop = true;
            this.tabControl1.Controls.Add(this.tabPage9);
            this.tabControl1.Location = new System.Drawing.Point(8, 16);
            this.tabControl1.Name = "tabControl1";
            this.tabControl1.SelectedIndex = 0;
            this.tabControl1.Size = new System.Drawing.Size(552, 144);
            this.tabControl1.TabIndex = 0;
            // 
            // tabPage9
            // 
            this.tabPage9.AllowDrop = true;
            this.tabPage9.ContextMenu = this.contextMenu_2;
            this.tabPage9.Controls.Add(this.label40);
            this.tabPage9.Controls.Add(this.label44);
            this.tabPage9.Controls.Add(this.label43);
            this.tabPage9.Controls.Add(this.label41);
            this.tabPage9.Controls.Add(this.label37);
            this.tabPage9.Controls.Add(this.textBox15);
            this.tabPage9.Controls.Add(this.textBox14);
            this.tabPage9.Controls.Add(this.label19);
            this.tabPage9.Controls.Add(this.textBox9);
            this.tabPage9.Controls.Add(this.label15);
            this.tabPage9.Controls.Add(this.label7);
            this.tabPage9.Controls.Add(this.label6);
            this.tabPage9.Controls.Add(this.label5);
            this.tabPage9.Controls.Add(this.label4);
            this.tabPage9.Controls.Add(this.label3);
            this.tabPage9.Controls.Add(this.label16);
            this.tabPage9.Controls.Add(this.label8);
            this.tabPage9.Controls.Add(this.label101);
            this.tabPage9.Location = new System.Drawing.Point(4, 22);
            this.tabPage9.Name = "tabPage9";
            this.tabPage9.Size = new System.Drawing.Size(544, 118);
            this.tabPage9.TabIndex = 4;
            this.tabPage9.Text = "Source";
            this.tabPage9.DragDrop += new System.Windows.Forms.DragEventHandler(this.tabPage12_DragDrop);
            this.tabPage9.DragEnter += new System.Windows.Forms.DragEventHandler(this.tabPage12_DragEnter);
            // 
            // contextMenu_2
            // 
            this.contextMenu_2.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.menuItem_5,
            this.menuItem_6,
            this.menuItem_7,
            this.menuItem_12,
            this.menuItem_13,
            this.menuItem_19,
            this.menuItem_33});
            // 
            // menuItem_5
            // 
            this.menuItem_5.Index = 0;
            this.menuItem_5.Text = "Load f/w";
            this.menuItem_5.Click += new System.EventHandler(this.menuItem_5_Click);
            // 
            // menuItem_6
            // 
            this.menuItem_6.Enabled = false;
            this.menuItem_6.Index = 1;
            this.menuItem_6.Text = "Clear Source";
            this.menuItem_6.Click += new System.EventHandler(this.menuItem_6_Click);
            // 
            // menuItem_7
            // 
            this.menuItem_7.Enabled = false;
            this.menuItem_7.Index = 2;
            this.menuItem_7.Text = "Update d/b";
            this.menuItem_7.Click += new System.EventHandler(this.menuItem_7_Click);
            // 
            // menuItem_12
            // 
            this.menuItem_12.Index = 3;
            this.menuItem_12.Text = "Open Key d/b";
            this.menuItem_12.Click += new System.EventHandler(this.menuItem_12_Click);
            // 
            // menuItem_13
            // 
            this.menuItem_13.Enabled = false;
            this.menuItem_13.Index = 4;
            this.menuItem_13.Text = "History";
            this.menuItem_13.Click += new System.EventHandler(this.menuItem_13_Click);
            // 
            // menuItem_19
            // 
            this.menuItem_19.Enabled = false;
            this.menuItem_19.Index = 5;
            this.menuItem_19.Text = "Verify Key";
            this.menuItem_19.Click += new System.EventHandler(this.menuItem_19_Click);
            // 
            // menuItem_33
            // 
            this.menuItem_33.Enabled = false;
            this.menuItem_33.Index = 6;
            this.menuItem_33.Text = "Auto LT-Plus";
            this.menuItem_33.Click += new System.EventHandler(this.menuItem_33_Click);
            // 
            // label40
            // 
            this.label40.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label40.Location = new System.Drawing.Point(320, 96);
            this.label40.Name = "label40";
            this.label40.Size = new System.Drawing.Size(216, 16);
            this.label40.TabIndex = 29;
            // 
            // label44
            // 
            this.label44.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label44.Location = new System.Drawing.Point(48, 96);
            this.label44.Name = "label44";
            this.label44.Size = new System.Drawing.Size(208, 16);
            this.label44.TabIndex = 32;
            // 
            // label43
            // 
            this.label43.Location = new System.Drawing.Point(16, 96);
            this.label43.Name = "label43";
            this.label43.Size = new System.Drawing.Size(40, 16);
            this.label43.TabIndex = 31;
            this.label43.Text = "OSIG:";
            // 
            // label41
            // 
            this.label41.Location = new System.Drawing.Point(256, 96);
            this.label41.Name = "label41";
            this.label41.Size = new System.Drawing.Size(72, 16);
            this.label41.TabIndex = 30;
            this.label41.Text = "Spoofed As:";
            this.label41.Visible = false;
            // 
            // label37
            // 
            this.label37.Location = new System.Drawing.Point(376, 48);
            this.label37.Name = "label37";
            this.label37.Size = new System.Drawing.Size(48, 16);
            this.label37.TabIndex = 26;
            // 
            // textBox15
            // 
            this.textBox15.BackColor = System.Drawing.SystemColors.Window;
            this.textBox15.Location = new System.Drawing.Point(16, 16);
            this.textBox15.Name = "textBox15";
            this.textBox15.ReadOnly = true;
            this.textBox15.Size = new System.Drawing.Size(512, 20);
            this.textBox15.TabIndex = 25;
            // 
            // textBox14
            // 
            this.textBox14.BackColor = System.Drawing.SystemColors.Window;
            this.textBox14.Location = new System.Drawing.Point(88, 130);
            this.textBox14.Name = "textBox14";
            this.textBox14.ReadOnly = true;
            this.textBox14.Size = new System.Drawing.Size(440, 20);
            this.textBox14.TabIndex = 24;
            this.textBox14.Visible = false;
            // 
            // label19
            // 
            this.label19.Location = new System.Drawing.Point(304, 48);
            this.label19.Name = "label19";
            this.label19.Size = new System.Drawing.Size(72, 16);
            this.label19.TabIndex = 12;
            this.label19.Text = "DVD Key @";
            // 
            // textBox9
            // 
            this.textBox9.BackColor = System.Drawing.SystemColors.Window;
            this.textBox9.Location = new System.Drawing.Point(296, 64);
            this.textBox9.Name = "textBox9";
            this.textBox9.ReadOnly = true;
            this.textBox9.Size = new System.Drawing.Size(232, 20);
            this.textBox9.TabIndex = 11;
            // 
            // label15
            // 
            this.label15.Location = new System.Drawing.Point(184, 48);
            this.label15.Name = "label15";
            this.label15.Size = new System.Drawing.Size(120, 16);
            this.label15.TabIndex = 9;
            this.label15.Text = "Firmware Type";
            // 
            // label7
            // 
            this.label7.Location = new System.Drawing.Point(64, 68);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(64, 16);
            this.label7.TabIndex = 5;
            // 
            // label6
            // 
            this.label6.Location = new System.Drawing.Point(16, 68);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(48, 16);
            this.label6.TabIndex = 4;
            // 
            // label5
            // 
            this.label5.Location = new System.Drawing.Point(128, 48);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(64, 16);
            this.label5.TabIndex = 3;
            this.label5.Text = "Rev";
            // 
            // label4
            // 
            this.label4.Location = new System.Drawing.Point(64, 48);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(64, 16);
            this.label4.TabIndex = 2;
            this.label4.Text = "Model ";
            // 
            // label3
            // 
            this.label3.Location = new System.Drawing.Point(16, 48);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(72, 16);
            this.label3.TabIndex = 1;
            this.label3.Text = "Vendor";
            // 
            // label16
            // 
            this.label16.Location = new System.Drawing.Point(184, 68);
            this.label16.Name = "label16";
            this.label16.Size = new System.Drawing.Size(120, 24);
            this.label16.TabIndex = 10;
            // 
            // label8
            // 
            this.label8.Location = new System.Drawing.Point(128, 68);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(64, 16);
            this.label8.TabIndex = 6;
            // 
            // label101
            // 
            this.label101.Location = new System.Drawing.Point(432, 48);
            this.label101.Name = "label101";
            this.label101.Size = new System.Drawing.Size(90, 16);
            this.label101.TabIndex = 36;
            // 
            // textBox19
            // 
            this.textBox19.BackColor = System.Drawing.SystemColors.Window;
            this.textBox19.Location = new System.Drawing.Point(368, 432);
            this.textBox19.Name = "textBox19";
            this.textBox19.Size = new System.Drawing.Size(112, 20);
            this.textBox19.TabIndex = 29;
            this.textBox19.Text = "EasyToFindSource";
            this.textBox19.TextChanged += new System.EventHandler(this.textBox19_TextChanged);
            // 
            // tabControl2
            // 
            this.tabControl2.Controls.Add(this.tabPage10);
            this.tabControl2.Location = new System.Drawing.Point(8, 208);
            this.tabControl2.Name = "tabControl2";
            this.tabControl2.SelectedIndex = 0;
            this.tabControl2.Size = new System.Drawing.Size(552, 144);
            this.tabControl2.TabIndex = 3;
            // 
            // tabPage10
            // 
            this.tabPage10.AllowDrop = true;
            this.tabPage10.ContextMenu = this.contextMenu_1;
            this.tabPage10.Controls.Add(this.label71);
            this.tabPage10.Controls.Add(this.label50);
            this.tabPage10.Controls.Add(this.textBox11);
            this.tabPage10.Controls.Add(this.label55);
            this.tabPage10.Controls.Add(this.label48);
            this.tabPage10.Controls.Add(this.label47);
            this.tabPage10.Controls.Add(this.textBox17);
            this.tabPage10.Controls.Add(this.label17);
            this.tabPage10.Controls.Add(this.label18);
            this.tabPage10.Controls.Add(this.label9);
            this.tabPage10.Controls.Add(this.label10);
            this.tabPage10.Controls.Add(this.label11);
            this.tabPage10.Controls.Add(this.label12);
            this.tabPage10.Controls.Add(this.label13);
            this.tabPage10.Controls.Add(this.label14);
            this.tabPage10.Controls.Add(this.label20);
            this.tabPage10.Controls.Add(this.label49);
            this.tabPage10.Location = new System.Drawing.Point(4, 22);
            this.tabPage10.Name = "tabPage10";
            this.tabPage10.Size = new System.Drawing.Size(544, 118);
            this.tabPage10.TabIndex = 4;
            this.tabPage10.Text = "Target";
            this.tabPage10.DragDrop += new System.Windows.Forms.DragEventHandler(this.tabPage13_DragDrop);
            this.tabPage10.DragEnter += new System.Windows.Forms.DragEventHandler(this.tabPage13_DragEnter);
            // 
            // contextMenu_1
            // 
            this.contextMenu_1.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.menuItem_2,
            this.menuItem_3,
            this.menuItem_4,
            this.menuItem_11,
            this.menuItem_20,
            this.menuItem_32,
            this.menuItem_37});
            // 
            // menuItem_2
            // 
            this.menuItem_2.Index = 0;
            this.menuItem_2.Text = "Load f/w";
            this.menuItem_2.Click += new System.EventHandler(this.menuItem_2_Click);
            // 
            // menuItem_3
            // 
            this.menuItem_3.Index = 1;
            this.menuItem_3.Text = "Load iXtreme";
            this.menuItem_3.Click += new System.EventHandler(this.menuItem_3_Click);
            // 
            // menuItem_4
            // 
            this.menuItem_4.Enabled = false;
            this.menuItem_4.Index = 2;
            this.menuItem_4.Text = "Clear Target";
            this.menuItem_4.Click += new System.EventHandler(this.menuItem_4_Click);
            // 
            // menuItem_11
            // 
            this.menuItem_11.Enabled = false;
            this.menuItem_11.Index = 3;
            this.menuItem_11.Text = "Save Dummy";
            this.menuItem_11.Click += new System.EventHandler(this.menuItem_11_Click);
            // 
            // menuItem_20
            // 
            this.menuItem_20.Enabled = false;
            this.menuItem_20.Index = 4;
            this.menuItem_20.Text = "Verify Key";
            this.menuItem_20.Click += new System.EventHandler(this.menuItem_20_Click);
            // 
            // menuItem_32
            // 
            this.menuItem_32.Enabled = false;
            this.menuItem_32.Index = 5;
            this.menuItem_32.Text = "Write Key";
            this.menuItem_32.Visible = false;
            this.menuItem_32.Click += new System.EventHandler(this.menuItem_32_Click);
            // 
            // menuItem_37
            // 
            this.menuItem_37.Enabled = false;
            this.menuItem_37.Index = 6;
            this.menuItem_37.Text = "Key C/R";
            this.menuItem_37.Visible = false;
            this.menuItem_37.Click += new System.EventHandler(this.menuItem_37_Click);
            // 
            // label71
            // 
            this.label71.Location = new System.Drawing.Point(432, 48);
            this.label71.Name = "label71";
            this.label71.Size = new System.Drawing.Size(90, 16);
            this.label71.TabIndex = 35;
            // 
            // label50
            // 
            this.label50.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label50.Location = new System.Drawing.Point(320, 96);
            this.label50.Name = "label50";
            this.label50.Size = new System.Drawing.Size(216, 16);
            this.label50.TabIndex = 33;
            // 
            // textBox11
            // 
            this.textBox11.BackColor = System.Drawing.SystemColors.Window;
            this.textBox11.Location = new System.Drawing.Point(296, 64);
            this.textBox11.Name = "textBox11";
            this.textBox11.ReadOnly = true;
            this.textBox11.Size = new System.Drawing.Size(232, 20);
            this.textBox11.TabIndex = 21;
            this.textBox11.TextChanged += new System.EventHandler(this.textBox11_TextChanged);
            // 
            // label55
            // 
            this.label55.Location = new System.Drawing.Point(376, 48);
            this.label55.Name = "label55";
            this.label55.Size = new System.Drawing.Size(48, 16);
            this.label55.TabIndex = 34;
            // 
            // label48
            // 
            this.label48.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label48.Location = new System.Drawing.Point(48, 96);
            this.label48.Name = "label48";
            this.label48.Size = new System.Drawing.Size(208, 16);
            this.label48.TabIndex = 33;
            // 
            // label47
            // 
            this.label47.Location = new System.Drawing.Point(16, 96);
            this.label47.Name = "label47";
            this.label47.Size = new System.Drawing.Size(40, 16);
            this.label47.TabIndex = 32;
            this.label47.Text = "OSIG:";
            // 
            // textBox17
            // 
            this.textBox17.BackColor = System.Drawing.SystemColors.Window;
            this.textBox17.Location = new System.Drawing.Point(16, 16);
            this.textBox17.Name = "textBox17";
            this.textBox17.ReadOnly = true;
            this.textBox17.Size = new System.Drawing.Size(512, 20);
            this.textBox17.TabIndex = 26;
            // 
            // label17
            // 
            this.label17.Location = new System.Drawing.Point(184, 68);
            this.label17.Name = "label17";
            this.label17.Size = new System.Drawing.Size(128, 24);
            this.label17.TabIndex = 18;
            // 
            // label18
            // 
            this.label18.Location = new System.Drawing.Point(184, 48);
            this.label18.Name = "label18";
            this.label18.Size = new System.Drawing.Size(120, 16);
            this.label18.TabIndex = 17;
            this.label18.Text = "Firmware Type";
            // 
            // label9
            // 
            this.label9.Location = new System.Drawing.Point(128, 68);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(64, 16);
            this.label9.TabIndex = 14;
            // 
            // label10
            // 
            this.label10.Location = new System.Drawing.Point(64, 68);
            this.label10.Name = "label10";
            this.label10.Size = new System.Drawing.Size(72, 16);
            this.label10.TabIndex = 13;
            // 
            // label11
            // 
            this.label11.Location = new System.Drawing.Point(16, 68);
            this.label11.Name = "label11";
            this.label11.Size = new System.Drawing.Size(72, 16);
            this.label11.TabIndex = 12;
            // 
            // label12
            // 
            this.label12.Location = new System.Drawing.Point(128, 48);
            this.label12.Name = "label12";
            this.label12.Size = new System.Drawing.Size(64, 16);
            this.label12.TabIndex = 11;
            this.label12.Text = "Rev";
            // 
            // label13
            // 
            this.label13.Location = new System.Drawing.Point(64, 48);
            this.label13.Name = "label13";
            this.label13.Size = new System.Drawing.Size(64, 16);
            this.label13.TabIndex = 10;
            this.label13.Text = "Model ";
            // 
            // label14
            // 
            this.label14.Location = new System.Drawing.Point(16, 48);
            this.label14.Name = "label14";
            this.label14.Size = new System.Drawing.Size(48, 16);
            this.label14.TabIndex = 9;
            this.label14.Text = "Vendor";
            // 
            // label20
            // 
            this.label20.Location = new System.Drawing.Point(304, 48);
            this.label20.Name = "label20";
            this.label20.Size = new System.Drawing.Size(72, 16);
            this.label20.TabIndex = 22;
            this.label20.Text = "DVD Key @";
            // 
            // label49
            // 
            this.label49.Location = new System.Drawing.Point(256, 96);
            this.label49.Name = "label49";
            this.label49.Size = new System.Drawing.Size(72, 16);
            this.label49.TabIndex = 33;
            this.label49.Text = "Spoofed As:";
            this.label49.Visible = false;
            // 
            // textBox5
            // 
            this.textBox5.BackColor = System.Drawing.SystemColors.Window;
            this.textBox5.Location = new System.Drawing.Point(504, 432);
            this.textBox5.Name = "textBox5";
            this.textBox5.Size = new System.Drawing.Size(112, 20);
            this.textBox5.TabIndex = 28;
            this.textBox5.Text = "EasyToFindTarget";
            this.textBox5.TextChanged += new System.EventHandler(this.textBox5_TextChanged);
            // 
            // OpenSource
            // 
            this.OpenSource.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.OpenSource.Location = new System.Drawing.Point(568, 120);
            this.OpenSource.Name = "OpenSource";
            this.OpenSource.Size = new System.Drawing.Size(80, 40);
            this.OpenSource.TabIndex = 7;
            this.OpenSource.Text = "Open Source Firmware";
            this.OpenSource.Click += new System.EventHandler(this.OpenSource_Click);
            // 
            // DumpDrive
            // 
            this.DumpDrive.Enabled = false;
            this.DumpDrive.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.DumpDrive.Location = new System.Drawing.Point(568, 64);
            this.DumpDrive.Name = "DumpDrive";
            this.DumpDrive.Size = new System.Drawing.Size(80, 40);
            this.DumpDrive.TabIndex = 8;
            this.DumpDrive.Text = " Save Drive  Key ";
            this.DumpDrive.Click += new System.EventHandler(this.DumpDrive_Click);
            // 
            // SaveTarget
            // 
            this.SaveTarget.Enabled = false;
            this.SaveTarget.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.SaveTarget.Location = new System.Drawing.Point(568, 312);
            this.SaveTarget.Name = "SaveTarget";
            this.SaveTarget.Size = new System.Drawing.Size(80, 40);
            this.SaveTarget.TabIndex = 15;
            this.SaveTarget.Text = "Save to File";
            this.SaveTarget.Click += new System.EventHandler(this.SaveTarget_Click);
            // 
            // OpeniXtreme
            // 
            this.OpeniXtreme.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.OpeniXtreme.Location = new System.Drawing.Point(568, 200);
            this.OpeniXtreme.Name = "OpeniXtreme";
            this.OpeniXtreme.Size = new System.Drawing.Size(80, 40);
            this.OpeniXtreme.TabIndex = 19;
            this.OpeniXtreme.Text = "Open Target Firmware";
            this.OpeniXtreme.Click += new System.EventHandler(this.OpeniXtreme_Click);
            // 
            // button6
            // 
            this.button6.Enabled = false;
            this.button6.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button6.Location = new System.Drawing.Point(136, 176);
            this.button6.Name = "button6";
            this.button6.Size = new System.Drawing.Size(288, 24);
            this.button6.TabIndex = 20;
            this.button6.Text = "Spoof Source to Target";
            this.toolTip_0.SetToolTip(this.button6, "Copy Key, Inquiry, Identify and serial from Source to Target");
            this.button6.Click += new System.EventHandler(this.button6_Click);
            // 
            // tabControl3
            // 
            this.tabControl3.Controls.Add(this.tabPage3);
            this.tabControl3.Controls.Add(this.tabPage7);
            this.tabControl3.Controls.Add(this.tabPage11);
            this.tabControl3.Controls.Add(this.tabPage12);
            this.tabControl3.Location = new System.Drawing.Point(8, 16);
            this.tabControl3.Name = "tabControl3";
            this.tabControl3.SelectedIndex = 0;
            this.tabControl3.Size = new System.Drawing.Size(552, 144);
            this.tabControl3.TabIndex = 21;
            this.tabControl3.Visible = false;
            // 
            // tabPage3
            // 
            this.tabPage3.AllowDrop = true;
            this.tabPage3.ContextMenu = this.contextMenu_2;
            this.tabPage3.Controls.Add(this.label45);
            this.tabPage3.Controls.Add(this.label128);
            this.tabPage3.Controls.Add(this.label39);
            this.tabPage3.Controls.Add(this.label46);
            this.tabPage3.Controls.Add(this.label42);
            this.tabPage3.Controls.Add(this.label38);
            this.tabPage3.Controls.Add(this.textBox3);
            this.tabPage3.Controls.Add(this.label21);
            this.tabPage3.Controls.Add(this.label22);
            this.tabPage3.Controls.Add(this.label23);
            this.tabPage3.Controls.Add(this.label24);
            this.tabPage3.Controls.Add(this.label25);
            this.tabPage3.Controls.Add(this.label26);
            this.tabPage3.Controls.Add(this.label27);
            this.tabPage3.Controls.Add(this.label28);
            this.tabPage3.Controls.Add(this.label29);
            this.tabPage3.Controls.Add(this.textBox16);
            this.tabPage3.Controls.Add(this.textBox8);
            this.tabPage3.Location = new System.Drawing.Point(4, 22);
            this.tabPage3.Name = "tabPage3";
            this.tabPage3.Size = new System.Drawing.Size(544, 118);
            this.tabPage3.TabIndex = 4;
            this.tabPage3.Text = "Source";
            this.tabPage3.DragDrop += new System.Windows.Forms.DragEventHandler(this.tabPage12_DragDrop);
            this.tabPage3.DragEnter += new System.Windows.Forms.DragEventHandler(this.tabPage12_DragEnter);
            // 
            // label45
            // 
            this.label45.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label45.Location = new System.Drawing.Point(48, 96);
            this.label45.Name = "label45";
            this.label45.Size = new System.Drawing.Size(208, 16);
            this.label45.TabIndex = 33;
            // 
            // label128
            // 
            this.label128.Location = new System.Drawing.Point(432, 48);
            this.label128.Name = "label128";
            this.label128.Size = new System.Drawing.Size(90, 16);
            this.label128.TabIndex = 37;
            // 
            // label39
            // 
            this.label39.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label39.Location = new System.Drawing.Point(320, 96);
            this.label39.Name = "label39";
            this.label39.Size = new System.Drawing.Size(216, 16);
            this.label39.TabIndex = 28;
            // 
            // label46
            // 
            this.label46.Location = new System.Drawing.Point(16, 96);
            this.label46.Name = "label46";
            this.label46.Size = new System.Drawing.Size(40, 16);
            this.label46.TabIndex = 34;
            this.label46.Text = "OSIG:";
            // 
            // label42
            // 
            this.label42.Location = new System.Drawing.Point(256, 96);
            this.label42.Name = "label42";
            this.label42.Size = new System.Drawing.Size(72, 16);
            this.label42.TabIndex = 29;
            this.label42.Text = "Spoofed As:";
            this.label42.Visible = false;
            // 
            // label38
            // 
            this.label38.Location = new System.Drawing.Point(376, 48);
            this.label38.Name = "label38";
            this.label38.Size = new System.Drawing.Size(48, 16);
            this.label38.TabIndex = 27;
            // 
            // textBox3
            // 
            this.textBox3.BackColor = System.Drawing.SystemColors.Window;
            this.textBox3.Location = new System.Drawing.Point(296, 64);
            this.textBox3.Name = "textBox3";
            this.textBox3.ReadOnly = true;
            this.textBox3.Size = new System.Drawing.Size(232, 20);
            this.textBox3.TabIndex = 11;
            // 
            // label21
            // 
            this.label21.Location = new System.Drawing.Point(304, 48);
            this.label21.Name = "label21";
            this.label21.Size = new System.Drawing.Size(72, 16);
            this.label21.TabIndex = 12;
            this.label21.Text = "DVD Key @";
            // 
            // label22
            // 
            this.label22.Location = new System.Drawing.Point(184, 68);
            this.label22.Name = "label22";
            this.label22.Size = new System.Drawing.Size(128, 24);
            this.label22.TabIndex = 10;
            // 
            // label23
            // 
            this.label23.Location = new System.Drawing.Point(184, 48);
            this.label23.Name = "label23";
            this.label23.Size = new System.Drawing.Size(80, 24);
            this.label23.TabIndex = 9;
            this.label23.Text = "Firmware Type";
            // 
            // label24
            // 
            this.label24.Location = new System.Drawing.Point(128, 68);
            this.label24.Name = "label24";
            this.label24.Size = new System.Drawing.Size(64, 16);
            this.label24.TabIndex = 6;
            // 
            // label25
            // 
            this.label25.Location = new System.Drawing.Point(64, 68);
            this.label25.Name = "label25";
            this.label25.Size = new System.Drawing.Size(72, 16);
            this.label25.TabIndex = 5;
            // 
            // label26
            // 
            this.label26.Location = new System.Drawing.Point(16, 68);
            this.label26.Name = "label26";
            this.label26.Size = new System.Drawing.Size(72, 16);
            this.label26.TabIndex = 4;
            // 
            // label27
            // 
            this.label27.Location = new System.Drawing.Point(128, 48);
            this.label27.Name = "label27";
            this.label27.Size = new System.Drawing.Size(64, 16);
            this.label27.TabIndex = 3;
            this.label27.Text = "Rev";
            // 
            // label28
            // 
            this.label28.Location = new System.Drawing.Point(64, 48);
            this.label28.Name = "label28";
            this.label28.Size = new System.Drawing.Size(64, 16);
            this.label28.TabIndex = 2;
            this.label28.Text = "Model ";
            // 
            // label29
            // 
            this.label29.Location = new System.Drawing.Point(16, 48);
            this.label29.Name = "label29";
            this.label29.Size = new System.Drawing.Size(72, 24);
            this.label29.TabIndex = 1;
            this.label29.Text = "Vendor";
            // 
            // textBox16
            // 
            this.textBox16.BackColor = System.Drawing.SystemColors.Window;
            this.textBox16.Location = new System.Drawing.Point(16, 16);
            this.textBox16.Name = "textBox16";
            this.textBox16.ReadOnly = true;
            this.textBox16.Size = new System.Drawing.Size(512, 20);
            this.textBox16.TabIndex = 26;
            // 
            // textBox8
            // 
            this.textBox8.BackColor = System.Drawing.SystemColors.Window;
            this.textBox8.Location = new System.Drawing.Point(88, 130);
            this.textBox8.Name = "textBox8";
            this.textBox8.ReadOnly = true;
            this.textBox8.Size = new System.Drawing.Size(440, 20);
            this.textBox8.TabIndex = 23;
            this.textBox8.Visible = false;
            // 
            // tabPage7
            // 
            this.tabPage7.AllowDrop = true;
            this.tabPage7.Controls.Add(this.textBox7);
            this.tabPage7.Location = new System.Drawing.Point(4, 22);
            this.tabPage7.Name = "tabPage7";
            this.tabPage7.Size = new System.Drawing.Size(544, 118);
            this.tabPage7.TabIndex = 0;
            this.tabPage7.Text = "Inquiry";
            this.tabPage7.Visible = false;
            this.tabPage7.DragDrop += new System.Windows.Forms.DragEventHandler(this.tabPage12_DragDrop);
            this.tabPage7.DragEnter += new System.Windows.Forms.DragEventHandler(this.tabPage12_DragEnter);
            // 
            // textBox7
            // 
            this.textBox7.BackColor = System.Drawing.SystemColors.Window;
            this.textBox7.Font = new System.Drawing.Font("Courier New", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.textBox7.Location = new System.Drawing.Point(8, 8);
            this.textBox7.Multiline = true;
            this.textBox7.Name = "textBox7";
            this.textBox7.ReadOnly = true;
            this.textBox7.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.textBox7.Size = new System.Drawing.Size(528, 96);
            this.textBox7.TabIndex = 1;
            // 
            // tabPage11
            // 
            this.tabPage11.AllowDrop = true;
            this.tabPage11.Controls.Add(this.textBox10);
            this.tabPage11.Location = new System.Drawing.Point(4, 22);
            this.tabPage11.Name = "tabPage11";
            this.tabPage11.Size = new System.Drawing.Size(544, 118);
            this.tabPage11.TabIndex = 1;
            this.tabPage11.Text = "Identify";
            this.tabPage11.Visible = false;
            this.tabPage11.DragDrop += new System.Windows.Forms.DragEventHandler(this.tabPage12_DragDrop);
            this.tabPage11.DragEnter += new System.Windows.Forms.DragEventHandler(this.tabPage12_DragEnter);
            // 
            // textBox10
            // 
            this.textBox10.BackColor = System.Drawing.SystemColors.Window;
            this.textBox10.Font = new System.Drawing.Font("Courier New", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.textBox10.Location = new System.Drawing.Point(8, 8);
            this.textBox10.Multiline = true;
            this.textBox10.Name = "textBox10";
            this.textBox10.ReadOnly = true;
            this.textBox10.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.textBox10.Size = new System.Drawing.Size(528, 96);
            this.textBox10.TabIndex = 2;
            // 
            // tabPage12
            // 
            this.tabPage12.AllowDrop = true;
            this.tabPage12.Controls.Add(this.textBox12);
            this.tabPage12.Location = new System.Drawing.Point(4, 22);
            this.tabPage12.Name = "tabPage12";
            this.tabPage12.Size = new System.Drawing.Size(544, 118);
            this.tabPage12.TabIndex = 3;
            this.tabPage12.Text = "Drive Serial";
            this.tabPage12.Visible = false;
            this.tabPage12.DragDrop += new System.Windows.Forms.DragEventHandler(this.tabPage12_DragDrop);
            this.tabPage12.DragEnter += new System.Windows.Forms.DragEventHandler(this.tabPage12_DragEnter);
            // 
            // textBox12
            // 
            this.textBox12.BackColor = System.Drawing.SystemColors.Window;
            this.textBox12.Font = new System.Drawing.Font("Courier New", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.textBox12.Location = new System.Drawing.Point(8, 8);
            this.textBox12.Multiline = true;
            this.textBox12.Name = "textBox12";
            this.textBox12.ReadOnly = true;
            this.textBox12.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.textBox12.Size = new System.Drawing.Size(528, 96);
            this.textBox12.TabIndex = 4;
            this.toolTip_0.SetToolTip(this.textBox12, "For Dummy.bin double click to edit");
            this.textBox12.DoubleClick += new System.EventHandler(this.textBox12_DoubleClick);
            // 
            // tabControl4
            // 
            this.tabControl4.Controls.Add(this.tabPage1);
            this.tabControl4.Controls.Add(this.tabPage2);
            this.tabControl4.Controls.Add(this.tabPage4);
            this.tabControl4.Controls.Add(this.tabPage13);
            this.tabControl4.Location = new System.Drawing.Point(8, 208);
            this.tabControl4.Name = "tabControl4";
            this.tabControl4.SelectedIndex = 0;
            this.tabControl4.Size = new System.Drawing.Size(552, 144);
            this.tabControl4.TabIndex = 22;
            // 
            // tabPage1
            // 
            this.tabPage1.AllowDrop = true;
            this.tabPage1.ContextMenu = this.contextMenu_1;
            this.tabPage1.Controls.Add(this.label129);
            this.tabPage1.Controls.Add(this.label54);
            this.tabPage1.Controls.Add(this.textBox1);
            this.tabPage1.Controls.Add(this.label56);
            this.tabPage1.Controls.Add(this.label53);
            this.tabPage1.Controls.Add(this.label52);
            this.tabPage1.Controls.Add(this.label51);
            this.tabPage1.Controls.Add(this.textBox18);
            this.tabPage1.Controls.Add(this.label1);
            this.tabPage1.Controls.Add(this.label2);
            this.tabPage1.Controls.Add(this.label30);
            this.tabPage1.Controls.Add(this.label31);
            this.tabPage1.Controls.Add(this.label32);
            this.tabPage1.Controls.Add(this.label33);
            this.tabPage1.Controls.Add(this.label34);
            this.tabPage1.Controls.Add(this.label35);
            this.tabPage1.Controls.Add(this.label36);
            this.tabPage1.Location = new System.Drawing.Point(4, 22);
            this.tabPage1.Name = "tabPage1";
            this.tabPage1.Size = new System.Drawing.Size(544, 118);
            this.tabPage1.TabIndex = 4;
            this.tabPage1.Text = "Target";
            this.tabPage1.DragDrop += new System.Windows.Forms.DragEventHandler(this.tabPage13_DragDrop);
            this.tabPage1.DragEnter += new System.Windows.Forms.DragEventHandler(this.tabPage13_DragEnter);
            // 
            // label129
            // 
            this.label129.Location = new System.Drawing.Point(432, 48);
            this.label129.Name = "label129";
            this.label129.Size = new System.Drawing.Size(90, 16);
            this.label129.TabIndex = 37;
            // 
            // label54
            // 
            this.label54.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label54.Location = new System.Drawing.Point(320, 96);
            this.label54.Name = "label54";
            this.label54.Size = new System.Drawing.Size(216, 16);
            this.label54.TabIndex = 35;
            // 
            // textBox1
            // 
            this.textBox1.BackColor = System.Drawing.SystemColors.Window;
            this.textBox1.Location = new System.Drawing.Point(296, 64);
            this.textBox1.Name = "textBox1";
            this.textBox1.ReadOnly = true;
            this.textBox1.Size = new System.Drawing.Size(232, 20);
            this.textBox1.TabIndex = 21;
            // 
            // label56
            // 
            this.label56.Location = new System.Drawing.Point(376, 48);
            this.label56.Name = "label56";
            this.label56.Size = new System.Drawing.Size(48, 16);
            this.label56.TabIndex = 36;
            // 
            // label53
            // 
            this.label53.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label53.Location = new System.Drawing.Point(48, 96);
            this.label53.Name = "label53";
            this.label53.Size = new System.Drawing.Size(208, 16);
            this.label53.TabIndex = 34;
            // 
            // label52
            // 
            this.label52.Location = new System.Drawing.Point(256, 96);
            this.label52.Name = "label52";
            this.label52.Size = new System.Drawing.Size(72, 16);
            this.label52.TabIndex = 33;
            this.label52.Text = "Spoofed As:";
            this.label52.Visible = false;
            // 
            // label51
            // 
            this.label51.Location = new System.Drawing.Point(16, 96);
            this.label51.Name = "label51";
            this.label51.Size = new System.Drawing.Size(40, 16);
            this.label51.TabIndex = 32;
            this.label51.Text = "OSIG:";
            // 
            // textBox18
            // 
            this.textBox18.BackColor = System.Drawing.SystemColors.Window;
            this.textBox18.Location = new System.Drawing.Point(16, 16);
            this.textBox18.Name = "textBox18";
            this.textBox18.ReadOnly = true;
            this.textBox18.Size = new System.Drawing.Size(512, 20);
            this.textBox18.TabIndex = 27;
            // 
            // label1
            // 
            this.label1.Location = new System.Drawing.Point(184, 68);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(128, 24);
            this.label1.TabIndex = 18;
            // 
            // label2
            // 
            this.label2.Location = new System.Drawing.Point(184, 48);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(80, 16);
            this.label2.TabIndex = 17;
            this.label2.Text = "Firmware Type";
            // 
            // label30
            // 
            this.label30.Location = new System.Drawing.Point(128, 68);
            this.label30.Name = "label30";
            this.label30.Size = new System.Drawing.Size(64, 16);
            this.label30.TabIndex = 14;
            // 
            // label31
            // 
            this.label31.Location = new System.Drawing.Point(64, 68);
            this.label31.Name = "label31";
            this.label31.Size = new System.Drawing.Size(72, 16);
            this.label31.TabIndex = 13;
            // 
            // label32
            // 
            this.label32.Location = new System.Drawing.Point(16, 68);
            this.label32.Name = "label32";
            this.label32.Size = new System.Drawing.Size(72, 16);
            this.label32.TabIndex = 12;
            // 
            // label33
            // 
            this.label33.Location = new System.Drawing.Point(128, 48);
            this.label33.Name = "label33";
            this.label33.Size = new System.Drawing.Size(64, 16);
            this.label33.TabIndex = 11;
            this.label33.Text = "Rev";
            // 
            // label34
            // 
            this.label34.Location = new System.Drawing.Point(64, 48);
            this.label34.Name = "label34";
            this.label34.Size = new System.Drawing.Size(64, 16);
            this.label34.TabIndex = 10;
            this.label34.Text = "Model ";
            // 
            // label35
            // 
            this.label35.Location = new System.Drawing.Point(16, 48);
            this.label35.Name = "label35";
            this.label35.Size = new System.Drawing.Size(48, 16);
            this.label35.TabIndex = 9;
            this.label35.Text = "Vendor";
            // 
            // label36
            // 
            this.label36.Location = new System.Drawing.Point(304, 48);
            this.label36.Name = "label36";
            this.label36.Size = new System.Drawing.Size(72, 16);
            this.label36.TabIndex = 22;
            this.label36.Text = "DVD Key @";
            // 
            // tabPage2
            // 
            this.tabPage2.AllowDrop = true;
            this.tabPage2.Controls.Add(this.textBox2);
            this.tabPage2.Location = new System.Drawing.Point(4, 22);
            this.tabPage2.Name = "tabPage2";
            this.tabPage2.Size = new System.Drawing.Size(544, 118);
            this.tabPage2.TabIndex = 0;
            this.tabPage2.Text = "Inquiry";
            this.tabPage2.Visible = false;
            this.tabPage2.DragDrop += new System.Windows.Forms.DragEventHandler(this.tabPage13_DragDrop);
            this.tabPage2.DragEnter += new System.Windows.Forms.DragEventHandler(this.tabPage13_DragEnter);
            // 
            // textBox2
            // 
            this.textBox2.BackColor = System.Drawing.SystemColors.Window;
            this.textBox2.Font = new System.Drawing.Font("Courier New", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.textBox2.Location = new System.Drawing.Point(8, 8);
            this.textBox2.Multiline = true;
            this.textBox2.Name = "textBox2";
            this.textBox2.ReadOnly = true;
            this.textBox2.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.textBox2.Size = new System.Drawing.Size(528, 96);
            this.textBox2.TabIndex = 1;
            // 
            // tabPage4
            // 
            this.tabPage4.AllowDrop = true;
            this.tabPage4.Controls.Add(this.textBox4);
            this.tabPage4.Location = new System.Drawing.Point(4, 22);
            this.tabPage4.Name = "tabPage4";
            this.tabPage4.Size = new System.Drawing.Size(544, 118);
            this.tabPage4.TabIndex = 1;
            this.tabPage4.Text = "Identify";
            this.tabPage4.Visible = false;
            this.tabPage4.DragDrop += new System.Windows.Forms.DragEventHandler(this.tabPage13_DragDrop);
            this.tabPage4.DragEnter += new System.Windows.Forms.DragEventHandler(this.tabPage13_DragEnter);
            // 
            // textBox4
            // 
            this.textBox4.BackColor = System.Drawing.SystemColors.Window;
            this.textBox4.Font = new System.Drawing.Font("Courier New", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.textBox4.Location = new System.Drawing.Point(8, 8);
            this.textBox4.Multiline = true;
            this.textBox4.Name = "textBox4";
            this.textBox4.ReadOnly = true;
            this.textBox4.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.textBox4.Size = new System.Drawing.Size(528, 96);
            this.textBox4.TabIndex = 2;
            // 
            // tabPage13
            // 
            this.tabPage13.AllowDrop = true;
            this.tabPage13.Controls.Add(this.textBox13);
            this.tabPage13.Location = new System.Drawing.Point(4, 22);
            this.tabPage13.Name = "tabPage13";
            this.tabPage13.Size = new System.Drawing.Size(544, 118);
            this.tabPage13.TabIndex = 3;
            this.tabPage13.Text = "Drive Serial";
            this.tabPage13.Visible = false;
            this.tabPage13.DragDrop += new System.Windows.Forms.DragEventHandler(this.tabPage13_DragDrop);
            this.tabPage13.DragEnter += new System.Windows.Forms.DragEventHandler(this.tabPage13_DragEnter);
            // 
            // textBox13
            // 
            this.textBox13.BackColor = System.Drawing.SystemColors.Window;
            this.textBox13.Font = new System.Drawing.Font("Courier New", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.textBox13.Location = new System.Drawing.Point(8, 8);
            this.textBox13.Multiline = true;
            this.textBox13.Name = "textBox13";
            this.textBox13.ReadOnly = true;
            this.textBox13.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.textBox13.Size = new System.Drawing.Size(528, 96);
            this.textBox13.TabIndex = 4;
            // 
            // checkBox3
            // 
            this.checkBox3.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.checkBox3.Location = new System.Drawing.Point(16, 168);
            this.checkBox3.Name = "checkBox3";
            this.checkBox3.Size = new System.Drawing.Size(104, 32);
            this.checkBox3.TabIndex = 24;
            this.checkBox3.Text = "Advanced View";
            this.checkBox3.CheckedChanged += new System.EventHandler(this.checkBox3_CheckedChanged);
            // 
            // button2
            // 
            this.button2.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button2.Location = new System.Drawing.Point(440, 304);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(88, 24);
            this.button2.TabIndex = 25;
            this.button2.Text = "DummyGen";
            this.toolTip_0.SetToolTip(this.button2, "Build Dummy.bin from Inquiry.bin + Identify.bin + Key.bin");
            this.button2.Click += new System.EventHandler(this.button2_Click);
            // 
            // tabControl5
            // 
            this.tabControl5.Controls.Add(this.Firmtools);
            this.tabControl5.Controls.Add(this.DVDKey32);
            this.tabControl5.Controls.Add(this.Benq);
            this.tabControl5.Controls.Add(this.Hitachi);
            this.tabControl5.Controls.Add(this.tabPage5);
            this.tabControl5.Location = new System.Drawing.Point(8, 8);
            this.tabControl5.Multiline = true;
            this.tabControl5.Name = "tabControl5";
            this.tabControl5.SelectedIndex = 0;
            this.tabControl5.Size = new System.Drawing.Size(664, 400);
            this.tabControl5.TabIndex = 26;
            this.tabControl5.SelectedIndexChanged += new System.EventHandler(this.tabControl5_SelectedIndexChanged);
            this.tabControl5.TabIndexChanged += new System.EventHandler(this.tabControl5_SelectedIndexChanged);
            // 
            // Firmtools
            // 
            this.Firmtools.Controls.Add(this.button41);
            this.Firmtools.Controls.Add(this.linkLabel1);
            this.Firmtools.Controls.Add(this.button29);
            this.Firmtools.Controls.Add(this.OpenSource);
            this.Firmtools.Controls.Add(this.OpeniXtreme);
            this.Firmtools.Controls.Add(this.button6);
            this.Firmtools.Controls.Add(this.checkBox3);
            this.Firmtools.Controls.Add(this.SaveTarget);
            this.Firmtools.Controls.Add(this.DumpDrive);
            this.Firmtools.Controls.Add(this.pictureBox1);
            this.Firmtools.Controls.Add(this.tabControl1);
            this.Firmtools.Controls.Add(this.tabControl3);
            this.Firmtools.Controls.Add(this.tabControl2);
            this.Firmtools.Controls.Add(this.tabControl4);
            this.Firmtools.Controls.Add(this.linkLabel4);
            this.Firmtools.Location = new System.Drawing.Point(4, 22);
            this.Firmtools.Name = "Firmtools";
            this.Firmtools.Size = new System.Drawing.Size(656, 374);
            this.Firmtools.TabIndex = 0;
            this.Firmtools.Text = "  FirmwareTool 32  ";
            // 
            // button41
            // 
            this.button41.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button41.Location = new System.Drawing.Point(568, 8);
            this.button41.Name = "button41";
            this.button41.Size = new System.Drawing.Size(80, 40);
            this.button41.TabIndex = 32;
            this.button41.Text = "Open  KeyDb";
            this.button41.Click += new System.EventHandler(this.button41_Click);
            // 
            // linkLabel1
            // 
            this.linkLabel1.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.linkLabel1.Location = new System.Drawing.Point(576, 168);
            this.linkLabel1.Name = "linkLabel1";
            this.linkLabel1.Size = new System.Drawing.Size(64, 24);
            this.linkLabel1.TabIndex = 29;
            this.linkLabel1.TabStop = true;
            this.linkLabel1.Text = "User Guide";
            this.linkLabel1.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            this.toolTip_0.SetToolTip(this.linkLabel1, "Click to download JungleFlasher.pdf");
            this.linkLabel1.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabel1_LinkClicked);
            // 
            // button29
            // 
            this.button29.Enabled = false;
            this.button29.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button29.Location = new System.Drawing.Point(568, 256);
            this.button29.Name = "button29";
            this.button29.Size = new System.Drawing.Size(80, 40);
            this.button29.TabIndex = 27;
            this.button29.Text = "Manual Spoofing";
            this.button29.Click += new System.EventHandler(this.button29_Click);
            // 
            // pictureBox1
            // 
            this.pictureBox1.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox1.Image")));
            this.pictureBox1.Location = new System.Drawing.Point(448, 176);
            this.pictureBox1.Name = "pictureBox1";
            this.pictureBox1.Size = new System.Drawing.Size(92, 26);
            this.pictureBox1.TabIndex = 31;
            this.pictureBox1.TabStop = false;
            this.toolTip_0.SetToolTip(this.pictureBox1, "Help Support JungleFlasher Development!");
            this.pictureBox1.Visible = false;
            this.pictureBox1.Click += new System.EventHandler(this.pictureBox4_Click);
            this.pictureBox1.MouseEnter += new System.EventHandler(this.pictureBox3_MouseEnter);
            this.pictureBox1.MouseLeave += new System.EventHandler(this.pictureBox3_MouseLeave);
            // 
            // linkLabel4
            // 
            this.linkLabel4.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.linkLabel4.Location = new System.Drawing.Point(576, 72);
            this.linkLabel4.Name = "linkLabel4";
            this.linkLabel4.Size = new System.Drawing.Size(64, 24);
            this.linkLabel4.TabIndex = 30;
            this.linkLabel4.TabStop = true;
            this.linkLabel4.Text = "Donate";
            this.linkLabel4.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            this.linkLabel4.Visible = false;
            this.linkLabel4.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabel4_LinkClicked);
            // 
            // DVDKey32
            // 
            this.DVDKey32.Controls.Add(this.button39);
            this.DVDKey32.Controls.Add(this.button38);
            this.DVDKey32.Controls.Add(this.checkBox15);
            this.DVDKey32.Controls.Add(this.button32);
            this.DVDKey32.Controls.Add(this.button10);
            this.DVDKey32.Controls.Add(this.button8);
            this.DVDKey32.Controls.Add(this.button4);
            this.DVDKey32.Controls.Add(this.button1);
            this.DVDKey32.Controls.Add(this.checkBox9);
            this.DVDKey32.Controls.Add(this.checkBox8);
            this.DVDKey32.Controls.Add(this.button28);
            this.DVDKey32.Controls.Add(this.checkBox4);
            this.DVDKey32.Controls.Add(this.checkBox2);
            this.DVDKey32.Controls.Add(this.button5);
            this.DVDKey32.Controls.Add(this.groupBox16);
            this.DVDKey32.Controls.Add(this.comboBox1);
            this.DVDKey32.Controls.Add(this.label111);
            this.DVDKey32.Controls.Add(this.groupBox17);
            this.DVDKey32.Controls.Add(this.comboBox10);
            this.DVDKey32.Controls.Add(this.label57);
            this.DVDKey32.Controls.Add(this.groupBox2);
            this.DVDKey32.Controls.Add(this.groupBox4);
            this.DVDKey32.Controls.Add(this.button2);
            this.DVDKey32.Location = new System.Drawing.Point(4, 22);
            this.DVDKey32.Name = "DVDKey32";
            this.DVDKey32.Size = new System.Drawing.Size(656, 374);
            this.DVDKey32.TabIndex = 2;
            this.DVDKey32.Text = "  DVDKey 32  ";
            // 
            // button39
            // 
            this.button39.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button39.Location = new System.Drawing.Point(440, 272);
            this.button39.Name = "button39";
            this.button39.Size = new System.Drawing.Size(88, 24);
            this.button39.TabIndex = 104;
            this.button39.Text = "SlimKey";
            this.toolTip_0.SetToolTip(this.button39, "Slim LiteOn -  extract Key, build dummy and open.");
            this.button39.Click += new System.EventHandler(this.button39_Click);
            // 
            // button38
            // 
            this.button38.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button38.Location = new System.Drawing.Point(344, 272);
            this.button38.Name = "button38";
            this.button38.Size = new System.Drawing.Size(88, 24);
            this.button38.TabIndex = 103;
            this.button38.Text = "PhatKey";
            this.toolTip_0.SetToolTip(this.button38, "Phat LiteOn - use Pógó mo Thóin to extract Key, build dummy and open.");
            this.button38.Click += new System.EventHandler(this.button38_Click);
            // 
            // checkBox15
            // 
            this.checkBox15.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.checkBox15.Location = new System.Drawing.Point(136, 24);
            this.checkBox15.Name = "checkBox15";
            this.checkBox15.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.checkBox15.Size = new System.Drawing.Size(72, 24);
            this.checkBox15.TabIndex = 102;
            this.checkBox15.Text = "USB Only";
            this.toolTip_0.SetToolTip(this.checkBox15, "List only Via ports, may help if Mobo has unfriendly chipset");
            this.checkBox15.CheckedChanged += new System.EventHandler(this.checkBox15_CheckedChanged);
            // 
            // button32
            // 
            this.button32.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button32.Location = new System.Drawing.Point(344, 336);
            this.button32.Name = "button32";
            this.button32.Size = new System.Drawing.Size(136, 24);
            this.button32.TabIndex = 101;
            this.button32.Text = "Dummy from KeyDB";
            this.toolTip_0.SetToolTip(this.button32, "Rebuild Dummy.bin from Lite-On with Key in KeyDB");
            this.button32.Click += new System.EventHandler(this.button32_Click);
            // 
            // button10
            // 
            this.button10.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button10.Location = new System.Drawing.Point(128, 48);
            this.button10.Name = "button10";
            this.button10.Size = new System.Drawing.Size(24, 21);
            this.button10.TabIndex = 100;
            this.button10.Text = "...";
            this.toolTip_0.SetToolTip(this.button10, "Refresh Drive Properties");
            this.button10.Click += new System.EventHandler(this.button10_Click);
            // 
            // button8
            // 
            this.button8.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button8.Location = new System.Drawing.Point(456, 48);
            this.button8.Name = "button8";
            this.button8.Size = new System.Drawing.Size(24, 21);
            this.button8.TabIndex = 99;
            this.button8.Text = "...";
            this.toolTip_0.SetToolTip(this.button8, "Refresh Com Ports");
            this.button8.Click += new System.EventHandler(this.button8_Click);
            // 
            // button4
            // 
            this.button4.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button4.Location = new System.Drawing.Point(536, 304);
            this.button4.Name = "button4";
            this.button4.Size = new System.Drawing.Size(88, 24);
            this.button4.TabIndex = 98;
            this.button4.Text = "83 .key file";
            this.toolTip_0.SetToolTip(this.button4, "Import [barcode].bin.key , create dummy.bin, save and open.");
            this.button4.Click += new System.EventHandler(this.button4_Click);
            // 
            // button1
            // 
            this.button1.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button1.Location = new System.Drawing.Point(536, 272);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(88, 24);
            this.button1.TabIndex = 97;
            this.button1.Text = "LO83info";
            this.toolTip_0.SetToolTip(this.button1, "83850c - use LO83info to extract Key, build dummy and open.");
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // checkBox9
            // 
            this.checkBox9.Checked = true;
            this.checkBox9.CheckState = System.Windows.Forms.CheckState.Checked;
            this.checkBox9.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.checkBox9.Location = new System.Drawing.Point(504, 24);
            this.checkBox9.Name = "checkBox9";
            this.checkBox9.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.checkBox9.Size = new System.Drawing.Size(120, 24);
            this.checkBox9.TabIndex = 96;
            this.checkBox9.Text = "Additional functions";
            this.toolTip_0.SetToolTip(this.checkBox9, "Tick to Enable Addition Kit Functions");
            this.checkBox9.CheckedChanged += new System.EventHandler(this.checkBox9_CheckedChanged);
            this.checkBox9.EnabledChanged += new System.EventHandler(this.checkBox9_EnabledChanged);
            // 
            // checkBox8
            // 
            this.checkBox8.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.checkBox8.Location = new System.Drawing.Point(504, 48);
            this.checkBox8.Name = "checkBox8";
            this.checkBox8.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.checkBox8.Size = new System.Drawing.Size(120, 24);
            this.checkBox8.TabIndex = 95;
            this.checkBox8.Text = "Dummy.bin Only";
            this.toolTip_0.SetToolTip(this.checkBox8, "Tick to save dummy.bin only.");
            // 
            // button28
            // 
            this.button28.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button28.Location = new System.Drawing.Point(488, 336);
            this.button28.Name = "button28";
            this.button28.Size = new System.Drawing.Size(136, 24);
            this.button28.TabIndex = 94;
            this.button28.Text = "Dummy from iXtreme";
            this.toolTip_0.SetToolTip(this.button28, "Extract Key from ix1.5 flashed Lite-On");
            this.button28.Click += new System.EventHandler(this.button28_Click);
            // 
            // checkBox4
            // 
            this.checkBox4.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.checkBox4.Location = new System.Drawing.Point(216, 24);
            this.checkBox4.Name = "checkBox4";
            this.checkBox4.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.checkBox4.Size = new System.Drawing.Size(88, 24);
            this.checkBox4.TabIndex = 93;
            this.checkBox4.Text = "VIA ports Only";
            this.toolTip_0.SetToolTip(this.checkBox4, "List only Via ports, may help if Mobo has unfriendly chipset");
            this.checkBox4.CheckedChanged += new System.EventHandler(this.checkBox4_CheckedChanged);
            // 
            // checkBox2
            // 
            this.checkBox2.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.checkBox2.Location = new System.Drawing.Point(176, 48);
            this.checkBox2.Name = "checkBox2";
            this.checkBox2.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.checkBox2.Size = new System.Drawing.Size(128, 24);
            this.checkBox2.TabIndex = 92;
            this.checkBox2.Text = "Include non-IDE Ports";
            this.toolTip_0.SetToolTip(this.checkBox2, " IO ports in the SCSIAdapter Device Class");
            this.checkBox2.Visible = false;
            this.checkBox2.CheckedChanged += new System.EventHandler(this.checkBox2_CheckedChanged);
            // 
            // button5
            // 
            this.button5.ContextMenu = this.contextMenu_3;
            this.button5.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button5.Location = new System.Drawing.Point(344, 304);
            this.button5.Name = "button5";
            this.button5.Size = new System.Drawing.Size(88, 24);
            this.button5.TabIndex = 91;
            this.button5.Text = "DVDKey32";
            this.toolTip_0.SetToolTip(this.button5, "74850c - use DVDKey32 to extract Key, build dummy and open.");
            this.button5.Click += new System.EventHandler(this.button5_Click);
            // 
            // contextMenu_3
            // 
            this.contextMenu_3.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.menuItem_14,
            this.menuItem_15,
            this.menuItem_16,
            this.menuItem_17,
            this.menuItem_18});
            // 
            // menuItem_14
            // 
            this.menuItem_14.Index = 0;
            this.menuItem_14.Text = "No Delay";
            this.menuItem_14.Click += new System.EventHandler(this.menuItem_14_Click);
            // 
            // menuItem_15
            // 
            this.menuItem_15.Index = 1;
            this.menuItem_15.Text = "5 Secs";
            this.menuItem_15.Click += new System.EventHandler(this.menuItem_15_Click);
            // 
            // menuItem_16
            // 
            this.menuItem_16.Index = 2;
            this.menuItem_16.Text = "10 Secs";
            this.menuItem_16.Click += new System.EventHandler(this.menuItem_16_Click);
            // 
            // menuItem_17
            // 
            this.menuItem_17.Index = 3;
            this.menuItem_17.Text = "15 Secs";
            this.menuItem_17.Click += new System.EventHandler(this.menuItem_17_Click);
            // 
            // menuItem_18
            // 
            this.menuItem_18.Index = 4;
            this.menuItem_18.Text = "20 Secs";
            this.menuItem_18.Click += new System.EventHandler(this.menuItem_18_Click);
            // 
            // groupBox16
            // 
            this.groupBox16.ContextMenu = this.contextMenu_4;
            this.groupBox16.Controls.Add(this.pictureBox5);
            this.groupBox16.Controls.Add(this.pictureBox7);
            this.groupBox16.Controls.Add(this.label131);
            this.groupBox16.Controls.Add(this.label130);
            this.groupBox16.Controls.Add(this.label92);
            this.groupBox16.Controls.Add(this.label93);
            this.groupBox16.Controls.Add(this.label94);
            this.groupBox16.Controls.Add(this.label106);
            this.groupBox16.Controls.Add(this.label107);
            this.groupBox16.Controls.Add(this.label108);
            this.groupBox16.Controls.Add(this.label109);
            this.groupBox16.Controls.Add(this.label110);
            this.groupBox16.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox16.Location = new System.Drawing.Point(32, 240);
            this.groupBox16.Name = "groupBox16";
            this.groupBox16.Size = new System.Drawing.Size(280, 128);
            this.groupBox16.TabIndex = 90;
            this.groupBox16.TabStop = false;
            this.groupBox16.Text = "Drive Properties";
            this.toolTip_0.SetToolTip(this.groupBox16, "Properties of Drive on IO port selected");
            // 
            // contextMenu_4
            // 
            this.contextMenu_4.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.menuItem_21,
            this.menuItem_22,
            this.menuItem_23,
            this.menuItem_24});
            // 
            // menuItem_21
            // 
            this.menuItem_21.Enabled = false;
            this.menuItem_21.Index = 0;
            this.menuItem_21.Text = "Load Last File";
            this.menuItem_21.Click += new System.EventHandler(this.menuItem_21_Click);
            // 
            // menuItem_22
            // 
            this.menuItem_22.Enabled = false;
            this.menuItem_22.Index = 1;
            this.menuItem_22.Text = "Open Job Folder";
            this.menuItem_22.Click += new System.EventHandler(this.menuItem_22_Click);
            // 
            // menuItem_23
            // 
            this.menuItem_23.Enabled = false;
            this.menuItem_23.Index = 2;
            this.menuItem_23.Text = "Job History";
            this.menuItem_23.Click += new System.EventHandler(this.menuItem_23_Click);
            // 
            // menuItem_24
            // 
            this.menuItem_24.Enabled = false;
            this.menuItem_24.Index = 3;
            this.menuItem_24.Text = "Open KeyDB";
            this.menuItem_24.Click += new System.EventHandler(this.menuItem_24_Click);
            // 
            // pictureBox5
            // 
            this.pictureBox5.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox5.Image")));
            this.pictureBox5.Location = new System.Drawing.Point(160, 104);
            this.pictureBox5.Name = "pictureBox5";
            this.pictureBox5.Size = new System.Drawing.Size(19, 19);
            this.pictureBox5.TabIndex = 37;
            this.pictureBox5.TabStop = false;
            this.pictureBox5.Visible = false;
            // 
            // pictureBox7
            // 
            this.pictureBox7.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox7.Image")));
            this.pictureBox7.Location = new System.Drawing.Point(160, 104);
            this.pictureBox7.Name = "pictureBox7";
            this.pictureBox7.Size = new System.Drawing.Size(19, 19);
            this.pictureBox7.TabIndex = 36;
            this.pictureBox7.TabStop = false;
            this.pictureBox7.Visible = false;
            // 
            // label131
            // 
            this.label131.Location = new System.Drawing.Point(88, 104);
            this.label131.Name = "label131";
            this.label131.Size = new System.Drawing.Size(112, 16);
            this.label131.TabIndex = 35;
            // 
            // label130
            // 
            this.label130.Location = new System.Drawing.Point(16, 104);
            this.label130.Name = "label130";
            this.label130.Size = new System.Drawing.Size(56, 16);
            this.label130.TabIndex = 34;
            this.label130.Text = "DVD Key:";
            // 
            // label92
            // 
            this.label92.Location = new System.Drawing.Point(88, 82);
            this.label92.Name = "label92";
            this.label92.Size = new System.Drawing.Size(176, 16);
            this.label92.TabIndex = 13;
            // 
            // label93
            // 
            this.label93.Location = new System.Drawing.Point(16, 82);
            this.label93.Name = "label93";
            this.label93.Size = new System.Drawing.Size(72, 16);
            this.label93.TabIndex = 12;
            this.label93.Text = "Reserved:";
            // 
            // label94
            // 
            this.label94.Location = new System.Drawing.Point(16, 16);
            this.label94.Name = "label94";
            this.label94.Size = new System.Drawing.Size(72, 16);
            this.label94.TabIndex = 11;
            this.label94.Text = "Vendor:";
            // 
            // label106
            // 
            this.label106.Location = new System.Drawing.Point(88, 60);
            this.label106.Name = "label106";
            this.label106.Size = new System.Drawing.Size(176, 16);
            this.label106.TabIndex = 10;
            // 
            // label107
            // 
            this.label107.Location = new System.Drawing.Point(16, 38);
            this.label107.Name = "label107";
            this.label107.Size = new System.Drawing.Size(56, 16);
            this.label107.TabIndex = 9;
            this.label107.Text = "Name:";
            // 
            // label108
            // 
            this.label108.Location = new System.Drawing.Point(16, 60);
            this.label108.Name = "label108";
            this.label108.Size = new System.Drawing.Size(64, 16);
            this.label108.TabIndex = 8;
            this.label108.Text = "F/W Rev:";
            // 
            // label109
            // 
            this.label109.Location = new System.Drawing.Point(88, 38);
            this.label109.Name = "label109";
            this.label109.Size = new System.Drawing.Size(176, 16);
            this.label109.TabIndex = 7;
            // 
            // label110
            // 
            this.label110.Location = new System.Drawing.Point(88, 16);
            this.label110.Name = "label110";
            this.label110.Size = new System.Drawing.Size(176, 16);
            this.label110.TabIndex = 6;
            // 
            // comboBox1
            // 
            this.comboBox1.Cursor = System.Windows.Forms.Cursors.Default;
            this.comboBox1.ItemHeight = 13;
            this.comboBox1.Location = new System.Drawing.Point(40, 48);
            this.comboBox1.Name = "comboBox1";
            this.comboBox1.Size = new System.Drawing.Size(80, 21);
            this.comboBox1.TabIndex = 89;
            this.comboBox1.SelectedIndexChanged += new System.EventHandler(this.comboBox1_SelectedIndexChanged);
            // 
            // label111
            // 
            this.label111.Location = new System.Drawing.Point(40, 24);
            this.label111.Name = "label111";
            this.label111.Size = new System.Drawing.Size(56, 16);
            this.label111.TabIndex = 88;
            this.label111.Text = "I/O Port";
            // 
            // groupBox17
            // 
            this.groupBox17.Controls.Add(this.pictureBox10);
            this.groupBox17.Controls.Add(this.pictureBox8);
            this.groupBox17.Controls.Add(this.label112);
            this.groupBox17.Controls.Add(this.label113);
            this.groupBox17.Controls.Add(this.label115);
            this.groupBox17.Controls.Add(this.label116);
            this.groupBox17.Controls.Add(this.label117);
            this.groupBox17.Controls.Add(this.label123);
            this.groupBox17.Controls.Add(this.label124);
            this.groupBox17.Controls.Add(this.label125);
            this.groupBox17.Controls.Add(this.label126);
            this.groupBox17.Controls.Add(this.label127);
            this.groupBox17.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox17.Location = new System.Drawing.Point(32, 80);
            this.groupBox17.Name = "groupBox17";
            this.groupBox17.Size = new System.Drawing.Size(280, 152);
            this.groupBox17.TabIndex = 87;
            this.groupBox17.TabStop = false;
            this.groupBox17.Text = "Port Properties";
            this.toolTip_0.SetToolTip(this.groupBox17, "Properites of IO port selected");
            // 
            // pictureBox10
            // 
            this.pictureBox10.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox10.Image")));
            this.pictureBox10.Location = new System.Drawing.Point(232, 16);
            this.pictureBox10.Name = "pictureBox10";
            this.pictureBox10.Size = new System.Drawing.Size(35, 29);
            this.pictureBox10.TabIndex = 39;
            this.pictureBox10.TabStop = false;
            // 
            // pictureBox8
            // 
            this.pictureBox8.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox8.Image")));
            this.pictureBox8.Location = new System.Drawing.Point(232, 16);
            this.pictureBox8.Name = "pictureBox8";
            this.pictureBox8.Size = new System.Drawing.Size(35, 29);
            this.pictureBox8.TabIndex = 38;
            this.pictureBox8.TabStop = false;
            this.pictureBox8.Visible = false;
            // 
            // label112
            // 
            this.label112.Location = new System.Drawing.Point(16, 112);
            this.label112.Name = "label112";
            this.label112.Size = new System.Drawing.Size(72, 16);
            this.label112.TabIndex = 12;
            this.label112.Text = "Device:";
            // 
            // label113
            // 
            this.label113.Location = new System.Drawing.Point(88, 112);
            this.label113.Name = "label113";
            this.label113.Size = new System.Drawing.Size(176, 32);
            this.label113.TabIndex = 11;
            // 
            // label115
            // 
            this.label115.Location = new System.Drawing.Point(88, 88);
            this.label115.Name = "label115";
            this.label115.Size = new System.Drawing.Size(176, 16);
            this.label115.TabIndex = 10;
            // 
            // label116
            // 
            this.label116.Location = new System.Drawing.Point(88, 64);
            this.label116.Name = "label116";
            this.label116.Size = new System.Drawing.Size(176, 16);
            this.label116.TabIndex = 9;
            // 
            // label117
            // 
            this.label117.Location = new System.Drawing.Point(88, 40);
            this.label117.Name = "label117";
            this.label117.Size = new System.Drawing.Size(176, 16);
            this.label117.TabIndex = 8;
            // 
            // label123
            // 
            this.label123.Location = new System.Drawing.Point(88, 16);
            this.label123.Name = "label123";
            this.label123.Size = new System.Drawing.Size(176, 16);
            this.label123.TabIndex = 7;
            // 
            // label124
            // 
            this.label124.Location = new System.Drawing.Point(16, 16);
            this.label124.Name = "label124";
            this.label124.Size = new System.Drawing.Size(88, 16);
            this.label124.TabIndex = 6;
            this.label124.Text = "I/O Address:";
            // 
            // label125
            // 
            this.label125.Location = new System.Drawing.Point(16, 40);
            this.label125.Name = "label125";
            this.label125.Size = new System.Drawing.Size(72, 16);
            this.label125.TabIndex = 5;
            this.label125.Text = "Type:";
            // 
            // label126
            // 
            this.label126.Location = new System.Drawing.Point(16, 64);
            this.label126.Name = "label126";
            this.label126.Size = new System.Drawing.Size(72, 16);
            this.label126.TabIndex = 4;
            this.label126.Text = "Channel:";
            // 
            // label127
            // 
            this.label127.Location = new System.Drawing.Point(16, 88);
            this.label127.Name = "label127";
            this.label127.Size = new System.Drawing.Size(72, 16);
            this.label127.TabIndex = 3;
            this.label127.Text = "Postion:";
            // 
            // comboBox10
            // 
            this.comboBox10.Cursor = System.Windows.Forms.Cursors.Default;
            this.comboBox10.Location = new System.Drawing.Point(352, 48);
            this.comboBox10.Name = "comboBox10";
            this.comboBox10.Size = new System.Drawing.Size(96, 21);
            this.comboBox10.TabIndex = 27;
            this.comboBox10.SelectedIndexChanged += new System.EventHandler(this.comboBox10_SelectedIndexChanged);
            // 
            // label57
            // 
            this.label57.Location = new System.Drawing.Point(352, 24);
            this.label57.Name = "label57";
            this.label57.Size = new System.Drawing.Size(96, 16);
            this.label57.TabIndex = 19;
            this.label57.Text = "Com Port";
            // 
            // groupBox2
            // 
            this.groupBox2.ContextMenu = this.contextMenu_5;
            this.groupBox2.Controls.Add(this.label103);
            this.groupBox2.Controls.Add(this.label63);
            this.groupBox2.Controls.Add(this.label105);
            this.groupBox2.Controls.Add(this.label104);
            this.groupBox2.Controls.Add(this.label102);
            this.groupBox2.Controls.Add(this.label64);
            this.groupBox2.Controls.Add(this.label65);
            this.groupBox2.Controls.Add(this.label66);
            this.groupBox2.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox2.Location = new System.Drawing.Point(344, 80);
            this.groupBox2.Name = "groupBox2";
            this.groupBox2.Size = new System.Drawing.Size(280, 112);
            this.groupBox2.TabIndex = 21;
            this.groupBox2.TabStop = false;
            this.groupBox2.Text = "Com Port Properties";
            this.toolTip_0.SetToolTip(this.groupBox2, "Properites of COM port selected");
            // 
            // contextMenu_5
            // 
            this.contextMenu_5.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.menuItem_25,
            this.menuItem_26,
            this.menuItem_27,
            this.menuItem_29,
            this.menuItem_28,
            this.menuItem_30,
            this.menuItem_31});
            // 
            // menuItem_25
            // 
            this.menuItem_25.Index = 0;
            this.menuItem_25.Text = "Open Tray";
            this.menuItem_25.Click += new System.EventHandler(this.menuItem_25_Click);
            // 
            // menuItem_26
            // 
            this.menuItem_26.Index = 1;
            this.menuItem_26.Text = "Close Tray";
            this.menuItem_26.Click += new System.EventHandler(this.menuItem_26_Click);
            // 
            // menuItem_27
            // 
            this.menuItem_27.Index = 2;
            this.menuItem_27.Text = "Half Tray";
            this.menuItem_27.Click += new System.EventHandler(this.menuItem_27_Click);
            // 
            // menuItem_29
            // 
            this.menuItem_29.Index = 3;
            this.menuItem_29.Text = "-";
            // 
            // menuItem_28
            // 
            this.menuItem_28.Index = 4;
            this.menuItem_28.Text = "Power On";
            this.menuItem_28.Click += new System.EventHandler(this.menuItem_28_Click);
            // 
            // menuItem_30
            // 
            this.menuItem_30.Index = 5;
            this.menuItem_30.Text = "Power Off";
            this.menuItem_30.Click += new System.EventHandler(this.menuItem_30_Click);
            // 
            // menuItem_31
            // 
            this.menuItem_31.Index = 6;
            this.menuItem_31.Text = "Power Cycle";
            this.menuItem_31.Click += new System.EventHandler(this.menuItem_31_Click);
            // 
            // label103
            // 
            this.label103.Location = new System.Drawing.Point(64, 88);
            this.label103.Name = "label103";
            this.label103.Size = new System.Drawing.Size(208, 16);
            this.label103.TabIndex = 16;
            // 
            // label63
            // 
            this.label63.Location = new System.Drawing.Point(16, 88);
            this.label63.Name = "label63";
            this.label63.Size = new System.Drawing.Size(40, 16);
            this.label63.TabIndex = 15;
            this.label63.Text = "Status:";
            // 
            // label105
            // 
            this.label105.Location = new System.Drawing.Point(64, 64);
            this.label105.Name = "label105";
            this.label105.Size = new System.Drawing.Size(208, 16);
            this.label105.TabIndex = 14;
            // 
            // label104
            // 
            this.label104.Location = new System.Drawing.Point(64, 40);
            this.label104.Name = "label104";
            this.label104.Size = new System.Drawing.Size(208, 16);
            this.label104.TabIndex = 13;
            // 
            // label102
            // 
            this.label102.Location = new System.Drawing.Point(64, 16);
            this.label102.Name = "label102";
            this.label102.Size = new System.Drawing.Size(200, 16);
            this.label102.TabIndex = 11;
            // 
            // label64
            // 
            this.label64.Location = new System.Drawing.Point(16, 40);
            this.label64.Name = "label64";
            this.label64.Size = new System.Drawing.Size(40, 16);
            this.label64.TabIndex = 9;
            this.label64.Text = "Type:";
            // 
            // label65
            // 
            this.label65.Location = new System.Drawing.Point(16, 64);
            this.label65.Name = "label65";
            this.label65.Size = new System.Drawing.Size(40, 16);
            this.label65.TabIndex = 8;
            this.label65.Text = "Name:";
            // 
            // label66
            // 
            this.label66.Location = new System.Drawing.Point(16, 16);
            this.label66.Name = "label66";
            this.label66.Size = new System.Drawing.Size(40, 16);
            this.label66.TabIndex = 7;
            this.label66.Text = "Port:";
            // 
            // groupBox4
            // 
            this.groupBox4.Controls.Add(this.label88);
            this.groupBox4.Controls.Add(this.label87);
            this.groupBox4.Controls.Add(this.label69);
            this.groupBox4.Controls.Add(this.label70);
            this.groupBox4.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox4.Location = new System.Drawing.Point(344, 200);
            this.groupBox4.Name = "groupBox4";
            this.groupBox4.Size = new System.Drawing.Size(280, 64);
            this.groupBox4.TabIndex = 23;
            this.groupBox4.TabStop = false;
            this.groupBox4.Text = "Drive Key";
            this.toolTip_0.SetToolTip(this.groupBox4, "Key from Lite-On Drive");
            // 
            // label88
            // 
            this.label88.Location = new System.Drawing.Point(72, 40);
            this.label88.Name = "label88";
            this.label88.Size = new System.Drawing.Size(128, 16);
            this.label88.TabIndex = 15;
            // 
            // label87
            // 
            this.label87.Location = new System.Drawing.Point(46, 16);
            this.label87.Name = "label87";
            this.label87.Size = new System.Drawing.Size(230, 16);
            this.label87.TabIndex = 14;
            // 
            // label69
            // 
            this.label69.Location = new System.Drawing.Point(8, 16);
            this.label69.Name = "label69";
            this.label69.Size = new System.Drawing.Size(48, 16);
            this.label69.TabIndex = 8;
            this.label69.Text = "Key:";
            // 
            // label70
            // 
            this.label70.Location = new System.Drawing.Point(8, 40);
            this.label70.Name = "label70";
            this.label70.Size = new System.Drawing.Size(48, 16);
            this.label70.TabIndex = 11;
            this.label70.Text = "Status:";
            // 
            // Benq
            // 
            this.Benq.Controls.Add(this.checkBox16);
            this.Benq.Controls.Add(this.checkBox10);
            this.Benq.Controls.Add(this.checkBox11);
            this.Benq.Controls.Add(this.linkLabel2);
            this.Benq.Controls.Add(this.groupBox9);
            this.Benq.Controls.Add(this.groupBox7);
            this.Benq.Controls.Add(this.groupBox1);
            this.Benq.Controls.Add(this.comboBox7);
            this.Benq.Controls.Add(this.label73);
            this.Benq.Controls.Add(this.groupBox3);
            this.Benq.Controls.Add(this.groupBox6);
            this.Benq.Controls.Add(this.checkBox5);
            this.Benq.Controls.Add(this.button9);
            this.Benq.Location = new System.Drawing.Point(4, 22);
            this.Benq.Name = "Benq";
            this.Benq.Size = new System.Drawing.Size(656, 374);
            this.Benq.TabIndex = 3;
            this.Benq.Text = "  MTK Flash 32  ";
            // 
            // checkBox16
            // 
            this.checkBox16.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.checkBox16.Location = new System.Drawing.Point(136, 24);
            this.checkBox16.Name = "checkBox16";
            this.checkBox16.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.checkBox16.Size = new System.Drawing.Size(72, 24);
            this.checkBox16.TabIndex = 103;
            this.checkBox16.Text = "USB Only";
            this.toolTip_0.SetToolTip(this.checkBox16, "List only Via ports, may help if Mobo has unfriendly chipset");
            this.checkBox16.CheckedChanged += new System.EventHandler(this.checkBox16_CheckedChanged);
            // 
            // checkBox10
            // 
            this.checkBox10.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.checkBox10.Location = new System.Drawing.Point(216, 24);
            this.checkBox10.Name = "checkBox10";
            this.checkBox10.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.checkBox10.Size = new System.Drawing.Size(88, 24);
            this.checkBox10.TabIndex = 100;
            this.checkBox10.Text = "VIA ports Only";
            this.toolTip_0.SetToolTip(this.checkBox10, "List only Via ports, may help if Mobo has unfriendly chipset");
            this.checkBox10.CheckedChanged += new System.EventHandler(this.checkBox10_CheckedChanged);
            // 
            // checkBox11
            // 
            this.checkBox11.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.checkBox11.Location = new System.Drawing.Point(160, 48);
            this.checkBox11.Name = "checkBox11";
            this.checkBox11.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.checkBox11.Size = new System.Drawing.Size(144, 24);
            this.checkBox11.TabIndex = 99;
            this.checkBox11.Text = "Include non-IDE Ports";
            this.toolTip_0.SetToolTip(this.checkBox11, " IO ports in the SCSIAdapter Device Class");
            this.checkBox11.Visible = false;
            this.checkBox11.CheckedChanged += new System.EventHandler(this.checkBox11_CheckedChanged);
            // 
            // linkLabel2
            // 
            this.linkLabel2.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.linkLabel2.Location = new System.Drawing.Point(544, 8);
            this.linkLabel2.Name = "linkLabel2";
            this.linkLabel2.Size = new System.Drawing.Size(80, 16);
            this.linkLabel2.TabIndex = 98;
            this.linkLabel2.TabStop = true;
            this.linkLabel2.Text = "activate.iso";
            this.linkLabel2.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            this.toolTip_0.SetToolTip(this.linkLabel2, "Burn to DL-DVD, then Insert to Unlock iXtreme Sammy.");
            this.linkLabel2.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabel2_LinkClicked);
            // 
            // groupBox9
            // 
            this.groupBox9.Controls.Add(this.radioButton21);
            this.groupBox9.Controls.Add(this.button42);
            this.groupBox9.Controls.Add(this.radioButton20);
            this.groupBox9.Controls.Add(this.radioButton19);
            this.groupBox9.Controls.Add(this.button14);
            this.groupBox9.Controls.Add(this.button13);
            this.groupBox9.Controls.Add(this.button15);
            this.groupBox9.Controls.Add(this.button17);
            this.groupBox9.Controls.Add(this.button16);
            this.groupBox9.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox9.Location = new System.Drawing.Point(344, 256);
            this.groupBox9.Name = "groupBox9";
            this.groupBox9.Size = new System.Drawing.Size(280, 112);
            this.groupBox9.TabIndex = 97;
            this.groupBox9.TabStop = false;
            this.groupBox9.Text = "Flashing Tasks";
            // 
            // radioButton21
            // 
            this.radioButton21.Location = new System.Drawing.Point(136, 88);
            this.radioButton21.Name = "radioButton21";
            this.radioButton21.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton21.Size = new System.Drawing.Size(56, 16);
            this.radioButton21.TabIndex = 63;
            this.radioButton21.Text = "Slim2";
            this.toolTip_0.SetToolTip(this.radioButton21, "Select Newer Slim MTK Vendor Commands");
            this.radioButton21.Visible = false;
            // 
            // button42
            // 
            this.button42.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button42.Location = new System.Drawing.Point(208, 80);
            this.button42.Name = "button42";
            this.button42.Size = new System.Drawing.Size(56, 24);
            this.button42.TabIndex = 62;
            this.button42.Text = "Lock Spi";
            this.toolTip_0.SetToolTip(this.button42, "Lock/UnLock external Spi on 0225 replacement PCB");
            this.button42.Click += new System.EventHandler(this.button42_Click);
            // 
            // radioButton20
            // 
            this.radioButton20.Checked = true;
            this.radioButton20.Location = new System.Drawing.Point(16, 88);
            this.radioButton20.Name = "radioButton20";
            this.radioButton20.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton20.Size = new System.Drawing.Size(48, 16);
            this.radioButton20.TabIndex = 61;
            this.radioButton20.TabStop = true;
            this.radioButton20.Text = "Phat";
            this.toolTip_0.SetToolTip(this.radioButton20, "Select Legacy MTK Vendor Commands");
            // 
            // radioButton19
            // 
            this.radioButton19.Location = new System.Drawing.Point(80, 88);
            this.radioButton19.Name = "radioButton19";
            this.radioButton19.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton19.Size = new System.Drawing.Size(48, 16);
            this.radioButton19.TabIndex = 60;
            this.radioButton19.Text = "Slim";
            this.toolTip_0.SetToolTip(this.radioButton19, "Select Newer Slim MTK Vendor Commands");
            this.radioButton19.CheckedChanged += new System.EventHandler(this.radioButton19_CheckedChanged);
            // 
            // button14
            // 
            this.button14.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button14.Location = new System.Drawing.Point(104, 48);
            this.button14.Name = "button14";
            this.button14.Size = new System.Drawing.Size(72, 24);
            this.button14.TabIndex = 58;
            this.button14.Text = "Erase";
            this.toolTip_0.SetToolTip(this.button14, "Erase Flash Device");
            this.button14.Click += new System.EventHandler(this.button14_Click);
            // 
            // button13
            // 
            this.button13.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button13.Location = new System.Drawing.Point(192, 48);
            this.button13.Name = "button13";
            this.button13.Size = new System.Drawing.Size(72, 24);
            this.button13.TabIndex = 59;
            this.button13.Text = "Write";
            this.toolTip_0.SetToolTip(this.button13, "Erase and Write Target Buffer to Flash Device");
            this.button13.Click += new System.EventHandler(this.button13_Click);
            // 
            // button15
            // 
            this.button15.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button15.Location = new System.Drawing.Point(16, 48);
            this.button15.Name = "button15";
            this.button15.Size = new System.Drawing.Size(72, 24);
            this.button15.TabIndex = 57;
            this.button15.Text = "Read";
            this.toolTip_0.SetToolTip(this.button15, "Read Flash to Source Buffer");
            this.button15.Click += new System.EventHandler(this.button15_Click);
            // 
            // button17
            // 
            this.button17.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button17.Location = new System.Drawing.Point(16, 16);
            this.button17.Name = "button17";
            this.button17.Size = new System.Drawing.Size(116, 24);
            this.button17.TabIndex = 56;
            this.button17.Text = " Intro / Device ID";
            this.toolTip_0.SetToolTip(this.button17, "Introduce Vendor Mode and get flash Device Info");
            this.button17.Click += new System.EventHandler(this.button17_Click);
            // 
            // button16
            // 
            this.button16.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button16.Location = new System.Drawing.Point(148, 16);
            this.button16.Name = "button16";
            this.button16.Size = new System.Drawing.Size(116, 24);
            this.button16.TabIndex = 57;
            this.button16.Text = "Outro / ATA Reset";
            this.toolTip_0.SetToolTip(this.button16, "Leave Vendor Mode and reset then inquire drive");
            this.button16.Click += new System.EventHandler(this.button16_Click);
            // 
            // groupBox7
            // 
            this.groupBox7.Controls.Add(this.button40);
            this.groupBox7.Controls.Add(this.button18);
            this.groupBox7.Controls.Add(this.button7);
            this.groupBox7.Controls.Add(this.button21);
            this.groupBox7.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox7.Location = new System.Drawing.Point(344, 24);
            this.groupBox7.Name = "groupBox7";
            this.groupBox7.Size = new System.Drawing.Size(280, 72);
            this.groupBox7.TabIndex = 96;
            this.groupBox7.TabStop = false;
            this.groupBox7.Text = "360 Tools";
            // 
            // button40
            // 
            this.button40.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button40.Location = new System.Drawing.Point(208, 20);
            this.button40.Name = "button40";
            this.button40.Size = new System.Drawing.Size(56, 40);
            this.button40.TabIndex = 96;
            this.button40.Text = "Slim UnLock";
            this.toolTip_0.SetToolTip(this.button40, "Send Unique Password to unlock Spi!");
            this.button40.Click += new System.EventHandler(this.button40_Click);
            // 
            // button18
            // 
            this.button18.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button18.Location = new System.Drawing.Point(16, 20);
            this.button18.Name = "button18";
            this.button18.Size = new System.Drawing.Size(56, 40);
            this.button18.TabIndex = 60;
            this.button18.Text = "Benq   UnLock";
            this.toolTip_0.SetToolTip(this.button18, "Send 49 Magic Keys to Unlock all VAD6038, Stock, pre ix1.5 to LT");
            this.button18.Click += new System.EventHandler(this.button18_Click);
            // 
            // button7
            // 
            this.button7.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button7.Location = new System.Drawing.Point(144, 20);
            this.button7.Name = "button7";
            this.button7.Size = new System.Drawing.Size(56, 40);
            this.button7.TabIndex = 95;
            this.button7.Text = "Lite-On Erase";
            this.toolTip_0.SetToolTip(this.button7, "Erases Lite-on via Intro-of-Death... make sure you have your Keys!");
            this.button7.Click += new System.EventHandler(this.button7_Click);
            // 
            // button21
            // 
            this.button21.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button21.Location = new System.Drawing.Point(80, 20);
            this.button21.Name = "button21";
            this.button21.Size = new System.Drawing.Size(56, 40);
            this.button21.TabIndex = 67;
            this.button21.Text = "Sammy UnLock";
            this.toolTip_0.SetToolTip(this.button21, "UnLocks Stock MS28s, for pre ix1.5 use activate.iso");
            this.button21.Click += new System.EventHandler(this.button21_Click);
            // 
            // groupBox1
            // 
            this.groupBox1.ContextMenu = this.contextMenu_4;
            this.groupBox1.Controls.Add(this.pictureBox2);
            this.groupBox1.Controls.Add(this.pictureBox6);
            this.groupBox1.Controls.Add(this.label133);
            this.groupBox1.Controls.Add(this.label132);
            this.groupBox1.Controls.Add(this.label72);
            this.groupBox1.Controls.Add(this.label58);
            this.groupBox1.Controls.Add(this.label59);
            this.groupBox1.Controls.Add(this.label60);
            this.groupBox1.Controls.Add(this.label61);
            this.groupBox1.Controls.Add(this.label62);
            this.groupBox1.Controls.Add(this.label67);
            this.groupBox1.Controls.Add(this.label68);
            this.groupBox1.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox1.Location = new System.Drawing.Point(32, 240);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(280, 128);
            this.groupBox1.TabIndex = 94;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Drive Properties";
            this.toolTip_0.SetToolTip(this.groupBox1, "Properites of Drive on IO port selected");
            // 
            // pictureBox2
            // 
            this.pictureBox2.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox2.Image")));
            this.pictureBox2.Location = new System.Drawing.Point(160, 104);
            this.pictureBox2.Name = "pictureBox2";
            this.pictureBox2.Size = new System.Drawing.Size(19, 19);
            this.pictureBox2.TabIndex = 32;
            this.pictureBox2.TabStop = false;
            this.pictureBox2.Visible = false;
            // 
            // pictureBox6
            // 
            this.pictureBox6.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox6.Image")));
            this.pictureBox6.Location = new System.Drawing.Point(160, 104);
            this.pictureBox6.Name = "pictureBox6";
            this.pictureBox6.Size = new System.Drawing.Size(19, 19);
            this.pictureBox6.TabIndex = 35;
            this.pictureBox6.TabStop = false;
            this.pictureBox6.Visible = false;
            // 
            // label133
            // 
            this.label133.Location = new System.Drawing.Point(88, 104);
            this.label133.Name = "label133";
            this.label133.Size = new System.Drawing.Size(112, 16);
            this.label133.TabIndex = 34;
            // 
            // label132
            // 
            this.label132.Location = new System.Drawing.Point(16, 104);
            this.label132.Name = "label132";
            this.label132.Size = new System.Drawing.Size(72, 16);
            this.label132.TabIndex = 33;
            this.label132.Text = "DVD Key:";
            // 
            // label72
            // 
            this.label72.Location = new System.Drawing.Point(88, 16);
            this.label72.Name = "label72";
            this.label72.Size = new System.Drawing.Size(176, 16);
            this.label72.TabIndex = 6;
            // 
            // label58
            // 
            this.label58.Location = new System.Drawing.Point(88, 82);
            this.label58.Name = "label58";
            this.label58.Size = new System.Drawing.Size(176, 16);
            this.label58.TabIndex = 13;
            // 
            // label59
            // 
            this.label59.Location = new System.Drawing.Point(16, 82);
            this.label59.Name = "label59";
            this.label59.Size = new System.Drawing.Size(72, 16);
            this.label59.TabIndex = 12;
            this.label59.Text = "Reserved:";
            // 
            // label60
            // 
            this.label60.Location = new System.Drawing.Point(16, 16);
            this.label60.Name = "label60";
            this.label60.Size = new System.Drawing.Size(72, 16);
            this.label60.TabIndex = 11;
            this.label60.Text = "Vendor:";
            // 
            // label61
            // 
            this.label61.Location = new System.Drawing.Point(88, 60);
            this.label61.Name = "label61";
            this.label61.Size = new System.Drawing.Size(176, 16);
            this.label61.TabIndex = 10;
            // 
            // label62
            // 
            this.label62.Location = new System.Drawing.Point(16, 38);
            this.label62.Name = "label62";
            this.label62.Size = new System.Drawing.Size(56, 16);
            this.label62.TabIndex = 9;
            this.label62.Text = "Name:";
            // 
            // label67
            // 
            this.label67.Location = new System.Drawing.Point(16, 60);
            this.label67.Name = "label67";
            this.label67.Size = new System.Drawing.Size(64, 16);
            this.label67.TabIndex = 8;
            this.label67.Text = "F/W Rev:";
            // 
            // label68
            // 
            this.label68.Location = new System.Drawing.Point(88, 38);
            this.label68.Name = "label68";
            this.label68.Size = new System.Drawing.Size(176, 16);
            this.label68.TabIndex = 7;
            // 
            // comboBox7
            // 
            this.comboBox7.Cursor = System.Windows.Forms.Cursors.Default;
            this.comboBox7.ItemHeight = 13;
            this.comboBox7.Location = new System.Drawing.Point(40, 48);
            this.comboBox7.Name = "comboBox7";
            this.comboBox7.Size = new System.Drawing.Size(80, 21);
            this.comboBox7.TabIndex = 93;
            this.comboBox7.SelectedIndexChanged += new System.EventHandler(this.comboBox7_SelectedIndexChanged);
            // 
            // label73
            // 
            this.label73.Location = new System.Drawing.Point(40, 24);
            this.label73.Name = "label73";
            this.label73.Size = new System.Drawing.Size(56, 16);
            this.label73.TabIndex = 92;
            this.label73.Text = "I/O Port";
            // 
            // groupBox3
            // 
            this.groupBox3.Controls.Add(this.pictureBox11);
            this.groupBox3.Controls.Add(this.pictureBox9);
            this.groupBox3.Controls.Add(this.label74);
            this.groupBox3.Controls.Add(this.label75);
            this.groupBox3.Controls.Add(this.label76);
            this.groupBox3.Controls.Add(this.label81);
            this.groupBox3.Controls.Add(this.label83);
            this.groupBox3.Controls.Add(this.label84);
            this.groupBox3.Controls.Add(this.label85);
            this.groupBox3.Controls.Add(this.label86);
            this.groupBox3.Controls.Add(this.label95);
            this.groupBox3.Controls.Add(this.label96);
            this.groupBox3.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox3.Location = new System.Drawing.Point(32, 80);
            this.groupBox3.Name = "groupBox3";
            this.groupBox3.Size = new System.Drawing.Size(280, 152);
            this.groupBox3.TabIndex = 91;
            this.groupBox3.TabStop = false;
            this.groupBox3.Text = "Port Properties";
            this.toolTip_0.SetToolTip(this.groupBox3, "Properites of IO port selected");
            // 
            // pictureBox11
            // 
            this.pictureBox11.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox11.Image")));
            this.pictureBox11.Location = new System.Drawing.Point(232, 16);
            this.pictureBox11.Name = "pictureBox11";
            this.pictureBox11.Size = new System.Drawing.Size(35, 29);
            this.pictureBox11.TabIndex = 40;
            this.pictureBox11.TabStop = false;
            // 
            // pictureBox9
            // 
            this.pictureBox9.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox9.Image")));
            this.pictureBox9.Location = new System.Drawing.Point(232, 16);
            this.pictureBox9.Name = "pictureBox9";
            this.pictureBox9.Size = new System.Drawing.Size(35, 29);
            this.pictureBox9.TabIndex = 39;
            this.pictureBox9.TabStop = false;
            this.pictureBox9.Visible = false;
            // 
            // label74
            // 
            this.label74.Location = new System.Drawing.Point(16, 112);
            this.label74.Name = "label74";
            this.label74.Size = new System.Drawing.Size(72, 16);
            this.label74.TabIndex = 12;
            this.label74.Text = "Device:";
            // 
            // label75
            // 
            this.label75.Location = new System.Drawing.Point(88, 112);
            this.label75.Name = "label75";
            this.label75.Size = new System.Drawing.Size(176, 32);
            this.label75.TabIndex = 11;
            // 
            // label76
            // 
            this.label76.Location = new System.Drawing.Point(88, 88);
            this.label76.Name = "label76";
            this.label76.Size = new System.Drawing.Size(176, 16);
            this.label76.TabIndex = 10;
            // 
            // label81
            // 
            this.label81.Location = new System.Drawing.Point(88, 64);
            this.label81.Name = "label81";
            this.label81.Size = new System.Drawing.Size(176, 16);
            this.label81.TabIndex = 9;
            // 
            // label83
            // 
            this.label83.Location = new System.Drawing.Point(88, 40);
            this.label83.Name = "label83";
            this.label83.Size = new System.Drawing.Size(176, 16);
            this.label83.TabIndex = 8;
            // 
            // label84
            // 
            this.label84.Location = new System.Drawing.Point(88, 16);
            this.label84.Name = "label84";
            this.label84.Size = new System.Drawing.Size(176, 16);
            this.label84.TabIndex = 7;
            // 
            // label85
            // 
            this.label85.Location = new System.Drawing.Point(16, 16);
            this.label85.Name = "label85";
            this.label85.Size = new System.Drawing.Size(88, 16);
            this.label85.TabIndex = 6;
            this.label85.Text = "I/O Address:";
            // 
            // label86
            // 
            this.label86.Location = new System.Drawing.Point(16, 40);
            this.label86.Name = "label86";
            this.label86.Size = new System.Drawing.Size(72, 16);
            this.label86.TabIndex = 5;
            this.label86.Text = "Type:";
            // 
            // label95
            // 
            this.label95.Location = new System.Drawing.Point(16, 64);
            this.label95.Name = "label95";
            this.label95.Size = new System.Drawing.Size(72, 16);
            this.label95.TabIndex = 4;
            this.label95.Text = "Channel:";
            // 
            // label96
            // 
            this.label96.Location = new System.Drawing.Point(16, 88);
            this.label96.Name = "label96";
            this.label96.Size = new System.Drawing.Size(72, 16);
            this.label96.TabIndex = 3;
            this.label96.Text = "Postion:";
            // 
            // groupBox6
            // 
            this.groupBox6.Controls.Add(this.label118);
            this.groupBox6.Controls.Add(this.label122);
            this.groupBox6.Controls.Add(this.label121);
            this.groupBox6.Controls.Add(this.label120);
            this.groupBox6.Controls.Add(this.label119);
            this.groupBox6.Controls.Add(this.label114);
            this.groupBox6.Controls.Add(this.label77);
            this.groupBox6.Controls.Add(this.label78);
            this.groupBox6.Controls.Add(this.label79);
            this.groupBox6.Controls.Add(this.label80);
            this.groupBox6.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox6.Location = new System.Drawing.Point(344, 104);
            this.groupBox6.Name = "groupBox6";
            this.groupBox6.Size = new System.Drawing.Size(280, 144);
            this.groupBox6.TabIndex = 50;
            this.groupBox6.TabStop = false;
            this.groupBox6.Text = "Flash Chip Properties";
            this.toolTip_0.SetToolTip(this.groupBox6, "Properites of Flash device in Drive on IO port selected");
            // 
            // label118
            // 
            this.label118.Location = new System.Drawing.Point(80, 24);
            this.label118.Name = "label118";
            this.label118.Size = new System.Drawing.Size(192, 16);
            this.label118.TabIndex = 13;
            // 
            // label122
            // 
            this.label122.Location = new System.Drawing.Point(80, 120);
            this.label122.Name = "label122";
            this.label122.Size = new System.Drawing.Size(192, 16);
            this.label122.TabIndex = 17;
            // 
            // label121
            // 
            this.label121.Location = new System.Drawing.Point(80, 96);
            this.label121.Name = "label121";
            this.label121.Size = new System.Drawing.Size(192, 16);
            this.label121.TabIndex = 16;
            // 
            // label120
            // 
            this.label120.Location = new System.Drawing.Point(80, 72);
            this.label120.Name = "label120";
            this.label120.Size = new System.Drawing.Size(192, 16);
            this.label120.TabIndex = 15;
            // 
            // label119
            // 
            this.label119.Location = new System.Drawing.Point(80, 48);
            this.label119.Name = "label119";
            this.label119.Size = new System.Drawing.Size(192, 16);
            this.label119.TabIndex = 14;
            // 
            // label114
            // 
            this.label114.Location = new System.Drawing.Point(16, 48);
            this.label114.Name = "label114";
            this.label114.Size = new System.Drawing.Size(56, 16);
            this.label114.TabIndex = 12;
            this.label114.Text = "Device ID:";
            // 
            // label77
            // 
            this.label77.Location = new System.Drawing.Point(16, 72);
            this.label77.Name = "label77";
            this.label77.Size = new System.Drawing.Size(56, 16);
            this.label77.TabIndex = 9;
            this.label77.Text = "Name:";
            // 
            // label78
            // 
            this.label78.Location = new System.Drawing.Point(16, 96);
            this.label78.Name = "label78";
            this.label78.Size = new System.Drawing.Size(56, 16);
            this.label78.TabIndex = 8;
            this.label78.Text = "Size:";
            // 
            // label79
            // 
            this.label79.Location = new System.Drawing.Point(16, 24);
            this.label79.Name = "label79";
            this.label79.Size = new System.Drawing.Size(64, 16);
            this.label79.TabIndex = 7;
            this.label79.Text = "Vendor ID:";
            // 
            // label80
            // 
            this.label80.Location = new System.Drawing.Point(16, 120);
            this.label80.Name = "label80";
            this.label80.Size = new System.Drawing.Size(56, 16);
            this.label80.TabIndex = 11;
            this.label80.Text = "Type:";
            // 
            // checkBox5
            // 
            this.checkBox5.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.checkBox5.Location = new System.Drawing.Point(344, 8);
            this.checkBox5.Name = "checkBox5";
            this.checkBox5.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.checkBox5.Size = new System.Drawing.Size(104, 24);
            this.checkBox5.TabIndex = 94;
            this.checkBox5.Text = "Do Device ID";
            this.checkBox5.Visible = false;
            // 
            // button9
            // 
            this.button9.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button9.Location = new System.Drawing.Point(128, 48);
            this.button9.Name = "button9";
            this.button9.Size = new System.Drawing.Size(24, 21);
            this.button9.TabIndex = 60;
            this.button9.Text = "...";
            this.toolTip_0.SetToolTip(this.button9, "Refresh Drive Properties");
            this.button9.Click += new System.EventHandler(this.button9_Click);
            // 
            // Hitachi
            // 
            this.Hitachi.Controls.Add(this.radioButton18);
            this.Hitachi.Controls.Add(this.radioButton17);
            this.Hitachi.Controls.Add(this.groupBox8);
            this.Hitachi.Controls.Add(this.groupBox15);
            this.Hitachi.Controls.Add(this.groupBox14);
            this.Hitachi.Controls.Add(this.groupBox12);
            this.Hitachi.Controls.Add(this.groupBox13);
            this.Hitachi.Controls.Add(this.groupBox11);
            this.Hitachi.Controls.Add(this.groupBox5);
            this.Hitachi.Location = new System.Drawing.Point(4, 22);
            this.Hitachi.Name = "Hitachi";
            this.Hitachi.Size = new System.Drawing.Size(656, 374);
            this.Hitachi.TabIndex = 6;
            this.Hitachi.Text = "  Hitachi GDR3120  ";
            // 
            // radioButton18
            // 
            this.radioButton18.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton18.Location = new System.Drawing.Point(216, 40);
            this.radioButton18.Name = "radioButton18";
            this.radioButton18.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton18.Size = new System.Drawing.Size(88, 24);
            this.radioButton18.TabIndex = 72;
            this.radioButton18.Text = "Use Port IO";
            this.toolTip_0.SetToolTip(this.radioButton18, "Communicate with drive via Port IO");
            this.radioButton18.CheckedChanged += new System.EventHandler(this.radioButton18_CheckedChanged);
            // 
            // radioButton17
            // 
            this.radioButton17.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton17.Location = new System.Drawing.Point(200, 12);
            this.radioButton17.Name = "radioButton17";
            this.radioButton17.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton17.Size = new System.Drawing.Size(104, 24);
            this.radioButton17.TabIndex = 71;
            this.radioButton17.Text = "Use Win API";
            this.toolTip_0.SetToolTip(this.radioButton17, "Communicate with drive via windows Drive letter");
            // 
            // groupBox8
            // 
            this.groupBox8.Controls.Add(this.radioButton5);
            this.groupBox8.Controls.Add(this.radioButton4);
            this.groupBox8.Controls.Add(this.radioButton3);
            this.groupBox8.Controls.Add(this.radioButton2);
            this.groupBox8.Controls.Add(this.radioButton1);
            this.groupBox8.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox8.Location = new System.Drawing.Point(208, 72);
            this.groupBox8.Name = "groupBox8";
            this.groupBox8.Size = new System.Drawing.Size(112, 160);
            this.groupBox8.TabIndex = 61;
            this.groupBox8.TabStop = false;
            this.groupBox8.Text = "Drive Revision";
            // 
            // radioButton5
            // 
            this.radioButton5.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton5.Location = new System.Drawing.Point(32, 128);
            this.radioButton5.Name = "radioButton5";
            this.radioButton5.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton5.Size = new System.Drawing.Size(64, 24);
            this.radioButton5.TabIndex = 4;
            this.radioButton5.Text = "79 / 78";
            this.radioButton5.CheckedChanged += new System.EventHandler(this.radioButton5_CheckedChanged);
            // 
            // radioButton4
            // 
            this.radioButton4.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton4.Location = new System.Drawing.Point(32, 100);
            this.radioButton4.Name = "radioButton4";
            this.radioButton4.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton4.Size = new System.Drawing.Size(64, 24);
            this.radioButton4.TabIndex = 3;
            this.radioButton4.Text = "59 / 58";
            // 
            // radioButton3
            // 
            this.radioButton3.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton3.Location = new System.Drawing.Point(32, 72);
            this.radioButton3.Name = "radioButton3";
            this.radioButton3.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton3.Size = new System.Drawing.Size(64, 24);
            this.radioButton3.TabIndex = 2;
            this.radioButton3.Text = "47 / 46";
            // 
            // radioButton2
            // 
            this.radioButton2.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton2.Location = new System.Drawing.Point(32, 44);
            this.radioButton2.Name = "radioButton2";
            this.radioButton2.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton2.Size = new System.Drawing.Size(64, 24);
            this.radioButton2.TabIndex = 1;
            this.radioButton2.Text = "36";
            // 
            // radioButton1
            // 
            this.radioButton1.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton1.Location = new System.Drawing.Point(32, 16);
            this.radioButton1.Name = "radioButton1";
            this.radioButton1.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton1.Size = new System.Drawing.Size(64, 24);
            this.radioButton1.TabIndex = 0;
            this.radioButton1.Text = "40 / 32";
            // 
            // groupBox15
            // 
            this.groupBox15.Controls.Add(this.button22);
            this.groupBox15.Controls.Add(this.button3);
            this.groupBox15.Controls.Add(this.comboBox16);
            this.groupBox15.Controls.Add(this.button27);
            this.groupBox15.Controls.Add(this.button23);
            this.groupBox15.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox15.Location = new System.Drawing.Point(336, 8);
            this.groupBox15.Name = "groupBox15";
            this.groupBox15.Size = new System.Drawing.Size(312, 96);
            this.groupBox15.TabIndex = 70;
            this.groupBox15.TabStop = false;
            this.groupBox15.Text = "Drive";
            // 
            // button22
            // 
            this.button22.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button22.Location = new System.Drawing.Point(160, 56);
            this.button22.Name = "button22";
            this.button22.Size = new System.Drawing.Size(64, 24);
            this.button22.TabIndex = 64;
            this.button22.Text = "Query";
            this.toolTip_0.SetToolTip(this.button22, "Inquire drive letter.");
            this.button22.Click += new System.EventHandler(this.button22_Click);
            // 
            // button3
            // 
            this.button3.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button3.Location = new System.Drawing.Point(16, 56);
            this.button3.Name = "button3";
            this.button3.Size = new System.Drawing.Size(64, 24);
            this.button3.TabIndex = 63;
            this.button3.Text = "Refresh";
            this.toolTip_0.SetToolTip(this.button3, "Refresh Windows Drive list");
            this.button3.Click += new System.EventHandler(this.button3_Click);
            // 
            // comboBox16
            // 
            this.comboBox16.ContextMenu = this.contextMenu_0;
            this.comboBox16.Location = new System.Drawing.Point(16, 24);
            this.comboBox16.Name = "comboBox16";
            this.comboBox16.Size = new System.Drawing.Size(280, 21);
            this.comboBox16.TabIndex = 5;
            // 
            // contextMenu_0
            // 
            this.contextMenu_0.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.menuItem_0,
            this.menuItem_1,
            this.menuItem_8,
            this.menuItem_9,
            this.menuItem_10,
            this.menuItem_38});
            // 
            // menuItem_0
            // 
            this.menuItem_0.Index = 0;
            this.menuItem_0.Text = "Open";
            this.menuItem_0.Click += new System.EventHandler(this.menuItem_0_Click);
            // 
            // menuItem_1
            // 
            this.menuItem_1.Index = 1;
            this.menuItem_1.Text = "Close";
            this.menuItem_1.Click += new System.EventHandler(this.menuItem_1_Click);
            // 
            // menuItem_8
            // 
            this.menuItem_8.Index = 2;
            this.menuItem_8.Text = "Remove";
            this.menuItem_8.Click += new System.EventHandler(this.menuItem_8_Click);
            // 
            // menuItem_9
            // 
            this.menuItem_9.Index = 3;
            this.menuItem_9.Text = "Disable";
            this.menuItem_9.Click += new System.EventHandler(this.menuItem_9_Click);
            // 
            // menuItem_10
            // 
            this.menuItem_10.Index = 4;
            this.menuItem_10.Text = "Enable All";
            this.menuItem_10.Click += new System.EventHandler(this.menuItem_10_Click);
            // 
            // menuItem_38
            // 
            this.menuItem_38.Index = 5;
            this.menuItem_38.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.menuItem_39,
            this.menuItem_40,
            this.menuItem_41,
            this.menuItem_42,
            this.menuItem_49,
            this.menuItem_48,
            this.menuItem_44,
            this.menuItem_46,
            this.menuItem_50,
            this.menuItem_45,
            this.menuItem_51,
            this.menuItem_47,
            this.menuItem_52,
            this.menuItem_43});
            this.menuItem_38.Text = "BurnMax";
            this.menuItem_38.Visible = false;
            // 
            // menuItem_39
            // 
            this.menuItem_39.Index = 0;
            this.menuItem_39.Text = "iHAS A";
            this.menuItem_39.Click += new System.EventHandler(this.menuItem_39_Click);
            // 
            // menuItem_40
            // 
            this.menuItem_40.Index = 1;
            this.menuItem_40.Text = "iHAS B";
            this.menuItem_40.Click += new System.EventHandler(this.menuItem_40_Click);
            // 
            // menuItem_41
            // 
            this.menuItem_41.Index = 2;
            this.menuItem_41.Text = "iHAS C/D";
            this.menuItem_41.Click += new System.EventHandler(this.menuItem_41_Click);
            // 
            // menuItem_42
            // 
            this.menuItem_42.Index = 3;
            this.menuItem_42.Text = "iHAS W";
            this.menuItem_42.Click += new System.EventHandler(this.menuItem_42_Click);
            // 
            // menuItem_49
            // 
            this.menuItem_49.Index = 4;
            this.menuItem_49.Text = "eTAU108";
            this.menuItem_49.Click += new System.EventHandler(this.menuItem_49_Click);
            // 
            // menuItem_48
            // 
            this.menuItem_48.Index = 5;
            this.menuItem_48.Text = "-";
            // 
            // menuItem_44
            // 
            this.menuItem_44.Index = 6;
            this.menuItem_44.Text = "DVR-220L";
            this.menuItem_44.Click += new System.EventHandler(this.menuItem_44_Click);
            // 
            // menuItem_46
            // 
            this.menuItem_46.Index = 7;
            this.menuItem_46.Text = "DVR-218L";
            this.menuItem_46.Click += new System.EventHandler(this.menuItem_46_Click);
            // 
            // menuItem_50
            // 
            this.menuItem_50.Index = 8;
            this.menuItem_50.Text = "-";
            // 
            // menuItem_45
            // 
            this.menuItem_45.Index = 9;
            this.menuItem_45.Text = "TSST SE-208AB";
            this.menuItem_45.Click += new System.EventHandler(this.menuItem_45_Click);
            // 
            // menuItem_51
            // 
            this.menuItem_51.Index = 10;
            this.menuItem_51.Text = "-";
            // 
            // menuItem_47
            // 
            this.menuItem_47.Index = 11;
            this.menuItem_47.Text = "DRW-24B1LT";
            this.menuItem_47.Click += new System.EventHandler(this.menuItem_47_Click);
            // 
            // menuItem_52
            // 
            this.menuItem_52.Index = 12;
            this.menuItem_52.Text = "-";
            // 
            // menuItem_43
            // 
            this.menuItem_43.Index = 13;
            this.menuItem_43.Text = "Scan";
            this.menuItem_43.Click += new System.EventHandler(this.menuItem_43_Click);
            // 
            // button27
            // 
            this.button27.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button27.Location = new System.Drawing.Point(88, 56);
            this.button27.Name = "button27";
            this.button27.Size = new System.Drawing.Size(64, 24);
            this.button27.TabIndex = 94;
            this.button27.Text = "Scan";
            this.toolTip_0.SetToolTip(this.button27, "Scan for Hardware Changes");
            this.button27.Click += new System.EventHandler(this.button27_Click);
            // 
            // button23
            // 
            this.button23.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button23.Location = new System.Drawing.Point(232, 56);
            this.button23.Name = "button23";
            this.button23.Size = new System.Drawing.Size(64, 24);
            this.button23.TabIndex = 65;
            this.button23.Text = "USmodeB";
            this.button23.Click += new System.EventHandler(this.button23_Click);
            // 
            // groupBox14
            // 
            this.groupBox14.Controls.Add(this.button24);
            this.groupBox14.Controls.Add(this.button12);
            this.groupBox14.Controls.Add(this.checkBox1);
            this.groupBox14.Controls.Add(this.linkLabel3);
            this.groupBox14.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox14.Location = new System.Drawing.Point(8, 272);
            this.groupBox14.Name = "groupBox14";
            this.groupBox14.Size = new System.Drawing.Size(184, 96);
            this.groupBox14.TabIndex = 69;
            this.groupBox14.TabStop = false;
            this.groupBox14.Text = "79 Unlock";
            // 
            // button24
            // 
            this.button24.Enabled = false;
            this.button24.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button24.Location = new System.Drawing.Point(16, 56);
            this.button24.Name = "button24";
            this.button24.Size = new System.Drawing.Size(72, 24);
            this.button24.TabIndex = 60;
            this.button24.Text = "Play";
            this.button24.Click += new System.EventHandler(this.button24_Click);
            // 
            // button12
            // 
            this.button12.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button12.Location = new System.Drawing.Point(96, 56);
            this.button12.Name = "button12";
            this.button12.Size = new System.Drawing.Size(72, 24);
            this.button12.TabIndex = 59;
            this.button12.Text = "79 Unlock";
            this.button12.Click += new System.EventHandler(this.button12_Click);
            // 
            // checkBox1
            // 
            this.checkBox1.Checked = true;
            this.checkBox1.CheckState = System.Windows.Forms.CheckState.Checked;
            this.checkBox1.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.checkBox1.Location = new System.Drawing.Point(96, 8);
            this.checkBox1.Name = "checkBox1";
            this.checkBox1.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.checkBox1.Size = new System.Drawing.Size(80, 24);
            this.checkBox1.TabIndex = 61;
            this.checkBox1.Text = "automatic";
            this.checkBox1.CheckedChanged += new System.EventHandler(this.checkBox1_CheckedChanged);
            // 
            // linkLabel3
            // 
            this.linkLabel3.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.linkLabel3.Location = new System.Drawing.Point(8, 32);
            this.linkLabel3.Name = "linkLabel3";
            this.linkLabel3.Size = new System.Drawing.Size(168, 16);
            this.linkLabel3.TabIndex = 99;
            this.linkLabel3.TabStop = true;
            this.linkLabel3.Text = "Insert the 79 Unlock Audio CD.";
            this.linkLabel3.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            this.linkLabel3.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabel3_LinkClicked);
            // 
            // groupBox12
            // 
            this.groupBox12.Controls.Add(this.listBox5);
            this.groupBox12.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox12.Location = new System.Drawing.Point(504, 112);
            this.groupBox12.Name = "groupBox12";
            this.groupBox12.Size = new System.Drawing.Size(144, 256);
            this.groupBox12.TabIndex = 68;
            this.groupBox12.TabStop = false;
            this.groupBox12.Text = "Sector List";
            // 
            // listBox5
            // 
            this.listBox5.Font = new System.Drawing.Font("Courier New", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.listBox5.ItemHeight = 15;
            this.listBox5.Items.AddRange(new object[] {
            "0x90003000",
            "0x90005000",
            "0x90006000",
            "0x9000A000",
            "0x9001C000",
            "0x90027000",
            "0x9002E000",
            "0x90033000",
            "0x90034000",
            "0x90035000",
            "0x9003E000"});
            this.listBox5.Location = new System.Drawing.Point(16, 24);
            this.listBox5.Name = "listBox5";
            this.listBox5.Size = new System.Drawing.Size(112, 214);
            this.listBox5.TabIndex = 3;
            this.toolTip_0.SetToolTip(this.listBox5, "List of sectors to be flashed");
            // 
            // groupBox13
            // 
            this.groupBox13.Controls.Add(this.button25);
            this.groupBox13.Controls.Add(this.label99);
            this.groupBox13.Controls.Add(this.label97);
            this.groupBox13.Controls.Add(this.label98);
            this.groupBox13.Controls.Add(this.label100);
            this.groupBox13.Controls.Add(this.button11);
            this.groupBox13.Controls.Add(this.label82);
            this.groupBox13.Controls.Add(this.label89);
            this.groupBox13.Controls.Add(this.label91);
            this.groupBox13.Controls.Add(this.comboBox13);
            this.groupBox13.Controls.Add(this.button20);
            this.groupBox13.Controls.Add(this.button19);
            this.groupBox13.Controls.Add(this.label90);
            this.groupBox13.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox13.Location = new System.Drawing.Point(8, 8);
            this.groupBox13.Name = "groupBox13";
            this.groupBox13.Size = new System.Drawing.Size(184, 256);
            this.groupBox13.TabIndex = 67;
            this.groupBox13.TabStop = false;
            this.groupBox13.Text = "Port Properties";
            // 
            // button25
            // 
            this.button25.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button25.Location = new System.Drawing.Point(112, 24);
            this.button25.Name = "button25";
            this.button25.Size = new System.Drawing.Size(24, 21);
            this.button25.TabIndex = 94;
            this.button25.Text = "...";
            this.toolTip_0.SetToolTip(this.button25, "Refresh Drive Properties");
            this.button25.Click += new System.EventHandler(this.button25_Click);
            // 
            // label99
            // 
            this.label99.Location = new System.Drawing.Point(56, 88);
            this.label99.Name = "label99";
            this.label99.Size = new System.Drawing.Size(120, 16);
            this.label99.TabIndex = 70;
            // 
            // label97
            // 
            this.label97.Location = new System.Drawing.Point(72, 152);
            this.label97.Name = "label97";
            this.label97.Size = new System.Drawing.Size(96, 32);
            this.label97.TabIndex = 72;
            // 
            // label98
            // 
            this.label98.Location = new System.Drawing.Point(72, 120);
            this.label98.Name = "label98";
            this.label98.Size = new System.Drawing.Size(96, 16);
            this.label98.TabIndex = 71;
            // 
            // label100
            // 
            this.label100.Location = new System.Drawing.Point(56, 56);
            this.label100.Name = "label100";
            this.label100.Size = new System.Drawing.Size(125, 16);
            this.label100.TabIndex = 69;
            // 
            // button11
            // 
            this.button11.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button11.Location = new System.Drawing.Point(16, 192);
            this.button11.Name = "button11";
            this.button11.Size = new System.Drawing.Size(152, 24);
            this.button11.TabIndex = 66;
            this.button11.Text = "Send Mode-B";
            this.button11.Click += new System.EventHandler(this.button11_Click);
            // 
            // label82
            // 
            this.label82.Location = new System.Drawing.Point(8, 56);
            this.label82.Name = "label82";
            this.label82.Size = new System.Drawing.Size(56, 16);
            this.label82.TabIndex = 6;
            this.label82.Text = "Vendor:";
            // 
            // label89
            // 
            this.label89.Location = new System.Drawing.Point(8, 88);
            this.label89.Name = "label89";
            this.label89.Size = new System.Drawing.Size(56, 16);
            this.label89.TabIndex = 5;
            this.label89.Text = "Name:";
            // 
            // label91
            // 
            this.label91.Location = new System.Drawing.Point(8, 152);
            this.label91.Name = "label91";
            this.label91.Size = new System.Drawing.Size(72, 16);
            this.label91.TabIndex = 3;
            this.label91.Text = "Reserved:";
            // 
            // comboBox13
            // 
            this.comboBox13.Location = new System.Drawing.Point(16, 24);
            this.comboBox13.Name = "comboBox13";
            this.comboBox13.Size = new System.Drawing.Size(88, 21);
            this.comboBox13.TabIndex = 68;
            this.comboBox13.SelectedIndexChanged += new System.EventHandler(this.comboBox13_SelectedIndexChanged);
            // 
            // button20
            // 
            this.button20.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button20.Location = new System.Drawing.Point(96, 224);
            this.button20.Name = "button20";
            this.button20.Size = new System.Drawing.Size(72, 24);
            this.button20.TabIndex = 93;
            this.button20.Text = "Close";
            this.button20.Click += new System.EventHandler(this.button20_Click);
            // 
            // button19
            // 
            this.button19.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button19.Location = new System.Drawing.Point(16, 224);
            this.button19.Name = "button19";
            this.button19.Size = new System.Drawing.Size(72, 24);
            this.button19.TabIndex = 92;
            this.button19.Text = "Open";
            this.button19.Click += new System.EventHandler(this.button19_Click);
            // 
            // label90
            // 
            this.label90.Location = new System.Drawing.Point(8, 120);
            this.label90.Name = "label90";
            this.label90.Size = new System.Drawing.Size(80, 16);
            this.label90.TabIndex = 4;
            this.label90.Text = "F/W Rev:";
            // 
            // groupBox11
            // 
            this.groupBox11.Controls.Add(this.radioButton16);
            this.groupBox11.Controls.Add(this.radioButton11);
            this.groupBox11.Controls.Add(this.radioButton10);
            this.groupBox11.Controls.Add(this.radioButton9);
            this.groupBox11.Controls.Add(this.radioButton8);
            this.groupBox11.Controls.Add(this.radioButton7);
            this.groupBox11.Controls.Add(this.radioButton6);
            this.groupBox11.Controls.Add(this.button26);
            this.groupBox11.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox11.Location = new System.Drawing.Point(336, 112);
            this.groupBox11.Name = "groupBox11";
            this.groupBox11.Size = new System.Drawing.Size(152, 256);
            this.groupBox11.TabIndex = 62;
            this.groupBox11.TabStop = false;
            this.groupBox11.Text = "Flashing Options";
            // 
            // radioButton16
            // 
            this.radioButton16.Enabled = false;
            this.radioButton16.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton16.Location = new System.Drawing.Point(16, 184);
            this.radioButton16.Name = "radioButton16";
            this.radioButton16.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton16.Size = new System.Drawing.Size(120, 24);
            this.radioButton16.TabIndex = 62;
            this.radioButton16.Text = "Free Flash";
            this.toolTip_0.SetToolTip(this.radioButton16, "Flash what you like, checks can be ignored.. **BE WARNED**");
            this.radioButton16.CheckedChanged += new System.EventHandler(this.radioButton16_CheckedChanged);
            // 
            // radioButton11
            // 
            this.radioButton11.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton11.Location = new System.Drawing.Point(16, 16);
            this.radioButton11.Name = "radioButton11";
            this.radioButton11.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton11.Size = new System.Drawing.Size(120, 24);
            this.radioButton11.TabIndex = 61;
            this.radioButton11.Text = "Dump Drive";
            this.toolTip_0.SetToolTip(this.radioButton11, "Dump and save flash image.");
            this.radioButton11.CheckedChanged += new System.EventHandler(this.radioButton11_CheckedChanged);
            // 
            // radioButton10
            // 
            this.radioButton10.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton10.Location = new System.Drawing.Point(16, 156);
            this.radioButton10.Name = "radioButton10";
            this.radioButton10.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton10.Size = new System.Drawing.Size(120, 24);
            this.radioButton10.TabIndex = 4;
            this.radioButton10.Text = "Set Checksum";
            this.toolTip_0.SetToolTip(this.radioButton10, "Flash checkum if incorrect or master -OR- Flash master is correct.");
            this.radioButton10.CheckedChanged += new System.EventHandler(this.radioButton10_CheckedChanged);
            // 
            // radioButton9
            // 
            this.radioButton9.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton9.Location = new System.Drawing.Point(16, 128);
            this.radioButton9.Name = "radioButton9";
            this.radioButton9.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton9.Size = new System.Drawing.Size(120, 24);
            this.radioButton9.TabIndex = 3;
            this.radioButton9.Text = "Restore Firmware";
            this.toolTip_0.SetToolTip(this.radioButton9, "Dump flash, load stock, build sector list and flash them... fix checksum.");
            this.radioButton9.CheckedChanged += new System.EventHandler(this.radioButton9_CheckedChanged);
            // 
            // radioButton8
            // 
            this.radioButton8.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton8.Location = new System.Drawing.Point(16, 100);
            this.radioButton8.Name = "radioButton8";
            this.radioButton8.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton8.Size = new System.Drawing.Size(120, 24);
            this.radioButton8.TabIndex = 2;
            this.radioButton8.Text = "Flash LT-Plus";
            this.toolTip_0.SetToolTip(this.radioButton8, "Dump flash, load latest iXtreme, build sector list and flash them.");
            this.radioButton8.CheckedChanged += new System.EventHandler(this.radioButton8_CheckedChanged);
            // 
            // radioButton7
            // 
            this.radioButton7.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton7.Location = new System.Drawing.Point(16, 72);
            this.radioButton7.Name = "radioButton7";
            this.radioButton7.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton7.Size = new System.Drawing.Size(120, 24);
            this.radioButton7.TabIndex = 1;
            this.radioButton7.Text = "Auto Spoof";
            this.toolTip_0.SetToolTip(this.radioButton7, "Dump flash, Spoof from Source, flash Sector differences.");
            this.radioButton7.CheckedChanged += new System.EventHandler(this.radioButton7_CheckedChanged);
            // 
            // radioButton6
            // 
            this.radioButton6.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton6.Location = new System.Drawing.Point(16, 44);
            this.radioButton6.Name = "radioButton6";
            this.radioButton6.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton6.Size = new System.Drawing.Size(120, 24);
            this.radioButton6.TabIndex = 0;
            this.radioButton6.Text = "Manual Spoof";
            this.toolTip_0.SetToolTip(this.radioButton6, "Dump flash, spoof manually, flash sector differences.");
            this.radioButton6.CheckedChanged += new System.EventHandler(this.radioButton6_CheckedChanged);
            // 
            // button26
            // 
            this.button26.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.button26.Location = new System.Drawing.Point(16, 208);
            this.button26.Name = "button26";
            this.button26.Size = new System.Drawing.Size(120, 40);
            this.button26.TabIndex = 60;
            this.button26.Text = "Delta Read";
            this.button26.Click += new System.EventHandler(this.button26_Click);
            // 
            // groupBox5
            // 
            this.groupBox5.Controls.Add(this.radioButton12);
            this.groupBox5.Controls.Add(this.radioButton13);
            this.groupBox5.Controls.Add(this.radioButton14);
            this.groupBox5.Controls.Add(this.radioButton15);
            this.groupBox5.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.groupBox5.Location = new System.Drawing.Point(208, 240);
            this.groupBox5.Name = "groupBox5";
            this.groupBox5.Size = new System.Drawing.Size(112, 128);
            this.groupBox5.TabIndex = 62;
            this.groupBox5.TabStop = false;
            this.groupBox5.Text = "Transfer Method";
            // 
            // radioButton12
            // 
            this.radioButton12.Enabled = false;
            this.radioButton12.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton12.Location = new System.Drawing.Point(8, 100);
            this.radioButton12.Name = "radioButton12";
            this.radioButton12.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton12.Size = new System.Drawing.Size(88, 24);
            this.radioButton12.TabIndex = 3;
            this.radioButton12.Text = "Ram Poke";
            this.toolTip_0.SetToolTip(this.radioButton12, "Communicate with drive via Vendor Poke commands.");
            // 
            // radioButton13
            // 
            this.radioButton13.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton13.Location = new System.Drawing.Point(8, 44);
            this.radioButton13.Name = "radioButton13";
            this.radioButton13.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton13.Size = new System.Drawing.Size(88, 24);
            this.radioButton13.TabIndex = 2;
            this.radioButton13.Text = "Mode Select";
            this.toolTip_0.SetToolTip(this.radioButton13, "Communicate with drive via Mode Select commands, supports USB");
            // 
            // radioButton14
            // 
            this.radioButton14.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton14.Location = new System.Drawing.Point(8, 72);
            this.radioButton14.Name = "radioButton14";
            this.radioButton14.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton14.Size = new System.Drawing.Size(88, 24);
            this.radioButton14.TabIndex = 1;
            this.radioButton14.Text = "Ram Upload";
            this.toolTip_0.SetToolTip(this.radioButton14, "Communicate with drive via Vendor Ram Upload commands.");
            // 
            // radioButton15
            // 
            this.radioButton15.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.radioButton15.Location = new System.Drawing.Point(8, 16);
            this.radioButton15.Name = "radioButton15";
            this.radioButton15.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.radioButton15.Size = new System.Drawing.Size(88, 24);
            this.radioButton15.TabIndex = 0;
            this.radioButton15.Text = "Classic";
            this.toolTip_0.SetToolTip(this.radioButton15, "Dump via Classic ram peek Vendor command");
            // 
            // tabPage5
            // 
            this.tabPage5.Controls.Add(this.pictureBox4);
            this.tabPage5.Controls.Add(this.button31);
            this.tabPage5.Controls.Add(this.button30);
            this.tabPage5.Location = new System.Drawing.Point(4, 22);
            this.tabPage5.Name = "tabPage5";
            this.tabPage5.Size = new System.Drawing.Size(656, 374);
            this.tabPage5.TabIndex = 7;
            this.tabPage5.Text = "  IRC Channel  ";
            // 
            // pictureBox4
            // 
            this.pictureBox4.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox4.Image")));
            this.pictureBox4.Location = new System.Drawing.Point(552, 344);
            this.pictureBox4.Name = "pictureBox4";
            this.pictureBox4.Size = new System.Drawing.Size(92, 26);
            this.pictureBox4.TabIndex = 77;
            this.pictureBox4.TabStop = false;
            this.toolTip_0.SetToolTip(this.pictureBox4, "Help Support JungleFlasher Development!");
            this.pictureBox4.Visible = false;
            this.pictureBox4.Click += new System.EventHandler(this.pictureBox4_Click);
            this.pictureBox4.MouseEnter += new System.EventHandler(this.pictureBox3_MouseEnter);
            this.pictureBox4.MouseLeave += new System.EventHandler(this.pictureBox3_MouseLeave);
            // 
            // button31
            // 
            this.button31.Location = new System.Drawing.Point(112, 344);
            this.button31.Name = "button31";
            this.button31.Size = new System.Drawing.Size(80, 24);
            this.button31.TabIndex = 76;
            this.button31.Text = "Disconnect";
            this.button31.Click += new System.EventHandler(this.button31_Click);
            // 
            // button30
            // 
            this.button30.Location = new System.Drawing.Point(16, 344);
            this.button30.Name = "button30";
            this.button30.Size = new System.Drawing.Size(80, 24);
            this.button30.TabIndex = 75;
            this.button30.Text = "Connect";
            this.button30.Click += new System.EventHandler(this.button30_Click);
            // 
            // checkBox7
            // 
            this.checkBox7.Checked = true;
            this.checkBox7.CheckState = System.Windows.Forms.CheckState.Checked;
            this.checkBox7.Location = new System.Drawing.Point(536, 480);
            this.checkBox7.Name = "checkBox7";
            this.checkBox7.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.checkBox7.Size = new System.Drawing.Size(88, 24);
            this.checkBox7.TabIndex = 72;
            this.checkBox7.Text = "Intel";
            // 
            // checkBox6
            // 
            this.checkBox6.Location = new System.Drawing.Point(328, 480);
            this.checkBox6.Name = "checkBox6";
            this.checkBox6.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.checkBox6.Size = new System.Drawing.Size(88, 24);
            this.checkBox6.TabIndex = 71;
            this.checkBox6.Text = "Use Port I/O";
            // 
            // textBox6
            // 
            this.textBox6.BackColor = System.Drawing.SystemColors.Window;
            this.textBox6.Font = new System.Drawing.Font("Courier New", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.textBox6.Location = new System.Drawing.Point(8, 416);
            this.textBox6.MaxLength = 262142;
            this.textBox6.Multiline = true;
            this.textBox6.Name = "textBox6";
            this.textBox6.ReadOnly = true;
            this.textBox6.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.textBox6.Size = new System.Drawing.Size(664, 152);
            this.textBox6.TabIndex = 27;
            this.textBox6.DoubleClick += new System.EventHandler(this.textBox6_DoubleClick);
            // 
            // pictureBox3
            // 
            this.pictureBox3.Image = ((System.Drawing.Image)(resources.GetObject("pictureBox3.Image")));
            this.pictureBox3.Location = new System.Drawing.Point(680, 8);
            this.pictureBox3.Name = "pictureBox3";
            this.pictureBox3.Size = new System.Drawing.Size(160, 560);
            this.pictureBox3.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.pictureBox3.TabIndex = 32;
            this.pictureBox3.TabStop = false;
            this.toolTip_0.SetToolTip(this.pictureBox3, "http://www.modtraders.co.uk/");
            this.pictureBox3.Visible = false;
            this.pictureBox3.Click += new System.EventHandler(this.pictureBox3_Click);
            this.pictureBox3.MouseEnter += new System.EventHandler(this.pictureBox3_MouseEnter);
            this.pictureBox3.MouseLeave += new System.EventHandler(this.pictureBox3_MouseLeave);
            // 
            // button48
            // 
            this.button48.Font = new System.Drawing.Font("Microsoft Sans Serif", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.button48.Location = new System.Drawing.Point(48, 80);
            this.button48.Name = "button48";
            this.button48.Size = new System.Drawing.Size(32, 24);
            this.button48.TabIndex = 5;
            this.button48.Text = "Half";
            this.toolTip_0.SetToolTip(this.button48, "Click to half tray");
            this.button48.Click += new System.EventHandler(this.button48_Click);
            // 
            // button47
            // 
            this.button47.Font = new System.Drawing.Font("Microsoft Sans Serif", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.button47.Location = new System.Drawing.Point(48, 48);
            this.button47.Name = "button47";
            this.button47.Size = new System.Drawing.Size(32, 24);
            this.button47.TabIndex = 4;
            this.button47.Text = "Close";
            this.toolTip_0.SetToolTip(this.button47, "Click to close tray");
            this.button47.Click += new System.EventHandler(this.button47_Click);
            // 
            // button46
            // 
            this.button46.Font = new System.Drawing.Font("Microsoft Sans Serif", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.button46.Location = new System.Drawing.Point(48, 16);
            this.button46.Name = "button46";
            this.button46.Size = new System.Drawing.Size(32, 24);
            this.button46.TabIndex = 3;
            this.button46.Text = "Open";
            this.toolTip_0.SetToolTip(this.button46, "Click to open tray");
            this.button46.Click += new System.EventHandler(this.button46_Click);
            // 
            // button45
            // 
            this.button45.Font = new System.Drawing.Font("Microsoft Sans Serif", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.button45.Location = new System.Drawing.Point(8, 80);
            this.button45.Name = "button45";
            this.button45.Size = new System.Drawing.Size(32, 24);
            this.button45.TabIndex = 2;
            this.button45.Text = "Cycle";
            this.toolTip_0.SetToolTip(this.button45, "Click to power cycle drive");
            this.button45.Click += new System.EventHandler(this.button45_Click);
            // 
            // button44
            // 
            this.button44.Font = new System.Drawing.Font("Microsoft Sans Serif", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.button44.Location = new System.Drawing.Point(8, 48);
            this.button44.Name = "button44";
            this.button44.Size = new System.Drawing.Size(32, 24);
            this.button44.TabIndex = 1;
            this.button44.Text = "OFF";
            this.toolTip_0.SetToolTip(this.button44, "Click to power off drive");
            this.button44.Click += new System.EventHandler(this.button44_Click);
            // 
            // button43
            // 
            this.button43.Font = new System.Drawing.Font("Microsoft Sans Serif", 6F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.button43.Location = new System.Drawing.Point(8, 16);
            this.button43.Name = "button43";
            this.button43.Size = new System.Drawing.Size(32, 24);
            this.button43.TabIndex = 0;
            this.button43.Text = "ON";
            this.toolTip_0.SetToolTip(this.button43, "Click to power on drive");
            this.button43.Click += new System.EventHandler(this.button43_Click);
            // 
            // textBox20
            // 
            this.textBox20.BackColor = System.Drawing.SystemColors.Window;
            this.textBox20.Location = new System.Drawing.Point(232, 432);
            this.textBox20.Name = "textBox20";
            this.textBox20.Size = new System.Drawing.Size(112, 20);
            this.textBox20.TabIndex = 73;
            this.textBox20.Text = "EasyToFindUpdate";
            this.textBox20.TextChanged += new System.EventHandler(this.textBox20_TextChanged);
            // 
            // label135
            // 
            this.label135.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label135.Location = new System.Drawing.Point(504, 12);
            this.label135.Name = "label135";
            this.label135.RightToLeft = System.Windows.Forms.RightToLeft.No;
            this.label135.Size = new System.Drawing.Size(160, 16);
            this.label135.TabIndex = 75;
            // 
            // groupBox18
            // 
            this.groupBox18.ContextMenu = this.contextMenu_6;
            this.groupBox18.Controls.Add(this.button48);
            this.groupBox18.Controls.Add(this.button47);
            this.groupBox18.Controls.Add(this.button46);
            this.groupBox18.Controls.Add(this.button45);
            this.groupBox18.Controls.Add(this.button44);
            this.groupBox18.Controls.Add(this.button43);
            this.groupBox18.Location = new System.Drawing.Point(560, 432);
            this.groupBox18.Name = "groupBox18";
            this.groupBox18.Size = new System.Drawing.Size(88, 112);
            this.groupBox18.TabIndex = 76;
            this.groupBox18.TabStop = false;
            this.groupBox18.Text = "CK3i";
            this.groupBox18.Visible = false;
            // 
            // contextMenu_6
            // 
            this.contextMenu_6.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
            this.menuItem_34,
            this.menuItem_35,
            this.menuItem_36});
            // 
            // menuItem_34
            // 
            this.menuItem_34.Index = 0;
            this.menuItem_34.Text = "750nS";
            // 
            // menuItem_35
            // 
            this.menuItem_35.Index = 1;
            this.menuItem_35.Text = "+ 50mS";
            this.menuItem_35.Click += new System.EventHandler(this.menuItem_35_Click);
            // 
            // menuItem_36
            // 
            this.menuItem_36.Index = 2;
            this.menuItem_36.Text = "- 50mS";
            this.menuItem_36.Click += new System.EventHandler(this.menuItem_36_Click);
            // 
            // Form1
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.BackColor = System.Drawing.SystemColors.Control;
            this.ClientSize = new System.Drawing.Size(840, 569);
            this.Controls.Add(this.groupBox18);
            this.Controls.Add(this.label135);
            this.Controls.Add(this.textBox6);
            this.Controls.Add(this.textBox20);
            this.Controls.Add(this.textBox5);
            this.Controls.Add(this.textBox19);
            this.Controls.Add(this.checkBox7);
            this.Controls.Add(this.tabControl5);
            this.Controls.Add(this.checkBox6);
            this.Controls.Add(this.pictureBox3);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.HelpButton = true;
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.KeyPreview = true;
            this.MaximizeBox = false;
            this.MaximumSize = new System.Drawing.Size(856, 608);
            this.MinimumSize = new System.Drawing.Size(856, 608);
            this.Name = "Form1";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "JungleFlasher 0.1.96 Beta";
            this.Closing += new System.ComponentModel.CancelEventHandler(this.Form1_Closing);
            this.Closed += new System.EventHandler(this.Form1_Closed);
            this.Load += new System.EventHandler(this.Form1_Load);
            this.KeyDown += new System.Windows.Forms.KeyEventHandler(this.Form1_KeyDown);
            this.tabControl1.ResumeLayout(false);
            this.tabPage9.ResumeLayout(false);
            this.tabPage9.PerformLayout();
            this.tabControl2.ResumeLayout(false);
            this.tabPage10.ResumeLayout(false);
            this.tabPage10.PerformLayout();
            this.tabControl3.ResumeLayout(false);
            this.tabPage3.ResumeLayout(false);
            this.tabPage3.PerformLayout();
            this.tabPage7.ResumeLayout(false);
            this.tabPage7.PerformLayout();
            this.tabPage11.ResumeLayout(false);
            this.tabPage11.PerformLayout();
            this.tabPage12.ResumeLayout(false);
            this.tabPage12.PerformLayout();
            this.tabControl4.ResumeLayout(false);
            this.tabPage1.ResumeLayout(false);
            this.tabPage1.PerformLayout();
            this.tabPage2.ResumeLayout(false);
            this.tabPage2.PerformLayout();
            this.tabPage4.ResumeLayout(false);
            this.tabPage4.PerformLayout();
            this.tabPage13.ResumeLayout(false);
            this.tabPage13.PerformLayout();
            this.tabControl5.ResumeLayout(false);
            this.Firmtools.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox1)).EndInit();
            this.DVDKey32.ResumeLayout(false);
            this.groupBox16.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox5)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox7)).EndInit();
            this.groupBox17.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox10)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox8)).EndInit();
            this.groupBox2.ResumeLayout(false);
            this.groupBox4.ResumeLayout(false);
            this.Benq.ResumeLayout(false);
            this.groupBox9.ResumeLayout(false);
            this.groupBox7.ResumeLayout(false);
            this.groupBox1.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox2)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox6)).EndInit();
            this.groupBox3.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox11)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox9)).EndInit();
            this.groupBox6.ResumeLayout(false);
            this.Hitachi.ResumeLayout(false);
            this.groupBox8.ResumeLayout(false);
            this.groupBox15.ResumeLayout(false);
            this.groupBox14.ResumeLayout(false);
            this.groupBox12.ResumeLayout(false);
            this.groupBox13.ResumeLayout(false);
            this.groupBox11.ResumeLayout(false);
            this.groupBox5.ResumeLayout(false);
            this.tabPage5.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox4)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.pictureBox3)).EndInit();
            this.groupBox18.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

    }

    private unsafe Assembly method_0(object object_0, ResolveEventArgs resolveEventArgs_0)
    {
      string name = resolveEventArgs_0.Name;
      if (string.Compare(resolveEventArgs_0.Name.Substring(0, resolveEventArgs_0.Name.IndexOf(new string((sbyte*) &_Module.struct6_4))), "AxInterop.SHDocVw") == 0)
      {
        Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("AxInterop.SHDocVw.dll");
        byte[] numArray1 = new byte[(int) manifestResourceStream.Length];
        numArray1.Initialize();
        byte[] numArray2 = numArray1;
        manifestResourceStream.Read(numArray2, 0, numArray2.Length);
        return Assembly.Load(numArray2);
      }
      else
      {
        if (string.Compare(resolveEventArgs_0.Name.Substring(0, resolveEventArgs_0.Name.IndexOf(new string((sbyte*) &_Module.struct6_4))), "Interop.SHDocVw") != 0)
          return (Assembly) null;
        Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("Interop.SHDocVw.dll");
        byte[] numArray1 = new byte[(int) manifestResourceStream.Length];
        numArray1.Initialize();
        byte[] numArray2 = numArray1;
        manifestResourceStream.Read(numArray2, 0, numArray2.Length);
        return Assembly.Load(numArray2);
      }
    }

    private unsafe void method_1(object sender, EventArgs e)
    {
      // ISSUE: cast to a function pointer type
      _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
      if (MessageBox.Show("Do you want to exit?", "Jungle Flasher", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
      {
        this.method_4();
        Application.Exit();
      }
      _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
    }

    private void Form1_Closed(object sender, EventArgs e)
    {
      this.bool_1 = false;
      this.method_4();
    }

    private unsafe void Form1_Closing(object sender, CancelEventArgs e)
    {
      while ((IntPtr) this.pVoid_0 != IntPtr.Zero)
      {
        _Module.Sleep(100U);
        _Module.SetCommMask(this.pVoid_0, 64U);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.smethod_150((void*) ^(int&) ((IntPtr) &_Module.gstruct101_0 + 4));
      _Module.smethod_148((sbyte*) &_Module.struct24_5);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 12) != 1 || this.method_424((byte) 1) != 1)
        return;
      _Module.Sleep(250U);
      this.method_422();
    }

    private unsafe void Form1_Load(object sender, EventArgs e)
    {
      string str1 = (string) null;
      string str2 = (string) null;
      string str3 = (string) null;
      string str4 = (string) null;
      string str5 = (string) null;
      string str6 = (string) null;
      string strA1 = (string) null;
      string strA2 = (string) null;
      string strA3 = (string) null;
      string strA4 = (string) null;
      string strA5 = (string) null;
      this.Cursor = Cursors.AppStarting;
      this.bool_1 = false;
      str1 = "1";
      str2 = "1";
      str3 = "1";
      str4 = "1";
      this.pGstruct11_0 = _Module.FindWindowA((sbyte*) 0, (sbyte*) &_Module.struct12_5);
      str5 = "0";
      str6 = "0";
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
      this.int_7 = 0;
      this.int_8 = 0;
      string str7;
      if (subKey.GetValue("Left") != null)
      {
        str7 = subKey.GetValue("Left").ToString();
      }
      else
      {
        str7 = new string((sbyte*) &_Module.struct18_6);
        subKey.SetValue("Left", (object) "0");
      }
      string str8;
      if (subKey.GetValue("Top") != null)
      {
        str8 = subKey.GetValue("Top").ToString();
      }
      else
      {
        str8 = new string((sbyte*) &_Module.struct18_6);
        subKey.SetValue("Top", (object) "0");
      }
      string str9;
      if (subKey.GetValue("IOPort") != null)
      {
        str9 = subKey.GetValue("IOPort").ToString();
      }
      else
      {
        str9 = new string((sbyte*) &_Module.struct6_6);
        subKey.SetValue("IOPort", (object) "0");
      }
      if (subKey.GetValue("COMPort") != null)
      {
        this.string_12 = subKey.GetValue("COMPort").ToString();
      }
      else
      {
        this.string_12 = new string((sbyte*) &_Module.struct18_6);
        subKey.SetValue("COMPort", (object) "-1");
      }
      string strA6;
      if (subKey.GetValue("AdvView") != null)
      {
        strA6 = subKey.GetValue("AdvView").ToString();
      }
      else
      {
        strA6 = new string((sbyte*) &_Module.struct6_6);
        subKey.SetValue("AdvView", (object) "0");
      }
      string strA7;
      if (subKey.GetValue("ScsiPorts") != null)
      {
        strA7 = subKey.GetValue("ScsiPorts").ToString();
      }
      else
      {
        strA7 = new string((sbyte*) &_Module.struct6_6);
        subKey.SetValue("ScsiPorts", (object) "0");
      }
      string strA8;
      if (subKey.GetValue("ViaPortsOnly") != null)
      {
        strA8 = subKey.GetValue("ViaPortsOnly").ToString();
      }
      else
      {
        strA8 = new string((sbyte*) &_Module.struct6_8);
        subKey.SetValue("ViaPortsOnly", (object) "0");
      }
      string strA9;
      if (subKey.GetValue("OnlyDummy") != null)
      {
        strA9 = subKey.GetValue("OnlyDummy").ToString();
      }
      else
      {
        strA9 = new string((sbyte*) &_Module.struct6_6);
        subKey.SetValue("OnlyDummy", (object) "0");
      }
      string strA10;
      if (subKey.GetValue("Xswitch") != null)
      {
        strA10 = subKey.GetValue("Xswitch").ToString();
      }
      else
      {
        strA10 = new string((sbyte*) &_Module.struct6_6);
        subKey.SetValue("Xswitch", (object) "0");
      }
      string strA11;
      if (subKey.GetValue("HitRev") != null)
      {
        strA11 = subKey.GetValue("HitRev").ToString();
      }
      else
      {
        strA11 = new string((sbyte*) &_Module.struct18_7);
        subKey.SetValue("HitRev", (object) "47");
      }
      string strA12;
      if (subKey.GetValue("HitAPi") != null)
      {
        strA12 = subKey.GetValue("HitAPi").ToString();
      }
      else
      {
        strA12 = new string((sbyte*) &_Module.struct6_8);
        subKey.SetValue("HitAPi", (object) "1");
      }
      if (subKey.GetValue("PermPortIO") != null)
        strA1 = subKey.GetValue("PermPortIO").ToString();
      if (subKey.GetValue("HackerMode") != null)
        strA2 = subKey.GetValue("HackerMode").ToString();
      if (subKey.GetValue("NoKeepDB") != null)
        strA3 = subKey.GetValue("NoKeepDB").ToString();
      if (subKey.GetValue("Sponsor") != null)
        strA4 = subKey.GetValue("Sponsor").ToString();
      string strA13;
      if (subKey.GetValue("HitTran") != null)
      {
        strA13 = subKey.GetValue("HitTran").ToString();
      }
      else
      {
        strA13 = new string((sbyte*) &_Module.struct6_8);
        subKey.SetValue("HitTran", (object) "1");
      }
      if (subKey.GetValue("BackupFolder") != null)
      {
        this.string_8 = subKey.GetValue("BackupFolder").ToString();
        this.bool_2 = true;
      }
      else
        this.bool_2 = false;
      string strA14;
      if (subKey.GetValue("DoCom") != null)
      {
        strA14 = subKey.GetValue("DoCom").ToString();
      }
      else
      {
        strA14 = "1";
        subKey.SetValue("DoCom", (object) "1");
      }
      string strA15;
      if (subKey.GetValue("DoIO") != null)
      {
        strA15 = subKey.GetValue("DoIO").ToString();
      }
      else
      {
        strA15 = "1";
        subKey.SetValue("DoIO", (object) "1");
      }
      string strA16;
      if (subKey.GetValue("DoDrives") != null)
      {
        strA16 = subKey.GetValue("DoDrives").ToString();
      }
      else
      {
        strA16 = "1";
        subKey.SetValue("DoDrives", (object) "1");
      }
      string strA17;
      if (subKey.GetValue("DoDevID") != null)
      {
        strA17 = subKey.GetValue("DoDevID").ToString();
      }
      else
      {
        strA17 = "0";
        subKey.SetValue("DoDevID", (object) "0");
      }
      if (subKey.GetValue("DoUSBOnly") != null)
      {
        this.string_18 = subKey.GetValue("DoUSBOnly").ToString();
      }
      else
      {
        this.string_18 = "0";
        subKey.SetValue("DoUSBOnly", (object) "0");
      }
      if (subKey.GetValue("Delay32") != null)
        strA5 = subKey.GetValue("Delay32").ToString();
      if (subKey.GetValue("Mods") != null)
      {
        this.string_11 = subKey.GetValue("Mods").ToString();
      }
      else
      {
        this.string_11 = "0";
        subKey.SetValue("Mods", (object) "0");
      }
      if (subKey.GetValue("NetBook") != null)
        ;
      if (subKey.GetValue("WriteKey") != null)
        this.menuItem_32.Visible = true;
      subKey.Close();
      int systemMetrics1 = _Module.GetSystemMetrics(0);
      int systemMetrics2 = _Module.GetSystemMetrics(1);
      GStruct92* dca = _Module.CreateDCA((sbyte*) &_Module.struct22_2, (sbyte*) 0, (sbyte*) 0, (GStruct98*) 0);
      int deviceCaps1 = _Module.GetDeviceCaps(dca, 88);
      int deviceCaps2 = _Module.GetDeviceCaps(dca, 10);
      if (str7.ToInt32((IFormatProvider) null) + this.Width > systemMetrics1)
        this.Left = (systemMetrics1 - this.Width) / 2;
      else if (str7.ToInt32((IFormatProvider) null) < 0)
        this.Left = (systemMetrics1 - this.Width) / 2;
      else
        this.Left = str7.ToInt32((IFormatProvider) null);
      if (str8.ToInt32((IFormatProvider) null) + this.Height > systemMetrics2)
        this.Top = (systemMetrics2 - this.Height) / 2;
      else if (str8.ToInt32((IFormatProvider) null) < 0)
        this.Top = (systemMetrics2 - this.Height) / 2;
      else
        this.Top = str8.ToInt32((IFormatProvider) null);
      this.checkBox3.CheckState = string.Compare(strA6, "1") != 0 ? CheckState.Unchecked : CheckState.Checked;
      if (string.Compare(strA7, "1") == 0)
      {
        this.checkBox2.CheckState = CheckState.Checked;
        this.checkBox11.CheckState = CheckState.Checked;
      }
      else
      {
        this.checkBox2.CheckState = CheckState.Unchecked;
        this.checkBox11.CheckState = CheckState.Unchecked;
      }
      if (string.Compare(strA8, "0") == 0)
      {
        this.checkBox4.CheckState = CheckState.Unchecked;
        this.checkBox10.CheckState = CheckState.Unchecked;
        this.checkBox2.Enabled = true;
        this.checkBox11.Enabled = true;
        this.radioButton18.Enabled = false;
        this.radioButton17.Checked = true;
      }
      else
      {
        this.checkBox4.CheckState = CheckState.Checked;
        this.checkBox10.CheckState = CheckState.Checked;
        this.checkBox2.Enabled = false;
        this.checkBox11.Enabled = false;
        this.radioButton18.Enabled = true;
      }
      this.checkBox8.CheckState = string.Compare(strA9, "0") != 0 ? CheckState.Checked : CheckState.Unchecked;
      this.checkBox9.CheckState = string.Compare(strA10, "0") != 0 ? CheckState.Checked : CheckState.Unchecked;
      this.checkBox5.CheckState = string.Compare(strA17, "1") != 0 ? CheckState.Unchecked : CheckState.Checked;
      if (string.Compare(this.string_18, "1") == 0)
      {
        this.checkBox15.CheckState = CheckState.Checked;
        this.checkBox16.CheckState = CheckState.Checked;
        this.checkBox2.Enabled = false;
        this.checkBox11.Enabled = false;
        this.checkBox4.Enabled = false;
        this.checkBox10.Enabled = false;
        this.radioButton18.Enabled = true;
        this.radioButton17.Checked = true;
      }
      else
      {
        this.checkBox15.CheckState = CheckState.Unchecked;
        this.checkBox16.CheckState = CheckState.Unchecked;
        this.checkBox2.Enabled = true;
        this.checkBox11.Enabled = true;
        this.checkBox4.Enabled = true;
        this.checkBox10.Enabled = true;
        this.radioButton18.Enabled = false;
        this.radioButton17.Checked = true;
      }
      this.int_14 = 0;
      this.string_21 = "Dump";
      this.radioButton11.Checked = true;
      if (string.Compare(strA11, "32") == 0)
      {
        this.radioButton1.Checked = true;
        this.int_12 = 32;
        this.string_19 = "0032/0040";
      }
      else if (string.Compare(strA11, "36") == 0)
      {
        this.radioButton2.Checked = true;
        this.int_12 = 36;
        this.string_19 = "0036";
      }
      else if (string.Compare(strA11, "47") == 0)
      {
        this.radioButton3.Checked = true;
        this.int_12 = 47;
        this.string_19 = "0046/0047";
      }
      else if (string.Compare(strA11, "59") == 0)
      {
        this.radioButton4.Checked = true;
        this.int_12 = 59;
        this.string_19 = "0058/0059";
      }
      else if (string.Compare(strA11, "79") == 0)
      {
        this.radioButton5.Checked = true;
        this.int_12 = 79;
        this.string_19 = "0078/0079";
      }
      if (string.Compare(strA12, "1") == 0)
        this.radioButton17.Checked = true;
      else
        this.radioButton18.Checked = true;
      if (string.Compare(strA13, "0") == 0)
      {
        this.radioButton15.Checked = true;
        this.int_13 = 0;
        this.string_20 = "Classic Ram Peek";
      }
      else if (string.Compare(strA13, "1") == 0)
      {
        this.radioButton14.Checked = true;
        this.int_13 = 1;
        this.string_20 = "Ram Upload";
      }
      else if (string.Compare(strA13, "2") == 0)
      {
        this.radioButton13.Checked = true;
        this.int_13 = 2;
        this.string_20 = "Mode Select";
      }
      else if (string.Compare(strA13, "3") == 0)
      {
        this.radioButton12.Checked = true;
        this.int_13 = 3;
        this.string_20 = "Ram Poke";
      }
      this.method_378();
      this.textBox6.AppendText("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" + "\r\n" + "JungleFlasher 0.1.96 Beta (323)" + "\r\n");
      int num1;
      _Module.time(&num1);
      this.textBox6.AppendText("Session Started " + Convert.ToString(new string(_Module.asctime(_Module.localtime(&num1)))).Substring(0, 24) + "\r\n\r\n");
      int num2 = 0;
      // ISSUE: cast to a function pointer type
      __FnPtr<int (void*, int*)> local1 = (__FnPtr<int (void*, int*)>) _Module.GetProcAddress(_Module.GetModuleHandleA((sbyte*) &_Module.struct24_6), (sbyte*) &_Module.struct65_0);
      if (0 != local1)
      {
        void* currentProcess = _Module.GetCurrentProcess();
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        int& local2 = @num2;
        // ISSUE: function pointer call
        int num3 = __calli(local1)((int*) currentProcess, (void*) local2);
      }
      if (num2 != 0)
        this.textBox6.AppendText("This is a Wow 64 process ");
      else
        this.textBox6.AppendText("This is a 32 bit process ");
      // ISSUE: cast to a function pointer type
      __FnPtr<void (GStruct91*)> local3 = (__FnPtr<void (GStruct91*)>) _Module.GetProcAddress(_Module.GetModuleHandleA((sbyte*) &_Module.struct15_1), (sbyte*) &_Module.struct66_0);
      GStruct91 gstruct91;
      if (local3 != null)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        GStruct91& local2 = @gstruct91;
        // ISSUE: function pointer call
        __calli(local3)((GStruct91*) local2);
      }
      else
        _Module.GetSystemInfo(&gstruct91);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      int num4 = ^(int&) ((IntPtr) &gstruct91 + 20);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(ushort&) @gstruct91 == 0)
      {
        if (num4 != 1)
          this.textBox6.AppendText("running on " + Convert.ToString(num4) + " x 32 bit CPUs " + "\r\n");
        else
          this.textBox6.AppendText("running on " + "a 32 bit CPU " + "\r\n");
      }
      else
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(ushort&) @gstruct91 == 9)
        {
          if (num4 != 1)
            this.textBox6.AppendText("running on " + Convert.ToString(num4) + " x 64 bit CPUs " + "\r\n");
          else
            this.textBox6.AppendText("running on " + "a 64 bit CPU " + "\r\n");
        }
        else
          this.textBox6.AppendText(Convert.ToString(num4) + " x unknown CPU " + "\r\n");
      }
      if (this.method_410() == 1)
      {
        this.textBox6.AppendText("X360USB PRO detected, ");
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.gstruct10_0 + 14) = (sbyte) 0;
        this.method_420();
        this.method_412();
        this.method_422();
        this.textBox6.AppendText("\r\n");
      }
      if (this.method_411() == 1)
      {
        this.textBox6.AppendText("X360USB BAD ASS detected, ");
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 12) == 1)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &_Module.gstruct10_0 + 14) = (sbyte) 0;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &_Module.gstruct10_0 + 14) = (sbyte) 1;
        }
        this.method_421();
        this.method_413();
        this.method_423();
        this.textBox6.AppendText("\r\n");
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((string.Compare(this.string_18, "1") != 0 || (int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 13) != 1) && (string.Compare(this.string_18, "1") != 0 || (int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 12) != 1))
        this.method_2();
      if (string.Compare(strA15, "1") == 0)
      {
        if (this.method_170() != 0)
        {
          this.textBox6.AppendText("Found " + Convert.ToString(this.comboBox1.Items.Count) + " I/O Ports." + "\r\n");
          if ((int) Convert.ToInt16(str9) > this.comboBox1.Items.Count - 1)
          {
            this.comboBox1.SelectedIndex = this.comboBox1.Items.Count - 1;
          }
          else
          {
            this.comboBox1.SelectedIndex = 0;
            _Module.Sleep(200U);
            this.comboBox1.SelectedIndex = (int) Convert.ToInt16(str9);
          }
          this.method_177();
          if (string.Compare(this.string_18, "1") != 0)
            this.method_169();
        }
        else
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num3 = (int) MessageBox.Show("No I/O ports were found during Enumeration!", "JungleFlasher", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          this.textBox6.AppendText("Found 0 I/O Ports." + "\r\n");
        }
      }
      if (string.Compare(strA14, "1") == 0)
      {
        if (this.method_145() != 0)
        {
          this.textBox6.AppendText("Found " + Convert.ToString(this.comboBox10.Items.Count) + " Com Ports.");
          if ((int) Convert.ToInt16(this.string_12) == -1 && this.comboBox10.Items.Count > 0)
          {
            this.comboBox10.SelectedIndex = 0;
            this.method_148();
          }
          else if ((int) Convert.ToInt16(this.string_12) > this.comboBox10.Items.Count - 1)
          {
            this.comboBox10.SelectedIndex = 0;
            this.method_148();
          }
          else
          {
            this.comboBox10.SelectedIndex = 0;
            this.comboBox10.SelectedIndex = (int) Convert.ToInt16(this.string_12);
          }
          for (int index = 0; index < this.comboBox10.Items.Count; ++index)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (^(int&) ((IntPtr) &_Module.struct122_0 + index * 324 + 8) == 7)
            {
              this.int_0 = 1;
              this.string_1 = Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + index * 324)));
              this.textBox6.AppendText("\r\n" + "CK3-CP Found on " + Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + index * 324))) + ": Connecting...");
              this.method_151();
            }
          }
          this.textBox6.AppendText("\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + this.comboBox10.SelectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
            this.method_166(17U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + this.comboBox10.SelectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
            this.label135.Text = "xt2: Enabled";
          if (this.checkBox9.Enabled && this.checkBox9.CheckState == CheckState.Checked)
            this.method_150();
        }
        else
          this.textBox6.AppendText("Found 0 Com Ports." + "\r\n");
      }
      if (string.Compare(strA16, "1") == 0)
      {
        this.method_359();
        this.int_11 = this.int_10;
      }
      string[] commandLineArgs = Environment.GetCommandLineArgs();
      this.method_29();
      if (commandLineArgs.Length == 3)
      {
        if (string.Compare(commandLineArgs[2], "Target") == 0)
          this.method_36(commandLineArgs[1], 1);
        else if (string.Compare(commandLineArgs[2], "Source") == 0)
          this.method_36(commandLineArgs[1], 0);
      }
      else if (commandLineArgs.Length == 2)
      {
        this.method_36(commandLineArgs[1], 0);
      }
      else
      {
        int num5 = (int) new Welcome().ShowDialog((IWin32Window) this);
      }
      if (this.bool_2)
      {
        this.string_9 = "";
        this.string_10 = this.string_8;
        ProjectName projectName = new ProjectName();
        if (projectName.ShowDialog((IWin32Window) this) == DialogResult.OK)
        {
          this.string_9 = projectName.textBox1.Text;
          this.string_10 = this.string_8 + this.string_9;
          if (projectName.textBox1.Text != "")
          {
            if (Directory.Exists(this.string_10))
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num3 = (int) MessageBox.Show("The folder " + this.string_10 + " already exists!", "Enter Job Name", MessageBoxButtons.OK);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              this.textBox6.AppendText("Working folder '" + this.string_10 + "' re-opened." + "\r\n");
            }
            else
            {
              Directory.CreateDirectory(this.string_10);
              this.textBox6.AppendText("Working folder '" + this.string_10 + "' created." + "\r\n");
            }
          }
          Directory.SetCurrentDirectory(this.string_10);
        }
      }
      if (string.Compare(strA12, "1") == 0)
        this.radioButton17.Checked = true;
      else
        this.radioButton18.Checked = true;
      if (!this.radioButton18.Enabled)
        this.radioButton17.Checked = true;
      if (string.Compare(strA1, "1") == 0)
      {
        this.radioButton18.Checked = true;
        this.radioButton18.Enabled = true;
      }
      if (string.Compare(this.string_18, "1") == 0)
      {
        this.radioButton18.Enabled = true;
        this.radioButton17.Checked = true;
      }
      this.bool_3 = string.Compare(strA2, "1") == 0;
      if (string.Compare(strA3, "1") == 0)
      {
        this.bool_4 = true;
        this.menuItem_7.Visible = false;
        this.menuItem_12.Visible = false;
      }
      if (string.Compare(strA4, "1") != 0)
      {
        //((Control) this.axWebBrowser_0).Width = deviceCaps1 * 160 / 96 + 4;
        //((Control) this.axWebBrowser_0).Height = deviceCaps1 * 560 / 96 + 4;
        this.pictureBox3.Width = deviceCaps1 * 160 / 96;
        this.pictureBox3.Height = deviceCaps1 * 560 / 96;
        if (deviceCaps2 == 600)
        {
          Size size1 = new Size();
          size1 = new Size(856, 565);
          this.MaximumSize = size1;
          Size size2 = new Size();
          size2 = new Size(856, 565);
          this.MinimumSize = size2;
          this.textBox6.Height = 109;
        }
        new Thread(new ThreadStart(this.method_11)).Start();
      }
      else
      {
        Size size1 = new Size();
        size1 = new Size(688, 608);
        this.MaximumSize = size1;
        Size size2 = new Size();
        size2 = new Size(688, 608);
        this.MinimumSize = size2;
      }
      this.bool_1 = true;
      new Thread(new ThreadStart(this.method_20)).Start();
      if (string.Compare(strA5, "0") == 0)
        this.menuItem_14.Enabled = false;
      else if (string.Compare(strA5, "5") == 0)
        this.menuItem_15.Enabled = false;
      else if (string.Compare(strA5, "10") == 0)
        this.menuItem_16.Enabled = false;
      else if (string.Compare(strA5, "15") == 0)
        this.menuItem_17.Enabled = false;
      else if (string.Compare(strA5, "20") == 0)
        this.menuItem_18.Enabled = false;
      this.radioButton21.Visible = true;
      this.Cursor = Cursors.Arrow;
    }

    private unsafe void method_2()
    {
      string strA = (string) null;
      Struct68 struct68_1;
      _Module.memset((void*) &struct68_1, 0, 260U);
      _Module.smethod_146((sbyte*) &struct68_1);
      // ISSUE: cast to a function pointer type
      __FnPtr<void (GStruct91*)> local1 = (__FnPtr<void (GStruct91*)>) _Module.GetProcAddress(_Module.GetModuleHandleA((sbyte*) &_Module.struct15_1), (sbyte*) &_Module.struct66_0);
      GStruct91 gstruct91;
      if (local1 != null)
      {
        // ISSUE: explicit reference operation
        // ISSUE: variable of a reference type
        GStruct91& local2 = @gstruct91;
        // ISSUE: function pointer call
        __calli(local1)((GStruct91*) local2);
      }
      else
        _Module.GetSystemInfo(&gstruct91);
      Struct68 struct68_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(ushort&) @gstruct91 == 0)
      {
        _Module.strcat((sbyte*) &struct68_1, (sbyte*) &_Module.struct67_0);
        strA = "portio32.sys";
        if (!File.Exists(Convert.ToString(new string((sbyte*) &struct68_1))))
        {
          Struct68 struct68_3;
          int num1 = (int) _Module.GetTempPathA(260U, (sbyte*) &struct68_3);
          if (num1 > 260 || num1 == 0 || (int) _Module.GetTempFileNameA((sbyte*) &struct68_3, (sbyte*) &_Module.struct25_8, 0U, (sbyte*) &struct68_2) == 0)
            return;
          GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) &struct68_2, (sbyte*) &_Module.struct18_5);
          if ((IntPtr) pGstruct5_0 != IntPtr.Zero)
          {
            int num2 = (int) _Module.fwrite((void*) &_Module.struct50_0, 2560U, 1U, pGstruct5_0);
            _Module.strcpy((sbyte*) &struct68_1, (sbyte*) &struct68_2);
            _Module.fclose(pGstruct5_0);
          }
          else
          {
            _Module.DeleteFileA((sbyte*) &struct68_2);
            return;
          }
        }
      }
      else
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(ushort&) @gstruct91 == 9)
        {
          _Module.strcat((sbyte*) &struct68_1, (sbyte*) &_Module.struct67_1);
          strA = "portio64.sys";
          if (!File.Exists(Convert.ToString(new string((sbyte*) &struct68_1))))
          {
            Struct68 struct68_3;
            int num1 = (int) _Module.GetTempPathA(260U, (sbyte*) &struct68_3);
            if (num1 > 260 || num1 == 0 || (int) _Module.GetTempFileNameA((sbyte*) &struct68_3, (sbyte*) &_Module.struct25_8, 0U, (sbyte*) &struct68_2) == 0)
              return;
            GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) &struct68_2, (sbyte*) &_Module.struct18_5);
            if ((IntPtr) pGstruct5_0 != IntPtr.Zero)
            {
              int num2 = (int) _Module.fwrite((void*) &_Module.struct53_0, 4608U, 1U, pGstruct5_0);
              _Module.strcpy((sbyte*) &struct68_1, (sbyte*) &struct68_2);
              _Module.fclose(pGstruct5_0);
            }
            else
            {
              _Module.DeleteFileA((sbyte*) &struct68_2);
              return;
            }
          }
        }
        else
        {
          int num3 = (int) MessageBox.Show("Processor architecture is not supported!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        }
      }
      _Module.smethod_148((sbyte*) &_Module.struct24_5);
      _Module.smethod_148((sbyte*) &_Module.struct10_18);
      if (_Module.smethod_147((sbyte*) &struct68_1, (sbyte*) &_Module.struct24_5) != 0)
      {
        if (string.Compare(strA, "portio64.sys") == 0)
        {
          int num1 = (int) MessageBox.Show("Can't install " + (object) strA + " driver!" + "\r\n" + (string) __arglist ("Press F8 at boot to 'Disable Driver Signature Enforcement'", "\r\n", "OR Test sign the driver an run in 'Test Mode'", "\r\n\r\n", "And Be Sure to 'Run as Administrator' !"), "PortIO Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          this.textBox6.AppendText(strA + " Driver not Installed " + "\r\n");
          _Module.DeleteFileA((sbyte*) &struct68_2);
          return;
        }
        else if (string.Compare(strA, "portio32.sys") == 0)
        {
          int num1 = (int) MessageBox.Show("Can't install " + (object) strA + " driver!" + "\r\n" + (string) __arglist ("Be Sure to 'Run as Administrator' !"), "PortIO Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          this.textBox6.AppendText(strA + " Driver not Installed " + "\r\n");
          _Module.DeleteFileA((sbyte*) &struct68_2);
          return;
        }
      }
      else
        this.textBox6.AppendText(strA + " Driver Installed " + "\r\n");
      if (_Module.smethod_149((void**) ((IntPtr) &_Module.gstruct101_0 + 4)) != 0)
      {
        int num4 = (int) MessageBox.Show("Can't start " + (object) strA + " driver!" + "\r\n" + (string) __arglist ("Be Sure to 'Run as Administrator' !"), "PortIO Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else
        this.textBox6.AppendText(strA + " Driver Started, thanks Schtrom ! " + "\r\n");
      _Module.DeleteFileA((sbyte*) &struct68_2);
    }

    private void method_3()
    {
      int num = (int) new Welcome().ShowDialog((IWin32Window) this);
    }

    private void checkBox3_CheckedChanged(object sender, EventArgs e)
    {
      if (this.checkBox3.CheckState == CheckState.Unchecked)
      {
        this.tabControl1.Visible = true;
        this.tabControl2.Visible = true;
        this.tabControl3.Visible = false;
        this.tabControl4.Visible = false;
      }
      else
      {
        this.tabControl1.Visible = false;
        this.tabControl2.Visible = false;
        this.tabControl3.Visible = true;
        this.tabControl4.Visible = true;
      }
    }

    private unsafe void method_4()
    {
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
      subKey.SetValue("Left", (object) Convert.ToString(this.Left));
      subKey.SetValue("Top", (object) Convert.ToString(this.Top));
      if (this.checkBox3.CheckState == CheckState.Checked)
        subKey.SetValue("AdvView", (object) "1");
      else
        subKey.SetValue("AdvView", (object) "0");
      if (this.checkBox2.CheckState == CheckState.Checked)
        subKey.SetValue("ScsiPorts", (object) "1");
      else
        subKey.SetValue("ScsiPorts", (object) "0");
      if (this.checkBox4.CheckState == CheckState.Checked)
        subKey.SetValue("ViaPortsOnly", (object) "1");
      else
        subKey.SetValue("ViaPortsOnly", (object) "0");
      if (this.checkBox8.CheckState == CheckState.Checked)
        subKey.SetValue("OnlyDummy", (object) "1");
      else
        subKey.SetValue("OnlyDummy", (object) "0");
      if (this.checkBox9.CheckState == CheckState.Checked)
        subKey.SetValue("Xswitch", (object) "1");
      else
        subKey.SetValue("Xswitch", (object) "0");
      if (this.checkBox15.CheckState == CheckState.Checked)
        subKey.SetValue("DoUSBOnly", (object) "1");
      else
        subKey.SetValue("DoUSBOnly", (object) "0");
      if (this.radioButton1.Checked)
        subKey.SetValue("HitRev", (object) "32");
      else if (this.radioButton2.Checked)
        subKey.SetValue("HitRev", (object) "36");
      else if (this.radioButton3.Checked)
        subKey.SetValue("HitRev", (object) "47");
      else if (this.radioButton4.Checked)
        subKey.SetValue("HitRev", (object) "59");
      else if (this.radioButton5.Checked)
        subKey.SetValue("HitRev", (object) "79");
      if (this.radioButton17.Checked)
        subKey.SetValue("HitAPi", (object) "1");
      else
        subKey.SetValue("HitAPi", (object) "0");
      if (this.radioButton15.Checked)
        subKey.SetValue("HitTran", (object) "0");
      else if (this.radioButton13.Checked)
        subKey.SetValue("HitTran", (object) "2");
      else if (this.radioButton14.Checked)
        subKey.SetValue("HitTran", (object) "1");
      else if (this.radioButton12.Checked)
        subKey.SetValue("HitTran", (object) "3");
      subKey.SetValue("ioport", (object) Convert.ToString(this.comboBox1.SelectedIndex));
      subKey.SetValue("COMPort", (object) Convert.ToString(this.comboBox10.SelectedIndex));
      subKey.Close();
      if (this.int_7 == 1 || this.int_8 != 0)
        this.method_152();
      int selectedIndex = this.comboBox10.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 9 && this.checkBox9.CheckState == CheckState.Checked)
      {
        this.method_135();
        this.method_137();
        this.method_138();
      }
      if (this.bool_2)
      {
        string str = this.string_10 + "\\jf.log";
        GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(str), (sbyte*) &_Module.struct18_8);
        if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(str, "Can't open log file", MessageBoxButtons.OK);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        else
        {
          sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.textBox6.Text);
          _Module.fputs((sbyte*) &_Module.struct35_122, pGstruct5_0);
          _Module.fputs(pSbyte_0, pGstruct5_0);
          _Module.fclose(pGstruct5_0);
        }
      }
      else
      {
        SaveFileDialog saveFileDialog = new SaveFileDialog();
        saveFileDialog.Filter = "Session Log file (*.log)|*.log|All Files (*.*)|*.*";
        saveFileDialog.DefaultExt = ".log";
        saveFileDialog.FileName = "jf.log";
        saveFileDialog.OverwritePrompt = false;
        if (saveFileDialog.ShowDialog() != DialogResult.OK)
          return;
        sbyte* pSbyte_0_1 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(saveFileDialog.FileName));
        string fileName = saveFileDialog.FileName;
        GStruct5* pGstruct5_0 = _Module.fopen(pSbyte_0_1, (sbyte*) &_Module.struct18_8);
        if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open log file", MessageBoxButtons.OK);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        else
        {
          sbyte* pSbyte_0_2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.textBox6.Text);
          _Module.fputs((sbyte*) &_Module.struct35_122, pGstruct5_0);
          _Module.fputs(pSbyte_0_2, pGstruct5_0);
          _Module.fclose(pGstruct5_0);
        }
      }
    }

    private unsafe void method_5(byte* pByte_0, uint uint_0, uint uint_1)
    {
      string str1 = (string) null;
      string str2 = (string) null;
      Struct20 struct20;
      _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct18_0, __arglist (13));
      string str3 = str1 + new string((sbyte*) &struct20);
      uint num1;
      Struct71 struct71;
      for (uint index1 = 0U; index1 < uint_0; ++index1)
      {
        num1 = index1 % 16U;
        if ((int) num1 == 0)
        {
          if ((int) index1 != 0)
          {
            for (uint index2 = 0U; index2 < 16U; ++index2)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct71 + (int) index2) >= 32 && (int) ^(sbyte&) ((IntPtr) &struct71 + (int) index2) <= 126)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct18_0, __arglist ((int) ^(sbyte&) ((IntPtr) &struct71 + (int) index2)));
                string str4 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
                str2 = str2 + str4;
              }
              else
                str2 = str2 + ".";
            }
            str2 = str2 + "\r\n";
          }
          Struct69 struct69;
          _Module.sprintf((sbyte*) &struct69, (sbyte*) &_Module.struct10_19, __arglist ((int) uint_1 + (int) index1));
          string str5 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct69);
          str2 = str2 + str5;
        }
        else if ((int) index1 != 0 && (int) (index1 % 8U) == 0)
          str2 = str2 + "- ";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct71 + (int) num1) = (sbyte) pByte_0[(int) index1];
        Struct70 struct70;
        _Module.sprintf((sbyte*) &struct70, (sbyte*) &_Module.struct23_39, __arglist ((int) pByte_0[(int) index1]));
        string str6 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct70);
        str2 = str2 + str6;
      }
      string str7;
      if ((int) uint_0 == 0)
      {
        str7 = str2 + "\r\n";
      }
      else
      {
        uint_0 = 16U - uint_0 % 16U;
        if ((int) uint_0 != 16)
        {
          if (uint_0 >= 8U)
            str2 = str2 + "  ";
          uint num2 = num1 + 1U;
          for (uint index = 0U; index < uint_0; ++index)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct71 + ((int) num2 + (int) index)) = (sbyte) 32;
            str2 = str2 + "   ";
          }
        }
        for (uint index = 0U; index < 16U; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(sbyte&) ((IntPtr) &struct71 + (int) index) >= 32 && (int) ^(sbyte&) ((IntPtr) &struct71 + (int) index) <= 126)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct18_0, __arglist ((int) ^(sbyte&) ((IntPtr) &struct71 + (int) index)));
            string str4 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
            str2 = str2 + str4;
          }
          else
            str2 = str2 + ".";
        }
        str7 = str2 + "\r\n";
      }
      this.string_0 = str7;
    }

    private unsafe void method_6(byte* pByte_0, uint uint_0, uint uint_1)
    {
      string str1 = (string) null;
      for (uint index = 0U; index < uint_0; ++index)
      {
        Struct62 struct62;
        _Module.sprintf((sbyte*) &struct62, (sbyte*) &_Module.struct35_121, __arglist ((int) pByte_0[(int) index]));
        string str2 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct62);
        str1 = str1 + str2;
      }
      this.string_0 = str1;
    }

    private unsafe void method_7(byte* pByte_0)
    {
      string str1 = (string) null;
      for (uint index = 0U; index < 32U; ++index)
      {
        if ((int) pByte_0[(int) index] >= 32 && (int) pByte_0[(int) index] <= 126)
        {
          Struct20 struct20;
          _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct18_0, __arglist ((int) pByte_0[(int) index]));
          string str2 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
          str1 = str1 + str2;
        }
        else
          str1 = str1 + " ";
      }
      this.string_0 = str1;
    }

    private unsafe void method_8(byte* pByte_0)
    {
      string str1 = (string) null;
      for (uint index = 0U; index < 28U; ++index)
      {
        if ((int) pByte_0[(int) index] >= 32 && (int) pByte_0[(int) index] <= 126)
        {
          Struct20 struct20;
          _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct18_0, __arglist ((int) pByte_0[(int) index]));
          string str2 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
          str1 = str1 + str2;
        }
        else
          str1 = str1 + new string((sbyte*) &_Module.struct6_5);
      }
      this.string_0 = str1;
    }

    private unsafe void method_9(byte* pByte_0, uint uint_0)
    {
      string str1 = (string) null;
      for (uint index = 0U; index < uint_0; ++index)
      {
        if ((int) pByte_0[(int) index] >= 32 && (int) pByte_0[(int) index] <= 126)
        {
          Struct20 struct20;
          _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct18_0, __arglist ((int) pByte_0[(int) index]));
          string str2 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
          str1 = str1 + str2;
        }
        else
          str1 = str1 + " ";
      }
      this.string_0 = str1;
    }

    private unsafe int method_10(void* pVoid_3, sbyte* pSbyte_0, int int_16)
    {
      _Module.memset(pVoid_3, 0, (uint) int_16);
      int num1 = (int) _Module.strlen(pSbyte_0) - 1;
      for (int index = num1; index >= 0; --index)
      {
        byte num2;
        if ((int) pSbyte_0[index] >= 48 && (int) pSbyte_0[index] <= 57)
          num2 = (byte) ((int) pSbyte_0[index] - 48);
        else if ((int) pSbyte_0[index] >= 97 && (int) pSbyte_0[index] <= 102)
        {
          num2 = (byte) ((int) pSbyte_0[index] - 96 + 9);
        }
        else
        {
          if ((int) pSbyte_0[index] < 65 || (int) pSbyte_0[index] > 70)
            return 1;
          num2 = (byte) ((int) pSbyte_0[index] - 64 + 9);
        }
        int num3 = num1 - index;
        if ((num3 & 1) != 0)
          num2 <<= 4;
        int num4 = num3 >> 1;
        if (num4 < int_16 && num4 >= 0)
          *(sbyte*) ((IntPtr) pVoid_3 + num4) = (sbyte) ((int) *(byte*) ((IntPtr) pVoid_3 + num4) | (int) num2);
        else
          break;
      }
      return 0;
    }

    private unsafe void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
    {
      this.linkLabel1.LinkVisited = true;
      try
      {
        Process.Start("http://www.jungleflasher.net/files/JungleFlasher.pdf");
      }
      catch (Exception ex)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
    }

    private unsafe void linkLabel2_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
    {
      this.linkLabel2.LinkVisited = true;
      try
      {
        Process.Start("http://www.jungleflasher.net/files/activate.rar");
      }
      catch (Exception ex)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
    }

    private unsafe void linkLabel3_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
    {
      this.linkLabel3.LinkVisited = true;
      try
      {
        Process.Start("http://www.jungleflasher.net/files/79_Unlock.rar");
      }
      catch (Exception ex)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
    }

    private unsafe void linkLabel4_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
    {
      this.linkLabel4.LinkVisited = true;
      try
      {
        Process.Start("http://JungleFlasher.net/donate.html");
      }
      catch (Exception ex)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
    }

    private unsafe void pictureBox4_Click(object sender, EventArgs e)
    {
      try
      {
        Process.Start("http://JungleFlasher.net/donate.html");
      }
      catch (Exception ex)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
    }

    private void pictureBox3_MouseEnter(object sender, EventArgs e)
    {
      this.Cursor = Cursors.Hand;
    }

    private void pictureBox3_MouseLeave(object sender, EventArgs e)
    {
      this.Cursor = Cursors.Arrow;
    }

    private unsafe void Form1_KeyDown(object sender, KeyEventArgs e)
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_1 + 1), 0, 15);
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) -61;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) -79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) 42;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) -96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) 124;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) -28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) 118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) 126;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) 84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) 87;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) -16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) 40;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) -74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) -34;
      Struct28 struct28_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_3 = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 1) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 2) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 3) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 4) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 5) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 6) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 7) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 8) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 9) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 10) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 11) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 12) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 13) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 14) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 15) = (sbyte) 90;
      Struct28 struct28_4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_4 = (sbyte) -101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 1) = (sbyte) 106;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 2) = (sbyte) 72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 3) = (sbyte) -67;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 4) = (sbyte) -31;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 5) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 6) = (sbyte) 95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 7) = (sbyte) -72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 8) = (sbyte) -104;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 9) = (sbyte) -16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 10) = (sbyte) -73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 11) = (sbyte) -69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 12) = (sbyte) -19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 13) = (sbyte) 60;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 14) = (sbyte) -62;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 15) = (sbyte) 66;
      Struct28 struct28_5;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_5 = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 1) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 2) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 3) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 4) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 5) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 6) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 7) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 8) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 9) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 10) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 11) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 12) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 13) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 14) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 15) = (sbyte) 90;
      if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F1)
        this.method_12();
      if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F2)
        this.method_13();
      if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F3)
      {
        this.tabControl5.SelectedTab = this.Benq;
        this.method_202();
      }
      if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F4)
        this.method_56();
      if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F5)
      {
        WorkingFolder workingFolder = new WorkingFolder();
        if (this.bool_2)
          workingFolder.textBox8.Text = this.string_8;
        if (workingFolder.ShowDialog((IWin32Window) this) == DialogResult.OK)
        {
          this.string_8 = workingFolder.textBox8.Text;
          if (workingFolder.textBox8.Text != "")
          {
            this.textBox6.AppendText("Backup Dir set as '" + this.string_8 + "\r\n");
            RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            subKey.SetValue("BackupFolder", (object) this.string_8);
            this.bool_2 = true;
            subKey.Close();
            ProjectName projectName = new ProjectName();
            if (projectName.ShowDialog((IWin32Window) this) == DialogResult.OK)
            {
              this.string_10 = this.string_8 + projectName.textBox1.Text;
              this.string_9 = projectName.textBox1.Text;
              if (projectName.textBox1.Text == "")
                return;
              if (Directory.Exists(this.string_10))
              {
                // ISSUE: cast to a function pointer type
                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num = (int) MessageBox.Show("The folder " + this.string_10 + " already exists!", "Enter Job Name", MessageBoxButtons.OK);
                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.textBox6.AppendText("Working folder '" + this.string_10 + "' re-opened." + "\r\n");
              }
              else
              {
                Directory.CreateDirectory(this.string_10);
                this.textBox6.AppendText("Working folder '" + this.string_10 + "' created." + "\r\n");
              }
              Directory.SetCurrentDirectory(this.string_10);
            }
          }
          else
          {
            this.textBox6.AppendText("Removing Backup Dir from Registry" + "\r\n");
            RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            subKey.DeleteValue("BackupFolder");
            this.bool_2 = false;
            subKey.Close();
          }
        }
      }
      if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F6)
        this.checkBox7.CheckState = this.checkBox7.CheckState != CheckState.Unchecked ? CheckState.Unchecked : CheckState.Checked;
      if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F7)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memset((void*) ^(int&) @_Module.struct123_0, 0, 2392U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memset((void*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4), 0, 2392U);
        this.method_40();
        this.method_43();
        this.method_177();
        this.label87.Text = "";
        this.label88.Text = "";
        if (this.bool_2)
        {
          int num1 = Convert.ToInt32(this.string_11) + 1;
          this.string_11 = Convert.ToString(num1);
          RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
          subKey.SetValue("Mods", (object) Convert.ToString(num1));
          subKey.Close();
          if (num1 % 10 == 0)
          {
            if (new Donate().ShowDialog((IWin32Window) this) == DialogResult.OK)
            {
              try
              {
                Process.Start("http://JungleFlasher.net/donate.html");
              }
              catch (Exception ex)
              {
                // ISSUE: cast to a function pointer type
                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num2 = (int) MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);
                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              }
            }
          }
          string str = this.string_10 + "\\jf.log";
          GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(str), (sbyte*) &_Module.struct18_8);
          if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num2 = (int) MessageBox.Show(str, "Can't open log file", MessageBoxButtons.OK);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            return;
          }
          else
          {
            sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.textBox6.Text);
            _Module.fputs((sbyte*) &_Module.struct35_122, pGstruct5_0);
            _Module.fputs(pSbyte_0, pGstruct5_0);
            _Module.fclose(pGstruct5_0);
            this.textBox6.Clear();
            this.textBox6.AppendText("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" + "\r\n" + "JungleFlasher 0.1.96 Beta" + "\r\n");
            int num2;
            _Module.time(&num2);
            this.textBox6.AppendText("Session Started " + Convert.ToString(new string(_Module.asctime(_Module.localtime(&num2)))).Substring(0, 24) + "\r\n\r\n");
            ProjectName projectName = new ProjectName();
            if (projectName.ShowDialog((IWin32Window) this) == DialogResult.OK)
            {
              this.string_10 = this.string_8 + projectName.textBox1.Text;
              this.string_9 = projectName.textBox1.Text;
              if (projectName.textBox1.Text == "")
                return;
              if (Directory.Exists(this.string_10))
              {
                // ISSUE: cast to a function pointer type
                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num3 = (int) MessageBox.Show("The folder " + this.string_10 + " already exists!", "Enter Job Name", MessageBoxButtons.OK);
                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.textBox6.AppendText("Working folder '" + this.string_10 + "' re-opened." + "\r\n");
              }
              else
              {
                Directory.CreateDirectory(this.string_10);
                this.textBox6.AppendText("Working folder '" + this.string_10 + "' created." + "\r\n");
              }
              Directory.SetCurrentDirectory(this.string_10);
            }
          }
        }
      }
      if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F8)
      {
        this.radioButton16.Enabled = true;
        if (this.radioButton13.Enabled)
          this.radioButton12.Enabled = true;
        else
          this.radioButton12.Enabled = false;
      }
      if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F9)
      {
        int num4 = (int) _Module.smethod_157();
      }
      if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F10 && !this.bool_4)
        this.method_27();
      if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F12)
        this.method_24();
      if (e.Shift && e.Control && e.KeyCode == Keys.F1)
        this.method_192();
      if (e.Shift && e.Control && e.KeyCode == Keys.F9)
        this.method_215();
      if (e.Shift && e.Control && e.KeyCode == Keys.F10)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) @_Module.struct123_0 != 1)
          return;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.memcmp((void*) (^(int&) @_Module.struct123_0 + 280), (void*) &struct28_1, 16U) == 0)
        {
          this.method_53();
          this.method_54();
        }
        else if (string.Compare(this.textBox9.Text, "") == 0)
        {
          this.method_53();
          this.method_54();
        }
        else
          this.method_53();
      }
      if (e.Shift && e.Control && e.KeyCode == Keys.F12)
        this.radioButton18.Enabled = true;
      if (!e.Shift || !e.Control || e.KeyCode != Keys.F11)
        return;
      this.method_322();
    }

    private unsafe void method_11()
    {
      //int deviceCaps = _Module.GetDeviceCaps(_Module.CreateDCA((sbyte*) &_Module.struct22_2, (sbyte*) 0, (sbyte*) 0, (GStruct98*) 0), 88);
      //this.pictureBox3.Visible = false;
      //((Control) this.axWebBrowser_0).Visible = true;
      //if (deviceCaps == 120)
      //  this.axWebBrowser_0.Navigate("http://jungleflasher.net/flash/loader1.html");
      //else
      //  this.axWebBrowser_0.Navigate("http://jungleflasher.net/flash/loader.html");
      //while (this.axWebBrowser_0.get_Busy())
      //  Application.DoEvents();
    }

    private void axWebBrowser_0_NavigateError(object object_0, DWebBrowserEvents2_NavigateErrorEvent dwebBrowserEvents2_NavigateErrorEvent_0)
    {
      //this.pictureBox3.Visible = true;
      //((Control) this.axWebBrowser_0).Visible = false;
      //this.axWebBrowser_0.Stop();
    }

    private void axWebBrowser_0_NavigateComplete2(object object_0, DWebBrowserEvents2_NavigateComplete2Event dwebBrowserEvents2_NavigateComplete2Event_0)
    {
    }

    private void axWebBrowser_0_NewWindow3(object object_0, DWebBrowserEvents2_NewWindow3Event dwebBrowserEvents2_NewWindow3Event_0)
    {
      //string str = Convert.ToString((string) dwebBrowserEvents2_NewWindow3Event_0.bstrUrl);
      //if (string.Compare(str, "http://jungleflasher.net/flash/loader.html") == 0 || string.Compare(str, "http://jungleflasher.net/flash/loader1.html") == 0)
      //  return;
      //dwebBrowserEvents2_NewWindow3Event_0.cancel = (__Null) 1;
      //Process.Start(str);
    }

    private unsafe void pictureBox3_Click(object sender, EventArgs e)
    {
      try
      {
        Process.Start("http://www.modtraders.co.uk");
      }
      catch (Exception ex)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
    }

    private unsafe void textBox6_DoubleClick(object sender, EventArgs e)
    {
      Process process = new Process();
      process.StartInfo.FileName = new string((sbyte*) &_Module.struct72_0);
      process.Start();
      process.WaitForInputIdle();
      GStruct11* windowA = _Module.FindWindowA((sbyte*) &_Module.struct22_3, (sbyte*) 0);
      sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(new string((sbyte*) &_Module.struct13_1) + this.string_9);
      if ((IntPtr) windowA == IntPtr(-1))
        return;
      _Module.SendMessageA(windowA, 12U, 0U, (int) numPtr);
      _Module.SendMessageA(_Module.FindWindowExA(windowA, (GStruct11*) 0, (sbyte*) &_Module.struct35_123, (sbyte*) 0), 12U, 0U, (int) (void*) Marshal.StringToHGlobalAnsi(this.textBox6.Text));
    }

    private unsafe void method_12()
    {
      string[] commandLineArgs = Environment.GetCommandLineArgs();
      string str1 = commandLineArgs[0] + " \"%1\" Source";
      string str2 = commandLineArgs[0] + " \"%1\" Target";
      string str3 = commandLineArgs[0] + " \"%1\" DBupdate";
      string str4 = commandLineArgs[0] + " \"%1\"";
      RegistryKey subKey1 = Registry.ClassesRoot.CreateSubKey(".bin\\Shell\\JF Source\\Command");
      subKey1.SetValue(new string((sbyte*) &_Module.struct19_0), (object) str1);
      subKey1.Close();
      RegistryKey subKey2 = Registry.ClassesRoot.CreateSubKey(".bin\\Shell\\JF Target\\Command");
      subKey2.SetValue(new string((sbyte*) &_Module.struct19_0), (object) str2);
      subKey2.Close();
      if (!this.bool_4)
      {
        RegistryKey subKey3 = Registry.ClassesRoot.CreateSubKey(".bin\\Shell\\JF Update DB\\Command");
        subKey3.SetValue(new string((sbyte*) &_Module.struct19_0), (object) str3);
        subKey3.Close();
      }
      RegistryKey subKey4 = Registry.ClassesRoot.CreateSubKey(".bin\\Shell\\Open\\Command");
      subKey4.SetValue(new string((sbyte*) &_Module.struct19_0), (object) str4);
      subKey4.Close();
      RegistryKey subKey5 = Registry.ClassesRoot.CreateSubKey(".bin");
      if (subKey5.GetValue("NoOpen") != null)
        subKey5.DeleteValue("NoOpen");
      subKey5.SetValue(new string((sbyte*) &_Module.struct19_0), (object) "Open");
      subKey5.Close();
    }

    private void method_13()
    {
      Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\JF Target\\Command", false);
      Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\JF Target", false);
      Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\JF Source\\Command", false);
      Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\JF Source", false);
      Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\JF Update DB\\Command", false);
      Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\JF Update DB", false);
      Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\Open\\Command", false);
      Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\Open", false);
    }

    private unsafe void method_14()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 3) == 0)
        this.method_424((byte) 2);
      this.button7.Enabled = false;
      this.button13.Enabled = false;
      this.button14.Enabled = false;
      this.button15.Enabled = false;
      this.button16.Enabled = false;
      this.button17.Enabled = false;
      this.button18.Enabled = false;
      this.button21.Enabled = false;
      this.button40.Enabled = false;
      this.button42.Enabled = false;
    }

    private void method_15()
    {
      this.button7.Enabled = true;
      this.button16.Enabled = true;
      this.button17.Enabled = true;
      this.button18.Enabled = true;
      this.button21.Enabled = true;
      this.button40.Enabled = true;
      this.button14.Enabled = true;
      this.button13.Enabled = true;
      this.button15.Enabled = true;
      if (string.Compare(this.button42.Text, "") == 0)
        return;
      this.button42.Enabled = true;
    }

    private void method_16()
    {
      this.groupBox11.Enabled = true;
      this.groupBox13.Enabled = true;
      this.groupBox14.Enabled = true;
    }

    private void method_17()
    {
      this.groupBox11.Enabled = false;
      this.groupBox13.Enabled = false;
      this.groupBox14.Enabled = false;
    }

    private void radioButton19_CheckedChanged(object sender, EventArgs e)
    {
      if (string.Compare(this.button42.Text, "") == 0)
        return;
      this.button42.Enabled = true;
    }

    private unsafe void method_18()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 3) == 0)
        this.method_424((byte) 2);
      this.button1.Enabled = false;
      this.button2.Enabled = false;
      this.button4.Enabled = false;
      this.button5.Enabled = false;
      this.button28.Enabled = false;
      this.button32.Enabled = false;
      this.button38.Enabled = false;
      this.button39.Enabled = false;
      Application.DoEvents();
    }

    private void method_19()
    {
      this.button1.Enabled = true;
      this.button2.Enabled = true;
      this.button4.Enabled = true;
      this.button5.Enabled = true;
      this.button28.Enabled = true;
      this.button32.Enabled = true;
      this.button38.Enabled = true;
      this.button39.Enabled = true;
    }

    private void button30_Click(object sender, EventArgs e)
    {
      //this.axWebBrowser_1.Navigate("http://jungleflasher.net/chat/support.html");
    }

    private void button31_Click(object sender, EventArgs e)
    {
      //this.axWebBrowser_1.Navigate("http://jungleflasher.net/chat/leave.html");
    }

    private unsafe void method_20()
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      //if ((int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 12) == 1)
      //  this.axWebBrowser_1.Navigate("http://jungleflasher.net/chat/jf196u.html");
      //else
      //  this.axWebBrowser_1.Navigate("http://jungleflasher.net/chat/jf196.html");
    }

    private unsafe void axWebBrowser_1_NavigateError(object object_0, DWebBrowserEvents2_NavigateErrorEvent dwebBrowserEvents2_NavigateErrorEvent_0)
    {
      //string str = (string) null;
      //string s = Path.GetDirectoryName(Environment.GetCommandLineArgs()[0]) + "\\Blank.html";
      //GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(s), (sbyte*) &_Module.struct18_2);
      //if ((IntPtr) pGstruct5_0 != IntPtr.Zero)
      //{
      //  _Module.fputs((sbyte*) (void*) Marshal.StringToHGlobalAnsi(str + "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">" + "\r\n" + "<html xmlns=\"www.Jungleflasher.net\" xml:lang=\"en\">" + "\r\n" + (object) "   <body>" + "\r\n" + "      <div id=\"main\">" + (string) __arglist ("\r\n", "      </div>", "\r\n", "   </body>", "\r\n", "</html>", "\r\n")), pGstruct5_0);
      //  _Module.fclose(pGstruct5_0);
      //}
      //this.axWebBrowser_1.Navigate(s);
    }

    private void axWebBrowser_1_NewWindow3(object object_0, DWebBrowserEvents2_NewWindow3Event dwebBrowserEvents2_NewWindow3Event_0)
    {
      //string str = Convert.ToString((string) dwebBrowserEvents2_NewWindow3Event_0.bstrUrl);
      //if (string.Compare(str, "http://jungleflasher.net/chat/jf196.html") == 0)
      //  return;
      //dwebBrowserEvents2_NewWindow3Event_0.cancel = (__Null) 1;
      //Process.Start(str);
    }

    private int method_21()
    {
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB");
      int num;
      if (subKey.GetValue("Index") != null)
      {
        num = Convert.ToInt32(subKey.GetValue("Index").ToString()) + 1;
        string str = Convert.ToString(num);
        subKey.SetValue("Index", (object) str);
      }
      else
      {
        num = 1;
        subKey.SetValue("Index", (object) "1");
      }
      subKey.Close();
      return num;
    }

    private unsafe int method_22(string string_25)
    {
      Struct68 struct68;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct68 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct68&) ((IntPtr) &struct68 + 1), 0, 259);
      RegistryKey subKey1 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\KeyList");
      string str1;
      int num1;
      if (subKey1.GetValue(string_25) != null)
      {
        str1 = subKey1.GetValue(string_25).ToString();
        num1 = Convert.ToInt32(str1);
      }
      else
      {
        num1 = this.method_21();
        str1 = Convert.ToString(num1);
        subKey1.SetValue(string_25, (object) str1);
      }
      RegistryKey subKey2 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\SerList");
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 4 && (int) *(byte*) (^(int&) @_Module.struct123_0 + 2028) != 0 && (int) *(byte*) (^(int&) @_Module.struct123_0 + 2028) != (int) byte.MaxValue)
      {
        string str2 = "";
        _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct18_9, __arglist (^(int&) @_Module.struct123_0 + 2028));
        string strA = str2 + new string((sbyte*) &struct68);
        subKey2.SetValue(strA.Substring(0, 17), (object) str1);
        if (string.Compare(strA, "D608CG73880800348") == 0 && this.bool_1)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num2 = (int) MessageBox.Show("Barcode is common to all Lite-On DG-16D2S following the 13146 System update" + (object) "\n" + "Do you wish to enter the actual barcode as a second Key DB Barcode entry" + "\n" + (string) __arglist ("Click YES to manually enter and include the Case Barcode."), "PhatKey", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          if (num2 == 6)
          {
            Common_Barcode commonBarcode = new Common_Barcode();
            if (commonBarcode.ShowDialog((IWin32Window) this) == DialogResult.OK)
            {
              string str3 = commonBarcode.textBox3.Text.Substring(0, 17);
              subKey2.SetValue(str3.Substring(0, 17), (object) str1);
            }
          }
        }
      }
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 != 4 && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2382) == 4 && ((int) *(byte*) (^(int&) @_Module.struct123_0 + 2028) != 0 && (int) *(byte*) (^(int&) @_Module.struct123_0 + 2028) != (int) byte.MaxValue))
      {
        Struct73 struct73;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) &struct73, (void*) (^(int&) @_Module.struct123_0 + 610), 20U);
        string str2 = "";
        _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
        _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct18_9, __arglist (out struct73));
        string str3 = str2 + new string((sbyte*) &struct68);
        subKey2.SetValue(str3.Substring(0, 17), (object) str1);
      }
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 5 && (int) *(byte*) (^(int&) @_Module.struct123_0 + 2028) != 0 && (int) *(byte*) (^(int&) @_Module.struct123_0 + 2028) != (int) byte.MaxValue)
      {
        string str2 = "";
        _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct18_9, __arglist (^(int&) @_Module.struct123_0 + 2028));
        string str3 = str2 + new string((sbyte*) &struct68);
        subKey2.SetValue(str3.Substring(0, 17), (object) str1);
      }
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 6 && (int) *(byte*) (^(int&) @_Module.struct123_0 + 2028) != 0 && (int) *(byte*) (^(int&) @_Module.struct123_0 + 2028) != (int) byte.MaxValue)
      {
        string str2 = "";
        _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct18_9, __arglist (^(int&) @_Module.struct123_0 + 2028));
        string str3 = str2 + new string((sbyte*) &struct68);
        subKey2.SetValue(str3.Substring(0, 17), (object) str1);
      }
      subKey2.Close();
      return num1;
    }

    private unsafe void method_23(int int_16)
    {
      Struct68 struct68;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct68 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct68&) ((IntPtr) &struct68 + 1), 0, 259);
      string text1 = this.textBox9.Text;
      string text2 = this.label37.Text;
      string text3 = this.label6.Text;
      string text4 = this.label7.Text;
      string text5 = this.label8.Text;
      string text6 = this.label16.Text;
      string text7 = this.label44.Text;
      string text8 = this.label40.Text;
      string text9 = this.textBox15.Text;
      int num1 = 0;
      string str1 = Convert.ToString(int_16);
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + str1);
      if (subKey.GetValue("Key") != null)
      {
        if (subKey.GetValue("Date1") == null && subKey.GetValue("Updated") != null)
          subKey.SetValue("Date1", subKey.GetValue("Updated"));
        int num2;
        _Module.time(&num2);
        GStruct85* pGstruct85_0 = _Module.localtime(&num2);
        subKey.SetValue("Updated", (object) Convert.ToString(new string(_Module.asctime(pGstruct85_0))).Substring(0, 24));
        this.textBox6.AppendText("Key database updated" + "\r\n\r\n");
        this.label21.Text = "DVD Key @";
        do
        {
          ++num1;
        }
        while (subKey.GetValue("Date" + Convert.ToString(num1)) != null);
        subKey.SetValue("Date" + Convert.ToString(num1), (object) Convert.ToString(new string(_Module.asctime(pGstruct85_0))).Substring(0, 24));
        subKey.SetValue("LastFile", (object) text9);
      }
      else
      {
        subKey.SetValue("Index", (object) str1);
        subKey.SetValue("Key", (object) text1);
        subKey.SetValue("KeyLoc", (object) text2);
        subKey.SetValue("Vendor", (object) text3);
        subKey.SetValue(new string((sbyte*) &_Module.struct23_0), (object) text4);
        subKey.SetValue("Rev", (object) text5);
        subKey.SetValue("Type", (object) text6);
        subKey.SetValue("Osig", (object) text7);
        subKey.SetValue("LastFile", (object) text9);
        if (string.Compare(text7, text8) != 0)
          subKey.SetValue("Spoof", (object) text8);
        int num2;
        _Module.time(&num2);
        GStruct85* pGstruct85_0 = _Module.localtime(&num2);
        subKey.SetValue(new string((sbyte*) &_Module.struct22_0), (object) Convert.ToString(new string(_Module.asctime(pGstruct85_0))).Substring(0, 24));
        this.textBox6.AppendText("Key added to database" + "\r\n\r\n");
        this.label21.Text = "DVD Key *";
      }
      string str2;
      string path;
      if (this.bool_2)
      {
        if (this.string_9 == "")
        {
          str2 = "N/A";
          path = "N/A";
          if (this.textBox15.TextLength != 0)
          {
            path = Path.GetDirectoryName(this.textBox15.Text);
            str2 = Path.GetFileName(path);
          }
        }
        else
        {
          str2 = this.string_9;
          path = this.string_10;
        }
      }
      else if (this.textBox15.TextLength != 0)
      {
        path = Path.GetDirectoryName(this.textBox15.Text);
        str2 = Path.GetFileName(path);
      }
      else
      {
        path = "N/A";
        str2 = "N/A";
      }
      subKey.SetValue("JobName", (object) str2);
      subKey.SetValue("WorkingDir", (object) path);
      subKey.Close();
    }

    private unsafe void method_24()
    {
      string str1 = (string) null;
      RegistryKey subKey1 = Registry.CurrentUser.CreateSubKey("JF_KeyDB");
      int num1;
      if (subKey1.GetValue("Index") != null)
      {
        str1 = subKey1.GetValue("Index").ToString();
        num1 = Convert.ToInt32(str1) + 1;
      }
      subKey1.Close();
      string str2 = "JungleFlasher Key Database - dumped at ";
      int num2;
      _Module.time(&num2);
      GStruct85* pGstruct85_0 = _Module.localtime(&num2);
      string str3 = str2 + Convert.ToString(new string(_Module.asctime(pGstruct85_0))).Substring(0, 24) + "\r\n" + str1 + " keys present!" + "\r\n";
      for (int index = 1; index < num1; ++index)
      {
        RegistryKey subKey2 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + Convert.ToString(index));
        if (subKey2.GetValue("Key") != null)
        {
          string str4 = subKey2.GetValue("Key").ToString();
          string str5 = subKey2.GetValue("KeyLoc").ToString();
          string str6 = subKey2.GetValue("Vendor").ToString();
          string str7 = subKey2.GetValue(new string((sbyte*) &_Module.struct23_0)).ToString();
          string str8 = subKey2.GetValue("Rev").ToString();
          string str9 = subKey2.GetValue("Type").ToString();
          string str10 = subKey2.GetValue("JobName").ToString();
          string str11 = subKey2.GetValue(new string((sbyte*) &_Module.struct22_0)).ToString();
          string strA1 = subKey2.GetValue("Spoof") == null ? "" : subKey2.GetValue("Spoof").ToString();
          string strA2 = subKey2.GetValue("Updated") == null ? "" : subKey2.GetValue("Updated").ToString();
          string str12 = subKey2.GetValue("Osig").ToString();
          string str13 = subKey2.GetValue("WorkingDir").ToString();
          subKey2.Close();
          string str14 = str3 + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" + "\r\n\r\n" + (object) "  " + Convert.ToString(index) + "\t" + (string) __arglist ("Job: ", str10, "\t", " Created: ", str11, "\r\n\r\n") + "  " + str13 + "\r\n\r\n" + (object) "  Osig:  [" + str12 + "]" + (string) __arglist ("\r\n");
          if (string.Compare(strA1, "") != 0)
            str14 = str14 + (object) "  Spoof: [" + strA1 + "]" + (string) __arglist ("\r\n");
          str3 = str14 + "\r\n" + "  " + "                                                          ".Insert(0, str6).Insert(9, str7).Insert(19, str8).Insert(27, str9) + "\r\n\r\n" + (object) "  Key: " + str4 + " @ " + (string) __arglist (str5, "\r\n\r\n");
          if (string.Compare(strA2, "") != 0)
            str3 = str3 + "  Last Updated: " + strA2 + "\r\n\r\n";
        }
      }
      string s = str3 + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" + "\r\n";
      Process process = new Process();
      process.StartInfo.FileName = new string((sbyte*) &_Module.struct72_0);
      process.Start();
      process.WaitForInputIdle();
      GStruct11* windowA = _Module.FindWindowA((sbyte*) &_Module.struct22_3, (sbyte*) 0);
      sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi("JungleFlasher Key Database");
      if ((IntPtr) windowA == IntPtr(-1))
        return;
      _Module.SendMessageA(windowA, 12U, 0U, (int) numPtr);
      _Module.SendMessageA(_Module.FindWindowExA(windowA, (GStruct11*) 0, (sbyte*) &_Module.struct35_123, (sbyte*) 0), 12U, 0U, (int) (void*) Marshal.StringToHGlobalAnsi(s));
    }

    private unsafe void method_25()
    {
      string str1 = (string) null;
      RegistryKey subKey1 = Registry.CurrentUser.CreateSubKey("JF_KeyDB");
      int num1;
      if (subKey1.GetValue("Index") != null)
      {
        str1 = subKey1.GetValue("Index").ToString();
        num1 = Convert.ToInt32(str1) + 1;
      }
      subKey1.Close();
      RegistryKey subKey2 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\SerList");
      string str2 = subKey2.ValueCount.ToString();
      string[] valueNames = subKey2.GetValueNames();
      string str3 = ",,JungleFlasher Key Database,";
      int num2;
      _Module.time(&num2);
      GStruct85* pGstruct85_0 = _Module.localtime(&num2);
      string s = str3 + Convert.ToString(new string(_Module.asctime(pGstruct85_0))).Substring(0, 24) + (object) "," + str1 + " keys present!" + (string) __arglist ("\n");
      for (int index1 = 1; index1 < num1; ++index1)
      {
        RegistryKey subKey3 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + Convert.ToString(index1));
        if (subKey3.GetValue("Key") != null)
        {
          string str4 = subKey3.GetValue("Key").ToString();
          string str5 = subKey3.GetValue("KeyLoc").ToString();
          string str6 = subKey3.GetValue("Vendor").ToString();
          string str7 = subKey3.GetValue(new string((sbyte*) &_Module.struct23_0)).ToString();
          string str8 = subKey3.GetValue("Rev").ToString();
          string str9 = subKey3.GetValue("Type").ToString();
          string str10 = subKey3.GetValue("JobName").ToString();
          string str11 = subKey3.GetValue(new string((sbyte*) &_Module.struct22_0)).ToString();
          string strA1 = subKey3.GetValue("Spoof") == null ? "" : subKey3.GetValue("Spoof").ToString();
          string strA2 = subKey3.GetValue("Updated") == null ? "" : subKey3.GetValue("Updated").ToString();
          string str12 = subKey3.GetValue("Osig").ToString();
          string str13 = subKey3.GetValue("WorkingDir").ToString();
          string strA3 = subKey3.GetValue("LastFile") == null ? "" : subKey3.GetValue("LastFile").ToString();
          subKey3.Close();
          string strA4 = "";
          for (int index2 = 0; index2 < Convert.ToInt32(str2); ++index2)
          {
            if (string.Compare(subKey2.GetValue(valueNames[index2]).ToString(), Convert.ToString(index1)) == 0)
            {
              strA4 = valueNames[index2];
              break;
            }
          }
          string str14 = s + Convert.ToString(index1) + "," + str10 + "," + str11 + "," + str13 + "," + str12 + ",";
          string str15 = (string.Compare(strA1, "") == 0 ? str14 + "," : str14 + strA1 + ",") + str6 + "," + str7 + "," + str8 + "," + str9 + "," + str4 + "," + str5 + ",";
          string str16 = string.Compare(strA2, "") == 0 ? str15 + "n/a," : str15 + strA2 + ",";
          string str17 = string.Compare(strA3, "") == 0 ? str16 + "n/a," : str16 + strA3 + ",";
          s = string.Compare(strA4, "") == 0 ? str17 + "n/a\n" : str17 + strA4 + "\n";
        }
      }
      subKey2.Close();
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "KeyDb CSV file (*.csv)|*.csv|All Files (*.*)|*.*";
      saveFileDialog.DefaultExt = ".csv";
      saveFileDialog.FileName = "JF_Key_db.csv";
      saveFileDialog.OverwritePrompt = false;
      if (saveFileDialog.ShowDialog() != DialogResult.OK)
        return;
      sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(saveFileDialog.FileName));
      this.string_13 = saveFileDialog.FileName;
      GStruct5* pGstruct5_0 = _Module.fopen(pSbyte_0, (sbyte*) &_Module.struct18_2);
      if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open log file", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        _Module.fputs((sbyte*) (void*) Marshal.StringToHGlobalAnsi(s), pGstruct5_0);
        _Module.fclose(pGstruct5_0);
      }
    }

    private unsafe void method_26()
    {
      string str1 = (string) null;
      string[,] strArray = (string[,]) null;
      OpenFileDialog openFileDialog = new OpenFileDialog();
      openFileDialog.Filter = "KeyDB Backup file (*.csv)|*.csv|All Files (*.*)|*.*";
      openFileDialog.FileName = "KeyDB.csv";
      openFileDialog.DefaultExt = ".csv";
      openFileDialog.CheckFileExists = true;
      openFileDialog.CheckPathExists = true;
      openFileDialog.RestoreDirectory = false;
      if (openFileDialog.ShowDialog() == DialogResult.OK)
      {
        GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(openFileDialog.FileName)), (sbyte*) &_Module.struct6_3);
        if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_9 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) 0, _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(openFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_9);
          return;
        }
        else
        {
          Struct27 struct27;
          _Module.fgets((sbyte*) &struct27, 1024, pGstruct5_0);
          sbyte* numPtr = _Module.strtok((sbyte*) &struct27, (sbyte*) &_Module.struct6_4);
          numPtr = _Module.strtok((sbyte*) 0, (sbyte*) &_Module.struct6_4);
          str1 = "" + new string(_Module.strtok(_Module.strtok((sbyte*) 0, (sbyte*) &_Module.struct6_4), (sbyte*) &_Module.struct6_5));
          strArray = new string[Convert.ToInt32(str1), 15];
          for (int index1 = 0; index1 < Convert.ToInt32(str1); ++index1)
          {
            _Module.fgets((sbyte*) &struct27, 1024, pGstruct5_0);
            string str2 = "" + new string(_Module.strtok((sbyte*) &struct27, (sbyte*) &_Module.struct6_4));
            strArray[index1, 0] = str2;
            for (int index2 = 1; index2 < 15; ++index2)
            {
              string str3 = "" + new string(_Module.strtok((sbyte*) 0, (sbyte*) &_Module.struct18_3));
              strArray[index1, index2] = str3;
            }
          }
        }
      }
      RegistryKey subKey1 = Registry.CurrentUser.CreateSubKey("JF_KeyDB_Import");
      subKey1.SetValue("Index", (object) Convert.ToString(str1));
      subKey1.Close();
      for (int index = 0; index < Convert.ToInt32(str1); ++index)
      {
        RegistryKey subKey2 = Registry.CurrentUser.CreateSubKey(new string((sbyte*) &_Module.struct16_4) + Convert.ToString(index + 1));
        subKey2.SetValue("Index", (object) Convert.ToString(index + 1));
        subKey2.SetValue("JobName", (object) strArray[index, 1]);
        subKey2.SetValue("Created", (object) strArray[index, 2]);
        subKey2.SetValue("Working", (object) strArray[index, 3]);
        subKey2.SetValue("Osig", (object) strArray[index, 4]);
        subKey2.SetValue("Spoof", (object) strArray[index, 5]);
        subKey2.SetValue("Vendor", (object) strArray[index, 6]);
        subKey2.SetValue("Model", (object) strArray[index, 7]);
        subKey2.SetValue("Rev", (object) strArray[index, 8]);
        subKey2.SetValue("Type", (object) strArray[index, 9]);
        subKey2.SetValue("Key", (object) strArray[index, 10]);
        subKey2.SetValue("KeyLoc", (object) strArray[index, 11]);
        subKey2.SetValue("Updated", (object) strArray[index, 12]);
        subKey2.SetValue("Lastfile", (object) strArray[index, 13]);
        subKey2.Close();
      }
      for (int index = 0; index < Convert.ToInt32(str1); ++index)
      {
        RegistryKey subKey2 = Registry.CurrentUser.CreateSubKey(new string((sbyte*) &_Module.struct1_2));
        subKey2.SetValue(strArray[index, 10], (object) Convert.ToString(index + 1));
        subKey2.Close();
      }
      for (int index = 0; index < Convert.ToInt32(str1); ++index)
      {
        RegistryKey subKey2 = Registry.CurrentUser.CreateSubKey(new string((sbyte*) &_Module.struct1_3));
        subKey2.SetValue(strArray[index, 14], (object) Convert.ToString(index + 1));
        subKey2.Close();
      }
    }

    private unsafe void method_27()
    {
      if (string.Compare(this.textBox9.Text, "4DCB62B1031A08033818E62E95EE11EF") == 0)
      {
        Donate donate = new Donate();
        try
        {
          Process.Start("http://JungleFlasher.net/donate.html");
        }
        catch (Exception ex)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        Application.Exit();
      }
      if (this.bool_4 || this.textBox9.TextLength == 0)
        return;
      this.method_23(this.method_22(this.textBox9.Text));
    }

    private void method_28()
    {
      if (string.Compare(this.textBox9.Text, "") == 0)
        return;
      int num1 = this.method_22(this.textBox9.Text);
      int num2 = (int) new Job_history()
      {
        int_0 = num1
      }.ShowDialog((IWin32Window) this);
    }

    private unsafe void method_29()
    {
      for (int index = 0; index < 4; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &_Module.struct123_0 + index * 4) = (int) _Module.malloc(2392U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct123_0 + index * 4) == 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show("Malloc Failed Struct:" + Convert.ToString(index), "SetupFI", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memset((void*) ^(int&) ((IntPtr) &_Module.struct123_0 + index * 4), 0, 2392U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct121_0 + index * 2392 + 2388) != 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.free((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + index * 2392 + 2388));
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &_Module.struct121_0 + index * 2392 + 2388) = (int) _Module.malloc(262144U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct121_0 + index * 2392 + 2388) == 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show("Malloc Failed Buffer:" + Convert.ToString(index), "SetupFI", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
      }
    }

    private unsafe int method_30(int int_16)
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte* numPtr = (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + int_16 * 2392 + 2388);
      uint num1 = 0U;
      uint num2 = 0U;
      uint num3 = 45056U;
      while (num3 < 110592U)
      {
        num2 += num1;
        num1 = (uint) ((int) numPtr[(int) num3 + 3] << 24 | (int) numPtr[(int) num3 + 2] << 16 | (int) numPtr[(int) num3 + 1] << 8) | (uint) numPtr[(int) num3];
        num3 += 4U;
      }
      uint num4;
      switch ((uint) -(int) num2)
      {
        case 789421430U:
          num4 = 1U;
          break;
        case 529584510U:
          num4 = 2U;
          break;
        case 1731285449U:
          num4 = 3U;
          break;
        case 4236510092U:
          num4 = 4U;
          break;
        case 17588177U:
          num4 = 5U;
          break;
        case 2999884414U:
          num4 = 6U;
          break;
        case 253026502U:
          num4 = 7U;
          break;
        case 771127765U:
          num4 = 8U;
          break;
        case 2680630850U:
          num4 = 9U;
          break;
        case 3231213612U:
          num4 = 10U;
          break;
        case 1482142839U:
          num4 = 11U;
          break;
        case 2691219462U:
          num4 = 12U;
          break;
        case 811045522U:
          num4 = 13U;
          break;
        case 1009034336U:
          num4 = 14U;
          break;
        case 3402234535U:
          num4 = 15U;
          break;
        default:
          return 0;
      }
      return (int) num4;
    }

    private unsafe int method_31(int int_16)
    {
      Struct76 struct76_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct76_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct76&) ((IntPtr) &struct76_1 + 1), 0, 259);
      Struct76 struct76_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct76_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct76&) ((IntPtr) &struct76_2 + 1), 0, 259);
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) -1;
      Struct42 struct42;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct42 = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 1) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 2) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 3) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 4) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 5) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 6) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 7) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 8) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 9) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 15) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 16) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 17) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 18) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct42 + 19) = (sbyte) -1;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) -8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) 55;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) -31;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) -112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) -95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) 82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) 46;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) 9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) -111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) 81;
      Struct28 struct28_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_3 = (sbyte) 118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 1) = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 2) = (sbyte) -49;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 3) = (sbyte) 26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 4) = sbyte.MinValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 5) = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 6) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 7) = (sbyte) -69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 8) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 9) = (sbyte) 42;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 10) = (sbyte) 105;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 11) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 12) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 13) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 14) = (sbyte) -16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 15) = (sbyte) 24;
      Struct41 struct41_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct41_1 = (sbyte) 27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 1) = (sbyte) 41;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 2) = (sbyte) -47;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 3) = (sbyte) -95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 4) = (sbyte) -99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 5) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 6) = (sbyte) -100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 7) = (sbyte) -24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 8) = (sbyte) -124;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 9) = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 10) = (sbyte) 21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 11) = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 12) = (sbyte) -103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 13) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 14) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 15) = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 16) = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_1 + 17) = (sbyte) 126;
      Struct41 struct41_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct41_2 = (sbyte) 27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 1) = (sbyte) 41;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 2) = (sbyte) -47;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 3) = (sbyte) -95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 4) = (sbyte) -99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 5) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 6) = (sbyte) -100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 7) = (sbyte) -24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 8) = (sbyte) -124;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 9) = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 10) = (sbyte) 21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 11) = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 12) = (sbyte) -99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 13) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 14) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 15) = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 16) = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_2 + 17) = (sbyte) 126;
      Struct41 struct41_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct41_3 = (sbyte) 27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 1) = (sbyte) 41;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 2) = (sbyte) -47;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 3) = (sbyte) -95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 4) = (sbyte) -99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 5) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 6) = (sbyte) -100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 7) = (sbyte) -24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 8) = (sbyte) -124;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 9) = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 10) = (sbyte) 21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 11) = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 12) = (sbyte) -99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 13) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 14) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 15) = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 16) = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_3 + 17) = (sbyte) 126;
      Struct41 struct41_4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct41_4 = (sbyte) 27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 1) = (sbyte) 41;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 2) = (sbyte) -47;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 3) = (sbyte) -95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 4) = (sbyte) -99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 5) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 6) = (sbyte) -100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 7) = (sbyte) -24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 8) = (sbyte) -124;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 9) = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 10) = (sbyte) 21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 11) = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 12) = (sbyte) -103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 13) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 14) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 15) = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 16) = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_4 + 17) = (sbyte) 126;
      Struct41 struct41_5;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct41_5 = (sbyte) 93;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 1) = (sbyte) 44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 2) = (sbyte) -45;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 3) = (sbyte) -18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 4) = (sbyte) 23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 5) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 6) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 7) = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 8) = (sbyte) -50;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 9) = (sbyte) -48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 10) = (sbyte) -104;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 11) = (sbyte) -5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 12) = (sbyte) -111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 13) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 14) = (sbyte) -7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 15) = (sbyte) -20;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 16) = sbyte.MinValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_5 + 17) = (sbyte) -70;
      Struct41 struct41_6;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct41_6 = (sbyte) 72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 1) = (sbyte) 70;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 2) = (sbyte) -65;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 3) = (sbyte) -87;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 4) = (sbyte) -64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 5) = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 6) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 7) = (sbyte) -123;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 8) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 9) = (sbyte) 23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 10) = (sbyte) -19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 11) = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 12) = (sbyte) -11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 13) = (sbyte) -32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 14) = (sbyte) 100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 15) = (sbyte) 23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 16) = (sbyte) -11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_6 + 17) = (sbyte) -111;
      Struct41 struct41_7;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct41_7 = (sbyte) -53;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 1) = (sbyte) -15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 2) = (sbyte) -75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 3) = (sbyte) 55;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 4) = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 5) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 6) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 7) = (sbyte) 7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 8) = (sbyte) -43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 9) = (sbyte) 55;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 10) = (sbyte) -116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 11) = (sbyte) -41;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 12) = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 13) = (sbyte) 39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 14) = (sbyte) 93;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 15) = (sbyte) -84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 16) = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_7 + 17) = (sbyte) -79;
      Struct41 struct41_8;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct41_8 = (sbyte) 124;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 1) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 2) = (sbyte) 22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 3) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 4) = (sbyte) -29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 5) = (sbyte) 9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 6) = (sbyte) 24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 7) = (sbyte) -34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 8) = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 9) = (sbyte) 80;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 10) = (sbyte) 24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 11) = (sbyte) -88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 12) = (sbyte) -66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 13) = (sbyte) 82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 14) = (sbyte) -38;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 15) = (sbyte) -15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 16) = (sbyte) 126;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_8 + 17) = (sbyte) 80;
      Struct41 struct41_9;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct41_9 = (sbyte) 87;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 1) = (sbyte) -18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 2) = (sbyte) 39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 3) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 4) = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 5) = (sbyte) -56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 6) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 7) = (sbyte) 61;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 8) = (sbyte) -115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 9) = (sbyte) -83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 10) = (sbyte) 117;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 11) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 12) = (sbyte) 33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 13) = (sbyte) -7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 14) = (sbyte) -51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 15) = (sbyte) -101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 16) = (sbyte) -118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_9 + 17) = (sbyte) -47;
      Struct41 struct41_10;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct41_10 = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 1) = (sbyte) -10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 2) = (sbyte) -109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 3) = (sbyte) 70;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 4) = (sbyte) 118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 5) = (sbyte) -64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 6) = (sbyte) 60;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 7) = (sbyte) -33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 8) = (sbyte) -78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 9) = (sbyte) 49;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 10) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 11) = (sbyte) -123;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 12) = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 13) = (sbyte) -123;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 14) = (sbyte) -43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 15) = (sbyte) 13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 16) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_10 + 17) = (sbyte) -30;
      Struct41 struct41_11;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct41_11 = (sbyte) -69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 1) = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 2) = (sbyte) -76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 3) = (sbyte) 20;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 4) = (sbyte) 49;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 5) = (sbyte) -47;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 6) = (sbyte) -111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 7) = (sbyte) -66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 8) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 9) = (sbyte) -24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 10) = (sbyte) 25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 11) = (sbyte) -123;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 12) = (sbyte) 21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 13) = (sbyte) 113;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 14) = (sbyte) 45;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 15) = (sbyte) -119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 16) = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_11 + 17) = (sbyte) 19;
      Struct41 struct41_12;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct41_12 = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 1) = (sbyte) 41;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 2) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 3) = (sbyte) -84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 4) = (sbyte) -32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 5) = (sbyte) -12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 6) = (sbyte) 33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 7) = (sbyte) -46;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 8) = (sbyte) 22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 9) = (sbyte) -71;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 10) = (sbyte) -95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 11) = (sbyte) -109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 12) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 13) = (sbyte) 20;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 14) = (sbyte) 57;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 15) = (sbyte) -99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 16) = (sbyte) 41;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct41_12 + 17) = (sbyte) 78;
      Struct28 struct28_4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_4 = (sbyte) -64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 1) = (sbyte) -32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 2) = (sbyte) 126;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 3) = (sbyte) 9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 4) = sbyte.MaxValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 5) = (sbyte) -22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 6) = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 7) = (sbyte) 70;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 8) = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 9) = (sbyte) -17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 10) = (sbyte) 84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 11) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 13) = (sbyte) -48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 14) = (sbyte) -32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 15) = (sbyte) 34;
      Struct28 struct28_5;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_5 = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 1) = (sbyte) -48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 2) = sbyte.MinValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 3) = (sbyte) -28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 4) = (sbyte) -11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 5) = (sbyte) 58;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 6) = (sbyte) -11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 7) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 8) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 9) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 10) = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 11) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 12) = (sbyte) -82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 13) = (sbyte) 58;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 14) = (sbyte) 112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 15) = (sbyte) 2;
      Struct28 struct28_6;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_6 = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 1) = (sbyte) -43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 3) = (sbyte) -28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 4) = (sbyte) -11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 5) = (sbyte) 58;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 6) = (sbyte) -11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 7) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 8) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 9) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 10) = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 11) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 12) = (sbyte) -82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 13) = (sbyte) 58;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 14) = (sbyte) 112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 15) = (sbyte) 2;
      Struct28 struct28_7;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_7 = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 1) = (sbyte) -48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 2) = sbyte.MinValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 3) = (sbyte) -28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 4) = (sbyte) -11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 5) = (sbyte) 58;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 6) = (sbyte) -11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 7) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 8) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 9) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 10) = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 11) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 12) = (sbyte) -82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 13) = (sbyte) 58;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 14) = (sbyte) 112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 15) = (sbyte) 2;
      Struct28 struct28_8;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_8 = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 1) = (sbyte) -43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 2) = sbyte.MinValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 3) = (sbyte) -28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 4) = (sbyte) -11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 5) = (sbyte) 58;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 6) = (sbyte) -11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 7) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 8) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 9) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 10) = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 11) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 12) = (sbyte) -82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 13) = (sbyte) 58;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 14) = (sbyte) 112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 15) = (sbyte) 2;
      Struct28 struct28_9;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_9 = (sbyte) -17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 1) = (sbyte) -64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 2) = (sbyte) -32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 3) = (sbyte) 126;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 4) = (sbyte) 9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 5) = sbyte.MaxValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 6) = (sbyte) -22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 7) = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 8) = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 9) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 10) = (sbyte) -17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 11) = (sbyte) 84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 12) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 14) = (sbyte) -48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 15) = (sbyte) -32;
      Struct28 struct28_10;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_10 = (sbyte) 123;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 1) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 2) = (sbyte) -28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 3) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 4) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 5) = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 6) = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 7) = (sbyte) 62;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 8) = (sbyte) 47;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 9) = (sbyte) -113;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 10) = (sbyte) 53;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 11) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 12) = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 13) = (sbyte) -115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 14) = (sbyte) 51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 15) = (sbyte) -116;
      Struct28 struct28_11;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_11 = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 1) = (sbyte) 87;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 3) = (sbyte) 126;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 4) = (sbyte) 33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 5) = sbyte.MaxValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 6) = (sbyte) 67;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 7) = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 8) = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 9) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 10) = (sbyte) -17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 11) = (sbyte) 100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 12) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 13) = (sbyte) 96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 14) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 15) = (sbyte) 34;
      Struct28 struct28_12;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_12 = sbyte.MinValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 1) = (sbyte) -29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 2) = (sbyte) -127;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 3) = (sbyte) -60;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 4) = (sbyte) 7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 5) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 6) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 7) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 8) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 9) = (sbyte) -118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 10) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 11) = (sbyte) -85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 12) = (sbyte) 98;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 13) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 14) = (sbyte) 31;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 15) = (sbyte) 116;
      Struct28 struct28_13;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_13 = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 1) = (sbyte) 55;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 2) = (sbyte) -16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 3) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 4) = (sbyte) -13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 5) = (sbyte) -16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 6) = (sbyte) -46;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 7) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 8) = (sbyte) -28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 9) = (sbyte) -11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 10) = (sbyte) 30;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 11) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 12) = sbyte.MaxValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 13) = (sbyte) -10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 14) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 15) = (sbyte) -119;
      Struct28 struct28_14;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_14 = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 1) = (sbyte) -92;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 2) = (sbyte) -16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 3) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 4) = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 5) = (sbyte) -16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 6) = (sbyte) -46;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 7) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 8) = (sbyte) -28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 9) = (sbyte) -11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 10) = (sbyte) 30;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 11) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 12) = sbyte.MaxValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 13) = (sbyte) -10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 14) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 15) = (sbyte) -119;
      Struct28 struct28_15;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_15 = (sbyte) -47;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 1) = (sbyte) 62;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 2) = (sbyte) -74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 3) = (sbyte) -60;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 4) = (sbyte) -116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 5) = (sbyte) -84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 6) = (sbyte) 26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 7) = (sbyte) -52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 8) = (sbyte) -60;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 9) = (sbyte) -80;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 10) = (sbyte) 82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 11) = (sbyte) -13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 12) = (sbyte) -49;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 13) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 14) = (sbyte) 44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 15) = (sbyte) -7;
      Struct28 struct28_16;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_16 = (sbyte) -46;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 1) = (sbyte) -31;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 2) = (sbyte) -15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 3) = (sbyte) -31;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 4) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 5) = (sbyte) 103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 7) = (sbyte) 29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 8) = (sbyte) 82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 9) = (sbyte) -26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 10) = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 11) = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 12) = (sbyte) -95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 13) = (sbyte) -95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 14) = (sbyte) -113;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 15) = (sbyte) 64;
      Struct28 struct28_17;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_17 = (sbyte) 13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 1) = (sbyte) -31;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 2) = (sbyte) -73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 3) = (sbyte) -32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 4) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 5) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 6) = (sbyte) -15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 7) = (sbyte) 42;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 8) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 9) = (sbyte) 42;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 10) = (sbyte) -22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 11) = (sbyte) -9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 12) = (sbyte) -21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 13) = (sbyte) -6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 14) = (sbyte) 34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 15) = (sbyte) 96;
      Struct28 struct28_18;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_18 = (sbyte) 15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 1) = (sbyte) 62;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 2) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 3) = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 4) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 5) = (sbyte) -38;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 6) = (sbyte) 15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 7) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 8) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 9) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 10) = (sbyte) -26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 12) = (sbyte) -38;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 13) = (sbyte) -38;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 14) = (sbyte) -7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 15) = (sbyte) 98;
      Struct28 struct28_19;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_19 = (sbyte) 76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 1) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 2) = (sbyte) 83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 3) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 4) = (sbyte) -65;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 5) = (sbyte) -41;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 6) = (sbyte) 103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 7) = (sbyte) 44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 8) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 9) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 10) = (sbyte) 106;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 11) = (sbyte) -28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 12) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 13) = (sbyte) -55;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 14) = (sbyte) -127;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 15) = (sbyte) -8;
      Struct28 struct28_20;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_20 = (sbyte) 76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 1) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 2) = (sbyte) 83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 3) = (sbyte) 33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 4) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 5) = (sbyte) -62;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 6) = (sbyte) 103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 7) = (sbyte) 44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 8) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 9) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 10) = (sbyte) 106;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 11) = (sbyte) -28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 12) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 13) = (sbyte) -55;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 14) = (sbyte) -127;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 15) = (sbyte) -8;
      Struct77 struct77_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct77_1 = (sbyte) -39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_1 + 1) = (sbyte) 108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_1 + 2) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_1 + 3) = (sbyte) 39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_1 + 4) = (sbyte) 95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_1 + 5) = (sbyte) 82;
      Struct77 struct77_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct77_2 = (sbyte) -42;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_2 + 1) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_2 + 2) = (sbyte) 104;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_2 + 3) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_2 + 4) = (sbyte) -48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_2 + 5) = (sbyte) 99;
      Struct77 struct77_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct77_3 = (sbyte) -15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_3 + 1) = (sbyte) 76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_3 + 2) = (sbyte) -74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_3 + 3) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_3 + 4) = (sbyte) 75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_3 + 5) = (sbyte) -85;
      Struct77 struct77_4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct77_4 = (sbyte) -100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_4 + 1) = (sbyte) 77;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_4 + 2) = (sbyte) -55;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_4 + 3) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_4 + 4) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_4 + 5) = (sbyte) -48;
      Struct28 struct28_21;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_21 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_21 + 1), 0, 15);
      Struct71 struct71;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct71 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct71&) ((IntPtr) &struct71 + 1), 0, 15);
      Struct55 struct55;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct55 = (sbyte) -43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 1) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 2) = (sbyte) -71;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 3) = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 4) = (sbyte) 21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 5) = (sbyte) -46;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 6) = (sbyte) 40;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 7) = (sbyte) 34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 8) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 9) = (sbyte) -111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 10) = (sbyte) -18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 11) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 12) = (sbyte) -9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 13) = (sbyte) 9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 14) = (sbyte) -7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 15) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 16) = (sbyte) 80;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 17) = (sbyte) -8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 18) = (sbyte) -93;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 19) = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 20) = (sbyte) -108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 21) = (sbyte) 106;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 22) = (sbyte) -84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 23) = (sbyte) 54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 24) = (sbyte) -76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 25) = (sbyte) -101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 26) = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 27) = (sbyte) 62;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 28) = (sbyte) 63;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 29) = (sbyte) -82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 30) = (sbyte) -95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 31) = (sbyte) 65;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte* pByte_0 = (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + int_16 * 2392 + 2388);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte* pByte_1 = (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172);
      int index1 = 8192;
      while (index1 < 12288 && ((int) pByte_0[index1] != 5 || (int) pByte_0[index1 + 1] != 128 || ((int) pByte_0[index1 + 2] != 0 || (int) pByte_0[index1 + 3] != 50) || ((int) pByte_0[index1 + 5] != 0 || (int) pByte_0[index1 + 7] != 0)))
        ++index1;
      if (index1 != 12288)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) (pByte_0 + index1), 96U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) (pByte_0 + (index1 + 8)), 28U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 560) = index1;
        this.textBox6.AppendText("Inquiry string found" + "\r\n");
      }
      int index2 = 8192;
      while (index2 < 12288 && ((int) pByte_0[index2] != 192 || (int) pByte_0[index2 + 1] != 133 || ((int) pByte_0[index2 + 2] != 0 || (int) pByte_0[index2 + 3] != 0) || ((int) pByte_0[index2 + 4] != 0 || (int) pByte_0[index2 + 5] != 0)))
        ++index2;
      if (index2 != 12288)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) (pByte_0 + index2), 180U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 564) = index2;
        this.textBox6.AppendText("Identify string found" + "\r\n");
      }
      if (index1 == 8372)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 1;
        if ((int) pByte_0[2152] == 230 && (int) pByte_0[2153] == 160 && (int) pByte_0[2158] == 189)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_3, 28U);
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_4, 28U);
        }
        if ((int) pByte_0[65504] != 0 && (int) pByte_0[65504] != (int) byte.MaxValue)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) (pByte_0 + 65504), 32U);
        }
        else if (_Module.memcmp((void*) &struct28_13, (void*) (pByte_0 + 9088), 16U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct74_0, 10U);
        }
        else if (_Module.memcmp((void*) &struct28_14, (void*) (pByte_0 + 9088), 16U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct74_1, 10U);
          if ((int) pByte_0[20480] == 2)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct74_2, 10U);
          }
          if ((int) pByte_0[23883] == 22)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct74_3, 10U);
          }
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
        }
        uint num1 = 16406U;
        while (num1 < 20480U)
        {
          if (_Module.memcmp((void*) (pByte_0 + (int) num1), (void*) &struct42, 20U) != 0)
          {
            num1 += 42U;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = (int) num1 - 42 + 4;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) (pByte_0 + ((int) num1 - 42 + 4)), 16U);
            break;
          }
        }
        if (num1 > 18912U)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num2 = (int) MessageBox.Show("Drive Key not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          return 0;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (int_16 == 0 && _Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) &struct28_21, 16U) == 0)
          {
            this.method_53();
            this.method_54();
          }
        }
      }
      else if (index1 == 8370)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 2;
        int index3 = 245760;
        while (index3 < 253952 && ((int) pByte_0[index3] != 5 || (int) pByte_0[index3 + 1] != 128 || ((int) pByte_0[index3 + 2] != 0 || (int) pByte_0[index3 + 3] != 50) || ((int) pByte_0[index3 + 5] != 0 || (int) pByte_0[index3 + 7] != 0)))
          ++index3;
        if (index3 == 253952)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show("Inquiry string not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          return 0;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 560) = index3;
          int index4 = 245760;
          while (index4 < 253952 && ((int) pByte_0[index4] != 192 || (int) pByte_0[index4 + 1] != 133 || ((int) pByte_0[index4 + 2] != 0 || (int) pByte_0[index4 + 3] != 0) || ((int) pByte_0[index4 + 4] != 0 || (int) pByte_0[index4 + 5] != 0)))
            ++index4;
          if (index4 == 253952)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num = (int) MessageBox.Show("Identify string not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            return 0;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 564) = index4;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) (pByte_0 + index3), 96U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) (pByte_0 + (index3 + 8)), 28U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) (pByte_0 + index4), 180U);
            uint num1 = (uint) this.method_30(int_16);
            if ((int) num1 == 0)
              return 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) num1;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 20224;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) (pByte_0 + 20224), 16U);
            if ((int) num1 == 1)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_5, 28U);
            }
            else if ((int) num1 == 2)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_6, 28U);
            }
            else if ((int) num1 == 3)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_7, 28U);
            }
            else if ((int) num1 == 4)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_8, 28U);
            }
            else if ((int) num1 == 5)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_9, 28U);
            }
            else if ((int) num1 == 6)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_2, 28U);
            }
            else if ((int) num1 == 7)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_10, 28U);
            }
            else if ((int) num1 == 8)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_11, 28U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 19200;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) (pByte_0 + 19200), 16U);
            }
            else if ((int) num1 == 9)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_11, 28U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 19504;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) (pByte_0 + 19504), 16U);
            }
            else if ((int) num1 == 10)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_11, 28U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 19744;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) (pByte_0 + 19744), 16U);
            }
            else if ((int) num1 == 11)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_11, 28U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 19984;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) (pByte_0 + 19984), 16U);
            }
            else if ((int) num1 == 12)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_12, 28U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 19200;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) (pByte_0 + 19200), 16U);
            }
            else if ((int) num1 == 13)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_12, 28U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 19504;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) (pByte_0 + 19504), 16U);
            }
            else if ((int) num1 == 14)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_12, 28U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 19744;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) (pByte_0 + 19744), 16U);
            }
            else if ((int) num1 == 15)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_12, 28U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 19984;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) (pByte_0 + 19984), 16U);
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2028), (void*) (pByte_0 + 20352), 20U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2024) = 20352;
            uint num2 = (uint) ((int) pByte_0[255999] << 24 | (int) pByte_0[255998] << 16 | (int) pByte_0[255997] << 8) | (uint) pByte_0[255996];
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2020) = (int) num2;
            if ((int) pByte_0[14320] != (int) byte.MaxValue)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) (pByte_0 + 14320), 32U);
            }
            else if ((int) pByte_0[13428] == (int) byte.MaxValue)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
            }
            else if ((int) pByte_0[13428] == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct15_2, 12U);
            }
            else if ((int) pByte_0[13381] == 252)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct15_3, 12U);
            }
            else if ((int) pByte_0[14000] != (int) byte.MaxValue)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct15_4, 12U);
            }
            else if ((int) pByte_0[14336] != (int) byte.MaxValue)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct15_5, 12U);
            }
            else if ((int) pByte_0[13428] != 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct15_5, 12U);
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
            }
          }
        }
      }
      else if (index1 == 11776)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 4;
        if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_35, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_13, 28U);
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_30, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_14, 28U);
          if (_Module.memcmp((void*) (pByte_0 + 12032), (void*) &_Module.struct29_17, 36U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 3;
          }
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_5, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 4;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_15, 28U);
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_24, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 5;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_16, 28U);
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_31, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 5;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          if (this.method_72() == 0)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num = (int) MessageBox.Show("Key sector area is incomplete or invalid !", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            return 0;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_17, 28U);
          }
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_33, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 5;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 2;
          if (this.method_74() == 0)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num = (int) MessageBox.Show("Key sector area is incomplete or invalid !", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            return 0;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_18, 28U);
          }
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_7, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 5;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 3;
          if (this.method_76() == 0)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num = (int) MessageBox.Show("Key sector area is incomplete or invalid !", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            return 0;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_19, 28U);
          }
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_0, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 5;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 4;
          if (this.method_72() == 0)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num = (int) MessageBox.Show("Key sector area is incomplete or invalid !", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            return 0;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_20, 28U);
          }
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_19, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 5;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 5;
          if (this.method_78() == 0)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num = (int) MessageBox.Show("Key sector area is incomplete or invalid !", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            return 0;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_21, 28U);
          }
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_8, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_3, 28U);
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_11, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_4, 28U);
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_36, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_5, 28U);
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_15, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_6, 28U);
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_2, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 3;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_7, 28U);
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_1, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 4;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_8, 28U);
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_29, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 5;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_9, 28U);
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_27, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 6;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_2, 28U);
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_10, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 7;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_10, 28U);
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_3, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 8;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_11, 28U);
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_21, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 12;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_12, 28U);
        }
        else if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_34, 36U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 3;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_22, 28U);
        }
        else
        {
          if (_Module.memcmp((void*) (pByte_0 + 11776), (void*) &_Module.struct29_25, 36U) != 0)
            return 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 3;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_23, 28U);
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) (pByte_0 + 24512), 32U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 41008;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) (pByte_0 + 41008), 16U);
        Struct46 struct46;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) &struct46, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), 180U);
        int num1 = 46;
        while (num1 < 93)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + num1) = (sbyte) ^(byte&) ((IntPtr) &struct46 + (num1 + 1));
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + (num1 + 1)) = (sbyte) ^(byte&) ((IntPtr) &struct46 + num1);
          num1 += 2;
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 800) = (sbyte) 54;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 801) = (sbyte) 68;
        int num2 = 20;
        while (num2 < 40)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + num2) = (sbyte) ^(byte&) ((IntPtr) &struct46 + (num2 + 1));
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + (num2 + 1)) = (sbyte) ^(byte&) ((IntPtr) &struct46 + num2);
          num2 += 2;
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2028), (void*) (pByte_0 + 130816), 224U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2024) = 130816;
        if (int_16 == 1)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num3 = (int) MessageBox.Show("Dummy files are not suitable for flashing.", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          return 0;
        }
      }
      else if (index1 != 9530 && index1 != 11607 && index1 != 9888)
      {
        if (index1 != 9893 && index1 != 11612)
        {
          if (index1 == 9948)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 3;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 3;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_24, 28U);
            if ((int) pByte_0[24544] != 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) (pByte_0 + 24544), 32U);
            }
            else if ((int) pByte_0[53760] == 126)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct72_2, 11U);
            }
            else if (_Module.memcmp((void*) &struct28_11, (void*) (pByte_0 + 86016), 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct72_3, 11U);
            }
            else if (_Module.memcmp((void*) &struct28_10, (void*) (pByte_0 + 53600), 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct15_4, 12U);
            }
            else if (_Module.memcmp((void*) &struct28_9, (void*) (pByte_0 + 53248), 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct72_4, 11U);
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
            }
            uint num1 = 40960U;
            while (num1 < 61440U)
            {
              if ((int) num1 != 53248 && _Module.memcmp((void*) (pByte_0 + ((int) num1 + 4080)), (void*) &struct28_1, 16U) == 0)
              {
                uint num2 = 32U;
                while (num2 < 4096U)
                {
                  if (_Module.memcmp((void*) (pByte_0 + ((int) num1 + (int) num2 + 16)), (void*) &struct28_1, 16U) != 0)
                  {
                    num2 += 16U;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = (int) num2 + (int) num1;
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) (pByte_0 + ((int) num1 + (int) num2)), 16U);
                    break;
                  }
                }
                if (num2 < 4096U)
                  break;
              }
              num1 += 4096U;
            }
            if ((int) num1 == 61440)
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num2 = (int) MessageBox.Show("Drive Key not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              return 0;
            }
            else
            {
              Struct46 struct46;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) &struct46, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), 180U);
              int num2 = 20;
              while (num2 < 93)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + num2) = (sbyte) ^(byte&) ((IntPtr) &struct46 + (num2 + 1));
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + (num2 + 1)) = (sbyte) ^(byte&) ((IntPtr) &struct46 + num2);
                num2 += 2;
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2028), (void*) (pByte_0 + 65280), 80U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2024) = 65280;
            }
          }
          else if (index1 == 12288)
          {
            int index3 = 69632;
            while (index3 < 86016 && ((int) pByte_0[index3] != 5 || (int) pByte_0[index3 + 1] != 128 || ((int) pByte_0[index3 + 2] != 0 || (int) pByte_0[index3 + 3] != 50) || ((int) pByte_0[index3 + 5] != 0 || (int) pByte_0[index3 + 7] != 0)))
              ++index3;
            if (index3 == 70628 | index3 == 73464 | index3 == 82278)
            {
              this.textBox6.AppendText("Kreon Inquiry found" + "\r\n");
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) (pByte_0 + index3), 96U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) (pByte_0 + (index3 + 8)), 28U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 560) = index3;
              int index4 = 69632;
              while (index4 < 1396736 && ((int) pByte_0[index4] != 192 || (int) pByte_0[index4 + 1] != 133 || ((int) pByte_0[index4 + 2] != 0 || (int) pByte_0[index4 + 3] != 0) || ((int) pByte_0[index4 + 4] != 0 || (int) pByte_0[index4 + 5] != 0)))
                ++index4;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) (pByte_0 + index4), 180U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 564) = index4;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 9;
              return 3;
            }
            else if (_Module.memcmp((void*) &struct55, (void*) pByte_0, 32U) == 0)
            {
              this.textBox6.AppendText("Encrypted Hitachi f/w detected" + "\r\n");
              this.method_392(pByte_0, pByte_1, 262144);
              _Module.memcpy((void*) pByte_0, (void*) pByte_1, 262144U);
              this.textBox6.AppendText("DeCrypting " + "\r\n");
              return 2;
            }
            else
            {
              if (_Module.memcmp((void*) (pByte_0 + 82176), (void*) &_Module.struct43_16, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 4;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_13, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_35, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_32, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_5, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 82176), (void*) &_Module.struct43_24, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 4;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 2;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_14, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_30, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_26, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_3, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 82176), (void*) &_Module.struct43_13, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 4;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 3;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_14, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_30, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_17, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_3, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 82176), (void*) &_Module.struct43_22, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 4;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 4;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_15, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_5, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_32, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_24, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 82176), (void*) &_Module.struct43_15, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 4;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 5;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_16, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_24, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_13, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_14, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 82176), (void*) &_Module.struct43_7, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 4;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 2;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_14, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_30, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_26, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_3, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 82176), (void*) &_Module.struct43_14, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 4;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 3;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_14, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_30, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_17, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_3, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 81920), (void*) &_Module.struct43_8, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 5;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_17, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_31, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_20, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_15, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 81920), (void*) &_Module.struct43_20, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 5;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 2;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_18, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_33, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_18, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_2, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 81920), (void*) &_Module.struct43_9, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 5;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 3;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_19, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_7, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_22, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_6, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 81920), (void*) &_Module.struct43_1, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 5;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 4;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_20, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_0, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_23, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_13, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 81920), (void*) &_Module.struct43_9, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 5;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 3;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_19, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_7, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_22, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_6, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 81920), (void*) &_Module.struct43_18, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 5;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 5;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_21, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_19, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_4, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_16, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 81920), (void*) &_Module.struct43_11, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 6;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_25, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_28, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_12, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_18, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct24_7, 8U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 81920), (void*) &_Module.struct43_12, 256U) == 0)
              {
                if ((int) pByte_0[123952] == 93)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 6;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 3;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_26, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_9, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_4, 180U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct24_7, 8U);
                }
                else if ((int) pByte_0[123952] == 85)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 6;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 4;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_27, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_9, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_4, 180U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct24_7, 8U);
                }
              }
              else if (_Module.memcmp((void*) (pByte_0 + 81920), (void*) &_Module.struct43_19, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 6;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 5;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_18, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_33, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_18, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_2, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct24_7, 8U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 81920), (void*) &_Module.struct43_5, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 6;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 6;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_19, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_7, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_22, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_6, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct24_7, 8U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 81920), (void*) &_Module.struct43_3, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 6;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 7;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_21, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_19, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_4, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_16, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct24_7, 8U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 81920), (void*) &_Module.struct43_23, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 6;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 2;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_28, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_6, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_14, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_21, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct24_7, 8U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 82176), (void*) &_Module.struct43_2, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 7;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_25, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_28, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_12, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_18, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct7_4, 9U);
                if ((int) pByte_0[80176] == 3)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_26, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_9, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_4, 180U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 3;
                }
                if ((int) pByte_0[80176] == 11)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_27, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_16, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_8, 180U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 4;
                }
              }
              else if (_Module.memcmp((void*) (pByte_0 + 82176), (void*) &_Module.struct43_10, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 7;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 2;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_28, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_6, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_12, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_21, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct7_4, 9U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 82176), (void*) &_Module.struct43_6, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 7;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 5;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_20, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_0, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_23, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_13, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct7_4, 9U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 82176), (void*) &_Module.struct43_17, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 7;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 6;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_18, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_33, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_18, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_2, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct7_4, 9U);
              }
              else if (_Module.memcmp((void*) (pByte_0 + 82176), (void*) &_Module.struct43_4, 256U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 7;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 7;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_19, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_7, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_22, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_6, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct7_4, 9U);
              }
              else
              {
                if (_Module.memcmp((void*) (pByte_0 + 82176), (void*) &_Module.struct43_0, 256U) != 0)
                  return 0;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 7;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 8;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_21, 28U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_19, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 684), (void*) &_Module.struct29_4, 96U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_16, 180U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct7_4, 9U);
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 114688;
              if (_Module.memcmp((void*) &struct77_3, (void*) (pByte_0 + 118784), 6U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 106496;
              }
              else if (_Module.memcmp((void*) &struct77_1, (void*) (pByte_0 + 118784), 6U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 114688;
              }
              else if (_Module.memcmp((void*) &struct77_2, (void*) (pByte_0 + 118784), 6U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 122880;
              }
              else if (_Module.memcmp((void*) &struct77_4, (void*) (pByte_0 + 118784), 6U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 110592;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 5 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 1)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 172032;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 5 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 2)
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 172032;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 5 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 3)
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 172032;
                    }
                    else
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 5 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 4)
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 172032;
                      }
                      else
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 5 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 5)
                        {
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 172032;
                        }
                        else
                        {
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 1)
                          {
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 126960;
                          }
                          else
                          {
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 2)
                            {
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 126960;
                            }
                            else
                            {
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 3)
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 126960;
                              }
                              else
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 4)
                                {
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 126960;
                                }
                                else
                                {
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 5)
                                  {
                                    // ISSUE: cast to a reference type
                                    // ISSUE: explicit reference operation
                                    *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 126960;
                                  }
                                  else
                                  {
                                    // ISSUE: cast to a reference type
                                    // ISSUE: explicit reference operation
                                    // ISSUE: cast to a reference type
                                    // ISSUE: explicit reference operation
                                    if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 6)
                                    {
                                      // ISSUE: cast to a reference type
                                      // ISSUE: explicit reference operation
                                      *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 126960;
                                    }
                                    else
                                    {
                                      // ISSUE: cast to a reference type
                                      // ISSUE: explicit reference operation
                                      // ISSUE: cast to a reference type
                                      // ISSUE: explicit reference operation
                                      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 7)
                                      {
                                        // ISSUE: cast to a reference type
                                        // ISSUE: explicit reference operation
                                        *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 126960;
                                      }
                                      else
                                      {
                                        // ISSUE: cast to a reference type
                                        // ISSUE: explicit reference operation
                                        // ISSUE: cast to a reference type
                                        // ISSUE: explicit reference operation
                                        if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 7 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 1)
                                        {
                                          // ISSUE: cast to a reference type
                                          // ISSUE: explicit reference operation
                                          *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 114688;
                                        }
                                        else
                                        {
                                          // ISSUE: cast to a reference type
                                          // ISSUE: explicit reference operation
                                          // ISSUE: cast to a reference type
                                          // ISSUE: explicit reference operation
                                          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 7 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 2)
                                          {
                                            // ISSUE: cast to a reference type
                                            // ISSUE: explicit reference operation
                                            *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 114688;
                                          }
                                          else
                                          {
                                            // ISSUE: cast to a reference type
                                            // ISSUE: explicit reference operation
                                            // ISSUE: cast to a reference type
                                            // ISSUE: explicit reference operation
                                            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 7 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 3)
                                            {
                                              // ISSUE: cast to a reference type
                                              // ISSUE: explicit reference operation
                                              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 114688;
                                            }
                                            else
                                            {
                                              // ISSUE: cast to a reference type
                                              // ISSUE: explicit reference operation
                                              // ISSUE: cast to a reference type
                                              // ISSUE: explicit reference operation
                                              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 7 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 4)
                                              {
                                                // ISSUE: cast to a reference type
                                                // ISSUE: explicit reference operation
                                                *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = 114688;
                                              }
                                              else
                                              {
                                                // ISSUE: cast to a function pointer type
                                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                                int num = (int) MessageBox.Show("Drive Key not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                                return 0;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 312];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 281) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 2796];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 282) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 1858];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 283) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 1664];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 284) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 3789];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 285) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 2868];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 286) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 2111];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 287) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 1829];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 288) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 1322];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 289) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 513];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 290) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 2527];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 291) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 35];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 292) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 1184];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 293) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 1434];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 294) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 1022];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 295) = (sbyte) pByte_0[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) + 3913];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 5 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 2)
                this.method_79(int_16);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 5 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 3)
                this.method_80(int_16);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 5 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 5)
                this.method_81(int_16);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 1)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_34(pByte_0 + 126960, (byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280));
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 2)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_34(pByte_0 + 126960, (byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280));
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 3)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_34(pByte_0 + 126960, (byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280));
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 4)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_34(pByte_0 + 126960, (byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280));
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 5)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_34(pByte_0 + 126960, (byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280));
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 6)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_34(pByte_0 + 126960, (byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280));
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 7)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_34(pByte_0 + 126960, (byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280));
              }
              if (_Module.memcmp((void*) &struct41_2, (void*) (pByte_0 + 81888), 18U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct0_1, 17U);
              }
              else if (_Module.memcmp((void*) &struct41_1, (void*) (pByte_0 + 81888), 18U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct0_2, 17U);
              }
              else if (_Module.memcmp((void*) &struct41_3, (void*) (pByte_0 + 81888), 18U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct75_0, 32U);
              }
              else if (_Module.memcmp((void*) &struct41_5, (void*) (pByte_0 + 81888), 18U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct75_1, 32U);
              }
              else if (_Module.memcmp((void*) &struct41_4, (void*) (pByte_0 + 81888), 18U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct75_2, 32U);
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 7 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 1)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct7_4, 9U);
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 7 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 2)
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct7_4, 9U);
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 7 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 3)
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct7_4, 9U);
                    }
                    else
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 7 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 4)
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct7_4, 9U);
                      }
                      else
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 7 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 5)
                        {
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct7_4, 9U);
                        }
                        else
                        {
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 7 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 6)
                          {
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct7_4, 9U);
                          }
                          else
                          {
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 7 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 7)
                            {
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct7_4, 9U);
                            }
                            else
                            {
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 7 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) == 8)
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct7_4, 9U);
                              }
                              else if (_Module.memcmp((void*) &struct28_15, (void*) (pByte_0 + 126976), 16U) == 0)
                              {
                                if (_Module.memcmp((void*) &struct28_16, (void*) (pByte_0 + 251056), 16U) == 0)
                                {
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct74_0, 10U);
                                }
                                else if (_Module.memcmp((void*) &struct28_17, (void*) (pByte_0 + 251056), 16U) == 0)
                                {
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct65_2, 14U);
                                  if ((int) pByte_0[112435] == 178)
                                  {
                                    // ISSUE: cast to a reference type
                                    // ISSUE: explicit reference operation
                                    _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct65_3, 14U);
                                    if ((int) pByte_0[251104] == 105)
                                    {
                                      // ISSUE: cast to a reference type
                                      // ISSUE: explicit reference operation
                                      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct65_4, 14U);
                                      if ((int) pByte_0[127900] == 80)
                                      {
                                        // ISSUE: cast to a reference type
                                        // ISSUE: explicit reference operation
                                        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct65_5, 14U);
                                      }
                                    }
                                    if ((int) pByte_0[249856] == 74)
                                    {
                                      // ISSUE: cast to a reference type
                                      // ISSUE: explicit reference operation
                                      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct65_6, 14U);
                                    }
                                  }
                                  if ((int) pByte_0[112275] == 58)
                                  {
                                    // ISSUE: cast to a reference type
                                    // ISSUE: explicit reference operation
                                    _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct65_7, 14U);
                                  }
                                }
                                else if (_Module.memcmp((void*) &struct28_18, (void*) (pByte_0 + 251056), 16U) == 0)
                                {
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct22_4, 7U);
                                }
                              }
                              else if (_Module.memcmp((void*) &struct41_6, (void*) (pByte_0 + 81888), 18U) == 0)
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
                              }
                              else if (_Module.memcmp((void*) &struct41_7, (void*) (pByte_0 + 81888), 18U) == 0)
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
                              }
                              else if (_Module.memcmp((void*) &struct41_8, (void*) (pByte_0 + 81888), 18U) == 0)
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
                              }
                              else if (_Module.memcmp((void*) &struct41_9, (void*) (pByte_0 + 81888), 18U) == 0)
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
                              }
                              else if (_Module.memcmp((void*) &struct41_10, (void*) (pByte_0 + 81888), 18U) == 0)
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
                              }
                              else if (_Module.memcmp((void*) &struct41_11, (void*) (pByte_0 + 81888), 18U) == 0)
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
                              }
                              else if (_Module.memcmp((void*) &struct41_12, (void*) (pByte_0 + 81888), 18U) == 0)
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
                              }
                              else if (_Module.memcmp((void*) &struct28_19, (void*) (pByte_0 + 148448), 16U) == 0)
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct22_4, 7U);
                              }
                              else if (_Module.memcmp((void*) &struct28_20, (void*) (pByte_0 + 148448), 16U) == 0)
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
                              }
                              else if (_Module.memcmp((void*) &struct28_12, (void*) (pByte_0 + 148448), 16U) == 0)
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct72_4, 11U);
                                if ((int) pByte_0[195959] == 247 && (int) pByte_0[195960] == 83)
                                {
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct15_4, 12U);
                                }
                                if ((int) pByte_0[196079] == (int) byte.MaxValue && (int) pByte_0[196080] == 208)
                                {
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct65_8, 14U);
                                }
                                if ((int) pByte_0[258235] == 18 && (int) pByte_0[258236] == 190)
                                {
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct65_6, 14U);
                                }
                                if ((int) pByte_0[185719] == 118 && (int) pByte_0[185720] == 251)
                                {
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct65_7, 14U);
                                }
                                if ((int) pByte_0[184541] == 16 && (int) pByte_0[184542] == 137)
                                {
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct65_7, 14U);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2348), (void*) &_Module.struct74_0, 10U) == 0 && (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4)
              {
                _Module.memcpy((void*) (pByte_0 + 81408), (void*) &_Module.struct47_7, 276U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), 0, 32U);
                for (int index4 = 0; index4 < 20; ++index4)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 42)) = (sbyte) pByte_0[index4 + 130816];
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + (index4 + 20)) = (sbyte) pByte_0[index4 + 130816];
                }
                for (int index4 = 0; index4 < 2; ++index4)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 38)) = (sbyte) pByte_0[index4 + 130856];
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 40)) = (sbyte) pByte_0[index4 + 130892];
                }
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2348), (void*) &_Module.struct22_4, 7U) == 0 && (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4)
                {
                  _Module.memcpy((void*) (pByte_0 + 81408), (void*) &_Module.struct47_7, 276U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), 0, 32U);
                  for (int index4 = 0; index4 < 20; ++index4)
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 42)) = (sbyte) pByte_0[index4 + 130816];
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + (index4 + 20)) = (sbyte) pByte_0[index4 + 130816];
                  }
                  for (int index4 = 0; index4 < 2; ++index4)
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 38)) = (sbyte) pByte_0[index4 + 130856];
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 40)) = (sbyte) pByte_0[index4 + 130892];
                  }
                }
                else if (_Module.memcmp((void*) &_Module.struct47_8, (void*) (pByte_0 + 81408), 276U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_3, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_8, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_0, 180U);
                }
                else if (_Module.memcmp((void*) &_Module.struct47_6, (void*) (pByte_0 + 81408), 276U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_4, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_11, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_1, 180U);
                }
                else if (_Module.memcmp((void*) &_Module.struct47_1, (void*) (pByte_0 + 81408), 276U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_22, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_34, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_22, 180U);
                }
                else if (_Module.memcmp((void*) &_Module.struct47_5, (void*) (pByte_0 + 81408), 276U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_23, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_25, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_9, 180U);
                }
                else if (_Module.memcmp((void*) &_Module.struct47_2, (void*) (pByte_0 + 81408), 276U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_5, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_36, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_23, 180U);
                }
                else if (_Module.memcmp((void*) &_Module.struct47_0, (void*) (pByte_0 + 81408), 276U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_6, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_15, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_17, 180U);
                }
                else if (_Module.memcmp((void*) &_Module.struct47_10, (void*) (pByte_0 + 81408), 276U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_7, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_2, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_20, 180U);
                }
                else if (_Module.memcmp((void*) &_Module.struct47_4, (void*) (pByte_0 + 81408), 276U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_8, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_1, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_25, 180U);
                }
                else if (_Module.memcmp((void*) &_Module.struct47_3, (void*) (pByte_0 + 81408), 276U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_9, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_29, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_10, 180U);
                }
                else if (_Module.memcmp((void*) &_Module.struct47_12, (void*) (pByte_0 + 81408), 276U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_2, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_27, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_7, 180U);
                }
                else if (_Module.memcmp((void*) &_Module.struct47_11, (void*) (pByte_0 + 81408), 276U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_10, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_10, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_19, 180U);
                }
                else if (_Module.memcmp((void*) &_Module.struct47_9, (void*) (pByte_0 + 81408), 276U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_11, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_3, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_12, 180U);
                }
                else if (_Module.memcmp((void*) &_Module.struct47_13, (void*) (pByte_0 + 81408), 276U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_12, 28U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568), (void*) &_Module.struct29_21, 96U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), (void*) &_Module.struct46_11, 180U);
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), 0, 32U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 4)
                  {
                    for (int index4 = 0; index4 < 20; ++index4)
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 42)) = (sbyte) pByte_0[index4 + 130816];
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + (index4 + 20)) = (sbyte) pByte_0[index4 + 130816];
                    }
                    for (int index4 = 0; index4 < 2; ++index4)
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 38)) = (sbyte) pByte_0[index4 + 130856];
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 40)) = (sbyte) pByte_0[index4 + 130892];
                    }
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 5)
                    {
                      for (int index4 = 0; index4 < 20; ++index4)
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 96)) = (sbyte) pByte_0[index4 + 130816];
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + (index4 + 20)) = (sbyte) pByte_0[index4 + 130816];
                      }
                      for (int index4 = 0; index4 < 2; ++index4)
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 52)) = (sbyte) pByte_0[index4 + 130856];
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 54)) = (sbyte) pByte_0[index4 + 130892];
                      }
                    }
                    else
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6)
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) != 1 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) != 2 && ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) != 5 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) != 6) && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) != 7)
                        {
                          for (int index4 = 0; index4 < 20; ++index4)
                          {
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 96)) = (sbyte) pByte_0[index4 + 261888];
                          }
                        }
                        else
                        {
                          for (int index4 = 0; index4 < 20; ++index4)
                          {
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 96)) = (sbyte) pByte_0[index4 + 261888];
                          }
                          int num = 0;
                          while (num < 20)
                          {
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + (num + 20)) = (sbyte) pByte_0[num + 261889];
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + (num + 21)) = (sbyte) pByte_0[num + 261888];
                            num += 2;
                          }
                          for (int index4 = 0; index4 < 2; ++index4)
                          {
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 52)) = (sbyte) pByte_0[index4 + 261928];
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 54)) = (sbyte) pByte_0[index4 + 261964];
                          }
                        }
                      }
                      else
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 7)
                        {
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) != 1 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) != 2)
                          {
                            for (int index4 = 0; index4 < 20; ++index4)
                            {
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 96)) = (sbyte) pByte_0[index4 + 130816];
                            }
                          }
                          else
                          {
                            for (int index4 = 0; index4 < 20; ++index4)
                            {
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 96)) = (sbyte) pByte_0[index4 + 130816];
                            }
                            int num = 0;
                            while (num < 20)
                            {
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + (num + 20)) = (sbyte) pByte_0[num + 130817];
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + (num + 21)) = (sbyte) pByte_0[num + 130816];
                              num += 2;
                            }
                            for (int index4 = 0; index4 < 2; ++index4)
                            {
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 52)) = (sbyte) pByte_0[index4 + 130856];
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 568 + (index4 + 54)) = (sbyte) pByte_0[index4 + 130892];
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2028), (void*) (pByte_0 + 130816), 224U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2024) = 130816;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 6)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2028), (void*) (pByte_0 + 261888), 256U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2024) = 261888;
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) == 7)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2028), (void*) (pByte_0 + 130816), 80U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2024) = 130816;
              }
            }
          }
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 3;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_23, 28U);
          if ((int) pByte_0[24544] != 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) (pByte_0 + 24544), 32U);
          }
          else if (_Module.memcmp((void*) &struct28_4, (void*) (pByte_0 + 64176), 16U) == 0)
          {
            if (_Module.memcmp((void*) &struct28_6, (void*) (pByte_0 + 91520), 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct74_0, 10U);
              if ((int) pByte_0[118790] == 67)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct65_1, 14U);
              }
              else if ((int) pByte_0[63096] == 84)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct65_2, 14U);
              }
            }
            if (_Module.memcmp((void*) &struct28_7, (void*) (pByte_0 + 91520), 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct22_4, 7U);
            }
            if (_Module.memcmp((void*) &struct28_8, (void*) (pByte_0 + 91520), 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct72_1, 11U);
            }
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
          }
          uint num1 = 40960U;
          while (num1 < 61440U)
          {
            if ((int) num1 != 53248 && _Module.memcmp((void*) (pByte_0 + ((int) num1 + 4080)), (void*) &struct28_1, 16U) == 0)
            {
              uint num2 = 32U;
              while (num2 < 4096U)
              {
                if (_Module.memcmp((void*) (pByte_0 + ((int) num1 + (int) num2 + 16)), (void*) &struct28_1, 16U) != 0)
                {
                  num2 += 16U;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = (int) num2 + (int) num1;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) (pByte_0 + ((int) num1 + (int) num2)), 16U);
                  break;
                }
              }
              if (num2 < 4096U)
                break;
            }
            num1 += 4096U;
          }
          if ((int) num1 == 61440)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num2 = (int) MessageBox.Show("Drive Key not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            return 0;
          }
          else
          {
            Struct46 struct46;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) &struct46, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), 180U);
            int num2 = 20;
            while (num2 < 93)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + num2) = (sbyte) ^(byte&) ((IntPtr) &struct46 + (num2 + 1));
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + (num2 + 1)) = (sbyte) ^(byte&) ((IntPtr) &struct46 + num2);
              num2 += 2;
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2028), (void*) (pByte_0 + 65280), 80U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2024) = 65280;
          }
        }
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) = (short) 3;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2) = (short) 1;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) &_Module.struct9_22, 28U);
        if ((int) pByte_0[24544] != 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) (pByte_0 + 24544), 32U);
        }
        else if (_Module.memcmp((void*) &struct28_4, (void*) (pByte_0 + 64176), 16U) == 0)
        {
          if (_Module.memcmp((void*) &struct28_6, (void*) (pByte_0 + 91520), 16U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct74_0, 10U);
            if ((int) pByte_0[118790] == 67)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct65_1, 14U);
            }
            else if ((int) pByte_0[63096] == 84)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct65_2, 14U);
            }
          }
          if (_Module.memcmp((void*) &struct28_7, (void*) (pByte_0 + 91520), 16U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct22_4, 7U);
          }
          if (_Module.memcmp((void*) &struct28_8, (void*) (pByte_0 + 91520), 16U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct72_1, 11U);
          }
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348), (void*) &_Module.struct23_40, 5U);
        }
        uint num1 = 40960U;
        while (num1 < 61440U)
        {
          if ((int) num1 != 53248 && _Module.memcmp((void*) (pByte_0 + ((int) num1 + 4080)), (void*) &struct28_1, 16U) == 0)
          {
            uint num2 = 32U;
            while (num2 < 4096U)
            {
              if (_Module.memcmp((void*) (pByte_0 + ((int) num1 + (int) num2 + 16)), (void*) &struct28_1, 16U) != 0)
              {
                num2 += 16U;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) = (int) num1 + (int) num2;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) (pByte_0 + ((int) num1 + (int) num2)), 16U);
                break;
              }
            }
            if (num2 < 4096U)
              break;
          }
          num1 += 4096U;
        }
        if ((int) num1 == 61440)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num2 = (int) MessageBox.Show("Drive Key not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          return 0;
        }
        else
        {
          Struct46 struct46;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) &struct46, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780), 180U);
          int num2 = 20;
          while (num2 < 93)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + num2) = (sbyte) ^(byte&) ((IntPtr) &struct46 + (num2 + 1));
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 780 + (num2 + 1)) = (sbyte) ^(byte&) ((IntPtr) &struct46 + num2);
            num2 += 2;
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2028), (void*) (pByte_0 + 65280), 80U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2024) = 65280;
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte* numPtr = (byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_3, 28U) == 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 1;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 1;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_4, 28U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 2;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_5, 28U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 1;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_6, 28U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 2;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_7, 28U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 3;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_8, 28U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 4;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_9, 28U) == 0)
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 5;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_2, 28U) == 0)
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 6;
                    }
                    else
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_10, 28U) == 0)
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 7;
                      }
                      else
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_11, 28U) == 0)
                        {
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 8;
                        }
                        else
                        {
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_12, 28U) == 0)
                          {
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 2;
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 12;
                          }
                          else
                          {
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_22, 28U) == 0)
                            {
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 3;
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 1;
                            }
                            else
                            {
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_23, 28U) == 0)
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 3;
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 2;
                              }
                              else
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_13, 28U) == 0)
                                {
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 4;
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 1;
                                }
                                else
                                {
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_14, 28U) == 0)
                                  {
                                    // ISSUE: cast to a reference type
                                    // ISSUE: explicit reference operation
                                    *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 4;
                                    // ISSUE: cast to a reference type
                                    // ISSUE: explicit reference operation
                                    *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 2;
                                  }
                                  else
                                  {
                                    // ISSUE: cast to a reference type
                                    // ISSUE: explicit reference operation
                                    if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_15, 28U) == 0)
                                    {
                                      // ISSUE: cast to a reference type
                                      // ISSUE: explicit reference operation
                                      *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 4;
                                      // ISSUE: cast to a reference type
                                      // ISSUE: explicit reference operation
                                      *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 4;
                                    }
                                    else
                                    {
                                      // ISSUE: cast to a reference type
                                      // ISSUE: explicit reference operation
                                      if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_16, 28U) == 0)
                                      {
                                        // ISSUE: cast to a reference type
                                        // ISSUE: explicit reference operation
                                        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 4;
                                        // ISSUE: cast to a reference type
                                        // ISSUE: explicit reference operation
                                        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 5;
                                      }
                                      else
                                      {
                                        // ISSUE: cast to a reference type
                                        // ISSUE: explicit reference operation
                                        if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_17, 28U) == 0)
                                        {
                                          // ISSUE: cast to a reference type
                                          // ISSUE: explicit reference operation
                                          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 5;
                                          // ISSUE: cast to a reference type
                                          // ISSUE: explicit reference operation
                                          *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 1;
                                        }
                                        else
                                        {
                                          // ISSUE: cast to a reference type
                                          // ISSUE: explicit reference operation
                                          if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_18, 28U) == 0)
                                          {
                                            // ISSUE: cast to a reference type
                                            // ISSUE: explicit reference operation
                                            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 5;
                                            // ISSUE: cast to a reference type
                                            // ISSUE: explicit reference operation
                                            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 2;
                                          }
                                          else
                                          {
                                            // ISSUE: cast to a reference type
                                            // ISSUE: explicit reference operation
                                            if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_19, 28U) == 0)
                                            {
                                              // ISSUE: cast to a reference type
                                              // ISSUE: explicit reference operation
                                              *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 5;
                                              // ISSUE: cast to a reference type
                                              // ISSUE: explicit reference operation
                                              *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 3;
                                            }
                                            else
                                            {
                                              // ISSUE: cast to a reference type
                                              // ISSUE: explicit reference operation
                                              if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_20, 28U) == 0)
                                              {
                                                // ISSUE: cast to a reference type
                                                // ISSUE: explicit reference operation
                                                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 5;
                                                // ISSUE: cast to a reference type
                                                // ISSUE: explicit reference operation
                                                *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 4;
                                              }
                                              else
                                              {
                                                // ISSUE: cast to a reference type
                                                // ISSUE: explicit reference operation
                                                if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_25, 28U) == 0)
                                                {
                                                  // ISSUE: cast to a reference type
                                                  // ISSUE: explicit reference operation
                                                  *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 6;
                                                  // ISSUE: cast to a reference type
                                                  // ISSUE: explicit reference operation
                                                  *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 1;
                                                }
                                                else
                                                {
                                                  // ISSUE: cast to a reference type
                                                  // ISSUE: explicit reference operation
                                                  if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_28, 28U) == 0)
                                                  {
                                                    // ISSUE: cast to a reference type
                                                    // ISSUE: explicit reference operation
                                                    *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 6;
                                                    // ISSUE: cast to a reference type
                                                    // ISSUE: explicit reference operation
                                                    *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 2;
                                                  }
                                                  else
                                                  {
                                                    // ISSUE: cast to a reference type
                                                    // ISSUE: explicit reference operation
                                                    if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_26, 28U) == 0)
                                                    {
                                                      // ISSUE: cast to a reference type
                                                      // ISSUE: explicit reference operation
                                                      *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 8;
                                                      // ISSUE: cast to a reference type
                                                      // ISSUE: explicit reference operation
                                                      *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 1;
                                                    }
                                                    else
                                                    {
                                                      // ISSUE: cast to a reference type
                                                      // ISSUE: explicit reference operation
                                                      if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), (void*) &_Module.struct9_27, 28U) == 0)
                                                      {
                                                        // ISSUE: cast to a reference type
                                                        // ISSUE: explicit reference operation
                                                        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 8;
                                                        // ISSUE: cast to a reference type
                                                        // ISSUE: explicit reference operation
                                                        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 2;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), 28U) == 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), 0, 32U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) = (short) 0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2384) = (short) 0;
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct71, (sbyte*) &_Module.struct35_124, __arglist (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296)));
      string str1 = new string((sbyte*) &_Module.struct18_10) + new string((sbyte*) &struct71);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) == 114688 || *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) == 122880 || (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) == 110592 || *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) == 106496) || *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 296) == 172032)
        str1 = new string((sbyte*) &_Module.struct25_9);
      string str2 = "";
      _Module.sprintf((sbyte*) &struct71, (sbyte*) &_Module.struct19_0, __arglist ());
      for (int index3 = 0; index3 < 16; ++index3)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.sprintf((sbyte*) &struct71, (sbyte*) &_Module.struct10_20, __arglist (out struct71, (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280 + index3)));
      }
      string str3 = str2 + new string((sbyte*) &struct71);
      this.textBox6.AppendText("Drive key @ " + (object) str1 + " " + str3 + (string) __arglist ("\r\n"));
      string str4 = "";
      _Module.sprintf((sbyte*) &struct71, (sbyte*) &_Module.struct19_0, __arglist ());
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct71, (sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2284), __arglist ());
      this.textBox6.AppendText("Firmware Osig: [" + str4 + new string((sbyte*) &struct71) + "]" + "\r\n");
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2382) != 0)
      {
        string str5 = "";
        _Module.sprintf((sbyte*) &struct71, (sbyte*) &_Module.struct19_0, __arglist ());
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.sprintf((sbyte*) &struct71, (sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2316), __arglist ());
        this.textBox6.AppendText("Spoofed As:" + (object) "    [" + str5 + new string((sbyte*) &struct71) + "]" + (string) __arglist ("\r\n"));
      }
      return 1;
    }

    private unsafe uint method_32(uint uint_0, int* pInt_0)
    {
      uint num1 = 0U;
      for (int index = 0; index < 32; ++index)
      {
        uint num2 = (uint_0 & (uint) (1 << pInt_0[index])) >> pInt_0[index];
        num1 = num1 << 1 | num2;
      }
      return num1;
    }

    private unsafe byte method_33(byte byte_0, int* pInt_0)
    {
      sbyte num1 = (sbyte) 0;
      for (int index = 0; index < 8; ++index)
      {
        sbyte num2 = (sbyte) (((int) byte_0 & 1 << pInt_0[index]) >> pInt_0[index]);
        num1 = (sbyte) ((int) num1 << 1 | (int) num2);
      }
      return (byte) num1;
    }

    private unsafe void method_34(byte* pByte_0, byte* pByte_1)
    {
      Struct78 struct78;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @struct78 = 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct78 + 4) = 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct78 + 8) = 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct78 + 12) = 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct78 + 16) = 7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct78 + 20) = 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct78 + 24) = 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct78 + 28) = 2;
      Struct28 struct28;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28 = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 1) = (sbyte) -97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 2) = (sbyte) -93;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 3) = (sbyte) -65;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 4) = (sbyte) 58;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 5) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 6) = (sbyte) -69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 7) = (sbyte) -83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 8) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 9) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 10) = (sbyte) -18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 11) = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 12) = (sbyte) 45;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 13) = (sbyte) 125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 14) = (sbyte) 124;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 15) = (sbyte) -68;
      for (int index = 0; index < 16; ++index)
      {
        byte num = this.method_33(pByte_0[index], (int*) &struct78);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        pByte_1[index] = (byte) ((int) num ^ (int) ^(byte&) ((IntPtr) &struct28 + index));
      }
    }

    private unsafe void method_35(byte* pByte_0, byte* pByte_1)
    {
      Struct78 struct78;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @struct78 = 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct78 + 4) = 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct78 + 8) = 7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct78 + 12) = 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct78 + 16) = 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct78 + 20) = 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct78 + 24) = 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct78 + 28) = 4;
      Struct28 struct28;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28 = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 1) = (sbyte) -97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 2) = (sbyte) -93;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 3) = (sbyte) -65;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 4) = (sbyte) 58;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 5) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 6) = (sbyte) -69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 7) = (sbyte) -83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 8) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 9) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 10) = (sbyte) -18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 11) = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 12) = (sbyte) 45;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 13) = (sbyte) 125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 14) = (sbyte) 124;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 15) = (sbyte) -68;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        byte num = this.method_33((byte) ((int) pByte_0[index] ^ (int) ^(byte&) ((IntPtr) &struct28 + index)), (int*) &struct78);
        pByte_1[index] = num;
      }
    }

    private unsafe int method_36(string string_25, int int_16)
    {
      string str1 = (string) null;
      string str2 = (string) null;
      str1 = new string((sbyte*) &_Module.struct19_0);
      int num1 = 1;
      if (int_16 == 5)
      {
        int_16 = 0;
        num1 = 0;
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memset((void*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4), 0, 2392U);
      Struct68 struct68;
      _Module.memset((void*) &struct68, 0, 260U);
      str2 = new string((sbyte*) &_Module.struct19_0);
      string fullPath = Path.GetFullPath(string_25);
      void* voidPtr = (void*) 0;
      void* pVoid_1_1 = (void*) Marshal.StringToHGlobalAnsi(fullPath);
      int num2;
      try
      {
        _Module.memcpy((void*) &struct68, pVoid_1_1, 260U);
        goto label_7;
      }
      catch (Exception ex)
      {
        string message = ex.Message;
        if (_Module.memcmp((void*) &struct68, pVoid_1_1, _Module.strlen((sbyte*) &struct68)) != 0)
        {
          this.textBox6.AppendText("Debug:: Memcpy failed" + "\r\n");
          num2 = 0;
        }
        else
          goto label_7;
      }
      return num2;
label_7:
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      int num3 = (int) _Module.GetLongPathNameA((sbyte*) &struct68, (sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 300), 260U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct68, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 300), 260U);
      string fileName = Path.GetFileName(new string((sbyte*) &struct68));
      voidPtr = (void*) 0;
      void* pVoid_1_2 = (void*) Marshal.StringToHGlobalAnsi(fileName);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 4 == 0)
        this.textBox6.AppendText("Debug:: Gotcha 2" + fileName + "\r\n");
      int num4;
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 4), pVoid_1_2, 260U);
        goto label_13;
      }
      catch (Exception ex)
      {
        string message = ex.Message;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 4), pVoid_1_2, _Module.strlen((sbyte*) ((IntPtr) &_Module.struct121_0 + int_16 * 2392 + 4))) != 0)
        {
          this.textBox6.AppendText("Debug:: Memcpy failed" + "\r\n");
          num4 = 0;
        }
        else
          goto label_13;
      }
      return num4;
label_13:
      this.textBox6.AppendText("Loading firmware file " + new string((sbyte*) &struct68) + "\r\n");
      GStruct93 gstruct93;
      _Module.smethod_111(&gstruct93);
      GStruct19 gstruct19_1;
      int num5;
      int num6;
      // ISSUE: fault handler
      try
      {
        GStruct19 gstruct19_2;
        GStruct19* pGstruct19_1 = _Module.smethod_91(&gstruct19_2, (sbyte*) &struct68);
        _Module.smethod_114(&gstruct93, &gstruct19_1, pGstruct19_1);
        // ISSUE: fault handler
        try
        {
          GStruct19 gstruct19_3;
          GStruct19* pGstruct19_0 = _Module.smethod_91(&gstruct19_3, (sbyte*) &struct68);
          Struct28 struct28;
          _Module.smethod_116(&gstruct93, pGstruct19_0, (byte*) &struct28);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 264), (void*) &struct28, 16U);
          string string_25_1 = new string(_Module.smethod_94(&gstruct19_1));
          this.textBox6.AppendText("MD5 hash:  " + string_25_1 + "\r\n");
          this.method_45(string_25_1);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_44((sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 300), int_16);
          num5 = this.method_31(int_16);
          if (num5 == 2)
            num5 = this.method_31(int_16);
          if (num5 == 3)
          {
            if (int_16 == 0)
            {
              this.method_40();
              this.method_39();
              this.tabControl5.SelectedTab = this.Firmtools;
              num6 = 0;
            }
            else
              goto label_24;
          }
          else
            goto label_30;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return num6;
label_24:
      int num7;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (int_16 == 1)
          {
            this.method_43();
            this.method_42();
            this.tabControl5.SelectedTab = this.Firmtools;
            num7 = 0;
          }
          else
            goto label_30;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return num7;
label_30:
      int num8;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (num5 == 0)
          {
            if (int_16 == 0)
              this.method_40();
            if (int_16 == 1)
              this.method_43();
            this.textBox6.AppendText("Parse Failed !" + "\r\n\r\n");
            num8 = 0;
          }
          else
            goto label_40;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return num8;
label_40:
      int num9;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.string_0 = "";
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_7((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348));
          this.textBox6.AppendText("Firmware is:  " + this.string_0 + "\r\n");
          if (int_16 == 0)
          {
            this.method_40();
            this.method_38();
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 4 && num1 == 1)
              this.method_48();
            if (num1 == 1)
            {
              this.tabControl5.SelectedTab = this.Firmtools;
              if (this.method_49() == 1)
              {
                this.method_46();
                this.method_47();
                this.method_41();
              }
            }
          }
          else if (int_16 == 1)
          {
            this.method_43();
            this.method_41();
          }
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) @_Module.struct123_0 != 0 && (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 0)
            this.button6.Enabled = true;
          this.tabControl5.SelectedTab = this.Firmtools;
          num9 = 1;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return num9;
    }

    private unsafe int method_37(string string_25, int int_16, byte* pByte_0)
    {
      int num1 = 1;
      if (int_16 == 5)
      {
        int_16 = 0;
        num1 = 0;
      }
      this.textBox6.AppendText("Loading firmware from buffer" + "\r\n");
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memset((void*) ^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4), 0, 2392U);
      Struct68 struct68;
      _Module.memset((void*) &struct68, 0, 260U);
      if (string.Compare(string_25, "") != 0)
      {
        string fullPath = Path.GetFullPath(string_25);
        void* voidPtr = (void*) 0;
        void* pVoid_1_1 = (void*) Marshal.StringToHGlobalAnsi(fullPath);
        int num2;
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 300), pVoid_1_1, 260U);
          goto label_8;
        }
        catch (Exception ex)
        {
          string message = ex.Message;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 300), pVoid_1_1, _Module.strlen((sbyte*) &struct68)) != 0)
          {
            this.textBox6.AppendText("Debug:: Memcpy failed" + "\r\n");
            num2 = 0;
          }
          else
            goto label_8;
        }
        return num2;
label_8:
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) &struct68, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 300), 260U);
        string fileName = Path.GetFileName(string_25);
        voidPtr = (void*) 0;
        void* pVoid_1_2 = (void*) Marshal.StringToHGlobalAnsi(fileName);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 4 == 0)
          this.textBox6.AppendText("Debug:: Gotcha 2" + fileName + "\r\n");
        int num3;
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 4), pVoid_1_2, 260U);
          goto label_14;
        }
        catch (Exception ex)
        {
          string message = ex.Message;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 4), pVoid_1_2, _Module.strlen((sbyte*) ((IntPtr) &_Module.struct121_0 + int_16 * 2392 + 4))) != 0)
          {
            this.textBox6.AppendText("Debug:: Memcpy failed" + "\r\n");
            num3 = 0;
          }
          else
            goto label_14;
        }
        return num3;
      }
label_14:
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + int_16 * 2392 + 2388), (void*) pByte_0, 262144U);
      int num4 = this.method_31(int_16);
      if (num4 == 3)
      {
        if (int_16 == 0)
        {
          this.method_40();
          this.method_39();
          this.tabControl5.SelectedTab = this.Firmtools;
          return 0;
        }
        else if (int_16 == 1)
        {
          this.method_43();
          this.method_42();
          this.tabControl5.SelectedTab = this.Firmtools;
          return 0;
        }
      }
      if (num4 == 0)
      {
        if (int_16 == 0)
          this.method_40();
        if (int_16 == 1)
          this.method_43();
        this.textBox6.AppendText("Parse Failed !" + "\r\n\r\n");
        return 0;
      }
      else
      {
        this.string_0 = "";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_7((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 2348));
        this.textBox6.AppendText("Firmware is:  " + this.string_0 + "\r\n");
        if (int_16 == 0)
        {
          this.method_40();
          this.method_38();
          if (!this.bool_4)
            this.method_27();
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 4)
            this.method_48();
          if (num1 == 1)
          {
            this.tabControl5.SelectedTab = this.Firmtools;
            if (this.method_49() == 1)
            {
              this.method_46();
              this.method_47();
              this.method_41();
            }
          }
        }
        else if (int_16 == 1)
        {
          this.method_43();
          this.method_41();
        }
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) @_Module.struct123_0 != 0 && (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 0)
          this.button6.Enabled = true;
        this.tabControl5.SelectedTab = this.Firmtools;
        return 1;
      }
    }

    private unsafe void method_38()
    {
      Struct68 struct68;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct68 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct68&) ((IntPtr) &struct68 + 1), 0, 259);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2382) && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2384))
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memset((void*) (^(int&) @_Module.struct123_0 + 2316), 0, 28U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) (^(int&) @_Module.struct123_0 + 2382) = (short) 0;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) (^(int&) @_Module.struct123_0 + 2384) = (short) 0;
      }
      string str1 = new string((sbyte*) &_Module.struct19_0);
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct35_124, __arglist (*(int*) (^(int&) @_Module.struct123_0 + 296)));
      this.label37.Text = str1 + new string((sbyte*) &struct68);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (*(int*) (^(int&) @_Module.struct123_0 + 296) == 114688 || *(int*) (^(int&) @_Module.struct123_0 + 296) == 122880 || (*(int*) (^(int&) @_Module.struct123_0 + 296) == 106496 || *(int*) (^(int&) @_Module.struct123_0 + 296) == 110592) || *(int*) (^(int&) @_Module.struct123_0 + 296) == 172032)
        this.label37.Text = "n/a";
      this.label38.Text = this.label37.Text;
      string str2 = "";
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      for (int index = 0; index < 16; ++index)
      {
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct10_20, __arglist (out struct68, (int) *(byte*) (^(int&) @_Module.struct123_0 + 280 + index)));
                _Module.sprintf((sbyte*)(&@struct68), (sbyte*)(&_Module.struct10_20), ref @struct, *(_Module.struct123_0 + 280 + index));
      }
      this.textBox9.Text = str2 + new string((sbyte*) &struct68);
      this.textBox3.Text = this.textBox9.Text;
      string str3 = "";
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct35_125, __arglist (^(int&) @_Module.struct123_0 + 2284));
      this.label44.Text = str3 + new string((sbyte*) &struct68);
      this.label45.Text = this.label44.Text;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 2)
      {
        string str4 = "";
        _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct10_21, __arglist (*(int*) (^(int&) @_Module.struct123_0 + 2020)));
        this.label101.Text = str4 + new string((sbyte*) &struct68);
        this.label128.Text = this.label101.Text;
      }
      string str5 = "";
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct35_125, __arglist (^(int&) @_Module.struct123_0 + 2316));
      this.label40.Text = str5 + new string((sbyte*) &struct68);
      this.label39.Text = this.label40.Text;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2384) == 0)
      {
        this.label42.Visible = false;
        this.label41.Visible = false;
        this.label40.Visible = false;
        this.label39.Visible = false;
      }
      else
      {
        this.label42.Visible = true;
        this.label41.Visible = true;
        this.label40.Visible = true;
        this.label39.Visible = true;
      }
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct18_9, __arglist (^(int&) @_Module.struct123_0 + 300));
      this.textBox15.Text = str1 + new string((sbyte*) &struct68);
      this.textBox16.Text = this.textBox15.Text;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 1)
      {
        this.label6.Text = "Samsung";
        this.label7.Text = "TS-H943A";
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 1)
        {
          this.label8.Text = "MS25";
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 2)
            this.label8.Text = "MS28";
        }
      }
      else
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 2)
        {
          this.label6.Text = "Hitachi";
          this.label7.Text = "GDR3120L";
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 1)
          {
            this.label8.Text = "0032";
          }
          else
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 2)
            {
              this.label8.Text = "0036";
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 3)
              {
                this.label8.Text = "0040";
              }
              else
              {
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 4)
                {
                  this.label8.Text = "0046";
                }
                else
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 5)
                  {
                    this.label8.Text = "0047";
                  }
                  else
                  {
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 6)
                    {
                      this.label8.Text = "0058";
                    }
                    else
                    {
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 7)
                      {
                        this.label8.Text = "0059";
                      }
                      else
                      {
                        // ISSUE: explicit reference operation
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 8)
                        {
                          this.label8.Text = "0078";
                        }
                        else
                        {
                          // ISSUE: explicit reference operation
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 9)
                          {
                            this.label8.Text = "0078";
                          }
                          else
                          {
                            // ISSUE: explicit reference operation
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 10)
                            {
                              this.label8.Text = "0078";
                            }
                            else
                            {
                              // ISSUE: explicit reference operation
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 11)
                              {
                                this.label8.Text = "0078";
                              }
                              else
                              {
                                // ISSUE: explicit reference operation
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 12)
                                {
                                  this.label8.Text = "0079";
                                }
                                else
                                {
                                  // ISSUE: explicit reference operation
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 13)
                                  {
                                    this.label8.Text = "0079";
                                  }
                                  else
                                  {
                                    // ISSUE: explicit reference operation
                                    // ISSUE: cast to a reference type
                                    // ISSUE: explicit reference operation
                                    if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 14)
                                    {
                                      this.label8.Text = "0079";
                                    }
                                    else
                                    {
                                      // ISSUE: explicit reference operation
                                      // ISSUE: cast to a reference type
                                      // ISSUE: explicit reference operation
                                      if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 15)
                                        this.label8.Text = "0079";
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 3)
          {
            this.label6.Text = "Benq";
            this.label7.Text = "VAD6038";
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 1)
            {
              this.label8.Text = "62430C";
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 2)
              {
                this.label8.Text = "64930C";
              }
              else
              {
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 3)
                  this.label8.Text = "04421C";
              }
            }
          }
          else
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 4)
            {
              this.label6.Text = "Lite-On";
              this.label7.Text = "DG-16D2S";
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 1)
              {
                this.label8.Text = "74850C";
              }
              else
              {
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 2)
                {
                  this.label8.Text = "83850C";
                }
                else
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 3)
                  {
                    this.label8.Text = "83850Cv2";
                  }
                  else
                  {
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 4)
                    {
                      this.label8.Text = "93450C";
                    }
                    else
                    {
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 5)
                        this.label8.Text = "02510C";
                    }
                  }
                }
              }
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 5)
              {
                this.label6.Text = "Lite-On";
                this.label7.Text = "DG-16D4S";
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 1)
                  this.label8.Text = "9504";
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 2)
                  this.label8.Text = "0225";
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 3)
                  this.label8.Text = "0401";
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 4)
                  this.label8.Text = "0272";
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 5)
                  this.label8.Text = "1071";
              }
              else
              {
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 6)
                {
                  this.label6.Text = "Lite-On";
                  this.label7.Text = "DG-16D5S";
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 1)
                    this.label8.Text = "1175";
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 2)
                    this.label8.Text = "1532";
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 3)
                    this.label8.Text = "0500";
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 4)
                    this.label8.Text = "0502";
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 5)
                    this.label8.Text = "0225";
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 6)
                    this.label8.Text = "0401";
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 7)
                    this.label8.Text = "1071";
                }
                else
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 7)
                  {
                    this.label6.Text = "Xecuter";
                    this.label7.Text = "LTU2";
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 1)
                      this.label8.Text = "1175";
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 2)
                      this.label8.Text = "1532";
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 3)
                      this.label8.Text = "0500";
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 4)
                      this.label8.Text = "0502";
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 5)
                      this.label8.Text = "0272";
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 6)
                      this.label8.Text = "0225";
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 7)
                      this.label8.Text = "0401";
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 8)
                      this.label8.Text = "1071";
                  }
                }
              }
            }
          }
        }
      }
      this.label26.Text = this.label6.Text;
      this.label25.Text = this.label7.Text;
      this.label24.Text = this.label8.Text;
      this.string_0 = "";
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.method_7((byte*) (^(int&) @_Module.struct123_0 + 2348));
      this.label16.Text = this.string_0;
      this.label22.Text = this.label16.Text;
      this.string_0 = "";
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.method_5((byte*) (^(int&) @_Module.struct123_0 + 568), 96U, 0U);
      this.textBox7.Text = this.string_0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 6 || (int) *(ushort*) ^(int&) @_Module.struct123_0 == 5 || (int) *(ushort*) ^(int&) @_Module.struct123_0 == 7)
      {
        this.string_0 = "";
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_5((byte*) (^(int&) @_Module.struct123_0 + 568), 116U, 0U);
        this.textBox7.Text = this.string_0;
      }
      this.string_0 = "";
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.method_5((byte*) (^(int&) @_Module.struct123_0 + 780), 180U, 0U);
      this.textBox10.Text = this.string_0;
      this.string_0 = "";
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 != 3 && (int) *(ushort*) ^(int&) @_Module.struct123_0 != 4)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 5)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_5((byte*) (^(int&) @_Module.struct123_0 + 2028), 224U, 0U);
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 6)
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_5((byte*) (^(int&) @_Module.struct123_0 + 2028), 96U, 0U);
          }
          else
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 7)
            {
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_5((byte*) (^(int&) @_Module.struct123_0 + 2028), 96U, 0U);
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 2)
              {
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_5((byte*) (^(int&) @_Module.struct123_0 + 2028), 20U, 0U);
              }
            }
          }
        }
      }
      else
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_5((byte*) (^(int&) @_Module.struct123_0 + 2028), 80U, 0U);
      }
      this.textBox12.Text = this.string_0;
      this.DumpDrive.Enabled = true;
      this.menuItem_6.Enabled = true;
      this.menuItem_7.Enabled = true;
      this.menuItem_13.Enabled = true;
      this.menuItem_19.Enabled = true;
      this.menuItem_33.Enabled = true;
    }

    private unsafe void method_39()
    {
      Struct68 struct68;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct68 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct68&) ((IntPtr) &struct68 + 1), 0, 259);
      Struct71 struct71_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct71_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct71&) ((IntPtr) &struct71_1 + 1), 0, 15);
      Struct71 struct71_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct71_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct71&) ((IntPtr) &struct71_2 + 1), 0, 15);
      string str1 = "";
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct18_9, __arglist (^(int&) @_Module.struct123_0 + 2284));
      this.label44.Text = str1 + new string((sbyte*) &struct68);
      this.label45.Text = this.label44.Text;
      string str2 = "";
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct18_9, __arglist (^(int&) @_Module.struct123_0 + 300));
      this.textBox15.Text = str2 + new string((sbyte*) &struct68);
      this.textBox16.Text = this.textBox15.Text;
      this.label6.Text = "Samsung";
      this.label26.Text = this.label6.Text;
      string str3 = "";
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct71_1, (void*) (^(int&) @_Module.struct123_0 + 2300), 8U);
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct18_9, __arglist (out struct71_1));
      this.label7.Text = str3 + new string((sbyte*) &struct68);
      this.label25.Text = this.label7.Text;
      string str4 = "";
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct71_2, (void*) (^(int&) @_Module.struct123_0 + 2308), 4U);
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct18_9, __arglist (out struct71_2));
      this.label8.Text = str4 + new string((sbyte*) &struct68);
      this.label24.Text = this.label8.Text;
      this.string_0 = "";
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.method_7((byte*) (^(int&) @_Module.struct123_0 + 2348));
      this.label16.Text = this.string_0;
      this.label22.Text = this.label16.Text;
      this.string_0 = "";
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.method_5((byte*) (^(int&) @_Module.struct123_0 + 568), 96U, 0U);
      this.textBox7.Text = this.string_0;
      this.string_0 = "";
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.method_5((byte*) (^(int&) @_Module.struct123_0 + 780), 180U, 0U);
      this.textBox10.Text = this.string_0;
      this.menuItem_6.Enabled = true;
    }

    private void method_40()
    {
      this.textBox3.Text = "";
      this.textBox7.Text = "";
      this.textBox9.Text = "";
      this.textBox10.Text = "";
      this.textBox12.Text = "";
      this.textBox15.Text = "";
      this.textBox16.Text = "";
      this.label6.Text = "";
      this.label7.Text = "";
      this.label8.Text = "";
      this.label16.Text = "";
      this.label22.Text = "";
      this.label24.Text = "";
      this.label25.Text = "";
      this.label26.Text = "";
      this.label37.Text = "";
      this.label38.Text = "";
      this.label39.Text = "";
      this.label40.Text = "";
      this.label44.Text = "";
      this.label45.Text = "";
      this.label101.Text = "";
      this.label128.Text = "";
      this.button6.Enabled = false;
      this.bool_10 = false;
      this.DumpDrive.Enabled = false;
      this.menuItem_6.Enabled = false;
      this.menuItem_7.Enabled = false;
      this.menuItem_13.Enabled = false;
      this.menuItem_19.Enabled = false;
      this.menuItem_33.Enabled = false;
    }

    private unsafe void method_41()
    {
      Struct68 struct68;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct68 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct68&) ((IntPtr) &struct68 + 1), 0, 259);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384))
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), 0, 28U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) = (short) 0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) = (short) 0;
      }
      string str1 = new string((sbyte*) &_Module.struct19_0);
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct35_124, __arglist (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296)));
      this.label55.Text = str1 + new string((sbyte*) &struct68);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) == 114688 || *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) == 122880 || (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) == 106496 || *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) == 110592) || *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) == 172032)
        this.label55.Text = "n/a";
      this.label56.Text = this.label55.Text;
      string str2 = "";
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct10_20, __arglist (out struct68, (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280 + index)));
      }
      this.textBox11.Text = str2 + new string((sbyte*) &struct68);
      this.textBox1.Text = this.textBox11.Text;
      string str3 = "";
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct35_125, __arglist (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2284));
      this.label48.Text = str3 + new string((sbyte*) &struct68);
      this.label53.Text = this.label48.Text;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 2)
      {
        string str4 = "";
        _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct10_21, __arglist (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2020)));
        this.label71.Text = str4 + new string((sbyte*) &struct68);
        this.label129.Text = this.label71.Text;
      }
      string str5 = "";
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct35_125, __arglist (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316));
      this.label50.Text = str5 + new string((sbyte*) &struct68);
      this.label54.Text = this.label50.Text;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 0)
      {
        this.label49.Visible = false;
        this.label50.Visible = false;
        this.label54.Visible = false;
        this.label52.Visible = false;
      }
      else
      {
        this.label49.Visible = true;
        this.label50.Visible = true;
        this.label54.Visible = true;
        this.label52.Visible = true;
      }
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct18_9, __arglist (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 300));
      this.textBox17.Text = str1 + new string((sbyte*) &struct68);
      this.textBox18.Text = this.textBox17.Text;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 1)
      {
        this.label11.Text = "Samsung";
        this.label10.Text = "TS-H943A";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 1)
        {
          this.label9.Text = "MS25";
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 2)
            this.label9.Text = "MS28";
        }
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 2)
        {
          this.label11.Text = "Hitachi";
          this.label10.Text = "GDR3120L";
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 1)
          {
            this.label9.Text = "0032";
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 2)
            {
              this.label9.Text = "0036";
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 3)
              {
                this.label9.Text = "0040";
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 4)
                {
                  this.label9.Text = "0046";
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 5)
                  {
                    this.label9.Text = "0047";
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 6)
                    {
                      this.label9.Text = "0058";
                    }
                    else
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 7)
                      {
                        this.label9.Text = "0059";
                      }
                      else
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 8)
                        {
                          this.label9.Text = "0078";
                        }
                        else
                        {
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 9)
                          {
                            this.label9.Text = "0078";
                          }
                          else
                          {
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 10)
                            {
                              this.label9.Text = "0078";
                            }
                            else
                            {
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 11)
                              {
                                this.label9.Text = "0078";
                              }
                              else
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 12)
                                {
                                  this.label9.Text = "0079";
                                }
                                else
                                {
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 13)
                                  {
                                    this.label9.Text = "0079";
                                  }
                                  else
                                  {
                                    // ISSUE: cast to a reference type
                                    // ISSUE: explicit reference operation
                                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 14)
                                    {
                                      this.label9.Text = "0079";
                                    }
                                    else
                                    {
                                      // ISSUE: cast to a reference type
                                      // ISSUE: explicit reference operation
                                      if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 15)
                                        this.label9.Text = "0079";
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 3)
          {
            this.label11.Text = "Benq";
            this.label10.Text = "VAD6038";
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 1)
            {
              this.label9.Text = "62430C";
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 2)
              {
                this.label9.Text = "64930C";
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 3)
                  this.label9.Text = "04421C";
              }
            }
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4)
            {
              this.label11.Text = "Lite-On";
              this.label10.Text = "DG-16D2S";
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 1)
              {
                this.label9.Text = "74850C";
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 2)
                {
                  this.label9.Text = "83850C";
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 3)
                  {
                    this.label9.Text = "83850Cv2";
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 4)
                    {
                      this.label9.Text = "93450C";
                    }
                    else
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 5)
                        this.label9.Text = "02510C";
                    }
                  }
                }
              }
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 5)
              {
                this.label11.Text = "Lite-On";
                this.label10.Text = "DG-16D4S";
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 1)
                  this.label9.Text = "9504";
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 2)
                  this.label9.Text = "0225";
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 3)
                  this.label9.Text = "0401";
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 4)
                  this.label9.Text = "0272";
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 5)
                  this.label9.Text = "1071";
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 6)
                {
                  this.label11.Text = "Lite-On";
                  this.label10.Text = "DG-16D5S";
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 1)
                    this.label9.Text = "1175";
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 2)
                    this.label9.Text = "1532";
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 3)
                    this.label9.Text = "0500";
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 4)
                    this.label9.Text = "0502";
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 5)
                    this.label9.Text = "0225";
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 6)
                    this.label9.Text = "0401";
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 7)
                    this.label9.Text = "1071";
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 7)
                  {
                    this.label11.Text = "Xecuter";
                    this.label10.Text = "LTU2";
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 1)
                      this.label9.Text = "1175";
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 2)
                      this.label9.Text = "1532";
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 3)
                      this.label9.Text = "0500";
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 4)
                      this.label9.Text = "0502";
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 5)
                      this.label9.Text = "0272";
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 6)
                      this.label9.Text = "0225";
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 7)
                      this.label9.Text = "0401";
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 8)
                      this.label9.Text = "1071";
                  }
                }
              }
            }
          }
        }
      }
      this.label32.Text = this.label11.Text;
      this.label31.Text = this.label10.Text;
      this.label30.Text = this.label9.Text;
      this.string_0 = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.method_7((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2348));
      this.label17.Text = this.string_0;
      this.label1.Text = this.label17.Text;
      this.string_0 = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.method_5((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), 96U, 0U);
      this.textBox2.Text = this.string_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 6 || (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 5 || (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 7)
      {
        this.string_0 = "";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_5((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), 116U, 0U);
        this.textBox2.Text = this.string_0;
      }
      this.string_0 = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.method_5((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780), 180U, 0U);
      this.textBox4.Text = this.string_0;
      this.string_0 = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 3 && (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 4)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 5)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_5((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 224U, 0U);
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 6)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_5((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 96U, 0U);
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 7)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_5((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 96U, 0U);
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 2)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_5((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 20U, 0U);
              }
            }
          }
        }
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_5((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 80U, 0U);
      }
      this.textBox13.Text = this.string_0;
      this.button29.Enabled = true;
      this.SaveTarget.Enabled = true;
      this.menuItem_4.Enabled = true;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4)
        this.menuItem_11.Enabled = true;
      this.menuItem_20.Enabled = true;
      this.menuItem_32.Enabled = true;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 6 && (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 7)
        return;
      this.menuItem_37.Enabled = true;
      this.menuItem_37.Visible = true;
    }

    private unsafe void method_42()
    {
      Struct68 struct68;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct68 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct68&) ((IntPtr) &struct68 + 1), 0, 259);
      Struct71 struct71_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct71_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct71&) ((IntPtr) &struct71_1 + 1), 0, 15);
      Struct71 struct71_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct71_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct71&) ((IntPtr) &struct71_2 + 1), 0, 15);
      string str1 = "";
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct18_9, __arglist (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2284));
      this.label48.Text = str1 + new string((sbyte*) &struct68);
      this.label53.Text = this.label48.Text;
      string str2 = "";
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct18_9, __arglist (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 300));
      this.textBox17.Text = str2 + new string((sbyte*) &struct68);
      this.textBox18.Text = this.textBox17.Text;
      this.label11.Text = "Samsung";
      this.label32.Text = this.label11.Text;
      string str3 = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct71_1, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2300), 8U);
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct18_9, __arglist (out struct71_1));
      this.label10.Text = str3 + new string((sbyte*) &struct68);
      this.label31.Text = this.label10.Text;
      string str4 = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct71_2, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2308), 4U);
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct18_9, __arglist (out struct71_2));
      this.label9.Text = str4 + new string((sbyte*) &struct68);
      this.label30.Text = this.label9.Text;
      this.string_0 = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.method_7((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2348));
      this.label17.Text = this.string_0;
      this.label1.Text = this.label17.Text;
      this.string_0 = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.method_5((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), 96U, 0U);
      this.textBox2.Text = this.string_0;
      this.string_0 = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.method_5((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780), 180U, 0U);
      this.textBox4.Text = this.string_0;
      this.menuItem_4.Enabled = true;
    }

    private void method_43()
    {
      this.textBox1.Text = "";
      this.textBox2.Text = "";
      this.textBox4.Text = "";
      this.textBox11.Text = "";
      this.textBox13.Text = "";
      this.textBox17.Text = "";
      this.textBox18.Text = "";
      this.label1.Text = "";
      this.label9.Text = "";
      this.label10.Text = "";
      this.label11.Text = "";
      this.label17.Text = "";
      this.label30.Text = "";
      this.label31.Text = "";
      this.label32.Text = "";
      this.label48.Text = "";
      this.label50.Text = "";
      this.label53.Text = "";
      this.label54.Text = "";
      this.label55.Text = "";
      this.label56.Text = "";
      this.label71.Text = "";
      this.label129.Text = "";
      this.SaveTarget.Enabled = false;
      this.button6.Enabled = false;
      this.button29.Enabled = false;
      this.menuItem_4.Enabled = false;
      this.menuItem_11.Enabled = false;
      this.menuItem_20.Enabled = false;
      this.menuItem_32.Enabled = false;
      this.menuItem_37.Enabled = false;
      this.menuItem_37.Visible = false;
      this.bool_10 = false;
      this.bool_11 = false;
    }

    private unsafe int method_44(sbyte* pSbyte_0, int int_16)
    {
      GStruct5* pGstruct5_0 = _Module.fopen(pSbyte_0, (sbyte*) &_Module.struct18_4);
      if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Firmware file not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 0;
      }
      else
      {
        _Module.fseek(pGstruct5_0, 0, 2);
        uint num1 = (uint) _Module.ftell(pGstruct5_0);
        _Module.rewind(pGstruct5_0);
        if ((int) num1 != 262144)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num2 = (int) MessageBox.Show("Firmware file must be 256Kb", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          _Module.fclose(pGstruct5_0);
          return 0;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) _Module.fread((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + int_16 * 2392 + 2388), 262144U, 1U, pGstruct5_0) != 1)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num2 = (int) MessageBox.Show("Firmware file should be 256Kbytes", "Loading File", MessageBoxButtons.OK);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            _Module.fclose(pGstruct5_0);
            return 0;
          }
          else
          {
            _Module.fclose(pGstruct5_0);
            return 1;
          }
        }
      }
    }

    private unsafe int method_45(string string_25)
    {
      if (string.Compare(string_25, "84e8290978447d9363762e57e5414054") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On iXtreme 1.5 rev 3" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "bc0309442c06e442e89f4c55d2c2859f") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On iXtreme 1.5 rev 4" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "d0ff1f977f35d40a57d476ba5957c93b") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On iXtreme 1.5 rev 5" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "499c26f34c3093f13e9ef8d0198f80c8") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On iXtreme 1.5 rev 6" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "a6d4c666c0014cadd0ca51c98cd3c80b") == 0)
      {
        this.textBox6.AppendText("Genuine Benq iXtreme 1.5 Final" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "4bc77f39c4cc65d61b7cdc2574119912") == 0)
      {
        this.textBox6.AppendText("Genuine Sammy iXtreme 1.5 Final" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "d8aaa30797c7680109b395bc3a380d5f") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On iXtreme 1.5 Final" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "933ed9c64d5839c69628059fc1e2806d") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On iXtreme 1.51" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "23f5a368839dfc10dabb8231ba64567a") == 0)
      {
        this.textBox6.AppendText("Genuine Samsung iXtreme 1.6" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "c3a17c9726f4be3cc3e597797caba7f9") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On iXtreme 1.6" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "bc61fac4efd37b69f88dfabe6e104117") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On 83850c iXtreme 1.6" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "f36c85c5bfba325b283417f8643d7c27") == 0)
      {
        this.textBox6.AppendText("Genuine Benq iXtreme 1.6" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "d9b4a4b8c668e28268066ce639e9866e") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On iXtreme 1.61" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "6695c239a716e84de3d6eefe64f9c3a7") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On iXtreme 1.61" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "7f2140e6f44b0d5fc59b4cbac0fc7f8a") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On iXtreme 1.61" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "2f30e817ad4bd1b85743289738fbc1c3") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On iXtreme 1.61" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "b951b7e08650e775886b78a2c1901a08") == 0)
      {
        this.textBox6.AppendText("Genuine iXtreme Lite-Touch" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "187ee5780d863922d49ec1d2ed0d9f48") == 0)
      {
        this.textBox6.AppendText("Genuine iXtreme Lite-Touch" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "7381f964ffef44da7bf94aa1dc067fb2") == 0)
      {
        this.textBox6.AppendText("Genuine iXtreme Lite-Touch" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "a6a01f28f4582afdefb6cf5367912a1d") == 0)
      {
        this.textBox6.AppendText("Genuine iXtreme Lite-Touch" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "b93c95db4fac3ca37c89c727e61c2453") == 0)
      {
        this.textBox6.AppendText("Genuine iXtreme Lite-Touch 1.1" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "3de7ccb1e529ce588d66bbaacbdf353a") == 0)
      {
        this.textBox6.AppendText("Genuine iXtreme Lite-Touch 1.1" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "7eb4e4ceeb720e24e6c1a77e4e2a66ae") == 0)
      {
        this.textBox6.AppendText("Genuine iXtreme Lite-Touch 1.1" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "483ee55c9bbaf9db83331d8c8f6a551d") == 0)
      {
        this.textBox6.AppendText("Genuine iXtreme Lite-Touch 1.1" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "c95fc1cf2f6f35bf1b84ae546cf58b97") == 0)
      {
        this.textBox6.AppendText("Genuine LT-Plus" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "f5ec9fa4b16d624ca71074ac6e6641d9") == 0)
      {
        this.textBox6.AppendText("Genuine LT-Plus" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "4cb38e41d87c204df72a395c6354fc7a") == 0)
      {
        this.textBox6.AppendText("Genuine LT-Plus" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "dc6b675de4c58a353d830f99a4a03d2e") == 0)
      {
        this.textBox6.AppendText("Genuine LT-Plus" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "53786fac70e9c6b895b2e99144c7fb6d") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.1" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "020325ef05290fa80baec9863041a11c") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.1" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "acc8ce739377578df2ca33ba3680ff54") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.1" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "d1671296ac52b8a67838f637f435fa6a") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.1" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "71cfb6569fd42a1d4eb243dbd4d3b159") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.9" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "5b94b528591d1028f6b1a9d7884c7a55") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.91" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "0264149996f783b54629c1598072e50e") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v2.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "d14fe82b96741b7a18e5c1e7adbf0a98") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v3.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "693cfff56a632029f008295b06ce1021") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.9" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "21ea0e6d5c8f04f21f95bfb40ff1ae1e") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.9 (9504 upgrade)" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "bd05e901e072c08a92364ed864395fb3") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.9" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "37d3222c404a1f841584b2cd50a308ad") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.9" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "5a14a34b933602a94f8375f9ce88f803") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.91" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "c51e40b948dfd2591420111c57beca8e") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.91 (9504 upgrade)" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "b161fcb485d1aafa9d9986c82c0f5a20") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.91" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "02e542648c5d42f291e9c2a206c48770") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.91" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "55828ef0e599d07f33698e482c85af19") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.91" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "c3f45b669000bb2d178394fa4164896d") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.92" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "2b4fce3f4da264939858d428971ce45b") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.92 (9504 upgrade)" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "3128442eae48cb5f9ffb0ce9778a3bd0") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.92" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "26c9114d31ff459123fa8af7f50b93e3") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.92" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "92504d007f30c0e6bceeb12a092600be") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.92" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "1012021472620cad9adf1f838497668e") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v2.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "a28aa0c2386925550f05b4b5af62d81b") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v2.0 (9504 upgrade)" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "0270d5174a07385eeb313c8371b547f8") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v2.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "e89c22ad8eecf634a3b27510901999c8") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v2.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "2811f396793a42c2f284c4ac8f9c4dbc") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v2.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "1a38d3a2a6519339599fa1866642c513") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v3.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "db5c70eaaabb53501c2c4f53dce9abfd") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v3.0 (9504 upgrade)" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "faf085ff40fcbedf6a352318d55879c0") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v3.0 (0401 downgrade)" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "87fba52607d01d3c73722f9f818588c9") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v3.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "76b991307ddd5b2af581d0608e671b36") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v3.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "3d1243454d9c6c1cd2760b8ea5f5c648") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v3.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "be5a7720962eb20340d403004717931a") == 0)
      {
        this.textBox6.AppendText("Genuine iXtreme Benq LT" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "c89cc7d1740f421d5d48bd002120571b") == 0)
      {
        this.textBox6.AppendText("Genuine iXtreme Benq LT 1.1" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "26a2add0da187dbf6aebce59fd73a1d2") == 0)
      {
        this.textBox6.AppendText("Genuine iXtreme Benq LT 1.2" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "ef3a351f05699a3ee0ad86d63375725e") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "c45d60fbd68cc642b2235ba12e5aad7d") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.1" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "cf132deb838212288f8b365bd16e9d24") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.9" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "6a146d19c9c52c0933ed737305cb8383") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v1.91" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "847700a6b5f12a88c61cfe31a5514772") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v2.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "8784e0f4ce27941a2a3293c8a5ac85e4") == 0)
      {
        this.textBox6.AppendText("Genuine LT plus v3.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "6f7dd0c34da043f4b5d29828b661bba0") == 0)
      {
        this.textBox6.AppendText("Genuine iXtreme Samsung LT" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "dc3bceed3b58e39133df3e186d1e4271") == 0)
      {
        this.textBox6.AppendText("Genuine LT v1.9" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "9e9ecbed96b490375497e9acef8326ac") == 0)
      {
        this.textBox6.AppendText("Genuine LT v2.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "d66252800c1c072bc612f2f72d1e3c76") == 0)
      {
        this.textBox6.AppendText("Genuine LT v2.01" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "fb7b3d4487cc17c6518b14e57ae82cc2") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On Slim 9504 LT" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "24305e18770955635041fd9221de4710") == 0)
      {
        this.textBox6.AppendText("Genuine Benq iXtreme 1.6 0800" + "\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("0800 f/w should not be used in a console, it is for external use only", "Warning", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.bool_11 = true;
        return 0;
      }
      else if (string.Compare(string_25, "83bd1232eb853b00e3f18c7d24b0e3c7") == 0)
      {
        this.textBox6.AppendText("Genuine Samsung iXtreme 1.6 0800" + "\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("0800 f/w should not be used in a console, it is for external use only", "Warning", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.bool_11 = true;
        return 0;
      }
      else if (string.Compare(string_25, "bbc6a11e18d0a01842e63bfba6dcba1c") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On iXtreme 1.6 0800" + "\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("0800 f/w should not be used in a console, it is for external use only", "Warning", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.bool_11 = true;
        return 0;
      }
      else if (string.Compare(string_25, "777e8c2d89e0f57f891aa6735ed1cc95") == 0)
      {
        this.textBox6.AppendText("Genuine Lite-On LT 0800 v3" + "\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("0800 f/w should not be used in a console, it is for external use only", "Warning", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.bool_11 = true;
        return 0;
      }
      else if (string.Compare(string_25, "31b7a19fa0e92c27060a77bb0cf37fcf") == 0)
      {
        this.textBox6.AppendText("Genuine Benq LT 0800 v3" + "\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("0800 f/w should not be used in a console, it is for external use only", "Warning", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.bool_11 = true;
        return 0;
      }
      else if (string.Compare(string_25, "17eb69239a0b09774e8048e65f0fec73") == 0)
      {
        this.textBox6.AppendText("Genuine SH-D162C Kreon V1.00" + "\r\n");
        return 1;
      }
      else if (string.Compare(string_25, "6360057764b8c982ddad06de1c657378") == 0)
      {
        this.textBox6.AppendText("Genuine SH-D162D Kreon V1.00" + "\r\n");
        return 1;
      }
      else if (string.Compare(string_25, "102564b8bc50918a68a25587e8b281ff") == 0)
      {
        this.textBox6.AppendText("Genuine SH-D163A Kreon V1.00" + "\r\n");
        return 1;
      }
      else if (string.Compare(string_25, "356331d88a72bd20937dd8ebd1305f5a") == 0)
      {
        this.textBox6.AppendText("Genuine SH-D163B Kreon V1.00" + "\r\n");
        return 1;
      }
      else if (string.Compare(string_25, "acb3a39456d2dd0e9380d365b4e6b122") == 0)
      {
        this.textBox6.AppendText("Genuine SH-D162C Kreon V0.80" + "\r\n");
        return 1;
      }
      else if (string.Compare(string_25, "16f38161d1db01ad96da6ec566377d99") == 0)
      {
        this.textBox6.AppendText("Genuine SH-D162C Kreon V0.81" + "\r\n");
        return 1;
      }
      else if (string.Compare(string_25, "7722d31323e6d5d70b2f28a6755303f8") == 0)
      {
        this.textBox6.AppendText("Genuine LTU v1.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "d354a7c0681302300cfcd7e2e35c0e66") == 0)
      {
        this.textBox6.AppendText("Genuine LTU v1.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "7c66816d5e144af6e638cc5e4ff39c55") == 0)
      {
        this.textBox6.AppendText("Genuine LTU v1.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "5af581cd3c86022c5d1187a8a5cb51dd") == 0)
      {
        this.textBox6.AppendText("Genuine LTU v1.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "b20d3c83f3205c21375d8747d9c40cc8") == 0)
      {
        this.textBox6.AppendText("Genuine LTU v1.0" + "\r\n");
        return 0;
      }
      else if (string.Compare(string_25, "b2912a15a6f571e5b39d758a10cdd791") == 0)
      {
        this.textBox6.AppendText("Genuine LTU v1.0" + "\r\n");
        return 0;
      }
      else
      {
        if (string.Compare(string_25, "9ef0587eaf725808ccd251384b89aef8") != 0)
          return 0;
        this.textBox6.AppendText("Genuine LTU v1.0" + "\r\n");
        return 0;
      }
    }

    private unsafe int method_46()
    {
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No Source f/w loaded", "Spoof Target", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 0;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show("No Target f/w loaded", "Spoof Target", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          return 0;
        }
        else
        {
          this.textBox6.AppendText("Spoofing Target" + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), (void*) (^(int&) @_Module.struct123_0 + 280), 16U) != 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), (void*) (^(int&) @_Module.struct123_0 + 280), 16U);
            this.textBox6.AppendText("DVD Key copied to target" + "\r\n");
          }
          else
            this.textBox6.AppendText("DVD Key already matches" + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 5)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 172032), (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 172032), 4096U);
            this.textBox6.AppendText("Key Sector copied from Source to Target" + "\r\n");
          }
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 6)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 6)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 62464), (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 62464), 3059U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 127488), (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 127488), 3572U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 193024), (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 193024), 2907U);
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 7)
            {
              for (int index = 0; index < 3059; ++index)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + (index + 186624)) = (sbyte) ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + (index + 62464)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct58_0 + index));
              }
              for (int index = 0; index < 3572; ++index)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + (index + 189683)) = (sbyte) ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + (index + 127488)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct56_0 + index));
              }
              for (int index = 0; index < 2907; ++index)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + (index + 193255)) = (sbyte) ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + (index + 193024)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct49_0 + index));
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 130816), (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 261888), 80U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), (void*) (^(int&) @_Module.struct123_0 + 2028), 80U);
            }
          }
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 7)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 7)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 186624), (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 186624), 9538U);
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 6)
            {
              for (int index = 0; index < 3059; ++index)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + (index + 62464)) = (sbyte) ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + (index + 186624)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct58_0 + index));
              }
              for (int index = 0; index < 3572; ++index)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + (index + 127488)) = (sbyte) ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + (index + 189683)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct56_0 + index));
              }
              for (int index = 0; index < 2907; ++index)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + (index + 193024)) = (sbyte) ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + (index + 193255)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct49_0 + index));
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 261888), (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 130816), 80U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), (void*) (^(int&) @_Module.struct123_0 + 2028), 80U);
            }
          }
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) (^(int&) @_Module.struct123_0 + 2382) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), (void*) (^(int&) @_Module.struct123_0 + 2284), 28U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) = (short) *(ushort*) ^(int&) @_Module.struct123_0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) = (short) *(ushort*) (^(int&) @_Module.struct123_0 + 2);
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), (void*) (^(int&) @_Module.struct123_0 + 2316), 28U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) = (short) *(ushort*) (^(int&) @_Module.struct123_0 + 2382);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) = (short) *(ushort*) (^(int&) @_Module.struct123_0 + 2384);
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4 && _Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2348), (void*) &_Module.struct74_0, 10U) == 0)
          {
            this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4 && _Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2348), (void*) &_Module.struct22_4, 7U) == 0)
            {
              this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 5)
              {
                this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 5)
                {
                  this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 3 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 3)
                  {
                    this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), (void*) (^(int&) @_Module.struct123_0 + 568), 96U) != 0)
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), (void*) (^(int&) @_Module.struct123_0 + 568), 96U);
                      this.textBox6.AppendText("Inquiry string copied to Target" + "\r\n");
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780), (void*) (^(int&) @_Module.struct123_0 + 780), 180U);
                      this.textBox6.AppendText("Identify string copied to Target" + "\r\n");
                    }
                    else
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), (void*) (^(int&) @_Module.struct123_0 + 568), 116U) != 0)
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        // ISSUE: explicit reference operation
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), (void*) (^(int&) @_Module.struct123_0 + 568), 116U);
                        this.textBox6.AppendText("Inquiry string copied to Target" + "\r\n");
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        // ISSUE: explicit reference operation
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780), (void*) (^(int&) @_Module.struct123_0 + 780), 180U);
                        this.textBox6.AppendText("Identify string copied to Target" + "\r\n");
                      }
                      else
                        this.textBox6.AppendText("ID strings already match" + "\r\n");
                    }
                  }
                }
              }
            }
          }
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) && _Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), (void*) (^(int&) @_Module.struct123_0 + 2028), 80U) != 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 2)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), (void*) (^(int&) @_Module.struct123_0 + 2028), 20U);
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 3 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) != 3)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), (void*) (^(int&) @_Module.struct123_0 + 2028), 80U);
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) != 5)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), (void*) (^(int&) @_Module.struct123_0 + 2028), 80U);
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 5)
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), (void*) (^(int&) @_Module.struct123_0 + 2028), 80U);
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(byte*) (^(int&) @_Module.struct123_0 + 2156) != 0)
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), (void*) (^(int&) @_Module.struct123_0 + 2028), 144U);
                    }
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(byte*) (^(int&) @_Module.struct123_0 + 2187) != 0)
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), (void*) (^(int&) @_Module.struct123_0 + 2028), 224U);
                    }
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 6)
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), (void*) (^(int&) @_Module.struct123_0 + 2028), 256U);
                    }
                    else
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 7)
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        // ISSUE: explicit reference operation
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), (void*) (^(int&) @_Module.struct123_0 + 2028), 80U);
                      }
                    }
                  }
                }
              }
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 1 && (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) != 5)
              this.textBox6.AppendText("Serial data copied from Source to Target" + "\r\n");
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), (void*) (^(int&) @_Module.struct123_0 + 2028), 80U) == 0 && (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 1)
              this.textBox6.AppendText("Serial data already matches" + "\r\n");
          }
          this.textBox6.AppendText("\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2284), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), 28U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), 0, 32U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) = (short) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) = (short) 0;
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) == 4)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), 0, 32U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) = (short) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) = (short) 0;
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4 && _Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2348), (void*) &_Module.struct74_0, 10U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), 0, 32U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) = (short) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) = (short) 0;
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4 && _Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2348), (void*) &_Module.struct22_4, 7U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), 0, 32U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) = (short) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) = (short) 0;
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 5)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), 0, 32U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) = (short) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) = (short) 0;
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 5)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), 0, 32U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) = (short) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) = (short) 0;
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 3 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 3)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), 0, 32U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) = (short) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) = (short) 0;
          }
          this.bool_10 = true;
          return 1;
        }
      }
    }

    private unsafe int method_47()
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte* numPtr = (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 1)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 560)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), 96U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 564)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780), 180U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), 16U);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 2)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 560)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), 96U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 564)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780), 180U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), 16U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2024)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 20U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[255996] = (byte) (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2020) & (int) byte.MaxValue);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[255997] = (byte) ((uint) (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2020) & 65280) >> 8);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[255998] = (byte) ((uint) (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2020) & 16711680) >> 16);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[255999] = (byte) ((uint) (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2020) & -16777216) >> 24);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 3)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 560)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), 96U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 560) + 65536)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), 96U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 560) + 131072)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), 96U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 560) + 196608)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), 96U);
        Struct46 struct46;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) &struct46, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780), 180U);
        int num = 20;
        while (num < 93)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct46 + (num + 1)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780 + num);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct46 + num) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780 + (num + 1));
          num += 2;
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 564)), (void*) &struct46, 180U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 564) + 65536)), (void*) &struct46, 180U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 564) + 131072)), (void*) &struct46, 180U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 564) + 196608)), (void*) &struct46, 180U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), 16U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2024)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 80U);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 312] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 2796] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 281);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 1858] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 282);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 1664] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 283);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 3789] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 284);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 2868] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 285);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 2111] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 286);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 1829] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 287);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 1322] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 288);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 513] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 289);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 2527] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 290);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 35] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 291);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 1184] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 292);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 1434] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 293);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 1022] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 294);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 3913] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 295);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 5)
        {
          this.textBox6.AppendText("Target rev is LT 02510C, serial info not copied" + "\r\n");
          return 1;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2024)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 80U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2348), (void*) &_Module.struct74_0, 10U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), 0, 32U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) = (short) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) = (short) 0;
            for (int index = 0; index < 20; ++index)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 42)) = (sbyte) numPtr[index + 130816];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780 + (index + 20)) = (sbyte) numPtr[index + 130816];
            }
            for (int index = 0; index < 2; ++index)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 38)) = (sbyte) numPtr[index + 130856];
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 40)) = (sbyte) numPtr[index + 130892];
            }
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2348), (void*) &_Module.struct22_4, 7U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), 0, 32U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) = (short) 0;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) = (short) 0;
              for (int index = 0; index < 20; ++index)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 42)) = (sbyte) numPtr[index + 130816];
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780 + (index + 20)) = (sbyte) numPtr[index + 130816];
              }
              for (int index = 0; index < 2; ++index)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 38)) = (sbyte) numPtr[index + 130856];
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 40)) = (sbyte) numPtr[index + 130892];
              }
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) == 1)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 1)
                {
                  _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_8, 276U);
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 2)
                    _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_6, 276U);
                }
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) == 2)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 1)
                  {
                    _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_2, 276U);
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 2)
                    {
                      _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_0, 276U);
                    }
                    else
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 3)
                      {
                        _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_10, 276U);
                      }
                      else
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 4)
                        {
                          _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_4, 276U);
                        }
                        else
                        {
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 5)
                          {
                            _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_3, 276U);
                          }
                          else
                          {
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 6)
                            {
                              _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_12, 276U);
                            }
                            else
                            {
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 7)
                              {
                                _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_11, 276U);
                              }
                              else
                              {
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 8)
                                {
                                  _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_9, 276U);
                                }
                                else
                                {
                                  // ISSUE: cast to a reference type
                                  // ISSUE: explicit reference operation
                                  if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 9)
                                  {
                                    _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_9, 276U);
                                  }
                                  else
                                  {
                                    // ISSUE: cast to a reference type
                                    // ISSUE: explicit reference operation
                                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 10)
                                    {
                                      _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_9, 276U);
                                    }
                                    else
                                    {
                                      // ISSUE: cast to a reference type
                                      // ISSUE: explicit reference operation
                                      if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 11)
                                      {
                                        _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_9, 276U);
                                      }
                                      else
                                      {
                                        // ISSUE: cast to a reference type
                                        // ISSUE: explicit reference operation
                                        if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 12)
                                        {
                                          _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_13, 276U);
                                        }
                                        else
                                        {
                                          // ISSUE: cast to a reference type
                                          // ISSUE: explicit reference operation
                                          if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 13)
                                          {
                                            _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_13, 276U);
                                          }
                                          else
                                          {
                                            // ISSUE: cast to a reference type
                                            // ISSUE: explicit reference operation
                                            if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 14)
                                            {
                                              _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_13, 276U);
                                            }
                                            else
                                            {
                                              // ISSUE: cast to a reference type
                                              // ISSUE: explicit reference operation
                                              if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 15)
                                                _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_13, 276U);
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) == 3)
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 1)
                    {
                      _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_1, 276U);
                    }
                    else
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) == 2)
                        _Module.memcpy((void*) (numPtr + 81408), (void*) &_Module.struct47_5, 276U);
                    }
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) == 0)
                    {
                      for (int index = 0; index < 20; ++index)
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 42)) = (sbyte) numPtr[index + 130816];
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780 + (index + 20)) = (sbyte) numPtr[index + 130816];
                      }
                      for (int index = 0; index < 2; ++index)
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 38)) = (sbyte) numPtr[index + 130856];
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 40)) = (sbyte) numPtr[index + 130892];
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 5)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 1)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2045) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2046) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2047) = (sbyte) 0;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 2 && (int) numPtr[126976] == 96)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2045) = (sbyte) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2046) = (sbyte) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2047) = (sbyte) 0;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2045) = (sbyte) 32;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2046) = (sbyte) 32;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2047) = (sbyte) 32;
          }
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2024)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 80U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2156) != 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2024)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 144U);
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2187) != 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2024)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 224U);
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 258048) != 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 258048) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 258048);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 258049) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 258049);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 258050) != 229 && (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 258050) != 229 && (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 258050) != 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 258050) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 258050);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 258051) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 258051);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 258052) != 229 && (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 258052) != 229 && (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 258052) != 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 258052) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 258052);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 258053) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 258053);
            }
          }
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 6)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_35((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), (byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 126960));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2024)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 256U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) != 1 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) != 2)
        {
          for (int index = 0; index < 20; ++index)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 96)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028 + index);
          }
        }
        else
        {
          for (int index = 0; index < 20; ++index)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 96)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028 + index);
          }
          int num = 0;
          while (num < 20)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780 + (num + 20)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028 + (num + 1));
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780 + (num + 21)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028 + num);
            num += 2;
          }
          for (int index = 0; index < 2; ++index)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 52)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028 + (index + 40));
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 54)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028 + (index + 76));
          }
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 7)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 312] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 2796] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 281);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 1858] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 282);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 1664] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 283);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 3789] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 284);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 2868] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 285);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 2111] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 286);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 1829] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 287);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 1322] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 288);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 513] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 289);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 2527] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 290);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 35] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 291);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 1184] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 292);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 1434] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 293);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 1022] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 294);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        numPtr[*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 296) + 3913] = *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 295);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (numPtr + *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2024)), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 80U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) != 1 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) != 2)
        {
          for (int index = 0; index < 20; ++index)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 96)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028 + index);
          }
        }
        else
        {
          for (int index = 0; index < 20; ++index)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 96)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028 + index);
          }
          int num = 0;
          while (num < 20)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780 + (num + 20)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028 + (num + 1));
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780 + (num + 21)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028 + num);
            num += 2;
          }
          for (int index = 0; index < 2; ++index)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 52)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028 + (index + 40));
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568 + (index + 54)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028 + (index + 76));
          }
        }
      }
      return 1;
    }

    private unsafe void method_48()
    {
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 4 && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 5)
        return;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte* numPtr = (byte*) (^(int&) @_Module.struct123_0 + 2028);
      if (!((int) numPtr[24] == (int) numPtr[25] & (int) numPtr[24] == (int) numPtr[26] & (int) numPtr[24] == (int) numPtr[27] & (int) numPtr[44] == (int) numPtr[45] & (int) numPtr[44] == (int) numPtr[46] & (int) numPtr[44] == (int) numPtr[47]))
        return;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      string text1 = new string((sbyte*) (^(int&) @_Module.struct123_0 + 4)) + " is missing some drive specific information.     " + "\n\n" + "If this is an old dummy.bin that predates ix1.5 then" + "\n" + "if possible you should re-extract your drive info again" + "\n" + "with the latest tools.." + new string((sbyte*) &_Module.struct6_7) + "        1. JungleFlasher, this tool - DVDKey32 Tab" + "\n" + "        2. Dosflash 1.7+" + new string((sbyte*) &_Module.struct6_7) + "        3. DVDKey32 0.7+" + new string((sbyte*) &_Module.struct6_7) + "You can rebuild the serial info if you have the original" + new string((sbyte*) &_Module.struct6_7) + "drive available. Tick advanced view, select the Serial" + new string((sbyte*) &_Module.struct6_7) + "sub-tab in the Source tab. Double-click the serial data" + new string((sbyte*) &_Module.struct18_11) + "For some newer drives this info is blank by default, if" + new string((sbyte*) &_Module.struct6_7) + "you are happy that this is the case then there is no" + new string((sbyte*) &_Module.struct6_7) + "need to repair the serial info." + new string((sbyte*) &_Module.struct18_11) + "Do you wish to proceed anyway ?" + "\n";
      // ISSUE: cast to a function pointer type
      _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
      int num1 = (int) MessageBox.Show((IWin32Window) this, text1, "Loading Dummy.bin", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);
      _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      if (num1 == 7)
      {
        this.textBox6.AppendText("Dummy.bin not loaded" + "\r\n");
        this.method_40();
      }
      else
      {
        string text2 = "" + "Do you wish to repair the serial from drive barcodes ?" + "\n";
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num2 = (int) MessageBox.Show((IWin32Window) this, text2, "Loading Dummy.bin", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num2 != 6)
          return;
        this.method_52();
      }
    }

    private unsafe int method_49()
    {
      string str1 = (string) null;
      string str2 = (string) null;
      string str3 = (string) null;
      string[] commandLineArgs = Environment.GetCommandLineArgs();
      str1 = "";
      while (string.Compare(commandLineArgs[0], "") == 0)
        Environment.GetCommandLineArgs();
      string directoryName = Path.GetDirectoryName(commandLineArgs[0]);
      string str4;
      string strB;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 1)
      {
        str4 = directoryName + "\\firmware\\LT-sammy-v2.01.bin";
        strB = "d66252800c1c072bc612f2f72d1e3c76";
      }
      else
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 3 && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 1)
        {
          str4 = directoryName + "\\firmware\\LTPlus-benq-v1.1.bin";
          strB = "c45d60fbd68cc642b2235ba12e5aad7d";
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 3 && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 2)
          {
            str4 = directoryName + "\\firmware\\LTPlus-benq-v1.1.bin";
            strB = "c45d60fbd68cc642b2235ba12e5aad7d";
          }
          else
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 3 && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 3)
            {
              str4 = directoryName + "\\firmware\\LTPlus-0442-v3.0.bin";
              strB = "8784e0f4ce27941a2a3293c8a5ac85e4";
            }
            else
            {
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 4 && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 1)
              {
                str4 = directoryName + "\\firmware\\LTPlus-748v1.1.bin";
                strB = "53786fac70e9c6b895b2e99144c7fb6d";
              }
              else
              {
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 4 && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 2)
                {
                  str4 = directoryName + "\\firmware\\LTPlus-838v1.1.bin";
                  strB = "020325ef05290fa80baec9863041a11c";
                }
                else
                {
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 4 && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 3)
                  {
                    str4 = directoryName + "\\firmware\\LTPlus-838v2v1.1.bin";
                    strB = "acc8ce739377578df2ca33ba3680ff54";
                  }
                  else
                  {
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 4 && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 4)
                    {
                      str4 = directoryName + "\\firmware\\LTPlus-934v1.1.bin";
                      strB = "d1671296ac52b8a67838f637f435fa6a";
                    }
                    else
                    {
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 4 && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 5)
                      {
                        str4 = directoryName + "\\firmware\\LTPlus-0251-v3.0.bin";
                        strB = "d14fe82b96741b7a18e5c1e7adbf0a98";
                      }
                      else
                      {
                        // ISSUE: explicit reference operation
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        // ISSUE: explicit reference operation
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 5 && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 1)
                        {
                          str4 = directoryName + "\\firmware\\LTPlus-9504.bin";
                          strB = "fb7b3d4487cc17c6518b14e57ae82cc2";
                        }
                        else
                        {
                          // ISSUE: explicit reference operation
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          // ISSUE: explicit reference operation
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 5 && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 2)
                          {
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 126976) == 96)
                            {
                              str4 = directoryName + "\\firmware\\LTPlus-0225-v3.0u.bin";
                              strB = "db5c70eaaabb53501c2c4f53dce9abfd";
                            }
                            else
                            {
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 126976) == 125)
                              {
                                str4 = directoryName + "\\firmware\\LTPlus-0225-v3.0d.bin";
                                strB = "faf085ff40fcbedf6a352318d55879c0";
                              }
                              else
                              {
                                str4 = directoryName + "\\firmware\\LTPlus-0225-v3.0.bin";
                                strB = "1a38d3a2a6519339599fa1866642c513";
                              }
                            }
                          }
                          else
                          {
                            // ISSUE: explicit reference operation
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            // ISSUE: explicit reference operation
                            // ISSUE: cast to a reference type
                            // ISSUE: explicit reference operation
                            if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 5 && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 3)
                            {
                              str4 = directoryName + "\\firmware\\LTPlus-0401-v3.0.bin";
                              strB = "87fba52607d01d3c73722f9f818588c9";
                            }
                            else
                            {
                              // ISSUE: explicit reference operation
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              // ISSUE: explicit reference operation
                              // ISSUE: cast to a reference type
                              // ISSUE: explicit reference operation
                              if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 5 && (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) == 4)
                              {
                                str4 = directoryName + "\\firmware\\LTPlus-0272-v3.0.bin";
                                strB = "76b991307ddd5b2af581d0608e671b36";
                              }
                              else
                              {
                                // ISSUE: explicit reference operation
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                // ISSUE: explicit reference operation
                                // ISSUE: cast to a reference type
                                // ISSUE: explicit reference operation
                                if ((int) *(ushort*) ^(int&) @_Module.struct123_0 != 5 || (int) *(ushort*) (^(int&) @_Module.struct123_0 + 2) != 5)
                                  return 0;
                                str4 = directoryName + "\\firmware\\LTPlus-1071-v3.0.bin";
                                strB = "3d1243454d9c6c1cd2760b8ea5f5c648";
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (!this.bool_2)
      {
        str2 = "";
        string text = this.label6.Text + (object) " firmware loaded to Source buffer!" + "\n" + "Do you wish to auto-load " + (string) __arglist (this.label6.Text, " LT-Plus ?");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show((IWin32Window) this, text, "Loading Source", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num == 7)
          return 0;
      }
      sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(str4);
      if ((IntPtr) _Module.fopen(pSbyte_0, (sbyte*) &_Module.struct18_4) == IntPtr.Zero)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show((IWin32Window) this, "Can't open file" + " " + str4, "Auto-Load iXtreme", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 0;
      }
      else
      {
        GStruct93 gstruct93;
        _Module.smethod_111(&gstruct93);
        GStruct19 gstruct19_1;
        int num1;
        // ISSUE: fault handler
        try
        {
          GStruct19 gstruct19_2;
          GStruct19* pGstruct19_1 = _Module.smethod_91(&gstruct19_2, pSbyte_0);
          _Module.smethod_114(&gstruct93, &gstruct19_1, pGstruct19_1);
          // ISSUE: fault handler
          try
          {
            str3 = "";
            if (string.Compare(new string(_Module.smethod_94(&gstruct19_1)), strB) != 0)
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num2 = (int) MessageBox.Show((IWin32Window) this, "iXtreme file failed MD5 hash check!", "Load iXtreme", MessageBoxButtons.OK);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              num1 = 0;
            }
            else
              goto label_48;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
          _Module.smethod_92(&gstruct19_1);
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
        _Module.smethod_112(&gstruct93);
        return num1;
label_48:
        int num3;
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            this.textBox6.AppendText(string.Concat((object) "Auto-"));
            this.method_36(str4, 1);
            num3 = 1;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
          _Module.smethod_92(&gstruct19_1);
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
        _Module.smethod_112(&gstruct93);
        return num3;
      }
    }

    private void OpenSource_Click(object sender, EventArgs e)
    {
      this.method_50(0);
    }

    private void method_50(int int_16)
    {
      this.method_40();
      OpenFileDialog openFileDialog = new OpenFileDialog();
      openFileDialog.Filter = "Firmware file (*.bin)|*.bin|All Files (*.*)|*.*";
      openFileDialog.FileName = "Orig.bin";
      openFileDialog.DefaultExt = ".bin";
      openFileDialog.CheckFileExists = true;
      openFileDialog.CheckPathExists = true;
      openFileDialog.RestoreDirectory = false;
      if (this.bool_2)
        openFileDialog.InitialDirectory = this.string_10;
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return;
      this.method_36(Path.GetFullPath(openFileDialog.FileName), int_16);
    }

    private void tabPage12_DragDrop(object sender, DragEventArgs e)
    {
      this.method_40();
      this.method_36(((string[]) e.Data.GetData(DataFormats.FileDrop))[0], 0);
    }

    private void textBox19_TextChanged(object sender, EventArgs e)
    {
      if (string.Compare(this.textBox19.Text, "EasyToFindSource") == 0)
        return;
      if (string.Compare(this.textBox19.Text, "DoDVDKey") == 0)
        this.method_60();
      else if (string.Compare(this.textBox19.Text, "DoBadFlash") == 0)
        this.method_198();
      else
        this.method_36(this.textBox19.Text, 0);
      this.textBox19.Text = "EasyToFindSource";
    }

    private void textBox20_TextChanged(object sender, EventArgs e)
    {
      if (string.Compare(this.textBox20.Text, "EasyToFindUpdate") == 0)
        return;
      this.method_43();
      this.method_36(this.textBox20.Text, 5);
      this.method_27();
      this.textBox20.Text = "EasyToFindUpdate";
    }

    private void tabPage12_DragEnter(object sender, DragEventArgs e)
    {
      e.Effect = !e.Data.GetDataPresent(DataFormats.FileDrop) ? DragDropEffects.None : DragDropEffects.All;
      if (((string[]) e.Data.GetData(DataFormats.FileDrop)).Length <= 1)
        return;
      e.Effect = DragDropEffects.None;
    }

    private void menuItem_5_Click(object sender, EventArgs e)
    {
      this.method_50(0);
    }

    private unsafe void menuItem_6_Click(object sender, EventArgs e)
    {
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memset((void*) ^(int&) @_Module.struct123_0, 0, 2392U);
      this.method_40();
    }

    private void menuItem_7_Click(object sender, EventArgs e)
    {
      if (this.bool_4)
        return;
      this.method_27();
    }

    private void menuItem_12_Click(object sender, EventArgs e)
    {
      DataBaseView dataBaseView = new DataBaseView();
      dataBaseView.int_0 = 0;
      if (dataBaseView.ShowDialog((IWin32Window) this) != DialogResult.OK)
        return;
      this.string_10 = Path.GetDirectoryName(dataBaseView.textBox15.Text);
      this.string_9 = dataBaseView.textBox2.Text;
    }

    private void menuItem_13_Click(object sender, EventArgs e)
    {
      this.method_28();
    }

    private unsafe void menuItem_19_Click(object sender, EventArgs e)
    {
      string str1 = (string) null;
      if (this.method_69() == 0)
      {
        this.textBox6.AppendText("No drive present on port " + this.comboBox7.Text + "\r\n\r\n");
      }
      else
      {
        this.textBox6.AppendText("Attempting to verify Source Key to drive on port " + this.comboBox7.Text + "\r\n");
        string text = this.textBox9.Text;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (this.method_107((byte*) (^(int&) @_Module.struct123_0 + 280)) == 1)
        {
          RegistryKey subKey1 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\KeyList");
          if (subKey1.GetValue(text) != null)
          {
            string str2 = subKey1.GetValue(text).ToString();
            subKey1.Close();
            RegistryKey subKey2 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + str2);
            if (subKey2.GetValue("JobName") != null)
              str1 = subKey2.GetValue("JobName").ToString();
            string str3 = subKey2.GetValue("WorkingDir") == null ? "" : subKey2.GetValue("WorkingDir").ToString();
            string strA = subKey2.GetValue("LastFile") == null ? "" : subKey2.GetValue("LastFile").ToString();
            if (subKey2.GetValue("Index") != null)
              str2 = subKey2.GetValue("Index").ToString();
            this.toolTip_0.SetToolTip((Control) this.pictureBox5, "Drive Key found in KeyDB (" + (object) str2 + " - " + str1 + (string) __arglist (")", Environment.NewLine, "Key is: ", text));
            this.toolTip_0.SetToolTip((Control) this.pictureBox2, "Drive Key found in KeyDB (" + (object) str2 + " - " + str1 + (string) __arglist (")", Environment.NewLine, "Key is: ", text));
            this.pictureBox5.Visible = true;
            this.pictureBox7.Visible = false;
            this.pictureBox2.Visible = true;
            this.pictureBox6.Visible = false;
            if (string.Compare(strA, "") != 0)
              this.menuItem_21.Enabled = true;
            this.menuItem_22.Enabled = true;
            this.menuItem_23.Enabled = true;
            this.menuItem_24.Enabled = true;
            this.string_14 = text;
            this.string_15 = str2;
            this.string_16 = strA;
            this.string_17 = str3;
            this.label133.Text = "Verified";
            this.label131.Text = "Verified";
            subKey2.Close();
            this.Cursor = Cursors.Arrow;
            this.textBox6.AppendText("\r\n" + (object) "Key found in KeyDB at record (" + str2 + " - " + (string) __arglist (str1, ")", "\r\n", "Key is: ", text, "\r\n", "Key has been tested and verified, thanks C4eva ! ", "\r\n"));
          }
          else
          {
            this.toolTip_0.SetToolTip((Control) this.pictureBox5, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + text);
            this.toolTip_0.SetToolTip((Control) this.pictureBox2, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + text);
            this.pictureBox5.Visible = true;
            this.pictureBox7.Visible = false;
            this.pictureBox2.Visible = true;
            this.pictureBox6.Visible = false;
            this.string_14 = text;
            this.label133.Text = "Verified";
            this.label131.Text = "Verified";
            subKey1.Close();
            this.Cursor = Cursors.Arrow;
            if (!this.bool_1)
              return;
            this.textBox6.AppendText("\r\n" + (object) "Key NOT in KeyDB " + "\r\n" + "Key is: " + (string) __arglist (text, "\r\n", "Key has been tested and verified, thanks C4eva ! ", "\r\n"));
          }
        }
        else
          this.textBox6.AppendText("\r\n" + "Source Key not verified against drive." + "\r\n");
      }
    }

    private void menuItem_33_Click(object sender, EventArgs e)
    {
      bool flag = this.bool_2;
      this.bool_2 = true;
      if (this.method_49() == 1)
      {
        this.method_46();
        this.method_47();
        this.method_41();
      }
      this.bool_2 = flag;
    }

    private void button41_Click(object sender, EventArgs e)
    {
      DataBaseView dataBaseView = new DataBaseView();
      dataBaseView.int_0 = 0;
      if (dataBaseView.ShowDialog((IWin32Window) this) != DialogResult.OK)
        return;
      this.string_10 = Path.GetDirectoryName(dataBaseView.textBox15.Text);
      this.string_9 = dataBaseView.textBox2.Text;
    }

    private unsafe void DumpDrive_Click(object sender, EventArgs e)
    {
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
      saveFileDialog.DefaultExt = ".bin";
      saveFileDialog.FileName = "Key.bin";
      saveFileDialog.RestoreDirectory = false;
      if (this.bool_2)
        saveFileDialog.InitialDirectory = this.string_10;
      if (saveFileDialog.ShowDialog() == DialogResult.OK)
      {
        GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(saveFileDialog.FileName)), (sbyte*) &_Module.struct18_5);
        if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          return;
        }
        else
        {
          this.textBox6.AppendText("Key data saved to " + saveFileDialog.FileName + "\r\n\r\n");
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num = (int) _Module.fwrite((void*) (^(int&) @_Module.struct123_0 + 280), 16U, 1U, pGstruct5_0);
          _Module.fclose(pGstruct5_0);
        }
      }
      saveFileDialog.FileName = "Inquiry.bin";
      if (saveFileDialog.ShowDialog() == DialogResult.OK)
      {
        GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(saveFileDialog.FileName)), (sbyte*) &_Module.struct18_5);
        if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          return;
        }
        else
        {
          this.textBox6.AppendText("Inquiry data saved to " + saveFileDialog.FileName + "\r\n\r\n");
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) @_Module.struct123_0 != 7 && (int) *(ushort*) ^(int&) @_Module.struct123_0 != 6 && (int) *(ushort*) ^(int&) @_Module.struct123_0 != 5)
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num1 = (int) _Module.fwrite((void*) (^(int&) @_Module.struct123_0 + 568), 96U, 1U, pGstruct5_0);
          }
          else
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num2 = (int) _Module.fwrite((void*) (^(int&) @_Module.struct123_0 + 568), 116U, 1U, pGstruct5_0);
          }
          _Module.fclose(pGstruct5_0);
        }
      }
      saveFileDialog.FileName = "Identify.bin";
      if (saveFileDialog.ShowDialog() != DialogResult.OK)
        return;
      GStruct5* pGstruct5_0_1 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(saveFileDialog.FileName)), (sbyte*) &_Module.struct18_5);
      if ((IntPtr) pGstruct5_0_1 == IntPtr.Zero)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        this.textBox6.AppendText("Identify data saved to " + saveFileDialog.FileName + "\r\n\r\n");
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num = (int) _Module.fwrite((void*) (^(int&) @_Module.struct123_0 + 780), 180U, 1U, pGstruct5_0_1);
        _Module.fclose(pGstruct5_0_1);
      }
    }

    private void button2_Click(object sender, EventArgs e)
    {
      this.method_18();
      this.method_51();
      this.method_19();
    }

    private unsafe void method_51()
    {
      DumpFile dumpFile = new DumpFile();
      dumpFile.bool_4 = this.bool_2;
      dumpFile.string_1 = this.string_10;
      if (dumpFile.ShowDialog((IWin32Window) this) != DialogResult.OK)
        return;
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
      saveFileDialog.DefaultExt = ".bin";
      saveFileDialog.FileName = "dummy.bin";
      saveFileDialog.RestoreDirectory = false;
      if (this.bool_2)
        saveFileDialog.InitialDirectory = this.string_10;
      if (saveFileDialog.ShowDialog() != DialogResult.OK)
        return;
      string fullPath = Path.GetFullPath(saveFileDialog.FileName);
      string fileName = Path.GetFileName(saveFileDialog.FileName);
      GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(fullPath), (sbyte*) &_Module.struct18_5);
      if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      int num1 = (int) _Module.fwrite((void*) dumpFile.pByte_4, 262144U, 1U, pGstruct5_0);
      _Module.fclose(pGstruct5_0);
      this.textBox6.AppendText("\r\n" + "Loading DVDkey source file " + "\r\n");
      this.method_37(fullPath, 0, dumpFile.pByte_4);
      this.tabControl5.SelectedTab = this.Firmtools;
    }

    private void textBox12_DoubleClick(object sender, EventArgs e)
    {
      this.method_52();
    }

    private unsafe void method_52()
    {
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 != 4 && (int) *(ushort*) ^(int&) @_Module.struct123_0 != 5)
        return;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 4)
      {
        _Module.memset((void*) ((IntPtr) &_Module.struct121_0 + 2028 + 64), (int) byte.MaxValue, 12U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 130880), (int) byte.MaxValue, 12U);
      }
      else
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 5)
        {
          _Module.memset((void*) ((IntPtr) &_Module.struct121_0 + 2028 + 64), 0, 12U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 130880), 0, 12U);
        }
      }
      FixSerial fixSerial = new FixSerial();
      if ((IntPtr) fixSerial.pByte_0 != IntPtr.Zero)
        _Module.free((void*) fixSerial.pByte_0);
      fixSerial.pByte_0 = (byte*) _Module.malloc(80U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) fixSerial.pByte_0, (void*) (^(int&) @_Module.struct123_0 + 2028), 80U);
      if ((IntPtr) fixSerial.pByte_1 != IntPtr.Zero)
        _Module.free((void*) fixSerial.pByte_1);
      fixSerial.pByte_1 = (byte*) _Module.malloc(262144U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) fixSerial.pByte_1, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 2388), 262144U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      fixSerial.uint_1 = (uint) *(ushort*) ^(int&) @_Module.struct123_0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      fixSerial.uint_2 = (uint) *(ushort*) (^(int&) @_Module.struct123_0 + 2);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      fixSerial.uint_0 = (uint) *(int*) (^(int&) @_Module.struct123_0 + 296);
      if (fixSerial.ShowDialog((IWin32Window) this) == DialogResult.OK)
      {
        this.textBox6.AppendText("\r\n" + "Loading Fixed Dummy.bin file " + "\r\n");
        this.method_37(fixSerial.string_0, 0, fixSerial.pByte_1);
        this.tabControl5.SelectedTab = this.Firmtools;
      }
      if ((IntPtr) fixSerial.pByte_1 != IntPtr.Zero)
        _Module.free((void*) fixSerial.pByte_1);
      if ((IntPtr) fixSerial.pByte_0 == IntPtr.Zero)
        return;
      _Module.free((void*) fixSerial.pByte_0);
    }

    private unsafe void method_53()
    {
      Struct28 struct28;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28 = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 1) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 2) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 3) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 4) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 5) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 6) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 7) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 8) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 9) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 15) = (sbyte) -1;
      this.textBox6.AppendText("\r\n" + "Scanning sector 0x4000 for keys" + "\r\n\r\n");
      int num1 = 1;
      int num2 = 16410;
      while (num2 < 20480)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        byte* pByte_0 = (byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + num2);
        this.method_6(pByte_0, 16U, 0U);
        if (_Module.memcmp((void*) pByte_0, (void*) &struct28, 16U) != 0)
        {
          Struct79 struct79;
          _Module.sprintf((sbyte*) &struct79, (sbyte*) &_Module.struct35_124, __arglist (num2));
          string str = "0x" + new string((sbyte*) &struct79);
          ++num1;
          this.textBox6.AppendText(str + "  " + this.string_0 + "\r\n");
          num2 += 42;
        }
        else
          break;
      }
      this.textBox6.AppendText(Convert.ToString(num1) + " keys populated " + "\r\n\r\n");
    }

    private unsafe void method_54()
    {
      string str1 = (string) null;
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) -1;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) -69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) -69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) -69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) -1;
      Struct28 struct28_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 5) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 8) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 9) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 10) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 11) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 12) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 13) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 14) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 15) = (sbyte) 0;
      int num1 = 16410;
      int num2;
      int num3;
      while (num1 < 20480)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        byte* pByte_0 = (byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + num1);
        int num4 = 1;
        Struct79 struct79;
        _Module.sprintf((sbyte*) &struct79, (sbyte*) &_Module.struct35_124, __arglist (num1));
        string str2 = "0x" + new string((sbyte*) &struct79);
        if (_Module.memcmp((void*) pByte_0, (void*) &struct28_1, 16U) != 0)
        {
          if (_Module.memcmp((void*) pByte_0, (void*) &struct28_2, 16U) != 0 && _Module.memcmp((void*) pByte_0, (void*) &struct28_3, 16U) != 0)
          {
            num2 = num1;
            this.method_6(pByte_0, 16U, (uint) num1);
            for (int index = 1; index < 256; ++index)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              byte* numPtr = (byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + (num1 + 42));
              if (_Module.memcmp((void*) pByte_0, (void*) numPtr, 16U) == 0)
              {
                ++num4;
                num1 += 42;
              }
              else
                break;
            }
            this.textBox6.AppendText(str2 + (object) "  " + this.string_0 + " x " + (string) __arglist (Convert.ToString(num4), "\r\n"));
            str1 = str2;
            num3 = num4;
          }
          num1 += 42;
        }
        else
          break;
      }
      // ISSUE: cast to a function pointer type
      _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
      int num5 = (int) MessageBox.Show("Last good key " + (object) this.string_0 + " found " + Convert.ToString(num3) + (string) __arglist (" times, starting at ", str1, "\n", "Do you wish to revert to this key ?", "\n\n", "Press yes to proceed."), "Sammy-Un-Lock Repair", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
      _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      if (num5 != 6)
        return;
      this.textBox6.AppendText("Reverting to last good key " + (object) this.string_0 + " found at " + str1 + (string) __arglist ("\r\n"));
      Struct32 struct32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct32, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 2388), 262144U);
      for (int index = num2 + 16; index < 20480; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32 + index) = (sbyte) -1;
      }
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
      saveFileDialog.DefaultExt = ".bin";
      saveFileDialog.FileName = "SAM-OFW-Fixed.bin";
      saveFileDialog.RestoreDirectory = false;
      if (this.bool_2)
        saveFileDialog.InitialDirectory = this.string_10;
      if (saveFileDialog.ShowDialog() != DialogResult.OK)
        return;
      string fullPath = Path.GetFullPath(saveFileDialog.FileName);
      string fileName = Path.GetFileName(saveFileDialog.FileName);
      sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(fullPath);
      this.string_13 = saveFileDialog.FileName;
      GStruct5* pGstruct5_0 = _Module.fopen(pSbyte_0, (sbyte*) &_Module.struct18_5);
      if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num4 = (int) MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        int num4 = (int) _Module.fwrite((void*) &struct32, 262144U, 1U, pGstruct5_0);
        _Module.fclose(pGstruct5_0);
        this.textBox6.AppendText("\r\n" + "F/W file saved to " + fileName + "\r\n");
        this.method_37(fullPath, 0, (byte*) &struct32);
      }
    }

    private void OpeniXtreme_Click(object sender, EventArgs e)
    {
      this.method_55();
    }

    private void method_55()
    {
      OpenFileDialog openFileDialog = new OpenFileDialog();
      openFileDialog.Filter = "Firmware file (*.bin)|*.bin|All Files (*.*)|*.*";
      openFileDialog.FileName = "ix16.bin";
      openFileDialog.DefaultExt = ".bin";
      openFileDialog.CheckFileExists = true;
      openFileDialog.CheckPathExists = true;
      openFileDialog.RestoreDirectory = false;
      if (this.bool_2)
        openFileDialog.InitialDirectory = this.string_10;
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return;
      this.method_36(Path.GetFullPath(openFileDialog.FileName), 1);
    }

    private void method_56()
    {
      string directoryName = Path.GetDirectoryName(Environment.GetCommandLineArgs()[0]);
      OpenFileDialog openFileDialog = new OpenFileDialog();
      openFileDialog.Filter = "LTPlus files |LTPlus-*.bin;LT-*.bin|All Files (*.*)|*.*";
      openFileDialog.FileName = "LTPlus.bin";
      openFileDialog.DefaultExt = ".bin";
      openFileDialog.CheckFileExists = true;
      openFileDialog.CheckPathExists = true;
      openFileDialog.RestoreDirectory = false;
      openFileDialog.InitialDirectory = directoryName + "\\firmware";
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return;
      this.method_36(Path.GetFullPath(openFileDialog.FileName), 1);
    }

    private void textBox5_TextChanged(object sender, EventArgs e)
    {
      if (string.Compare(this.textBox5.Text, "EasyToFindTarget") == 0)
        return;
      this.method_36(this.textBox5.Text, 1);
      this.textBox5.Text = "EasyToFindTarget";
    }

    private void tabPage13_DragDrop(object sender, DragEventArgs e)
    {
      this.method_36(((string[]) e.Data.GetData(DataFormats.FileDrop))[0], 1);
    }

    private void menuItem_2_Click(object sender, EventArgs e)
    {
      this.method_55();
    }

    private void menuItem_3_Click(object sender, EventArgs e)
    {
      this.method_56();
    }

    private unsafe void menuItem_4_Click(object sender, EventArgs e)
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memset((void*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4), 0, 2392U);
      this.method_43();
    }

    private void menuItem_11_Click(object sender, EventArgs e)
    {
      this.method_59();
    }

    private unsafe void menuItem_20_Click(object sender, EventArgs e)
    {
      string str1 = (string) null;
      if (this.method_69() == 0)
      {
        this.textBox6.AppendText("No drive present on port " + this.comboBox7.Text + "\r\n\r\n");
      }
      else
      {
        this.textBox6.AppendText("Attempting to verify Target Key to drive on port " + this.comboBox7.Text + "\r\n");
        string text = this.textBox11.Text;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (this.method_107((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280)) == 1)
        {
          RegistryKey subKey1 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\KeyList");
          if (subKey1.GetValue(text) != null)
          {
            string str2 = subKey1.GetValue(text).ToString();
            subKey1.Close();
            RegistryKey subKey2 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + str2);
            if (subKey2.GetValue("JobName") != null)
              str1 = subKey2.GetValue("JobName").ToString();
            string str3 = subKey2.GetValue("WorkingDir") == null ? "" : subKey2.GetValue("WorkingDir").ToString();
            string strA = subKey2.GetValue("LastFile") == null ? "" : subKey2.GetValue("LastFile").ToString();
            if (subKey2.GetValue("Index") != null)
              str2 = subKey2.GetValue("Index").ToString();
            this.toolTip_0.SetToolTip((Control) this.pictureBox5, "Drive Key found in KeyDB (" + (object) str2 + " - " + str1 + (string) __arglist (")", Environment.NewLine, "Key is: ", text));
            this.toolTip_0.SetToolTip((Control) this.pictureBox2, "Drive Key found in KeyDB (" + (object) str2 + " - " + str1 + (string) __arglist (")", Environment.NewLine, "Key is: ", text));
            this.pictureBox5.Visible = true;
            this.pictureBox7.Visible = false;
            this.pictureBox2.Visible = true;
            this.pictureBox6.Visible = false;
            if (string.Compare(strA, "") != 0)
              this.menuItem_21.Enabled = true;
            this.menuItem_22.Enabled = true;
            this.menuItem_23.Enabled = true;
            this.menuItem_24.Enabled = true;
            this.string_14 = text;
            this.string_15 = str2;
            this.string_16 = strA;
            this.string_17 = str3;
            this.label133.Text = "Verified";
            this.label131.Text = "Verified";
            subKey2.Close();
            this.Cursor = Cursors.Arrow;
            this.textBox6.AppendText("\r\n" + (object) "Key found in KeyDB at record (" + str2 + " - " + (string) __arglist (str1, ")", "\r\n", "Key is: ", text, "\r\n", "Key has been tested and verified, thanks C4eva ! ", "\r\n"));
          }
          else
          {
            this.toolTip_0.SetToolTip((Control) this.pictureBox5, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + text);
            this.toolTip_0.SetToolTip((Control) this.pictureBox2, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + text);
            this.pictureBox5.Visible = true;
            this.pictureBox7.Visible = false;
            this.pictureBox2.Visible = true;
            this.pictureBox6.Visible = false;
            this.string_14 = text;
            this.label133.Text = "Verified";
            this.label131.Text = "Verified";
            subKey1.Close();
            this.Cursor = Cursors.Arrow;
            if (!this.bool_1)
              return;
            this.textBox6.AppendText("\r\n" + (object) "Key NOT in KeyDB " + "\r\n" + "Key is: " + (string) __arglist (text, "\r\n", "Key has been tested and verified, thanks C4eva ! ", "\r\n"));
          }
        }
        else
          this.textBox6.AppendText("\r\n" + "Target Key not verified against drive." + "\r\n");
      }
    }

    private void menuItem_32_Click(object sender, EventArgs e)
    {
      this.method_194();
    }

    private unsafe void menuItem_37_Click(object sender, EventArgs e)
    {
      KeyCR keyCr = new KeyCR();
      keyCr.bool_4 = this.bool_2;
      keyCr.string_0 = this.string_10;
      Struct32 struct32_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct32_1, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), 262144U);
      if (keyCr.ShowDialog((IWin32Window) this) != DialogResult.OK)
        return;
      Struct32 struct32_2;
      _Module.memcpy((void*) &struct32_2, (void*) keyCr.pByte_0, 262144U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 6)
      {
        this.method_35((byte*) ((IntPtr) &struct32_2 + 126960), (byte*) ((IntPtr) &struct32_1 + 126960));
        Struct64 struct64;
        for (int index = 0; index < 3059; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct64 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct32_2 + (index + 186624)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct58_0 + index));
        }
        for (int index = 0; index < 3572; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct64 + (index + 3059)) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct32_2 + (index + 189683)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct56_0 + index));
        }
        for (int index = 0; index < 2907; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct64 + (index + 6631)) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct32_2 + (index + 193255)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct49_0 + index));
        }
        _Module.memcpy((void*) ((IntPtr) &struct32_1 + 62464), (void*) &struct64, 3059U);
        _Module.memcpy((void*) ((IntPtr) &struct32_1 + 127488), (void*) ((IntPtr) &struct64 + 3059), 3572U);
        _Module.memcpy((void*) ((IntPtr) &struct32_1 + 193024), (void*) ((IntPtr) &struct64 + 6631), 2907U);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 7)
      {
        _Module.memcpy((void*) ((IntPtr) &struct32_1 + 186624), (void*) ((IntPtr) &struct32_2 + 186624), 9538U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 115000) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126960);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 117484) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126961);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 116546) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126962);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 116352) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126963);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 118477) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126964);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 117556) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126965);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 116799) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126966);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 116517) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126967);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 116010) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126968);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 115201) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126969);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 117215) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126970);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 114723) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126971);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 115872) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126972);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 116122) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126973);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 115710) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126974);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32_1 + 118601) = (sbyte) ^(byte&) ((IntPtr) &struct32_2 + 126975);
      }
      this.textBox6.AppendText("\r\n" + "re-parseing file " + "\r\n");
      this.method_37("", 1, (byte*) &struct32_1);
      this.bool_10 = true;
      this.tabControl5.SelectedTab = this.Firmtools;
      Application.DoEvents();
      this.Cursor = Cursors.WaitCursor;
      Struct28 struct28_1;
      Struct28 struct28_2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 6)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (this.method_107((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280)) == 1)
        {
          this.textBox6.AppendText("Key Verified " + "\r\n");
          if (this.method_57((byte*) &struct28_1) == 1)
          {
            if (string.Compare(this.label109.Text, 0, "DG-16D5S", 0, 8) == 0)
            {
              this.textBox6.AppendText("Grabbing RAM data " + "\r\n");
              if (this.method_91((byte) 2, (byte) 180, (byte) 96, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 261888), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 2, (byte) 180, (byte) 112, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 261904), (void*) &struct28_2, 4U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 8, (byte) 208, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 261912), (void*) ((IntPtr) &struct28_2 + 8), 8U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 8, (byte) 224, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 261920), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 8, (byte) 240, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 261936), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) 0, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 261952), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) 16, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 261968), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) 32, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 261984), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) 48, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 262016), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) 64, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 262032), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) 80, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 262048), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) 96, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 262064), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) 112, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 262080), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) sbyte.MinValue, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 262096), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) 144, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 262128), (void*) &struct28_2, 16U);
              this.textBox6.AppendText("." + "\r\n");
              Application.DoEvents();
            }
            else if (string.Compare(this.label109.Text, 0, "DG-16D4S", 0, 8) == 0)
            {
              this.textBox6.AppendText("Grabbing RAM data " + "\r\n");
              if (this.method_91((byte) 2, (byte) 181, (byte) 96, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130816), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 2, (byte) 181, (byte) 112, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130832), (void*) &struct28_2, 4U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              _Module.memset((void*) ((IntPtr) &struct32_1 + 130833), 0, 3U);
              _Module.memset((void*) ((IntPtr) &struct32_1 + 130836), (int) byte.MaxValue, 4U);
              if (this.method_91((byte) 3, (byte) 8, (byte) 238, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130840), (void*) &struct28_2, 8U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 8, (byte) 246, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130848), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) 6, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130864), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) 22, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130880), (void*) &struct28_2, 16U);
              this.textBox6.AppendText("." + "\r\n");
              Application.DoEvents();
            }
            else if (string.Compare(this.label109.Text, 0, "DVD-ROM DL10N", 0, 13) == 0)
            {
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 262128), (void*) &struct28_1, 16U);
              this.method_83((byte*) ((IntPtr) &struct32_1 + 261888));
            }
          }
          this.textBox6.AppendText("\r\n" + "re-parseing file " + "\r\n");
          this.method_37("", 1, (byte*) &struct32_1);
          this.bool_10 = true;
          this.tabControl5.SelectedTab = this.Firmtools;
        }
        else
        {
          this.textBox6.AppendText("Key Verification Failed !! " + "\r\n");
          this.textBox6.AppendText("Additional extracts not completed. " + "\r\n");
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 7)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (this.method_107((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280)) == 1)
        {
          if (this.method_57((byte*) &struct28_1) == 1)
          {
            if (string.Compare(this.label109.Text, 0, "DG-16D5S", 0, 8) == 0)
            {
              this.textBox6.AppendText("Grabbing RAM data " + "\r\n");
              if (this.method_91((byte) 2, (byte) 180, (byte) 96, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130816), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 2, (byte) 180, (byte) 112, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130832), (void*) &struct28_2, 4U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 8, (byte) 208, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130840), (void*) ((IntPtr) &struct28_2 + 8), 8U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 8, (byte) 224, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130848), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 8, (byte) 240, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130864), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) 0, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130880), (void*) &struct28_2, 16U);
              this.textBox6.AppendText("." + "\r\n");
              Application.DoEvents();
            }
            else if (string.Compare(this.label109.Text, 0, "DG-16D4S", 0, 8) == 0)
            {
              this.textBox6.AppendText("Grabbing RAM data " + "\r\n");
              if (this.method_91((byte) 2, (byte) 181, (byte) 96, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130816), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 2, (byte) 181, (byte) 112, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130832), (void*) &struct28_2, 4U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              _Module.memset((void*) ((IntPtr) &struct32_1 + 130833), 0, 3U);
              _Module.memset((void*) ((IntPtr) &struct32_1 + 130836), (int) byte.MaxValue, 4U);
              if (this.method_91((byte) 3, (byte) 8, (byte) 238, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130840), (void*) &struct28_2, 8U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 8, (byte) 246, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130848), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) 6, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130864), (void*) &struct28_2, 16U);
              this.textBox6.AppendText(".");
              Application.DoEvents();
              if (this.method_91((byte) 3, (byte) 9, (byte) 22, (byte*) &struct28_2) == 0)
                return;
              _Module.memcpy((void*) ((IntPtr) &struct32_1 + 130880), (void*) &struct28_2, 16U);
              this.textBox6.AppendText("." + "\r\n");
              Application.DoEvents();
            }
            else if (string.Compare(this.label109.Text, 0, "DVD-ROM DL10N", 0, 13) == 0)
              this.method_83((byte*) ((IntPtr) &struct32_1 + 130816));
          }
          this.textBox6.AppendText("\r\n" + "re-parseing file " + "\r\n");
          this.method_37("", 1, (byte*) &struct32_1);
          this.bool_10 = true;
          this.tabControl5.SelectedTab = this.Firmtools;
        }
        else
        {
          this.textBox6.AppendText("Key Verification Failed !! " + "\r\n");
          this.textBox6.AppendText("Additional extracts not completed. " + "\r\n");
        }
      }
      this.Cursor = Cursors.Arrow;
      this.method_58();
    }

    private unsafe int method_57(byte* pByte_0)
    {
      Struct28 struct28;
      _Module.memset((void*) &struct28, (int) byte.MaxValue, 16U);
      if (this.comboBox1.Items.Count == 0)
        return 0;
      int selectedIndex = this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num1 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct80 struct80;
      _Module.memset((void*) &struct80, 0, 42U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 37;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 26;
      uint num2;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct80, &num2, 26U, (byte) 1, &gstruct3) != 0)
      {
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else if (_Module.memcmp((void*) &struct28, (void*) ((IntPtr) &struct80 + 10), 16U) == 0)
      {
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct80 + 10), 16U);
        this.Cursor = Cursors.Arrow;
        return 1;
      }
    }

    private void tabPage13_DragEnter(object sender, DragEventArgs e)
    {
      e.Effect = !e.Data.GetDataPresent(DataFormats.FileDrop) ? DragDropEffects.None : DragDropEffects.All;
      if (((string[]) e.Data.GetData(DataFormats.FileDrop)).Length <= 1)
        return;
      e.Effect = DragDropEffects.None;
    }

    private void SaveTarget_Click(object sender, EventArgs e)
    {
      this.method_58();
    }

    private unsafe void method_58()
    {
      if (!this.bool_10)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Target hasn't been Spoofed", "Saving Target", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      SaveFileDialog saveFileDialog1 = new SaveFileDialog();
      saveFileDialog1.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
      saveFileDialog1.DefaultExt = ".bin";
      saveFileDialog1.RestoreDirectory = false;
      if (this.bool_2)
        saveFileDialog1.InitialDirectory = this.string_10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 2)
      {
        saveFileDialog1.FileName = "Hit_CFW.bin";
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 3)
        {
          saveFileDialog1.FileName = "Benq_CFW.bin";
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 1)
          {
            saveFileDialog1.FileName = "Sam_CFW.bin";
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4)
              saveFileDialog1.FileName = "Lite_CFW.bin";
          }
        }
      }
      if (saveFileDialog1.ShowDialog() == DialogResult.OK)
      {
        string fullPath = Path.GetFullPath(saveFileDialog1.FileName);
        string fileName = Path.GetFileName(saveFileDialog1.FileName);
        GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(fullPath), (sbyte*) &_Module.struct18_5);
        if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          return;
        }
        else
        {
          this.textBox6.AppendText("\r\n" + "Target f/w saved as: " + fileName + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num = (int) _Module.fwrite((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), 262144U, 1U, pGstruct5_0);
          _Module.fclose(pGstruct5_0);
          this.textBox17.Text = fullPath;
          this.textBox18.Text = fullPath;
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 2)
        return;
      // ISSUE: cast to a function pointer type
      _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
      int num1 = (int) MessageBox.Show("Do you wish to save an Encrypted copy?", "Save Target", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
      _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      if (num1 != 6)
        return;
      SaveFileDialog saveFileDialog2 = new SaveFileDialog();
      saveFileDialog2.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
      saveFileDialog2.DefaultExt = ".bin";
      saveFileDialog2.FileName = "Hit_CFW.e.bin";
      saveFileDialog2.RestoreDirectory = false;
      if (this.bool_2)
        saveFileDialog2.InitialDirectory = this.string_10;
      if (saveFileDialog2.ShowDialog() != DialogResult.OK)
        return;
      string fullPath1 = Path.GetFullPath(saveFileDialog2.FileName);
      string fileName1 = Path.GetFileName(saveFileDialog2.FileName);
      sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(fullPath1);
      string fileName2 = saveFileDialog2.FileName;
      GStruct5* pGstruct5_0_1 = _Module.fopen(pSbyte_0, (sbyte*) &_Module.struct18_5);
      if ((IntPtr) pGstruct5_0_1 == IntPtr.Zero)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num2 = (int) MessageBox.Show(fileName1, "Can't open file", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        this.textBox6.AppendText("EnCrypted target f/w saved as: " + fileName1 + "\r\n");
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num2 = (int) _Module.fwrite((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144U, 1U, pGstruct5_0_1);
        _Module.fclose(pGstruct5_0_1);
      }
    }

    private unsafe void method_59()
    {
      Struct34 struct34;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct34 = sbyte.MaxValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 1) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 2) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 3) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 4) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 5) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 6) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 7) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 8) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 9) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 15) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 16) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 17) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 18) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 19) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 20) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 21) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 22) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 23) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 24) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 25) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 26) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 27) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 28) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 29) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 30) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 31) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 32) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 33) = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 34) = (sbyte) 34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 35) = (sbyte) 51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 36) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 37) = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 38) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 39) = (sbyte) 119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 40) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 41) = (sbyte) -103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 42) = (sbyte) -86;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 43) = (sbyte) -69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 44) = (sbyte) -52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 45) = (sbyte) -35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 46) = (sbyte) -18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 47) = (sbyte) -6;
      Struct55 struct55;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct55 = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 1) = (sbyte) 117;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 2) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 3) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 4) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 5) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 6) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 7) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 8) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 9) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 10) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 11) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 12) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 13) = (sbyte) 99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 14) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 15) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 16) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 17) = (sbyte) 112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 18) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 19) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 20) = (sbyte) 100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 21) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 22) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 23) = (sbyte) 47;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 24) = (sbyte) 119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 25) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 26) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 27) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 28) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 29) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 30) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 31) = (sbyte) 0;
      Struct30 struct30_1;
      _Module.memset((void*) &struct30_1, 0, 512U);
      Struct30 struct30_2;
      _Module.memset((void*) &struct30_2, 0, 512U);
      Struct29 struct29_1;
      _Module.memset((void*) &struct29_1, 0, 96U);
      Struct29 struct29_2;
      _Module.memset((void*) &struct29_2, 0, 96U);
      Struct81 struct81;
      _Module.memset((void*) &struct81, 0, 752U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 1)
      {
        _Module.memcpy((void*) &struct29_1, (void*) &_Module.struct29_35, 96U);
        _Module.memcpy((void*) &struct29_2, (void*) &_Module.struct29_32, 96U);
        _Module.memcpy((void*) &struct30_1, (void*) &_Module.struct46_5, 180U);
        _Module.memcpy((void*) &struct30_2, (void*) &_Module.struct46_5, 180U);
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 2)
        {
          _Module.memcpy((void*) &struct29_1, (void*) &_Module.struct29_30, 96U);
          _Module.memcpy((void*) &struct29_2, (void*) &_Module.struct29_26, 96U);
          _Module.memcpy((void*) &struct30_1, (void*) &_Module.struct46_3, 180U);
          _Module.memcpy((void*) &struct30_2, (void*) &_Module.struct46_3, 180U);
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 3)
          {
            _Module.memcpy((void*) &struct29_1, (void*) &_Module.struct29_30, 96U);
            _Module.memcpy((void*) &struct29_2, (void*) &_Module.struct29_17, 96U);
            _Module.memcpy((void*) &struct30_1, (void*) &_Module.struct46_3, 180U);
            _Module.memcpy((void*) &struct30_2, (void*) &_Module.struct46_3, 180U);
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 4)
            {
              _Module.memcpy((void*) &struct29_1, (void*) &_Module.struct29_5, 96U);
              _Module.memcpy((void*) &struct29_2, (void*) &_Module.struct29_32, 96U);
              _Module.memcpy((void*) &struct30_1, (void*) &_Module.struct46_24, 180U);
              _Module.memcpy((void*) &struct30_2, (void*) &_Module.struct46_24, 180U);
            }
          }
        }
      }
      int num1 = 20;
      while (num1 < 93)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct30_1 + num1) = (sbyte) ^(byte&) ((IntPtr) &struct30_2 + (num1 + 1));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct30_1 + (num1 + 1)) = (sbyte) ^(byte&) ((IntPtr) &struct30_2 + num1);
        num1 += 2;
      }
      Struct32 struct32;
      _Module.memset((void*) &struct32, 0, 262144U);
      Struct33 struct33;
      _Module.memset((void*) &struct33, (int) byte.MaxValue, 4096U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 11264), (void*) &struct30_1, 512U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 11776), (void*) &struct29_1, 96U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 12032), (void*) &struct29_2, 96U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 24512), (void*) &struct55, 32U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 40960), (void*) &struct33, 4096U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 40960), (void*) &struct34, 48U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 41008), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), 16U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 130816), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 224U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 11284), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 20U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 11818), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 20U);
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
      saveFileDialog.DefaultExt = ".bin";
      saveFileDialog.FileName = "Dummy.bin";
      saveFileDialog.RestoreDirectory = false;
      if (this.bool_2)
        saveFileDialog.InitialDirectory = this.string_10;
      if (saveFileDialog.ShowDialog() != DialogResult.OK)
        return;
      sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(saveFileDialog.FileName));
      this.string_13 = saveFileDialog.FileName;
      GStruct5* pGstruct5_0 = _Module.fopen(pSbyte_0, (sbyte*) &_Module.struct18_5);
      if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num2 = (int) MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        this.textBox6.AppendText("Dummy from Lite-On f/w saved as: " + saveFileDialog.FileName + "\r\n");
        int num2 = (int) _Module.fwrite((void*) &struct32, 262144U, 1U, pGstruct5_0);
        _Module.fclose(pGstruct5_0);
      }
    }

    private void button6_Click(object sender, EventArgs e)
    {
      this.method_46();
      this.method_47();
      this.method_41();
      this.bool_10 = true;
    }

    private unsafe void button29_Click(object sender, EventArgs e)
    {
      FreeKey freeKey = new FreeKey();
      if (this.bool_2)
      {
        freeKey.string_0 = this.string_10;
        freeKey.bool_4 = this.bool_2;
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      freeKey.ushort_0 = *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      freeKey.ushort_1 = *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      freeKey.ushort_2 = *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      freeKey.ushort_3 = *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384);
      freeKey.textBox1.Text = this.textBox11.Text;
      if ((IntPtr) freeKey.pByte_0 != IntPtr.Zero)
        _Module.free((void*) freeKey.pByte_0);
      freeKey.pByte_0 = (byte*) _Module.malloc(16U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) freeKey.pByte_0, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), 16U);
      if ((IntPtr) freeKey.pByte_1 != IntPtr.Zero)
        _Module.free((void*) freeKey.pByte_1);
      freeKey.pByte_1 = (byte*) _Module.malloc(96U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) freeKey.pByte_1, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), 96U);
      if ((IntPtr) freeKey.pByte_2 != IntPtr.Zero)
        _Module.free((void*) freeKey.pByte_2);
      freeKey.pByte_2 = (byte*) _Module.malloc(180U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) freeKey.pByte_2, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780), 180U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) == 4)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_9((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 610), 20U);
        freeKey.textBox2.Text = this.string_0;
        if ((IntPtr) freeKey.pByte_4 != IntPtr.Zero)
          _Module.free((void*) freeKey.pByte_4);
        freeKey.pByte_4 = (byte*) _Module.malloc(20U);
        _Module.memset((void*) freeKey.pByte_4, 32, 20U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) freeKey.pByte_4, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 610), 20U);
      }
      if (freeKey.ShowDialog((IWin32Window) this) != DialogResult.OK)
        return;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), (void*) freeKey.pByte_0, 16U) != 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), (void*) freeKey.pByte_0, 16U);
        this.textBox6.AppendText("DVD Key copied to target" + "\r\n");
      }
      else
        this.textBox6.AppendText("DVD Key already matches" + "\r\n");
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2348), (void*) &_Module.struct74_0, 10U) == 0 && (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4)
        this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2348), (void*) &_Module.struct22_4, 7U) == 0 && (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4)
        this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2348), (void*) &_Module.struct22_4, 7U) == 0 && (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 5)
      {
        this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), (void*) freeKey.pByte_1, 96U) != 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), (void*) freeKey.pByte_1, 96U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 576), 28U);
          this.textBox6.AppendText("Inquiry string copied to Target" + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780), (void*) freeKey.pByte_2, 180U);
          this.textBox6.AppendText("Identify string copied to Target" + "\r\n");
        }
        else
          this.textBox6.AppendText("ID strings already match" + "\r\n");
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) == 2)
      {
        this.textBox6.AppendText(string.Concat((object) "Setting Master Checksum."));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2020) = 0;
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) = (short) freeKey.ushort_2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) = (short) freeKey.ushort_3;
      this.bool_10 = true;
      this.method_47();
      this.method_41();
    }

    private void button5_Click(object sender, EventArgs e)
    {
      this.method_18();
      this.method_60();
      this.Cursor = Cursors.Arrow;
      this.method_19();
    }

    private unsafe void method_60()
    {
      if ((IntPtr) this.pVoid_0 != IntPtr.Zero)
        _Module.SetCommMask(this.pVoid_0, 64U);
      this.method_61();
      int selectedIndex = this.comboBox10.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (this.checkBox9.CheckState != CheckState.Checked || ^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) != 2 || this.method_146() != 1)
        return;
      this.method_123();
    }

    private unsafe void method_61()
    {
      this.label88.Text = "";
      this.label87.Text = "";
      Application.DoEvents();
      this.method_172();
      if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
      {
        this.textBox6.AppendText("\r\n" + "No Drive Detected! DVDkey files extraction aborted! " + "\r\n\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("        No Drive Detected!" + "\n" + "DVDkey files extraction aborted! ", "DVDkey Extract", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
      {
        this.textBox6.AppendText("\r\n" + "Drive in Vendor Mode! DVDkey files extraction aborted! " + "\r\n\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("        Drive in Vendor Mode!" + "\n" + "DVDkey files extraction aborted! ", "DVDkey Extract", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else if (this.method_62() == 0)
      {
        this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else
      {
        if (this.checkBox8.CheckState == CheckState.Unchecked)
          this.method_116();
        if (this.method_63() == 0)
        {
          this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else if (this.method_65() == 0)
        {
          this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else if (this.method_66() == 0)
        {
          this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else if (this.method_67() == 0)
        {
          this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else
        {
          this.method_117();
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (!this.bool_2 || this.method_107((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280)) != 1)
            return;
          this.tabControl5.SelectedTab = this.Benq;
          this.pictureBox5.Visible = true;
          this.pictureBox7.Visible = false;
          this.pictureBox2.Visible = true;
          this.pictureBox6.Visible = false;
          this.label133.Text = "Verified";
          this.label131.Text = "Verified";
          this.textBox6.AppendText("Target Key verified, thanks C4eva" + "\r\n" + "Proceeding with LO-Erase" + "\r\n");
          this.method_14();
          this.method_207();
          this.method_15();
        }
      }
    }

    private unsafe int method_62()
    {
      string str = (string) null;
      Struct52 struct52_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_1 = (sbyte) -88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 5) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 8) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 9) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 10) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 11) = (sbyte) 0;
      Struct52 struct52_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_2 = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 1) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 2) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 3) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 4) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 5) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 8) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 9) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 10) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 11) = (sbyte) 0;
      Struct55 struct55;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct55 = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 1) = (sbyte) 86;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 2) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 3) = (sbyte) 75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 4) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 5) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 6) = (sbyte) 51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 7) = (sbyte) 50;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 8) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 9) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 10) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 11) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 12) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 13) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 14) = (sbyte) 99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 15) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 16) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 17) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 18) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 19) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 20) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 21) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 22) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 23) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 24) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 25) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 26) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 27) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 28) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 29) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 30) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 31) = (sbyte) 0;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (uint) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      uint num3 = (uint) this.comboBox10.SelectedIndex;
      Struct84 struct84;
      _Module.sprintf((sbyte*) &struct84, (sbyte*) &_Module.struct10_22, __arglist (Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + (int) num3 * 324)))));
      GStruct96 gstruct96;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct96 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct96&) ((IntPtr) &gstruct96 + 4), 0, 24);
      GStruct95 gstruct95_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95_1 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95_1 + 4), 0, 16);
      GStruct95 gstruct95_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95_2 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95_2 + 4), 0, 16);
      if (this.method_128() == 1)
        _Module.Sleep(500U);
      else if ((int) ushort_0 == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num4 = (int) MessageBox.Show("Power on drive with tray half open.", "DVDKey32", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
      if (subKey.GetValue("Delay32") != null)
        str = subKey.GetValue("Delay32").ToString();
      else if (subKey.GetValue("Delay32") == null)
      {
        subKey.SetValue("Delay32", (object) "0");
        str = "0";
      }
      subKey.Close();
      int num5 = Convert.ToInt32(str) * 1000;
      if (num5 > 20000)
        num5 = 20000;
      if (num5 != 0)
      {
        int num4 = num5 / 250;
        this.textBox6.AppendText("DVDkey delayed by " + str + " seconds" + "\r\n");
        for (int index = 0; index < num4; ++index)
        {
          this.textBox6.AppendText(".");
          _Module.Sleep(250U);
        }
        this.textBox6.AppendText("\r\n");
      }
      this.textBox6.AppendText("Sending DVDKey request to I/O port " + this.label123.Text);
      this.textBox6.AppendText(" and " + this.comboBox10.Text + "\r\n\r\n");
      this.label88.Text = " ";
      this.label87.Text = " ";
      Struct83 struct83;
      _Module.memset((void*) &struct83, 0, 24U);
      this.Cursor = Cursors.WaitCursor;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      if ((int) ushort_0 != 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 14), (byte) num2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 18), (byte) 8);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        while (((int) _Module.smethod_0(^(ushort&) ((IntPtr) &gstruct3 + 16)) & 128) != 0)
          ;
      }
      for (uint index = 0U; index < 768U; ++index)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        //if ((int) ^(ushort&) @gstruct3 == 0)
        if(gstruct3 == null)
        {
          this.method_424((byte) 9);
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 14), (byte) num2);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          do
            ;
          while (((int) _Module.smethod_0(^(ushort&) ((IntPtr) &gstruct3 + 16)) & 128) != 0);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 18), (byte) 160);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          do
            ;
          while (((int) _Module.smethod_0(^(ushort&) ((IntPtr) &gstruct3 + 16)) & 128) != 0);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 168);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
        }
        if ((int) (index % 64U) == 0)
          this.textBox6.AppendText(".");
        Application.DoEvents();
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95_1 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95_2 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      void* fileA = _Module.CreateFileA((sbyte*) &struct84, 3221225472U, 0U, (GStruct100*) 0, 3U, 1073741952U, (void*) 0);
      if ((IntPtr) fileA == IntPtr(-1))
      {
        this.textBox6.AppendText("\r\n" + "Failed to open com port " + Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + (int) num3 * 324))) + "\r\n");
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) @gstruct96 = 28;
        _Module.GetCommState(fileA, &gstruct96);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct96 + 4) = 115200;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &gstruct96 + 18) = (sbyte) 8;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &gstruct96 + 19) = (sbyte) 0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &gstruct96 + 20) = (sbyte) 0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct96 + 8) = ^(int&) ((IntPtr) &gstruct96 + 8) & -257;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct96 + 8) = ^(int&) ((IntPtr) &gstruct96 + 8) & -513;
        _Module.SetCommState(fileA, &gstruct96);
        GStruct94 gstruct94;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) @gstruct94 = 20;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct94 + 8) = 20;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct94 + 4) = 20;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct94 + 16) = 20;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct94 + 12) = 20;
        _Module.SetCommTimeouts(fileA, &gstruct94);
        uint num4;
        _Module.ReadFile(fileA, (void*) &struct83, 24U, &num4, &gstruct95_1);
        for (uint index = 0U; index < 256U; ++index)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          //if ((int) ^(ushort&) @gstruct3 == 0)
          if(gstruct3 == null)                
          {
            this.method_424((byte) 10);
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 14), (byte) num2);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            do
              ;
            while (((int) _Module.smethod_0(^(ushort&) ((IntPtr) &gstruct3 + 16)) & 128) != 0);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 18), (byte) 160);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            do
              ;
            while (((int) _Module.smethod_0(^(ushort&) ((IntPtr) &gstruct3 + 16)) & 128) != 0);
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 3837);
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 17730);
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 20814);
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
          }
          if ((int) (index % 64U) == 0)
            this.textBox6.AppendText(".");
          Application.DoEvents();
        }
        _Module.GetOverlappedResult(fileA, &gstruct95_1, &num4, 1);
        Struct82 struct82;
        _Module.memcpy((void*) &struct82, (void*) &struct83, 24U);
        this.Cursor = Cursors.Arrow;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(byte&) @struct82 == 131 && (int) ^(byte&) ((IntPtr) &struct82 + 4) == 131 && ((int) ^(byte&) ((IntPtr) &struct82 + 8) == 131 && (int) ^(byte&) ((IntPtr) &struct82 + 12) == 131) && ((int) ^(byte&) ((IntPtr) &struct82 + 16) == 131 && (int) ^(byte&) ((IntPtr) &struct82 + 20) == 131 && ((int) ^(byte&) ((IntPtr) &struct82 + 22) == 32 && (int) ^(byte&) ((IntPtr) &struct82 + 23) == 32)))
        {
          this.textBox6.AppendText(" Serial Data looks ok, " + " ");
          Struct28 struct28;
          _Module.memcpy((void*) &struct28, (void*) ((IntPtr) &struct83 + 1), 3U);
          _Module.memcpy((void*) ((IntPtr) &struct28 + 3), (void*) ((IntPtr) &struct83 + 5), 3U);
          _Module.memcpy((void*) ((IntPtr) &struct28 + 6), (void*) ((IntPtr) &struct83 + 9), 3U);
          _Module.memcpy((void*) ((IntPtr) &struct28 + 9), (void*) ((IntPtr) &struct83 + 13), 3U);
          _Module.memcpy((void*) ((IntPtr) &struct28 + 12), (void*) ((IntPtr) &struct83 + 17), 3U);
          _Module.memcpy((void*) ((IntPtr) &struct28 + 15), (void*) ((IntPtr) &struct83 + 21), 1U);
          this.method_6((byte*) &struct28, 16U, 0U);
          this.textBox6.AppendText("key returned: " + this.string_0 + "\r\n");
          this.label87.Text = this.string_0;
          this.label88.Text = "Good";
          this.Cursor = Cursors.Arrow;
          _Module.CloseHandle(fileA);
          if (this.method_107((byte*) &struct28) != 1)
          {
            this.textBox6.AppendText("\r\n" + "Extracted drive key failed Verification !" + "\r\n\r\n");
            this.Cursor = Cursors.Arrow;
            this.label87.Text = "";
            this.label88.Text = "bad";
            return 0;
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Extracted drive key passed Verification !" + "\r\n\r\n");
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), (void*) &struct28, 16U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2348), (void*) &struct55, 32U);
            return 1;
          }
        }
        else
        {
          this.textBox6.AppendText(" Serial Data is bad, " + "\r\n");
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num6 = (int) MessageBox.Show("***WARNING*** Serial Data is bad", "DVDKey32", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          this.label88.Text = "Bad";
          _Module.CloseHandle(fileA);
          this.Cursor = Cursors.Arrow;
          return 0;
        }
      }
    }

    private unsafe int method_63()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -64;
      Struct29 struct29;
      uint num3;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct29, &num3, 96U, (byte) 1, &gstruct3) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num4 = (int) MessageBox.Show("Inquiry command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 0;
      }
      else
      {
        this.method_5((byte*) &struct29, 96U, 0U);
        this.textBox6.AppendText(this.string_0 + "\r\n");
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 568), (void*) &struct29, 96U);
        if (this.checkBox8.CheckState == CheckState.Unchecked)
        {
          if (this.bool_2)
          {
            string str = this.string_10 + "\\Inquiry.bin";
            if (!File.Exists(str))
            {
              sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(str);
              this.string_13 = str;
              GStruct5* pGstruct5_0 = _Module.fopen(pSbyte_0, (sbyte*) &_Module.struct18_5);
              if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
              {
                // ISSUE: cast to a function pointer type
                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num4 = (int) MessageBox.Show(str, "Can't open file", MessageBoxButtons.OK);
                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                int num4 = (int) _Module.fwrite((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 568), 96U, 1U, pGstruct5_0);
                _Module.fclose(pGstruct5_0);
                this.textBox6.AppendText("\r\n" + "Inquiry String saved to " + str + "\r\n");
                return 1;
              }
            }
          }
          SaveFileDialog saveFileDialog = new SaveFileDialog();
          saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
          saveFileDialog.DefaultExt = ".bin";
          saveFileDialog.FileName = "Inquiry.bin";
          saveFileDialog.RestoreDirectory = false;
          if (this.bool_2)
            saveFileDialog.InitialDirectory = this.string_10;
          if (saveFileDialog.ShowDialog() == DialogResult.OK)
          {
            GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(saveFileDialog.FileName)), (sbyte*) &_Module.struct18_5);
            if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num4 = (int) MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              return 0;
            }
            else
            {
              this.textBox6.AppendText("Inquiry String saved to " + saveFileDialog.FileName + "\r\n\r\n");
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num4 = (int) _Module.fwrite((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 568), 96U, 1U, pGstruct5_0);
              _Module.fclose(pGstruct5_0);
            }
          }
        }
        return 1;
      }
    }

    private unsafe int method_64()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -64;
      Struct85 struct85;
      uint num3;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct85, &num3, 116U, (byte) 1, &gstruct3) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num4 = (int) MessageBox.Show("Inquiry command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 0;
      }
      else
      {
        this.method_5((byte*) &struct85, 116U, 0U);
        this.textBox6.AppendText(this.string_0 + "\r\n");
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 568), (void*) &struct85, 116U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2028), (void*) ((IntPtr) &struct85 + 96), 20U);
        if (this.checkBox8.CheckState == CheckState.Unchecked)
        {
          if (this.bool_2)
          {
            string str = this.string_10 + "\\Inquiry.bin";
            if (!File.Exists(str))
            {
              sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(str);
              this.string_13 = str;
              GStruct5* pGstruct5_0 = _Module.fopen(pSbyte_0, (sbyte*) &_Module.struct18_5);
              if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
              {
                // ISSUE: cast to a function pointer type
                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num4 = (int) MessageBox.Show(str, "Can't open file", MessageBoxButtons.OK);
                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                int num4 = (int) _Module.fwrite((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 568), 96U, 1U, pGstruct5_0);
                _Module.fclose(pGstruct5_0);
                this.textBox6.AppendText("\r\n" + "Inquiry String saved to " + str + "\r\n");
                return 1;
              }
            }
          }
          SaveFileDialog saveFileDialog = new SaveFileDialog();
          saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
          saveFileDialog.DefaultExt = ".bin";
          saveFileDialog.FileName = "Inquiry.bin";
          saveFileDialog.RestoreDirectory = false;
          if (this.bool_2)
            saveFileDialog.InitialDirectory = this.string_10;
          if (saveFileDialog.ShowDialog() == DialogResult.OK)
          {
            GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(saveFileDialog.FileName)), (sbyte*) &_Module.struct18_5);
            if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num4 = (int) MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              return 0;
            }
            else
            {
              this.textBox6.AppendText("Inquiry String saved to " + saveFileDialog.FileName + "\r\n\r\n");
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num4 = (int) _Module.fwrite((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 568), 96U, 1U, pGstruct5_0);
              _Module.fclose(pGstruct5_0);
            }
          }
        }
        return 1;
      }
    }

    private unsafe int method_65()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 80;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) 76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 83;
      Struct29 struct29;
      uint num3;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct29, &num3, 96U, (byte) 1, &gstruct3) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num4 = (int) MessageBox.Show("Secret command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 0;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(byte&) ((IntPtr) &struct29 + 8) == 80 && (int) ^(byte&) ((IntPtr) &struct29 + 9) == 76 && ((int) ^(byte&) ((IntPtr) &struct29 + 10) == 68 && (int) ^(byte&) ((IntPtr) &struct29 + 11) == 83))
        {
          this.method_5((byte*) &struct29, 96U, 0U);
          this.textBox6.AppendText(this.string_0 + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 684), (void*) &struct29, 96U);
          return 1;
        }
        else
        {
          this.textBox6.AppendText("Drive is NOT Lite-On, Aborting ! ");
          return 0;
        }
      }
    }

    private unsafe int method_66()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct30 struct30;
      uint num3;
      if (_Module.smethod_12((byte) 161, (byte) num2, (GStruct4*) 0, (GStruct4*) 0, (byte) 64, (void*) &struct30, &num3, 512U, 512U, (byte) 1, &gstruct3) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num4 = (int) MessageBox.Show("Identify command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 0;
      }
      else
      {
        this.method_5((byte*) &struct30, 180U, 0U);
        this.textBox6.AppendText(this.string_0 + "\r\n");
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 780), (void*) &struct30, 180U);
        if (this.checkBox8.CheckState == CheckState.Unchecked)
        {
          if (this.bool_2)
          {
            string str = this.string_10 + "\\Identify.bin";
            if (!File.Exists(str))
            {
              sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(str);
              this.string_13 = str;
              GStruct5* pGstruct5_0 = _Module.fopen(pSbyte_0, (sbyte*) &_Module.struct18_5);
              if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
              {
                // ISSUE: cast to a function pointer type
                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num4 = (int) MessageBox.Show(str, "Can't open file", MessageBoxButtons.OK);
                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                int num4 = (int) _Module.fwrite((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 780), 180U, 1U, pGstruct5_0);
                for (uint index = 0U; index < 332U; ++index)
                  _Module.fputc(0, pGstruct5_0);
                _Module.fclose(pGstruct5_0);
                this.textBox6.AppendText("\r\n" + "Identify String saved to " + str + "\r\n");
                return 1;
              }
            }
          }
          SaveFileDialog saveFileDialog = new SaveFileDialog();
          saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
          saveFileDialog.DefaultExt = ".bin";
          saveFileDialog.FileName = "Identify.bin";
          saveFileDialog.RestoreDirectory = false;
          if (this.bool_2)
            saveFileDialog.InitialDirectory = this.string_10;
          if (saveFileDialog.ShowDialog() == DialogResult.OK)
          {
            GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(saveFileDialog.FileName)), (sbyte*) &_Module.struct18_5);
            if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num4 = (int) MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              return 0;
            }
            else
            {
              this.textBox6.AppendText("Identify String saved to " + saveFileDialog.FileName + "\r\n\r\n");
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num4 = (int) _Module.fwrite((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 780), 180U, 1U, pGstruct5_0);
              for (uint index = 0U; index < 332U; ++index)
                _Module.fputc(0, pGstruct5_0);
              _Module.fclose(pGstruct5_0);
            }
          }
        }
        return 1;
      }
    }

    private unsafe int method_67()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (uint) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num3 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -64;
      Struct29 struct29;
      uint num4;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num3, (ushort) 512, (void*) &struct29, &num4, 96U, (byte) 1, &gstruct3) != 0)
        return 0;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) 0;
      Struct28 struct28;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num3, (ushort) 512, (void*) &struct28, &num4, 16U, (byte) 1, &gstruct3) != 0)
        return 0;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 20;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) 2;
      Struct42 struct42;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num3, (ushort) 512, (void*) &struct42, &num4, 20U, (byte) 1, &gstruct3) != 0)
        return 0;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) 18;
      Struct60 struct60_1;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num3, (ushort) 512, (void*) &struct60_1, &num4, 2U, (byte) 1, &gstruct3) != 0)
        return 0;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) 20;
      Struct60 struct60_2;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num3, (ushort) 512, (void*) &struct60_2, &num4, 2U, (byte) 1, &gstruct3) != 0)
        return 0;
      Struct31 struct31;
      _Module.memset((void*) &struct31, (int) byte.MaxValue, 80U);
      _Module.memcpy((void*) &struct31, (void*) ((IntPtr) &struct29 + 42), 20U);
      _Module.memcpy((void*) ((IntPtr) &struct31 + 24), (void*) &struct28, 16U);
      _Module.memcpy((void*) ((IntPtr) &struct31 + 40), (void*) &struct60_1, 2U);
      _Module.memcpy((void*) ((IntPtr) &struct31 + 44), (void*) &struct42, 20U);
      _Module.memcpy((void*) ((IntPtr) &struct31 + 76), (void*) &struct60_2, 2U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2028), (void*) &struct31, 80U);
      this.method_5((byte*) &struct31, 80U, 0U);
      this.textBox6.AppendText(this.string_0 + "\r\n");
      if (this.checkBox8.CheckState == CheckState.Unchecked)
      {
        if (this.bool_2)
        {
          string str = this.string_10 + "\\Serial.bin";
          if (!File.Exists(str))
          {
            sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(str);
            this.string_13 = str;
            GStruct5* pGstruct5_0 = _Module.fopen(pSbyte_0, (sbyte*) &_Module.struct18_5);
            if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num5 = (int) MessageBox.Show(str, "Can't open file", MessageBoxButtons.OK);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num5 = (int) _Module.fwrite((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2028), 80U, 1U, pGstruct5_0);
              _Module.fclose(pGstruct5_0);
              this.textBox6.AppendText("\r\n" + "Serial String saved to " + str + "\r\n");
              return 1;
            }
          }
        }
        SaveFileDialog saveFileDialog = new SaveFileDialog();
        saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
        saveFileDialog.DefaultExt = ".bin";
        saveFileDialog.FileName = "Serial.bin";
        saveFileDialog.RestoreDirectory = false;
        if (this.bool_2)
          saveFileDialog.InitialDirectory = this.string_10;
        if (saveFileDialog.ShowDialog() == DialogResult.OK)
        {
          GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(saveFileDialog.FileName)), (sbyte*) &_Module.struct18_5);
          if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num5 = (int) MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            return 0;
          }
          else
          {
            this.textBox6.AppendText("Serial String saved to " + saveFileDialog.FileName + "\r\n\r\n");
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num5 = (int) _Module.fwrite((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2028), 80U, 1U, pGstruct5_0);
            _Module.fclose(pGstruct5_0);
          }
        }
      }
      return 1;
    }

    private unsafe int method_68()
    {
      Struct86 struct86;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct86, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2028), 224U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct86 + 20) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct86 + 21) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct86 + 22) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct86 + 23) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2028), (void*) &struct86, 80U);
      this.method_5((byte*) &struct86, 80U, 0U);
      this.textBox6.AppendText(this.string_0 + "\r\n");
      if (this.checkBox8.CheckState == CheckState.Unchecked)
      {
        if (this.bool_2)
        {
          string str = this.string_10 + "\\Serial.bin";
          if (!File.Exists(str))
          {
            sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(str);
            this.string_13 = str;
            GStruct5* pGstruct5_0 = _Module.fopen(pSbyte_0, (sbyte*) &_Module.struct18_5);
            if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num = (int) MessageBox.Show(str, "Can't open file", MessageBoxButtons.OK);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num = (int) _Module.fwrite((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2028), 224U, 1U, pGstruct5_0);
              _Module.fclose(pGstruct5_0);
              this.textBox6.AppendText("\r\n" + "Serial String saved to " + str + "\r\n");
              return 1;
            }
          }
        }
        SaveFileDialog saveFileDialog = new SaveFileDialog();
        saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
        saveFileDialog.DefaultExt = ".bin";
        saveFileDialog.FileName = "Serial.bin";
        saveFileDialog.RestoreDirectory = false;
        if (this.bool_2)
          saveFileDialog.InitialDirectory = this.string_10;
        if (saveFileDialog.ShowDialog() == DialogResult.OK)
        {
          GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(saveFileDialog.FileName)), (sbyte*) &_Module.struct18_5);
          if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num = (int) MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            return 0;
          }
          else
          {
            this.textBox6.AppendText("Serial String saved to " + saveFileDialog.FileName + "\r\n\r\n");
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num = (int) _Module.fwrite((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2028), 224U, 1U, pGstruct5_0);
            _Module.fclose(pGstruct5_0);
          }
        }
      }
      return 1;
    }

    private unsafe int method_69()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (uint) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num3 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 1000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -64;
      Struct29 struct29;
      uint num4;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num3, (ushort) 512, (void*) &struct29, &num4, 96U, (byte) 1, &gstruct3) != 0)
        return 0;
      Struct42 struct42;
      _Module.memset((void*) &struct42, (int) byte.MaxValue, 20U);
      _Module.memcpy((void*) &struct42, (void*) ((IntPtr) &struct29 + 42), 20U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2028), (void*) &struct42, 20U);
      this.method_5((byte*) &struct42, 20U, 0U);
      return 1;
    }

    private unsafe int method_70()
    {
      Struct68 struct68;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct68 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct68&) ((IntPtr) &struct68 + 1), 0, 259);
      string str1 = "";
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      int num1 = 0;
      Struct55 struct55;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct55 = (sbyte) 83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 1) = (sbyte) 108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 2) = (sbyte) 105;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 3) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 4) = (sbyte) 75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 5) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 6) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 7) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 8) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 9) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 10) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 11) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 12) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 13) = (sbyte) 99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 14) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 15) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 16) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 17) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 18) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 19) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 20) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 21) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 22) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 23) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 24) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 25) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 26) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 27) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 28) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 29) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 30) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 31) = (sbyte) 0;
      this.Cursor = Cursors.WaitCursor;
      this.method_82();
      this.method_84();
      // ISSUE: cast to a function pointer type
      _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
      int num2 = (int) MessageBox.Show("Do you wish to send Unlock to Slim", "SlimKey", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
      _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      if (num2 == 6)
      {
        Struct28 struct28;
        this.method_85((byte*) &struct28);
        if (this.method_87((byte*) &struct28) == 0)
        {
          this.Cursor = Cursors.Arrow;
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num3 = (int) MessageBox.Show("Unlock failed", "SlimKey", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          return 0;
        }
      }
      else if (num2 == 2)
      {
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      if (this.method_200() == 0)
      {
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        Application.DoEvents();
        if ((int) this.method_256() == 0)
        {
          int num3 = (int) this.method_259();
          this.Cursor = Cursors.Arrow;
          return 0;
        }
        else
        {
          for (int index = 0; index < 16; ++index)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct10_20, __arglist (out struct68, (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280 + index)));
          }
          string str2 = str1 + new string((sbyte*) &struct68);
          Application.DoEvents();
          int num3 = (int) this.method_259();
          this.Cursor = Cursors.WaitCursor;
          for (int index = 0; index < 12; ++index)
          {
            _Module.Sleep(250U);
            this.textBox6.AppendText(".");
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (this.method_107((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280)) == 1)
          {
            this.textBox6.AppendText("\r\n" + (object) "Key: " + str2 + " is verified, Thanks C4eva" + (string) __arglist ("\r\n"));
            this.Cursor = Cursors.WaitCursor;
            this.textBox6.AppendText("\r\n" + "Grabbing Key sector: ");
            Struct28 struct28;
            Struct87 struct87;
            for (int index = 0; index < 16; ++index)
            {
              int num4 = 0;
              while (num4 < 256)
              {
                if (this.method_91((byte) 0, (byte) index, (byte) num4, (byte*) &struct28) == 0)
                  return 0;
                _Module.memcpy((void*) ((IntPtr) &struct87 + num1), (void*) &struct28, 16U);
                num4 += 16;
                num1 += 16;
              }
              this.textBox6.AppendText(".");
              Application.DoEvents();
            }
            this.textBox6.AppendText("\r\n");
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct87, 4096U);
            int num5 = 0;
            if (this.method_71() == 1)
              this.textBox6.AppendText("Key Sector verified." + "\r\n");
            else if (this.method_73() == 1)
              this.textBox6.AppendText("Key Sector verified." + "\r\n");
            else if (this.method_75() == 1)
              this.textBox6.AppendText("Key Sector verified." + "\r\n");
            else if (this.method_77() == 1)
            {
              this.textBox6.AppendText("Key Sector verified." + "\r\n");
            }
            else
            {
              this.textBox6.AppendText("Key Sector NOT verified !" + "\r\n");
              return 0;
            }
            this.textBox6.AppendText("Grabbing Serial info: ");
            for (int index = 8; index < 10; ++index)
            {
              int num4 = 0;
              while (num4 < 256)
              {
                if (this.method_91((byte) 3, (byte) index, (byte) (num4 + 6), (byte*) &struct28) == 0)
                  return 0;
                _Module.memcpy((void*) ((IntPtr) &struct87 + num5), (void*) &struct28, 16U);
                if (num4 % 64 == 0)
                {
                  this.textBox6.AppendText(".");
                  Application.DoEvents();
                }
                num4 += 16;
                num5 += 16;
              }
            }
            this.textBox6.AppendText("\r\n");
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2028), (int) byte.MaxValue, 224U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2028), (void*) ((IntPtr) &struct87 + 208), 80U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2156), (void*) ((IntPtr) &struct87 + 320), 96U);
            this.textBox6.AppendText(string.Concat((object) "\r\n"));
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2348), (void*) &struct55, 32U);
            this.method_177();
            this.Cursor = Cursors.Arrow;
            return 1;
          }
          else
          {
            this.textBox6.AppendText("\r\n" + (object) "Key: " + str2 + " verification failed !" + (string) __arglist ("\r\n"));
            return 0;
          }
        }
      }
    }

    private unsafe int method_71()
    {
      Struct33 struct33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct33, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 4096U);
      Struct28 struct28_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_1, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), 16U);
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) ^(byte&) ((IntPtr) &struct33 + 312);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 2796);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 1858);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 1664);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 3789);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 2868);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 2111);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 1829);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 1322);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 513);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 2527);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 35);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 1184);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 1434);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 1022);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 3913);
      return _Module.memcmp((void*) &struct28_2, (void*) &struct28_1, 16U) == 0 ? 1 : 0;
    }

    private unsafe int method_72()
    {
      Struct33 struct33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct33, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 172032), 4096U);
      Struct28 struct28_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_1, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 41008), 16U);
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) ^(byte&) ((IntPtr) &struct33 + 312);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 2796);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 1858);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 1664);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 3789);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 2868);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 2111);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 1829);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 1322);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 513);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 2527);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 35);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 1184);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 1434);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 1022);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) ^(byte&) ((IntPtr) &struct33 + 3913);
      return _Module.memcmp((void*) &struct28_2, (void*) &struct28_1, 16U) == 0 ? 1 : 0;
    }

    private unsafe int method_73()
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -61;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 91;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) -73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) 43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -50;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) -66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) 54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 30;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_2 + 1), 0, 15);
      Struct33 struct33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct33, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 4096U);
      Struct28 struct28_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_3, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 665), 16U);
      Struct28 struct28_4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_4, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), 16U);
      Struct28 struct28_5;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_5 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_3 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_1 + index));
      }
      Struct28 struct28_6;
      this.method_89((byte*) &struct28_5, (byte*) &struct28_1, (byte*) &struct28_2, (byte*) &struct28_6);
      Struct28 struct28_7;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_7 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_6 + index) & 15) << 4);
      }
      Struct28 struct28_8;
      this.method_89((byte*) &struct28_5, (byte*) &struct28_6, (byte*) &struct28_2, (byte*) &struct28_8);
      Struct28 struct28_9;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_9 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_8 + index) & 240) >> 4);
      }
      Struct28 struct28_10;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_10 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_9 + index) | (int) ^(byte&) ((IntPtr) &struct28_7 + index));
      }
      Struct28 struct28_11;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ^(byte&) ((IntPtr) &struct28_10 + index);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (((int) ^(byte&) ((IntPtr) &struct28_10 + index) & 15) == 15)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_11 + index) - 1);
        }
      }
      Struct88 struct88;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(short&) ((IntPtr) &struct88 + index * 2) = (short) ((int) ^(byte&) ((IntPtr) &struct28_11 + index) << 4 | index);
      }
      Struct28 struct28_12;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_12 + index) = (sbyte) ^(byte&) ((IntPtr) &struct33 + (int) ^(ushort&) ((IntPtr) &struct88 + index * 2));
      }
      Struct28 struct28_13;
      this.method_90((byte*) &struct28_5, (byte*) &struct28_1, (byte*) &struct28_12, (byte*) &struct28_13);
      return _Module.memcmp((void*) &struct28_4, (void*) &struct28_13, 16U) == 0 ? 1 : 0;
    }

    private unsafe int method_74()
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -61;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 91;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) -73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) 43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -50;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) -66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) 54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 30;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_2 + 1), 0, 15);
      Struct33 struct33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct33, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 172032), 4096U);
      Struct28 struct28_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_3, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 130817), 16U);
      Struct28 struct28_4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_4, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 41008), 16U);
      Struct28 struct28_5;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_5 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_3 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_1 + index));
      }
      Struct28 struct28_6;
      this.method_89((byte*) &struct28_5, (byte*) &struct28_1, (byte*) &struct28_2, (byte*) &struct28_6);
      Struct28 struct28_7;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_7 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_6 + index) & 15) << 4);
      }
      Struct28 struct28_8;
      this.method_89((byte*) &struct28_5, (byte*) &struct28_6, (byte*) &struct28_2, (byte*) &struct28_8);
      Struct28 struct28_9;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_9 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_8 + index) & 240) >> 4);
      }
      Struct28 struct28_10;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_10 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_9 + index) | (int) ^(byte&) ((IntPtr) &struct28_7 + index));
      }
      Struct28 struct28_11;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ^(byte&) ((IntPtr) &struct28_10 + index);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (((int) ^(byte&) ((IntPtr) &struct28_10 + index) & 15) == 15)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_11 + index) - 1);
        }
      }
      Struct88 struct88;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(short&) ((IntPtr) &struct88 + index * 2) = (short) ((int) ^(byte&) ((IntPtr) &struct28_11 + index) << 4 | index);
      }
      Struct28 struct28_12;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_12 + index) = (sbyte) ^(byte&) ((IntPtr) &struct33 + (int) ^(ushort&) ((IntPtr) &struct88 + index * 2));
      }
      Struct28 struct28_13;
      this.method_90((byte*) &struct28_5, (byte*) &struct28_1, (byte*) &struct28_12, (byte*) &struct28_13);
      return _Module.memcmp((void*) &struct28_4, (void*) &struct28_13, 16U) == 0 ? 1 : 0;
    }

    private unsafe int method_75()
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) -4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 42;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) 67;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) -54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -127;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) 79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) -75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) 92;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) -22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 122;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_2 + 1), 0, 15);
      Struct33 struct33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct33, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 4096U);
      Struct28 struct28_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_3, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 665), 16U);
      Struct28 struct28_4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_4, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), 16U);
      Struct28 struct28_5;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_5 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_3 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_1 + index));
      }
      Struct28 struct28_6;
      this.method_89((byte*) &struct28_5, (byte*) &struct28_1, (byte*) &struct28_2, (byte*) &struct28_6);
      Struct28 struct28_7;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_7 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_6 + index) & 15) << 4);
      }
      Struct28 struct28_8;
      this.method_89((byte*) &struct28_5, (byte*) &struct28_6, (byte*) &struct28_2, (byte*) &struct28_8);
      Struct28 struct28_9;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_9 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_8 + index) & 240) >> 4);
      }
      Struct28 struct28_10;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_10 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_9 + index) | (int) ^(byte&) ((IntPtr) &struct28_7 + index));
      }
      Struct28 struct28_11;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ^(byte&) ((IntPtr) &struct28_10 + index);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (((int) ^(byte&) ((IntPtr) &struct28_10 + index) & 15) == 15)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_11 + index) - 1);
        }
      }
      Struct88 struct88;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(short&) ((IntPtr) &struct88 + index * 2) = (short) ((int) ^(byte&) ((IntPtr) &struct28_11 + index) << 4 | index);
      }
      Struct28 struct28_12;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_12 + index) = (sbyte) ^(byte&) ((IntPtr) &struct33 + (int) ^(ushort&) ((IntPtr) &struct88 + index * 2));
      }
      Struct28 struct28_13;
      this.method_90((byte*) &struct28_5, (byte*) &struct28_1, (byte*) &struct28_12, (byte*) &struct28_13);
      return _Module.memcmp((void*) &struct28_4, (void*) &struct28_13, 16U) == 0 ? 1 : 0;
    }

    private unsafe int method_76()
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) -4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 42;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) 67;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) -54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -127;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) 79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) -75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) 92;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) -22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 122;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_2 + 1), 0, 15);
      Struct33 struct33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct33, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 172032), 4096U);
      Struct28 struct28_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_3, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 130817), 16U);
      Struct28 struct28_4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_4, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 41008), 16U);
      Struct28 struct28_5;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_5 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_3 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_1 + index));
      }
      Struct28 struct28_6;
      this.method_89((byte*) &struct28_5, (byte*) &struct28_1, (byte*) &struct28_2, (byte*) &struct28_6);
      Struct28 struct28_7;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_7 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_6 + index) & 15) << 4);
      }
      Struct28 struct28_8;
      this.method_89((byte*) &struct28_5, (byte*) &struct28_6, (byte*) &struct28_2, (byte*) &struct28_8);
      Struct28 struct28_9;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_9 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_8 + index) & 240) >> 4);
      }
      Struct28 struct28_10;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_10 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_9 + index) | (int) ^(byte&) ((IntPtr) &struct28_7 + index));
      }
      Struct28 struct28_11;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ^(byte&) ((IntPtr) &struct28_10 + index);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (((int) ^(byte&) ((IntPtr) &struct28_10 + index) & 15) == 15)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_11 + index) - 1);
        }
      }
      Struct88 struct88;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(short&) ((IntPtr) &struct88 + index * 2) = (short) ((int) ^(byte&) ((IntPtr) &struct28_11 + index) << 4 | index);
      }
      Struct28 struct28_12;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_12 + index) = (sbyte) ^(byte&) ((IntPtr) &struct33 + (int) ^(ushort&) ((IntPtr) &struct88 + index * 2));
      }
      Struct28 struct28_13;
      this.method_90((byte*) &struct28_5, (byte*) &struct28_1, (byte*) &struct28_12, (byte*) &struct28_13);
      return _Module.memcmp((void*) &struct28_4, (void*) &struct28_13, 16U) == 0 ? 1 : 0;
    }

    private unsafe int method_77()
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) 88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) -104;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) 89;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 91;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) -79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) -26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) -84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 28;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_2 + 1), 0, 15);
      Struct33 struct33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct33, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 4096U);
      Struct28 struct28_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_3, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 665), 16U);
      Struct28 struct28_4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_4, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), 16U);
      Struct28 struct28_5;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_5 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_3 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_1 + index));
      }
      Struct28 struct28_6;
      this.method_89((byte*) &struct28_5, (byte*) &struct28_1, (byte*) &struct28_2, (byte*) &struct28_6);
      Struct28 struct28_7;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_7 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_6 + index) & 15) << 4);
      }
      Struct28 struct28_8;
      this.method_89((byte*) &struct28_5, (byte*) &struct28_6, (byte*) &struct28_2, (byte*) &struct28_8);
      Struct28 struct28_9;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_9 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_8 + index) & 240) >> 4);
      }
      Struct28 struct28_10;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_10 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_9 + index) | (int) ^(byte&) ((IntPtr) &struct28_7 + index));
      }
      Struct28 struct28_11;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ^(byte&) ((IntPtr) &struct28_10 + index);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (((int) ^(byte&) ((IntPtr) &struct28_10 + index) & 15) == 15)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_11 + index) - 1);
        }
      }
      Struct88 struct88;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(short&) ((IntPtr) &struct88 + index * 2) = (short) ((int) ^(byte&) ((IntPtr) &struct28_11 + index) << 4 | index);
      }
      Struct28 struct28_12;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_12 + index) = (sbyte) ^(byte&) ((IntPtr) &struct33 + (int) ^(ushort&) ((IntPtr) &struct88 + index * 2));
      }
      Struct28 struct28_13;
      this.method_90((byte*) &struct28_5, (byte*) &struct28_1, (byte*) &struct28_12, (byte*) &struct28_13);
      return _Module.memcmp((void*) &struct28_4, (void*) &struct28_13, 16U) == 0 ? 1 : 0;
    }

    private unsafe int method_78()
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) 88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) -104;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) 89;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 91;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) -79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) -26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) -84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 28;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_2 + 1), 0, 15);
      Struct33 struct33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct33, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 172032), 4096U);
      Struct28 struct28_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_3, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 130817), 16U);
      Struct28 struct28_4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_4, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 41008), 16U);
      Struct28 struct28_5;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_5 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_3 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_1 + index));
      }
      Struct28 struct28_6;
      this.method_89((byte*) &struct28_5, (byte*) &struct28_1, (byte*) &struct28_2, (byte*) &struct28_6);
      Struct28 struct28_7;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_7 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_6 + index) & 15) << 4);
      }
      Struct28 struct28_8;
      this.method_89((byte*) &struct28_5, (byte*) &struct28_6, (byte*) &struct28_2, (byte*) &struct28_8);
      Struct28 struct28_9;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_9 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_8 + index) & 240) >> 4);
      }
      Struct28 struct28_10;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_10 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_9 + index) | (int) ^(byte&) ((IntPtr) &struct28_7 + index));
      }
      Struct28 struct28_11;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ^(byte&) ((IntPtr) &struct28_10 + index);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (((int) ^(byte&) ((IntPtr) &struct28_10 + index) & 15) == 15)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_11 + index) - 1);
        }
      }
      Struct88 struct88;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(short&) ((IntPtr) &struct88 + index * 2) = (short) ((int) ^(byte&) ((IntPtr) &struct28_11 + index) << 4 | index);
      }
      Struct28 struct28_12;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_12 + index) = (sbyte) ^(byte&) ((IntPtr) &struct33 + (int) ^(ushort&) ((IntPtr) &struct88 + index * 2));
      }
      Struct28 struct28_13;
      this.method_90((byte*) &struct28_5, (byte*) &struct28_1, (byte*) &struct28_12, (byte*) &struct28_13);
      return _Module.memcmp((void*) &struct28_4, (void*) &struct28_13, 16U) == 0 ? 1 : 0;
    }

    private unsafe int method_79(int int_16)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -61;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 91;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) -73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) 43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -50;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) -66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) 54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 30;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_2 + 1), 0, 15);
      Struct33 struct33_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct33_1, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + int_16 * 2392 + 2388) + 172032), 4096U);
      Struct28 struct28_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_3, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + int_16 * 2392 + 2388) + 130817), 16U);
      Struct33 struct33_2;
      _Module.memset((void*) &struct33_2, (int) byte.MaxValue, 4096U);
      if (_Module.memcmp((void*) &struct33_1, (void*) &struct33_2, 4096U) == 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) &struct33_2, 16U);
        return 1;
      }
      else
      {
        Struct28 struct28_4;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_4 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_3 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_1 + index));
        }
        Struct28 struct28_5;
        this.method_89((byte*) &struct28_4, (byte*) &struct28_1, (byte*) &struct28_2, (byte*) &struct28_5);
        Struct28 struct28_6;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_6 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_5 + index) & 15) << 4);
        }
        Struct28 struct28_7;
        this.method_89((byte*) &struct28_4, (byte*) &struct28_5, (byte*) &struct28_2, (byte*) &struct28_7);
        Struct28 struct28_8;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_8 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_7 + index) & 240) >> 4);
        }
        Struct28 struct28_9;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_9 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_8 + index) | (int) ^(byte&) ((IntPtr) &struct28_6 + index));
        }
        Struct28 struct28_10;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_10 + index) = (sbyte) ^(byte&) ((IntPtr) &struct28_9 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (((int) ^(byte&) ((IntPtr) &struct28_9 + index) & 15) == 15)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct28_10 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_10 + index) - 1);
          }
        }
        Struct88 struct88;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(short&) ((IntPtr) &struct88 + index * 2) = (short) ((int) ^(byte&) ((IntPtr) &struct28_10 + index) << 4 | index);
        }
        Struct28 struct28_11;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ^(byte&) ((IntPtr) &struct33_1 + (int) ^(ushort&) ((IntPtr) &struct88 + index * 2));
        }
        Struct28 struct28_12;
        this.method_90((byte*) &struct28_4, (byte*) &struct28_1, (byte*) &struct28_11, (byte*) &struct28_12);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) &struct28_12, 16U);
        return 1;
      }
    }

    private unsafe int method_80(int int_16)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) -4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 42;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) 67;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) -54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -127;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) 79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) -75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) 92;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) -22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 122;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_2 + 1), 0, 15);
      Struct33 struct33_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct33_1, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + int_16 * 2392 + 2388) + 172032), 4096U);
      Struct28 struct28_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_3, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + int_16 * 2392 + 2388) + 130817), 16U);
      Struct33 struct33_2;
      _Module.memset((void*) &struct33_2, (int) byte.MaxValue, 4096U);
      if (_Module.memcmp((void*) &struct33_1, (void*) &struct33_2, 4096U) == 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) &struct33_2, 16U);
        return 1;
      }
      else
      {
        Struct28 struct28_4;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_4 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_3 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_1 + index));
        }
        Struct28 struct28_5;
        this.method_89((byte*) &struct28_4, (byte*) &struct28_1, (byte*) &struct28_2, (byte*) &struct28_5);
        Struct28 struct28_6;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_6 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_5 + index) & 15) << 4);
        }
        Struct28 struct28_7;
        this.method_89((byte*) &struct28_4, (byte*) &struct28_5, (byte*) &struct28_2, (byte*) &struct28_7);
        Struct28 struct28_8;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_8 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_7 + index) & 240) >> 4);
        }
        Struct28 struct28_9;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_9 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_8 + index) | (int) ^(byte&) ((IntPtr) &struct28_6 + index));
        }
        Struct28 struct28_10;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_10 + index) = (sbyte) ^(byte&) ((IntPtr) &struct28_9 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (((int) ^(byte&) ((IntPtr) &struct28_9 + index) & 15) == 15)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct28_10 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_10 + index) - 1);
          }
        }
        Struct88 struct88;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(short&) ((IntPtr) &struct88 + index * 2) = (short) ((int) ^(byte&) ((IntPtr) &struct28_10 + index) << 4 | index);
        }
        Struct28 struct28_11;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ^(byte&) ((IntPtr) &struct33_1 + (int) ^(ushort&) ((IntPtr) &struct88 + index * 2));
        }
        Struct28 struct28_12;
        this.method_90((byte*) &struct28_4, (byte*) &struct28_1, (byte*) &struct28_11, (byte*) &struct28_12);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) &struct28_12, 16U);
        return 1;
      }
    }

    private unsafe int method_81(int int_16)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) 88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) -104;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) 89;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 91;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) -79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) -26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) -84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 28;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_2 + 1), 0, 15);
      Struct33 struct33_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct33_1, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + int_16 * 2392 + 2388) + 172032), 4096U);
      Struct28 struct28_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_3, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + int_16 * 2392 + 2388) + 130817), 16U);
      Struct33 struct33_2;
      _Module.memset((void*) &struct33_2, (int) byte.MaxValue, 4096U);
      if (_Module.memcmp((void*) &struct33_1, (void*) &struct33_2, 4096U) == 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) &struct33_2, 16U);
        return 1;
      }
      else
      {
        Struct28 struct28_4;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_4 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_3 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_1 + index));
        }
        Struct28 struct28_5;
        this.method_89((byte*) &struct28_4, (byte*) &struct28_1, (byte*) &struct28_2, (byte*) &struct28_5);
        Struct28 struct28_6;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_6 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_5 + index) & 15) << 4);
        }
        Struct28 struct28_7;
        this.method_89((byte*) &struct28_4, (byte*) &struct28_5, (byte*) &struct28_2, (byte*) &struct28_7);
        Struct28 struct28_8;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_8 + index) = (sbyte) (((int) ^(byte&) ((IntPtr) &struct28_7 + index) & 240) >> 4);
        }
        Struct28 struct28_9;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_9 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_8 + index) | (int) ^(byte&) ((IntPtr) &struct28_6 + index));
        }
        Struct28 struct28_10;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_10 + index) = (sbyte) ^(byte&) ((IntPtr) &struct28_9 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (((int) ^(byte&) ((IntPtr) &struct28_9 + index) & 15) == 15)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct28_10 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_10 + index) - 1);
          }
        }
        Struct88 struct88;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(short&) ((IntPtr) &struct88 + index * 2) = (short) ((int) ^(byte&) ((IntPtr) &struct28_10 + index) << 4 | index);
        }
        Struct28 struct28_11;
        for (int index = 0; index < 16; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct28_11 + index) = (sbyte) ^(byte&) ((IntPtr) &struct33_1 + (int) ^(ushort&) ((IntPtr) &struct88 + index * 2));
        }
        Struct28 struct28_12;
        this.method_90((byte*) &struct28_4, (byte*) &struct28_1, (byte*) &struct28_11, (byte*) &struct28_12);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + int_16 * 4) + 280), (void*) &struct28_12, 16U);
        return 1;
      }
    }

    private unsafe int method_82()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -64;
      Struct85 struct85;
      uint num3;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct85, &num3, 116U, (byte) 1, &gstruct3) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num4 = (int) MessageBox.Show("Inquiry command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 0;
      }
      else
      {
        this.method_5((byte*) &struct85, 116U, 0U);
        this.textBox6.AppendText("\r\n\r\n" + this.string_0 + "\r\n");
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 568), (void*) &struct85, 116U);
        return 1;
      }
    }

    private unsafe int method_83(byte* pByte_0)
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -64;
      Struct85 struct85;
      uint num3;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct85, &num3, 116U, (byte) 1, &gstruct3) != 0)
        return 0;
      _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct85 + 96), 20U);
      return 1;
    }

    private unsafe int method_84()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct30 struct30;
      uint num3;
      if (_Module.smethod_12((byte) 161, (byte) num2, (GStruct4*) 0, (GStruct4*) 0, (byte) 64, (void*) &struct30, &num3, 512U, 512U, (byte) 1, &gstruct3) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num4 = (int) MessageBox.Show("Identify command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 0;
      }
      else
      {
        this.method_5((byte*) &struct30, 512U, 0U);
        this.textBox6.AppendText(this.string_0 + "\r\n");
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 780), (void*) &struct30, 180U);
        return 1;
      }
    }

    private unsafe int method_85(byte* pByte_0)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) 11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) -64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) -5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) -10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) -125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) 13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) -106;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) -59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) -91;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) 62;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) -39;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) 19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) 20;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) 21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) 22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) 23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) 24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) 25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) 26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) 27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) 29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) 30;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) 31;
      Struct28 struct28_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_3, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 664), 16U);
      Struct28 struct28_4;
      this.method_89((byte*) &struct28_1, (byte*) &struct28_2, (byte*) &struct28_3, (byte*) &struct28_4);
      _Module.memcpy((void*) pByte_0, (void*) &struct28_4, 16U);
      return 1;
    }

    private unsafe int method_86(byte* pByte_0)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -77;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) -52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) -42;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) -24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) -50;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) -59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) 112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -86;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 45;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) 47;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 7;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) 19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) 20;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) 21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) 22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) 23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) 24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) 25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) 26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) 27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) 29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) 30;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) 31;
      Struct28 struct28_3;
      _Module.memset((void*) &struct28_3, 32, 16U);
      Struct28 struct28_4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_4, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 664), 16U);
      if (_Module.memcmp((void*) &struct28_3, (void*) &struct28_4, 16U) == 0)
        _Module.memset((void*) &struct28_4, (int) byte.MaxValue, 16U);
      Struct28 struct28_5;
      this.method_89((byte*) &struct28_1, (byte*) &struct28_2, (byte*) &struct28_4, (byte*) &struct28_5);
      _Module.memcpy((void*) pByte_0, (void*) &struct28_5, 16U);
      return 1;
    }

    private unsafe int method_87(byte* pByte_0)
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 1000U);
      Struct28 struct28;
      _Module.memset((void*) &struct28, 0, 16U);
      _Module.memcpy((void*) &struct28, (void*) pByte_0, 16U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 80;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 16;
      this.textBox6.AppendText("Sending Password to Drive on port " + this.label123.Text + "\r\n");
      uint num3;
      if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct28, &num3, 16U, (byte) 1, &gstruct3) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num4 = (int) MessageBox.Show("Slim-Un-Lock command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 0;
      }
      else
      {
        this.textBox6.AppendText("Done!" + "\r\n");
        return 1;
      }
    }

    private unsafe int method_88(byte* pByte_0)
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 1000U);
      Struct28 struct28;
      _Module.memset((void*) &struct28, 0, 16U);
      _Module.memcpy((void*) &struct28, (void*) pByte_0, 16U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 80;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 16;
      this.textBox6.AppendText("Sending Password to Drive on port " + this.label123.Text + "\r\n");
      uint num3;
      if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct28, &num3, 16U, (byte) 1, &gstruct3) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num4 = (int) MessageBox.Show("Slim-Un-Lock command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 0;
      }
      else
      {
        this.textBox6.AppendText("Done!" + "\r\n");
        return 1;
      }
    }

    private unsafe void method_89(byte* pByte_0, byte* pByte_1, byte* pByte_2, byte* pByte_3)
    {
      Struct28 struct28_1;
      _Module.memcpy((void*) &struct28_1, (void*) pByte_0, 16U);
      Struct28 struct28_2;
      _Module.memcpy((void*) &struct28_2, (void*) pByte_1, 16U);
      Struct28 struct28_3;
      _Module.memcpy((void*) &struct28_3, (void*) pByte_2, 16U);
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_3 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_3 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_2 + index));
      }
      Struct89 struct89;
      int int_43 = _Module.smethod_142((uint*) &struct89, (byte*) &struct28_1, 128);
      Struct28 struct28_4;
      _Module.smethod_144((uint*) &struct89, int_43, (byte*) &struct28_3, (byte*) &struct28_4);
      _Module.memcpy((void*) pByte_3, (void*) &struct28_4, 16U);
    }

    private unsafe void method_90(byte* pByte_0, byte* pByte_1, byte* pByte_2, byte* pByte_3)
    {
      Struct28 struct28_1;
      _Module.memcpy((void*) &struct28_1, (void*) pByte_0, 16U);
      Struct28 struct28_2;
      _Module.memcpy((void*) &struct28_2, (void*) pByte_1, 16U);
      Struct28 struct28_3;
      _Module.memcpy((void*) &struct28_3, (void*) pByte_2, 16U);
      Struct89 struct89;
      int int_43 = _Module.smethod_143((uint*) &struct89, (byte*) &struct28_1, 128);
      Struct28 struct28_4;
      _Module.smethod_145((uint*) &struct89, int_43, (byte*) &struct28_3, (byte*) &struct28_4);
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_4 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_4 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_2 + index));
      }
      _Module.memcpy((void*) pByte_3, (void*) &struct28_4, 16U);
    }

    private unsafe int method_91(byte byte_0, byte byte_1, byte byte_2, byte* pByte_0)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) 74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) 117;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) 108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 70;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) 108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) 115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) 104;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 0;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) 7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) 9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) 11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) 13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) 15;
      Struct28 struct28_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_3 = (sbyte) 67;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 1) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 2) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 3) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 4) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 5) = (sbyte) 100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 6) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 7) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 8) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 9) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 10) = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 11) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 12) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 13) = (sbyte) 118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 14) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 15) = (sbyte) 114;
      Struct28 struct28_4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_4 = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 5) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 8) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 9) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 10) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 11) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 12) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 13) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 14) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 15) = (sbyte) 0;
      Struct28 struct28_5;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_5 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_5 + 1), 0, 15);
      Struct28 struct28_6;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_6 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_6 + 1), 0, 15);
      _Module.memset((void*) &struct28_5, 0, 16U);
      _Module.memset((void*) &struct28_6, (int) byte.MaxValue, 16U);
      Struct28 struct28_7;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_7 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_7 + 1), 0, 15);
      Struct4 struct4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct4 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 1) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 5) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 8) = (sbyte) 33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 9) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 10) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 11) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 12) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 13) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 14) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 15) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 16) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 17) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 18) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 19) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 20) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 21) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 22) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 23) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 24) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 25) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 26) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 27) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 28) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 29) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 30) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 31) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 32) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 33) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 34) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 35) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 36) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 37) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 38) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 39) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 40) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 41) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 42) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 43) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 44) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 45) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 46) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 47) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 48) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 49) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 50) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 51) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 52) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 53) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 54) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 55) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 56) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 57) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 58) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 59) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 60) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 61) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 62) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 63) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 5) = (sbyte) byte_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 6) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 7) = (sbyte) byte_2;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      int selectedIndex = this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num1 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      this.method_89((byte*) &struct28_1, (byte*) &struct28_2, (byte*) &struct28_1, (byte*) ((IntPtr) &struct4 + 10));
      this.method_89((byte*) &struct28_1, (byte*) ((IntPtr) &struct4 + 10), (byte*) &struct28_5, (byte*) ((IntPtr) &struct4 + 26));
      this.method_89((byte*) &struct28_1, (byte*) ((IntPtr) &struct4 + 26), (byte*) &struct28_4, (byte*) ((IntPtr) &struct4 + 42));
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      Struct90 struct90_1;
      _Module.memcpy((void*) &struct90_1, (void*) &struct4, 58U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 58;
      uint num2;
      if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_1, &num2, 58U, (byte) 1, &gstruct3) != 0 && _Module.smethod_17((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_1, &num2, 58U, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("\r\n" + "Stage 1 failed" + "\r\n");
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        _Module.Sleep(1U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72 + 3) == 1)
          this.method_424((byte) 88);
        Struct90 struct90_2;
        _Module.memset((void*) &struct90_2, 0, 58U);
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) 90;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 33;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 58;
        if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_2, &num2, 58U, (byte) 1, &gstruct3) != 0 && _Module.smethod_16((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_2, &num2, 58U, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("\r\n" + "Stage 2 failed" + "\r\n");
          this.Cursor = Cursors.Arrow;
          return 0;
        }
        else
        {
          Struct31 struct31;
          this.method_90((byte*) &struct28_1, (byte*) &struct28_2, (byte*) ((IntPtr) &struct90_2 + 10), (byte*) &struct31);
          this.method_90((byte*) &struct28_1, (byte*) ((IntPtr) &struct90_2 + 10), (byte*) ((IntPtr) &struct90_2 + 26), (byte*) ((IntPtr) &struct31 + 16));
          this.method_90((byte*) &struct28_1, (byte*) ((IntPtr) &struct90_2 + 26), (byte*) ((IntPtr) &struct90_2 + 42), (byte*) ((IntPtr) &struct31 + 32));
          this.method_90((byte*) &struct28_1, (byte*) &struct28_6, (byte*) ((IntPtr) &struct31 + 16), (byte*) ((IntPtr) &struct31 + 48));
          this.method_90((byte*) &struct28_1, (byte*) &struct28_5, (byte*) ((IntPtr) &struct31 + 48), (byte*) ((IntPtr) &struct31 + 64));
          if (_Module.memcmp((void*) &struct31, (void*) &struct28_1, 16U) != 0)
            return 0;
          _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct31 + 64), 16U);
          return 1;
        }
      }
    }

    private unsafe int method_92(byte byte_0, byte byte_1, byte byte_2, byte* pByte_0)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) 74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) 117;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) 108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 70;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) 108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) 115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) 104;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 0;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) 7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) 9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) 11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) 13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) 15;
      Struct28 struct28_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_3 = (sbyte) 67;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 1) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 2) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 3) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 4) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 5) = (sbyte) 100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 6) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 7) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 8) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 9) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 10) = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 11) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 12) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 13) = (sbyte) 118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 14) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 15) = (sbyte) 114;
      Struct28 struct28_4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_4 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 5) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 8) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 9) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 10) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 11) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 12) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 13) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 14) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 15) = (sbyte) 0;
      Struct28 struct28_5;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_5 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_5 + 1), 0, 15);
      Struct28 struct28_6;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_6 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_6 + 1), 0, 15);
      _Module.memset((void*) &struct28_5, 0, 16U);
      _Module.memset((void*) &struct28_6, (int) byte.MaxValue, 16U);
      Struct28 struct28_7;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_7 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_7 + 1), 0, 15);
      Struct4 struct4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct4 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 1) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 5) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 8) = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 9) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 10) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 11) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 12) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 13) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 14) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 15) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 16) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 17) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 18) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 19) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 20) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 21) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 22) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 23) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 24) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 25) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 26) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 27) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 28) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 29) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 30) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 31) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 32) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 33) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 34) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 35) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 36) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 37) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 38) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 39) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 40) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 41) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 42) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 43) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 44) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 45) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 46) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 47) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 48) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 49) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 50) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 51) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 52) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 53) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 54) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 55) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 56) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 57) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 58) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 59) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 60) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 61) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 62) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 63) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 5) = (sbyte) byte_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 6) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 7) = (sbyte) byte_2;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      int selectedIndex = this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num1 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      this.method_89((byte*) &struct28_1, (byte*) &struct28_2, (byte*) &struct28_1, (byte*) ((IntPtr) &struct4 + 10));
      this.method_89((byte*) &struct28_1, (byte*) ((IntPtr) &struct4 + 10), (byte*) &struct28_5, (byte*) ((IntPtr) &struct4 + 26));
      this.method_89((byte*) &struct28_1, (byte*) ((IntPtr) &struct4 + 26), (byte*) &struct28_4, (byte*) ((IntPtr) &struct4 + 42));
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      Struct90 struct90_1;
      _Module.memcpy((void*) &struct90_1, (void*) &struct4, 58U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 58;
      uint num2;
      if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_1, &num2, 58U, (byte) 1, &gstruct3) != 0 && _Module.smethod_17((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_1, &num2, 58U, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("\r\n" + "Stage 1 failed" + "\r\n");
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        _Module.Sleep(1U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72 + 3) == 1)
          this.method_424((byte) 88);
        Struct90 struct90_2;
        _Module.memset((void*) &struct90_2, 0, 58U);
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) 90;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 33;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 58;
        if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_2, &num2, 58U, (byte) 1, &gstruct3) != 0 && _Module.smethod_16((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_2, &num2, 58U, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("\r\n" + "Stage 2 failed" + "\r\n");
          this.Cursor = Cursors.Arrow;
          return 0;
        }
        else
        {
          Struct31 struct31;
          this.method_90((byte*) &struct28_1, (byte*) &struct28_2, (byte*) ((IntPtr) &struct90_2 + 10), (byte*) &struct31);
          this.method_90((byte*) &struct28_1, (byte*) ((IntPtr) &struct90_2 + 10), (byte*) ((IntPtr) &struct90_2 + 26), (byte*) ((IntPtr) &struct31 + 16));
          this.method_90((byte*) &struct28_1, (byte*) ((IntPtr) &struct90_2 + 26), (byte*) ((IntPtr) &struct90_2 + 42), (byte*) ((IntPtr) &struct31 + 32));
          this.method_90((byte*) &struct28_1, (byte*) &struct28_6, (byte*) ((IntPtr) &struct31 + 16), (byte*) ((IntPtr) &struct31 + 48));
          this.method_90((byte*) &struct28_1, (byte*) &struct28_5, (byte*) ((IntPtr) &struct31 + 48), (byte*) ((IntPtr) &struct31 + 64));
          _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct31 + 64), 16U);
          if (_Module.memcmp((void*) &struct31, (void*) &struct28_1, 16U) != 0)
            return 0;
          _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct31 + 64), 16U);
          return 1;
        }
      }
    }

    private unsafe int method_93(byte byte_0, byte byte_1, byte byte_2, byte* pByte_0)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) 74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) 117;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) 108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 70;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) 108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) 115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) 104;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 0;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) 7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) 9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) 11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) 13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) 15;
      Struct28 struct28_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_3 = (sbyte) 67;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 1) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 2) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 3) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 4) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 5) = (sbyte) 100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 6) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 7) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 8) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 9) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 10) = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 11) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 12) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 13) = (sbyte) 118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 14) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 15) = (sbyte) 114;
      Struct28 struct28_4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_4 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 5) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 8) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 9) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 10) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 11) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 12) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 13) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 14) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 15) = (sbyte) 0;
      Struct28 struct28_5;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_5 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_5 + 1), 0, 15);
      Struct28 struct28_6;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_6 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_6 + 1), 0, 15);
      _Module.memset((void*) &struct28_5, 0, 16U);
      _Module.memset((void*) &struct28_6, (int) byte.MaxValue, 16U);
      Struct28 struct28_7;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_7 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_7 + 1), 0, 15);
      Struct4 struct4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct4 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 1) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 5) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 8) = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 9) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 10) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 11) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 12) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 13) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 14) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 15) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 16) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 17) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 18) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 19) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 20) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 21) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 22) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 23) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 24) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 25) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 26) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 27) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 28) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 29) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 30) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 31) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 32) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 33) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 34) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 35) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 36) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 37) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 38) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 39) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 40) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 41) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 42) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 43) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 44) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 45) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 46) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 47) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 48) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 49) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 50) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 51) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 52) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 53) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 54) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 55) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 56) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 57) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 58) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 59) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 60) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 61) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 62) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 63) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 14) = (sbyte) byte_2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 13) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 8) = (sbyte) byte_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 55) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4 + 56) = (sbyte) byte_2;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      int selectedIndex = this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num1 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      _Module.memcpy((void*) ((IntPtr) &struct4 + 10), (void*) &struct28_1, 16U);
      _Module.memcpy((void*) ((IntPtr) &struct4 + 26), (void*) &struct28_5, 16U);
      _Module.memcpy((void*) ((IntPtr) &struct4 + 42), (void*) &struct28_4, 16U);
      this.method_89((byte*) &struct28_1, (byte*) &struct28_2, (byte*) &struct28_1, (byte*) ((IntPtr) &struct4 + 10));
      this.method_89((byte*) &struct28_1, (byte*) ((IntPtr) &struct4 + 10), (byte*) &struct28_5, (byte*) ((IntPtr) &struct4 + 26));
      this.method_89((byte*) &struct28_1, (byte*) ((IntPtr) &struct4 + 26), (byte*) &struct28_4, (byte*) ((IntPtr) &struct4 + 42));
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      Struct90 struct90_1;
      _Module.memcpy((void*) &struct90_1, (void*) &struct4, 58U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 58;
      _Module.clock();
      uint num2;
      if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_1, &num2, 58U, (byte) 1, &gstruct3) != 0 && _Module.smethod_17((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_1, &num2, 58U, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("\r\n" + "Stage 1 failed" + "\r\n");
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        _Module.Sleep(1U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72 + 3) == 1)
          this.method_424((byte) 88);
        Struct90 struct90_2;
        _Module.memset((void*) &struct90_2, 0, 58U);
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) 90;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) byte_0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 58;
        if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_2, &num2, 58U, (byte) 1, &gstruct3) != 0 && _Module.smethod_16((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_2, &num2, 58U, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("\r\n" + "Stage 2 failed" + "\r\n");
          this.Cursor = Cursors.Arrow;
          return 0;
        }
        else
        {
          _Module.clock();
          Struct31 struct31;
          this.method_90((byte*) &struct28_1, (byte*) &struct28_2, (byte*) ((IntPtr) &struct90_2 + 10), (byte*) &struct31);
          this.method_90((byte*) &struct28_1, (byte*) ((IntPtr) &struct90_2 + 10), (byte*) ((IntPtr) &struct90_2 + 26), (byte*) ((IntPtr) &struct31 + 16));
          this.method_90((byte*) &struct28_1, (byte*) ((IntPtr) &struct90_2 + 26), (byte*) ((IntPtr) &struct90_2 + 42), (byte*) ((IntPtr) &struct31 + 32));
          this.method_90((byte*) &struct28_1, (byte*) &struct28_6, (byte*) ((IntPtr) &struct31 + 16), (byte*) ((IntPtr) &struct31 + 48));
          this.method_90((byte*) &struct28_1, (byte*) &struct28_5, (byte*) ((IntPtr) &struct31 + 48), (byte*) ((IntPtr) &struct31 + 64));
          if (_Module.memcmp((void*) &struct31, (void*) &struct28_1, 16U) != 0)
            return 0;
          _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct31 + 64), 16U);
          return 1;
        }
      }
    }

    private unsafe int method_94(byte* pByte_0)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) 51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) -70;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) 40;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) 99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) 115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) -83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) 24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) -109;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) -113;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) -127;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) -97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) -117;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) -124;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) -125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) -113;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) -31;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) -62;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) 44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) 49;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) 73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) 107;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) -71;
      Struct28 struct28_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_3 = (sbyte) 112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 1) = (sbyte) 39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 2) = (sbyte) -90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 4) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 5) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 6) = (sbyte) 82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 7) = (sbyte) 29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 8) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 9) = (sbyte) 126;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 10) = (sbyte) -13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 11) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 12) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 13) = (sbyte) -118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 14) = (sbyte) -69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 15) = sbyte.MaxValue;
      Struct28 struct28_4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_4 = (sbyte) -78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 1) = (sbyte) 65;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 2) = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 3) = (sbyte) 55;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 4) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 5) = (sbyte) -15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 6) = (sbyte) -54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 7) = (sbyte) 107;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 8) = (sbyte) -88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 9) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 10) = (sbyte) -21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 11) = (sbyte) 11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 12) = (sbyte) 39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 13) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 14) = (sbyte) 40;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 15) = (sbyte) -10;
      Struct28 struct28_5;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_5 = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 1) = (sbyte) -43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 2) = (sbyte) -91;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 3) = (sbyte) -17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 4) = (sbyte) -5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 5) = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 6) = (sbyte) 87;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 7) = (sbyte) -125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 8) = (sbyte) -4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 9) = (sbyte) 60;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 10) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 11) = (sbyte) 73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 12) = (sbyte) -89;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 13) = (sbyte) -78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 14) = (sbyte) -71;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 15) = (sbyte) 12;
      Struct28 struct28_6;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_6 = (sbyte) 50;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 1) = (sbyte) -121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 2) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 3) = (sbyte) -35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 4) = (sbyte) -112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 5) = (sbyte) 47;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 6) = (sbyte) -35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 7) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 8) = (sbyte) -30;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 9) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 10) = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 11) = (sbyte) -118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 12) = (sbyte) -73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 13) = (sbyte) 75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 14) = (sbyte) -123;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 15) = (sbyte) -5;
      Struct28 struct28_7;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_7 = (sbyte) -21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 1) = (sbyte) -78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 2) = (sbyte) -119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 3) = (sbyte) 94;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 4) = (sbyte) -121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 5) = (sbyte) -109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 6) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 7) = (sbyte) 83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 8) = (sbyte) 29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 9) = (sbyte) 21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 10) = (sbyte) -91;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 11) = (sbyte) 55;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 12) = sbyte.MaxValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 13) = (sbyte) -44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 14) = (sbyte) 104;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 15) = (sbyte) 80;
      Struct28 struct28_8;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_8 = (sbyte) 83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 1) = (sbyte) -42;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 2) = (sbyte) -7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 3) = (sbyte) -85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 4) = (sbyte) -15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 5) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 6) = (sbyte) 63;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 7) = (sbyte) 51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 8) = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 9) = (sbyte) 125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 10) = (sbyte) -80;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 11) = (sbyte) -45;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 12) = (sbyte) -86;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 13) = (sbyte) 11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 14) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 15) = (sbyte) 49;
      Struct28 struct28_9;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_9 = (sbyte) 75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 1) = (sbyte) 62;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 2) = (sbyte) 39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 3) = (sbyte) 96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 4) = (sbyte) 125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 5) = (sbyte) -59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 6) = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 7) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 8) = (sbyte) -107;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 9) = (sbyte) -111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 10) = (sbyte) 107;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 11) = (sbyte) -18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 12) = (sbyte) 41;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 13) = (sbyte) -30;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 14) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_9 + 15) = (sbyte) 123;
      Struct28 struct28_10;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_10 = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 1) = (sbyte) 122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 2) = (sbyte) -32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 3) = (sbyte) -85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 4) = (sbyte) -63;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 5) = (sbyte) 43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 6) = (sbyte) 7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 7) = (sbyte) -44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 8) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 9) = (sbyte) -72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 10) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 11) = (sbyte) 76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 12) = (sbyte) -102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 13) = (sbyte) 21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 14) = (sbyte) -81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_10 + 15) = (sbyte) -104;
      Struct28 struct28_11;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_11 = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 1) = (sbyte) -78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 2) = (sbyte) -53;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 3) = (sbyte) -21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 4) = (sbyte) 45;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 5) = (sbyte) 39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 6) = (sbyte) -65;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 7) = (sbyte) -12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 8) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 9) = (sbyte) -99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 10) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 11) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 12) = (sbyte) -99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 13) = (sbyte) -116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 14) = (sbyte) -51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_11 + 15) = (sbyte) 55;
      Struct28 struct28_12;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_12 = (sbyte) 92;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 2) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 3) = (sbyte) 25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 4) = (sbyte) -89;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 5) = (sbyte) -127;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 6) = (sbyte) -72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 7) = (sbyte) -74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 8) = (sbyte) 93;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 9) = (sbyte) 126;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 10) = (sbyte) -54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 11) = (sbyte) -95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 12) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 13) = (sbyte) -39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 14) = (sbyte) -99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_12 + 15) = (sbyte) -23;
      Struct28 struct28_13;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_13 = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 1) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 2) = (sbyte) -79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 3) = (sbyte) -42;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 4) = (sbyte) -29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 5) = (sbyte) -108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 6) = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 7) = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 8) = (sbyte) -58;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 9) = (sbyte) -28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 10) = (sbyte) -44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 11) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 12) = (sbyte) -37;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 13) = (sbyte) 73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 14) = (sbyte) 84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_13 + 15) = (sbyte) 20;
      Struct28 struct28_14;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_14 = (sbyte) -83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 1) = (sbyte) 93;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 2) = (sbyte) -43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 3) = (sbyte) -81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 4) = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 5) = (sbyte) 62;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 6) = (sbyte) -77;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 7) = (sbyte) -78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 8) = (sbyte) -117;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 9) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 10) = (sbyte) -4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 11) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 12) = (sbyte) -46;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 13) = (sbyte) 75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 14) = (sbyte) -65;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_14 + 15) = (sbyte) 112;
      Struct28 struct28_15;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_15 = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 1) = (sbyte) -57;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 2) = (sbyte) 107;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 3) = (sbyte) -15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 4) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 5) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 6) = (sbyte) -38;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 7) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 8) = (sbyte) 82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 9) = (sbyte) -31;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 10) = (sbyte) -8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 11) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 12) = (sbyte) -118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 13) = (sbyte) -80;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 14) = (sbyte) 62;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_15 + 15) = (sbyte) 112;
      Struct28 struct28_16;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_16 = (sbyte) -61;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 1) = (sbyte) -107;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 2) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 3) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 4) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 5) = (sbyte) -112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 6) = (sbyte) -103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 7) = (sbyte) -4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 8) = (sbyte) -111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 9) = (sbyte) 83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 10) = (sbyte) 39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 11) = (sbyte) -52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 12) = (sbyte) -29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 13) = (sbyte) -127;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 14) = (sbyte) -16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_16 + 15) = (sbyte) 107;
      Struct28 struct28_17;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_17 = (sbyte) -25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 1) = (sbyte) 122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 2) = (sbyte) 74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 3) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 4) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 5) = (sbyte) 125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 6) = (sbyte) -72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 7) = (sbyte) 96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 8) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 9) = (sbyte) 86;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 10) = (sbyte) -7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 11) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 12) = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 13) = (sbyte) 24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 14) = (sbyte) 107;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_17 + 15) = (sbyte) -20;
      Struct28 struct28_18;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_18 = (sbyte) 26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 1) = (sbyte) -62;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 2) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 3) = (sbyte) -48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 4) = (sbyte) -25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 5) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 6) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 7) = (sbyte) 115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 8) = (sbyte) -109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 9) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 10) = (sbyte) -19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 11) = (sbyte) -39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 12) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 13) = (sbyte) -115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 14) = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_18 + 15) = (sbyte) 46;
      Struct28 struct28_19;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_19 = (sbyte) -126;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 1) = (sbyte) -87;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 2) = (sbyte) 87;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 3) = (sbyte) 96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 4) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 5) = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 6) = (sbyte) -33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 7) = (sbyte) -52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 8) = (sbyte) -107;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 9) = (sbyte) 49;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 10) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 11) = (sbyte) -111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 12) = (sbyte) -100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 13) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 14) = (sbyte) -59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_19 + 15) = (sbyte) 99;
      Struct28 struct28_20;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_20 = (sbyte) -22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 1) = (sbyte) 75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 2) = (sbyte) 126;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 3) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 4) = (sbyte) 13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 5) = (sbyte) -57;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 6) = (sbyte) -51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 7) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 8) = (sbyte) 98;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 9) = (sbyte) 27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 10) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 11) = (sbyte) -22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 12) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 13) = (sbyte) -118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 14) = (sbyte) -127;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_20 + 15) = (sbyte) 3;
      Struct28 struct28_21;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_21 = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 1) = (sbyte) -127;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 2) = (sbyte) -24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 3) = (sbyte) -84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 4) = (sbyte) -26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 5) = (sbyte) 99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 6) = (sbyte) -66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 7) = (sbyte) 40;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 8) = (sbyte) 100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 9) = (sbyte) 118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 10) = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 11) = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 12) = (sbyte) -30;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 13) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 14) = (sbyte) -112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_21 + 15) = (sbyte) 7;
      Struct28 struct28_22;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_22 = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 1) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 2) = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 3) = (sbyte) -48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 4) = (sbyte) 84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 5) = (sbyte) 22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 6) = (sbyte) 95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 7) = (sbyte) -46;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 8) = (sbyte) 63;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 9) = (sbyte) -55;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 10) = (sbyte) -48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 11) = (sbyte) 33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 12) = (sbyte) -127;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 13) = (sbyte) -66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 14) = (sbyte) -103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_22 + 15) = (sbyte) 53;
      Struct28 struct28_23;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_23 = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 1) = (sbyte) 37;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 2) = (sbyte) -84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 3) = (sbyte) 125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 4) = (sbyte) -55;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 5) = (sbyte) 43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 6) = (sbyte) -115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 7) = (sbyte) -50;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 8) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 9) = (sbyte) 123;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 10) = (sbyte) -76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 11) = (sbyte) -70;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 12) = (sbyte) 87;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 13) = (sbyte) -98;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 14) = (sbyte) -115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_23 + 15) = (sbyte) 62;
      Struct28 struct28_24;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_24 = (sbyte) -17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 1) = (sbyte) 38;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 2) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 3) = (sbyte) -83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 4) = (sbyte) 46;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 5) = (sbyte) -96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 6) = (sbyte) -59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 7) = (sbyte) -39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 8) = (sbyte) 54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 9) = (sbyte) -82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 10) = (sbyte) 13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 11) = (sbyte) -82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 12) = (sbyte) -55;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 13) = (sbyte) -53;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 14) = (sbyte) 23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_24 + 15) = (sbyte) -113;
      Struct28 struct28_25;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_25 = (sbyte) -27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 1) = (sbyte) -19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 2) = (sbyte) 58;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 3) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 4) = (sbyte) 25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 5) = (sbyte) 100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 6) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 7) = (sbyte) -109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 8) = (sbyte) -112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 9) = (sbyte) 83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 10) = (sbyte) -118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 11) = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 12) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 13) = (sbyte) -49;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 14) = (sbyte) -18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_25 + 15) = (sbyte) 11;
      Struct28 struct28_26;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_26 = (sbyte) -59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 1) = (sbyte) -54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 2) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 3) = (sbyte) 58;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 4) = (sbyte) -82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 5) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 6) = (sbyte) 96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 7) = (sbyte) -89;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 8) = (sbyte) 57;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 9) = (sbyte) -74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 10) = (sbyte) -17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 11) = (sbyte) -17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 12) = (sbyte) 27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 13) = (sbyte) -88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 14) = (sbyte) -113;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_26 + 15) = (sbyte) -54;
      Struct28 struct28_27;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_27 = (sbyte) 84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 1) = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 2) = (sbyte) 74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 3) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 4) = (sbyte) -44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 5) = (sbyte) -43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 6) = (sbyte) -111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 7) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 8) = (sbyte) -34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 9) = (sbyte) 79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 10) = (sbyte) 103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 11) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 12) = (sbyte) 43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 13) = (sbyte) -29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 14) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_27 + 15) = (sbyte) -115;
      Struct28 struct28_28;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_28 = (sbyte) 86;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 1) = (sbyte) 44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 2) = (sbyte) -57;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 3) = (sbyte) -18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 4) = (sbyte) 98;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 5) = (sbyte) -29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 6) = (sbyte) 25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 7) = (sbyte) -123;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 8) = (sbyte) 98;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 9) = (sbyte) -77;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 10) = (sbyte) 71;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 11) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 12) = (sbyte) 47;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 13) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 14) = (sbyte) -14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_28 + 15) = (sbyte) 39;
      Struct28 struct28_29;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_29 = (sbyte) 123;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 2) = (sbyte) 74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 3) = (sbyte) 89;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 5) = (sbyte) 11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 6) = (sbyte) -35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 7) = (sbyte) -125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 8) = (sbyte) -76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 9) = (sbyte) -60;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 10) = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 11) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 12) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 13) = (sbyte) 65;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 14) = (sbyte) -88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_29 + 15) = (sbyte) 106;
      Struct28 struct28_30;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_30 = (sbyte) -98;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 1) = (sbyte) 124;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 2) = (sbyte) -17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 3) = (sbyte) -75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 4) = (sbyte) -9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 5) = (sbyte) -14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 6) = (sbyte) -94;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 7) = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 8) = (sbyte) -16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 9) = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 10) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 11) = (sbyte) 40;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 12) = (sbyte) 57;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 13) = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 14) = (sbyte) -25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_30 + 15) = (sbyte) -28;
      Struct28 struct28_31;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_31 = (sbyte) 72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 1) = (sbyte) 86;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 2) = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 3) = (sbyte) -51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 4) = (sbyte) -108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 5) = (sbyte) 92;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 6) = (sbyte) 126;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 7) = (sbyte) 53;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 8) = (sbyte) -28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 9) = (sbyte) -11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 10) = (sbyte) 122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 11) = (sbyte) -24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 12) = (sbyte) -28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 13) = (sbyte) -61;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 14) = (sbyte) -81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_31 + 15) = (sbyte) 16;
      Struct28 struct28_32;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_32 = (sbyte) 24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 1) = (sbyte) 75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 2) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 3) = (sbyte) -41;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 4) = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 5) = (sbyte) -12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 6) = (sbyte) -57;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 7) = (sbyte) -93;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 8) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 9) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 10) = (sbyte) 40;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 11) = (sbyte) -78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 12) = (sbyte) 71;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 13) = (sbyte) 115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 14) = (sbyte) -42;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_32 + 15) = (sbyte) 54;
      Struct28 struct28_33;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_33 = (sbyte) -54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 1) = (sbyte) -98;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 2) = (sbyte) -16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 3) = (sbyte) -83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 4) = (sbyte) -17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 5) = (sbyte) 113;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 6) = (sbyte) -66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 7) = (sbyte) -84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 8) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 9) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 10) = (sbyte) -24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 11) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 12) = (sbyte) -74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 13) = (sbyte) 96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 14) = (sbyte) 65;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_33 + 15) = (sbyte) -100;
      Struct28 struct28_34;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_34 = (sbyte) 73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 1) = (sbyte) -73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 2) = (sbyte) -62;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 3) = (sbyte) 34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 4) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 5) = (sbyte) -125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 6) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 7) = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 8) = (sbyte) -113;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 9) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 10) = (sbyte) 15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 11) = (sbyte) -47;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 12) = (sbyte) 70;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 13) = (sbyte) -69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 14) = (sbyte) 54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_34 + 15) = (sbyte) -109;
      Struct28 struct28_35;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_35 = (sbyte) -18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 1) = (sbyte) -10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 2) = (sbyte) -44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 3) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 4) = (sbyte) 87;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 5) = (sbyte) 19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 6) = (sbyte) -84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 7) = (sbyte) -44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 8) = (sbyte) 45;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 9) = (sbyte) -76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 10) = (sbyte) -97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 11) = (sbyte) -71;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 12) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 13) = (sbyte) -10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 14) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_35 + 15) = (sbyte) -3;
      Struct43 struct43;
      _Module.memcpy((void*) &struct43, (void*) pByte_0, 256U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258048) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258049) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258050) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258052) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258053) = (sbyte) -1;
      if (_Module.memcmp((void*) &struct43, (void*) &struct28_1, 16U) == 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258048) = (sbyte) -1;
        if (_Module.memcmp((void*) ((IntPtr) &struct43 + 16), (void*) &struct28_2, 16U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258049) = (sbyte) -1;
          if (_Module.memcmp((void*) ((IntPtr) &struct43 + 32), (void*) &struct28_3, 16U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258050) = (sbyte) -1;
            if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_4, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = (sbyte) -1;
            }
            else
            {
              this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
              return 0;
            }
          }
          else
          {
            this.textBox6.AppendText("Unknown Hash 2" + "\r\n");
            return 0;
          }
        }
        else
        {
          this.textBox6.AppendText("Unknown Hash 1" + "\r\n");
          return 0;
        }
      }
      else if (_Module.memcmp((void*) &struct43, (void*) &struct28_5, 16U) == 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258048) = (sbyte) -1;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 126976) = (sbyte) 96;
        if (_Module.memcmp((void*) ((IntPtr) &struct43 + 16), (void*) &struct28_6, 16U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258049) = (sbyte) -1;
          if (_Module.memcmp((void*) ((IntPtr) &struct43 + 32), (void*) &struct28_7, 16U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258050) = (sbyte) -1;
            if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_8, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = (sbyte) -1;
            }
            else
            {
              this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
              return 0;
            }
          }
          else
          {
            this.textBox6.AppendText("Unknown Hash 2" + "\r\n");
            return 0;
          }
        }
        else
        {
          this.textBox6.AppendText("Unknown Hash 1" + "\r\n");
          return 0;
        }
      }
      else if (_Module.memcmp((void*) &struct43, (void*) &struct28_13, 16U) == 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258048) = (sbyte) -69;
        if (_Module.memcmp((void*) ((IntPtr) &struct43 + 16), (void*) &struct28_14, 16U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258049) = (sbyte) 1;
          if (_Module.memcmp((void*) ((IntPtr) &struct43 + 32), (void*) &struct28_7, 16U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258050) = (sbyte) -1;
            if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_8, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = (sbyte) -1;
            }
            else
            {
              this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
              return 0;
            }
          }
          else if (_Module.memcmp((void*) ((IntPtr) &struct43 + 32), (void*) &struct28_15, 16U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258050) = (sbyte) -69;
            if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_8, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = (sbyte) -1;
            }
            else if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_16, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = sbyte.MaxValue;
            }
            else if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_17, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = (sbyte) 63;
            }
            else
            {
              this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
              return 0;
            }
          }
          else
          {
            this.textBox6.AppendText("Unknown Hash 2" + "\r\n");
            return 0;
          }
        }
        else
        {
          this.textBox6.AppendText("Unknown Hash 1" + "\r\n");
          return 0;
        }
      }
      else if (_Module.memcmp((void*) &struct43, (void*) &struct28_22, 16U) == 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258048) = (sbyte) -69;
        if (_Module.memcmp((void*) ((IntPtr) &struct43 + 16), (void*) &struct28_23, 16U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258049) = (sbyte) 1;
          if (_Module.memcmp((void*) ((IntPtr) &struct43 + 32), (void*) &struct28_24, 16U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258050) = (sbyte) -1;
            if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_26, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = (sbyte) -1;
            }
            else
            {
              this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
              return 0;
            }
          }
          else if (_Module.memcmp((void*) ((IntPtr) &struct43 + 32), (void*) &struct28_25, 16U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258050) = (sbyte) -69;
            if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_26, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = (sbyte) -1;
            }
            else if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_27, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = (sbyte) 63;
            }
            else if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_28, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = sbyte.MaxValue;
            }
            else
            {
              this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
              return 0;
            }
          }
          else
          {
            this.textBox6.AppendText("Unknown Hash 2" + "\r\n");
            return 0;
          }
        }
        else
        {
          this.textBox6.AppendText("Unknown Hash 1" + "\r\n");
          return 0;
        }
      }
      else if (_Module.memcmp((void*) &struct43, (void*) &struct28_18, 16U) == 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258048) = (sbyte) -1;
        if (_Module.memcmp((void*) ((IntPtr) &struct43 + 16), (void*) &struct28_19, 16U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258049) = (sbyte) -1;
          if (_Module.memcmp((void*) ((IntPtr) &struct43 + 32), (void*) &struct28_20, 16U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258050) = (sbyte) -1;
            if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_21, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = (sbyte) -1;
            }
            else
            {
              this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
              return 0;
            }
          }
          else
          {
            this.textBox6.AppendText("Unknown Hash 2" + "\r\n");
            return 0;
          }
        }
        else
        {
          this.textBox6.AppendText("Unknown Hash 1" + "\r\n");
          return 0;
        }
      }
      else if (_Module.memcmp((void*) &struct43, (void*) &struct28_29, 16U) == 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258048) = (sbyte) -69;
        if (_Module.memcmp((void*) ((IntPtr) &struct43 + 16), (void*) &struct28_30, 16U) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258049) = (sbyte) 1;
          if (_Module.memcmp((void*) ((IntPtr) &struct43 + 32), (void*) &struct28_31, 16U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258050) = (sbyte) -1;
            if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_33, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = (sbyte) -1;
            }
            else
            {
              this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
              return 0;
            }
          }
          else if (_Module.memcmp((void*) ((IntPtr) &struct43 + 32), (void*) &struct28_32, 16U) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258050) = (sbyte) -69;
            if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_33, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = (sbyte) -1;
            }
            else if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_34, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = (sbyte) 63;
            }
            else if (_Module.memcmp((void*) ((IntPtr) &struct43 + 48), (void*) &struct28_35, 16U) == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051) = sbyte.MaxValue;
            }
            else
            {
              this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
              return 0;
            }
          }
          else
          {
            this.textBox6.AppendText("Unknown Hash 2" + "\r\n");
            return 0;
          }
        }
        else
        {
          this.textBox6.AppendText("Unknown Hash 1" + "\r\n");
          return 0;
        }
      }
      else
      {
        this.textBox6.AppendText("Unknown Hash 0" + "\r\n");
        return 0;
      }
      this.textBox6.AppendText("\r\n");
      return 1;
    }

    private void button38_Click(object sender, EventArgs e)
    {
      this.method_18();
      this.method_95();
      this.method_19();
    }

    private unsafe void method_95()
    {
      this.label88.Text = "";
      this.label87.Text = "";
      Application.DoEvents();
      this.method_172();
      if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
      {
        this.textBox6.AppendText("\r\n" + "No Drive Detected! DVDkey files extraction aborted! " + "\r\n\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("        No Drive Detected!" + "\n" + "PhatKey extraction aborted! ", "PhatKey", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
      {
        this.textBox6.AppendText("\r\n" + "Drive in Vendor Mode! DVDkey files extraction aborted! " + "\r\n\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("        Drive in Vendor Mode!" + "\n" + "PhatKey extraction aborted! ", "PhatKey", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else if ((int) this.method_96() == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("PhatKey failed!", "PhatKey", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.textBox6.AppendText("\r\n" + "PhatKey extraction failed!" + "\r\n\r\n");
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else
      {
        if (this.checkBox8.CheckState == CheckState.Unchecked)
          this.method_116();
        if (this.method_63() == 0)
        {
          this.textBox6.AppendText("\r\n" + "PhatKey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else if (this.method_65() == 0)
        {
          this.textBox6.AppendText("\r\n" + "PhatKey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else if (this.method_66() == 0)
        {
          this.textBox6.AppendText("\r\n" + "PhatKey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else if (this.method_67() == 0)
        {
          this.textBox6.AppendText("\r\n" + "PhatKey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else
        {
          this.method_117();
          this.Cursor = Cursors.Arrow;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (!this.bool_2 || this.method_107((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280)) != 1)
            return;
          this.tabControl5.SelectedTab = this.Benq;
          this.pictureBox5.Visible = true;
          this.pictureBox7.Visible = false;
          this.pictureBox2.Visible = true;
          this.pictureBox6.Visible = false;
          this.label133.Text = "Verified";
          this.label131.Text = "Verified";
          this.textBox6.AppendText("Target Key verified, thanks C4eva !" + "\r\n" + "Proceeding with LO-Erase" + "\r\n");
          this.method_14();
          this.method_207();
          this.method_15();
        }
      }
    }

    private unsafe uint method_96()
    {
      Struct28 struct28;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28 + 1), 0, 15);
      Struct43 struct43;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct43 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct43&) ((IntPtr) &struct43 + 1), 0, (int) byte.MaxValue);
      Struct55 struct55;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct55 = (sbyte) 80;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 1) = (sbyte) 104;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 2) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 3) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 4) = (sbyte) 75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 5) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 6) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 7) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 8) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 9) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 10) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 11) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 12) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 13) = (sbyte) 99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 14) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 15) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 16) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 17) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 18) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 19) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 20) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 21) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 22) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 23) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 24) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 25) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 26) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 27) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 28) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 29) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 30) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 31) = (sbyte) 0;
      if (this.comboBox1.Items.Count == 0)
        return 0U;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num2 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      _Module.Sleep(250U);
      if (this.method_203() == 0)
        return 0U;
      if ((int) num2 == 0)
      {
        this.method_268((byte) 82, (byte*) &struct43);
      }
      else
      {
        for (int index = 0; index < 256; ++index)
        {
          _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
          _Module.smethod_2((ushort) ((uint) num2 + 2U), (byte) 0);
          _Module.smethod_2((ushort) ((uint) num2 + 3U), (byte) 42);
          _Module.smethod_2((ushort) ((uint) num2 + 4U), (byte) index);
          _Module.smethod_2((ushort) ((uint) num2 + 5U), (byte) 0);
          _Module.Sleep(1U);
          _Module.smethod_2((ushort) ((uint) num2 + 7U), (byte) 0);
          _Module.Sleep(2U);
          _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct43 + index) = (sbyte) _Module.smethod_1((ushort) ((uint) num2 + 3U));
          _Module.Sleep(1U);
        }
      }
      _Module.memcpy((void*) &struct28, (void*) ((IntPtr) &struct43 + 97), 16U);
      if (this.method_130() == 1)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("Extract complete !\r\n\r\n" + (object) "CK3i has powered off your drive." + "Before you continue, remove Probe 3... then press OK" + "\r\n" + (string) __arglist ("... CK3i will power on your the drive.  "), "PhatKey", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.method_129();
        for (int index = 0; index < 8; ++index)
        {
          _Module.Sleep(250U);
          this.textBox6.AppendText(".");
        }
      }
      else
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("Extract complete !\r\n\r\n" + (object) "To continue, you must:\r\n" + "Ensure probe is removed.. Power Off Drive... Wait 5 seconds..." + "\r\n" + (string) __arglist ("Power On...  then press OK"), "PhatKey", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      if (this.method_107((byte*) &struct28) != 1)
      {
        _Module.memcpy((void*) &struct28, (void*) ((IntPtr) &struct43 + 98), 16U);
        if (this.method_107((byte*) &struct28) != 1)
        {
          this.textBox6.AppendText("\r\n" + "Extracted drive key failed Verification !" + "\r\n\r\n");
          this.Cursor = Cursors.Arrow;
          this.label87.Text = "";
          this.label88.Text = "bad";
          return 0U;
        }
      }
      this.textBox6.AppendText("\r\n" + "Extracted drive key passed Verification !" + "\r\n\r\n");
      this.method_6((byte*) &struct28, 16U, 0U);
      this.textBox6.AppendText("key returned: " + this.string_0 + "\r\n");
      this.label87.Text = this.string_0;
      this.label88.Text = "Good";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), (void*) &struct28, 16U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2348), (void*) &struct55, 32U);
      Application.DoEvents();
      return 1U;
    }

    private void button39_Click(object sender, EventArgs e)
    {
      this.method_18();
      this.method_97();
      this.method_19();
    }

    private unsafe void method_97()
    {
      this.label88.Text = "";
      this.label87.Text = "";
      Application.DoEvents();
      this.method_172();
      if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
      {
        this.textBox6.AppendText("\r\n" + "No Drive Detected! DVDkey files extraction aborted! " + "\r\n\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("        No Drive Detected!" + "\n" + "SlimKey extraction aborted! ", "SlimKey", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
      {
        this.textBox6.AppendText("\r\n" + "Drive in Vendor Mode! DVDkey files extraction aborted! " + "\r\n\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("        Drive in Vendor Mode!" + "\n" + "SlimKey extraction aborted! ", "SlimKey", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else if (this.method_70() == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("SlimKey failed!", "SlimKey", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.textBox6.AppendText("\r\n" + "SlimKey extraction failed!" + "\r\n\r\n");
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else
      {
        if (this.checkBox8.CheckState == CheckState.Unchecked)
          this.method_116();
        if (this.method_64() == 0)
        {
          this.textBox6.AppendText("\r\n" + "SlimKey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else if (this.method_66() == 0)
        {
          this.textBox6.AppendText("\r\n" + "SlimKey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else
        {
          this.method_68();
          this.textBox6.AppendText(string.Concat((object) "Hashing Drive: "));
          Struct43 struct43;
          for (int index = 0; index < 16; ++index)
          {
            if (this.method_93((byte) 35, (byte) 16, (byte) index, (byte*) ((IntPtr) &struct43 + index * 16)) == 1)
            {
              this.textBox6.AppendText(".");
            }
            else
            {
              this.textBox6.AppendText("x");
              break;
            }
          }
          this.method_94((byte*) &struct43);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 126976) == 96 && (int) ^(byte&) ((IntPtr) &_Module.struct121_0 + 6815) == 54)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 126976) = (sbyte) 125;
          }
          this.method_118();
          this.Cursor = Cursors.Arrow;
        }
      }
    }

    private void menuItem_14_Click(object sender, EventArgs e)
    {
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
      subKey.SetValue("Delay32", (object) "0");
      subKey.Close();
      this.menuItem_14.Enabled = false;
      this.menuItem_15.Enabled = true;
      this.menuItem_16.Enabled = true;
      this.menuItem_17.Enabled = true;
      this.menuItem_18.Enabled = true;
    }

    private void menuItem_15_Click(object sender, EventArgs e)
    {
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
      subKey.SetValue("Delay32", (object) "5");
      subKey.Close();
      this.menuItem_14.Enabled = true;
      this.menuItem_15.Enabled = false;
      this.menuItem_16.Enabled = true;
      this.menuItem_17.Enabled = true;
      this.menuItem_18.Enabled = true;
    }

    private void menuItem_16_Click(object sender, EventArgs e)
    {
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
      subKey.SetValue("Delay32", (object) "10");
      subKey.Close();
      this.menuItem_14.Enabled = true;
      this.menuItem_15.Enabled = true;
      this.menuItem_16.Enabled = false;
      this.menuItem_17.Enabled = true;
      this.menuItem_18.Enabled = true;
    }

    private void menuItem_17_Click(object sender, EventArgs e)
    {
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
      subKey.SetValue("Delay32", (object) "15");
      subKey.Close();
      this.menuItem_14.Enabled = true;
      this.menuItem_15.Enabled = true;
      this.menuItem_16.Enabled = true;
      this.menuItem_17.Enabled = false;
      this.menuItem_18.Enabled = true;
    }

    private void menuItem_18_Click(object sender, EventArgs e)
    {
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
      subKey.SetValue("Delay32", (object) "20");
      subKey.Close();
      this.menuItem_14.Enabled = true;
      this.menuItem_15.Enabled = true;
      this.menuItem_16.Enabled = true;
      this.menuItem_17.Enabled = true;
      this.menuItem_18.Enabled = false;
    }

    private void button28_Click(object sender, EventArgs e)
    {
      this.method_18();
      this.method_98();
      this.method_19();
    }

    private unsafe void method_98()
    {
      this.label88.Text = "";
      this.label87.Text = "";
      Application.DoEvents();
      this.method_172();
      if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
      {
        this.textBox6.AppendText("\r\n" + "No Drive Detected! DVDkey files extraction aborted! " + "\r\n\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("        No Drive Detected!" + "\n" + "DVDkey files extraction aborted! ", "Dummy from iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
      {
        this.textBox6.AppendText("\r\n" + "Drive in Vendor Mode! DVDkey files extraction aborted! " + "\r\n\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("        Drive in Vendor Mode!" + "\n" + "DVDkey files extraction aborted! ", "Dummy from iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else if (this.method_99() == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("iXtreme DVDkey extraction failed!" + "\n" + "Power drive with tray half open. ", "Dummy from iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.textBox6.AppendText("\r\n" + "iXtreme DVDkey extraction failed!" + "\r\n\r\n");
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else
      {
        if (this.checkBox8.CheckState == CheckState.Unchecked)
          this.method_116();
        if (this.method_63() == 0)
        {
          this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else if (this.method_65() == 0)
        {
          this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else if (this.method_66() == 0)
        {
          this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else if (this.method_67() == 0)
        {
          this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else
        {
          this.method_117();
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (!this.bool_2 || this.method_107((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280)) != 1)
            return;
          this.tabControl5.SelectedTab = this.Benq;
          this.pictureBox5.Visible = true;
          this.pictureBox7.Visible = false;
          this.pictureBox2.Visible = true;
          this.pictureBox6.Visible = false;
          this.label133.Text = "Verified";
          this.label131.Text = "Verified";
          this.textBox6.AppendText("Target Key verified, thanks C4eva !" + "\r\n" + "Proceeding with LO-Erase" + "\r\n");
          this.method_14();
          this.method_207();
          this.method_15();
        }
      }
    }

    private unsafe int method_99()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (uint) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      int selectedIndex = this.comboBox10.SelectedIndex;
      if (this.method_128() == 1)
        _Module.Sleep(500U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num3 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      this.textBox6.AppendText("Sending iXtreme DVDkey request to port " + this.label123.Text + "\r\n");
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) 73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) 88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 1;
      Struct34 struct34;
      uint num4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num3, (ushort) 512, (void*) &struct34, &num4, 48U, (byte) 1, &gstruct3) != 0 || (int) ^(byte&) @struct34 == 5 && (int) ^(byte&) ((IntPtr) &struct34 + 1) == 128 && ((int) ^(byte&) ((IntPtr) &struct34 + 2) == 0 && (int) ^(byte&) ((IntPtr) &struct34 + 3) == 50))
        return 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), (void*) &struct34, 16U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memset((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2348), 0, 32U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2348), (void*) ((IntPtr) &struct34 + 16), 18U);
      this.method_6((byte*) &struct34, 16U, 0U);
      this.label88.Text = "Good";
      this.label87.Text = this.string_0;
      this.textBox6.AppendText("\r\n" + "Extracted drive key " + this.string_0 + "\r\n\r\n");
      this.method_9((byte*) ((IntPtr) &struct34 + 16), 18U);
      this.textBox6.AppendText(this.string_0 + "\r\n\r\n");
      return 1;
    }

    private unsafe void method_100()
    {
      this.label88.Text = "";
      this.label87.Text = "";
      Application.DoEvents();
      this.method_172();
      if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
      {
        this.textBox6.AppendText("\r\n" + "No Drive Detected! DVDkey files extraction aborted! " + "\r\n\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("        No Drive Detected!" + "\n" + "DVDkey files extraction aborted! ", "Dummy from iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
      {
        this.textBox6.AppendText("\r\n" + "Drive in Vendor Mode! DVDkey files extraction aborted! " + "\r\n\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("        Drive in Vendor Mode!" + "\n" + "DVDkey files extraction aborted! ", "Dummy from iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else if (this.method_63() == 0)
      {
        this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else
      {
        this.method_65();
        if (this.method_66() == 0)
        {
          this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else
        {
          this.method_67();
          this.method_117();
        }
      }
    }

    private void button1_Click(object sender, EventArgs e)
    {
      this.method_18();
      this.method_101();
      this.method_19();
    }

    private void button4_Click(object sender, EventArgs e)
    {
      this.method_18();
      this.method_119();
      this.method_19();
    }

    private unsafe void method_101()
    {
      this.label88.Text = "";
      this.label87.Text = "";
      Application.DoEvents();
      this.method_172();
      if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
      {
        this.textBox6.AppendText("\r\n" + "No Drive Detected! LO83info extraction aborted! " + "\r\n\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("        No Drive Detected!" + "\n" + "LO83info extraction aborted! ", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
      {
        this.textBox6.AppendText("\r\n" + "Drive in Vendor Mode! LO83info extraction aborted! " + "\r\n\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("        Drive in Vendor Mode!" + "\n" + "LO83info extraction aborted! ", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else
      {
        this.method_65();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 684), (void*) &_Module.struct29_17, 96U) == 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show("Drive responds as Lite-On 83 version 2" + "\n\n" + "LO83info is only for Lite-On 83 version 1", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 684), (void*) &_Module.struct29_32, 96U) == 0)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num = (int) MessageBox.Show("LO83info is only for Lite-On 83 version 1" + "\n\n           " + "Drive is not Lite-On 83", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          }
          else
          {
            RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            if (subKey.GetValue("Nforce590") == null)
            {
              if (this.method_103() == 0)
              {
                this.textBox6.AppendText("\r\n" + "LO83info extraction Failed! " + "\r\n\r\n");
                this.label88.Text = " ";
                this.label87.Text = " ";
                return;
              }
            }
            else if (this.method_104() == 0)
            {
              this.textBox6.AppendText("\r\n" + "LO83info extraction Failed! " + "\r\n\r\n");
              this.label88.Text = " ";
              this.label87.Text = " ";
              return;
            }
            subKey.Close();
            if (this.method_63() == 0)
            {
              this.textBox6.AppendText("\r\n" + "LO83info extraction aborted! " + "\r\n\r\n");
              this.label88.Text = " ";
              this.label87.Text = " ";
            }
            else if (this.method_65() == 0)
            {
              this.textBox6.AppendText("\r\n" + "LO83info extraction aborted! " + "\r\n\r\n");
              this.label88.Text = " ";
              this.label87.Text = " ";
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 600), (void*) &_Module.struct10_23, 6U) != 0)
                this.textBox6.AppendText("\r\n" + "LO83info extraction Failed! " + "\r\n\r\n");
              else if (this.method_66() == 0)
              {
                this.textBox6.AppendText("\r\n" + "LO83info extraction Failed! " + "\r\n\r\n");
                this.label88.Text = " ";
                this.label87.Text = " ";
              }
              else if (this.method_67() == 0)
              {
                this.textBox6.AppendText("\r\n" + "LO83info extraction Failed! " + "\r\n\r\n");
                this.label88.Text = " ";
                this.label87.Text = " ";
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 625) != (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2043))
                  this.textBox6.AppendText("\r\n" + "LO83info extraction Failed! " + "\r\n\r\n");
                else if (this.method_105() == 0)
                {
                  this.textBox6.AppendText("\r\n" + "LO83info extraction Failed! " + "\r\n\r\n");
                }
                else
                {
                  if (this.checkBox8.CheckState == CheckState.Unchecked)
                    this.method_116();
                  this.method_117();
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if (!this.bool_2 || this.method_107((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280)) != 1)
                    return;
                  this.tabControl5.SelectedTab = this.Benq;
                  this.pictureBox5.Visible = true;
                  this.pictureBox7.Visible = false;
                  this.pictureBox2.Visible = true;
                  this.pictureBox6.Visible = false;
                  this.label133.Text = "Verified";
                  this.label131.Text = "Verified";
                  this.textBox6.AppendText("Target Key verified, thanks C4eva !" + "\r\n" + "Proceeding with LO-Erase" + "\r\n");
                  this.method_14();
                  this.method_207();
                  this.method_15();
                }
              }
            }
          }
        }
      }
    }

    private void button32_Click(object sender, EventArgs e)
    {
      this.method_18();
      this.method_102();
      this.method_19();
    }

    private unsafe void method_102()
    {
      this.label88.Text = "";
      this.label87.Text = "";
      Application.DoEvents();
      switch (this.method_173())
      {
        case 2:
          this.textBox6.AppendText("\r\n" + "Lite-On barcode found, key verified, thanks C4eva ! " + "\r\n");
          break;
        case 1:
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num1 = (int) MessageBox.Show("Lite-On barcode not found in KeyDB !" + (object) "\n" + "Do you wish to try all DB keys for a match." + "\n" + (string) __arglist ("This could take a while"), "Dummy from KeyDB", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          if (num1 == 7 || this.method_115() == 0)
            return;
          this.textBox6.AppendText("\r\n");
          break;
        default:
          return;
      }
      int startIndex = 0;
      Struct28 struct28;
      while (startIndex < 32)
      {
        sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.string_14.Substring(startIndex, 2));
        byte num2;
        this.method_10((void*) &num2, pSbyte_0, 2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28 + startIndex / 2) = (sbyte) num2;
        startIndex += 2;
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), (void*) &struct28, 16U);
      if (this.method_183() == 0)
        return;
      if (this.method_65() == 0)
      {
        this.textBox6.AppendText("\r\n" + "Dummy from KeyDB files extraction aborted! " + "\r\n\r\n");
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else
      {
        if (this.checkBox8.CheckState == CheckState.Unchecked)
          this.method_116();
        if (this.method_63() == 0)
        {
          this.textBox6.AppendText("\r\n" + "Dummy from KeyDB files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else if (this.method_66() == 0)
        {
          this.textBox6.AppendText("\r\n" + "Dummy from KeyDB files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else if (this.method_67() == 0)
        {
          this.textBox6.AppendText("\r\n" + "Dummy from KeyDB files extraction aborted! " + "\r\n\r\n");
          this.label88.Text = " ";
          this.label87.Text = " ";
        }
        else
        {
          this.method_117();
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (!this.bool_2 || this.method_107((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280)) != 1)
            return;
          this.tabControl5.SelectedTab = this.Benq;
          this.pictureBox5.Visible = true;
          this.pictureBox7.Visible = false;
          this.pictureBox2.Visible = true;
          this.pictureBox6.Visible = false;
          this.label133.Text = "Verified";
          this.label131.Text = "Verified";
          this.textBox6.AppendText("Target Key verified, thanks C4eva !" + "\r\n" + "Proceeding with LO-Erase" + "\r\n");
          this.method_14();
          this.method_207();
          this.method_15();
        }
      }
    }

    private unsafe int method_103()
    {
      Struct55 struct55;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct55 = (sbyte) 76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 1) = (sbyte) 79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 2) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 3) = (sbyte) 51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 4) = (sbyte) 105;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 5) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 6) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 7) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 8) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 9) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 10) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 11) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 12) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 13) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 14) = (sbyte) 99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 15) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 16) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 17) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 18) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 19) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 20) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 21) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 22) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 23) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 24) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 25) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 26) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 27) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 28) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 29) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 30) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 31) = (sbyte) 0;
      Struct52 struct52_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_1 = (sbyte) -88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 5) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 8) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 9) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 10) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 11) = (sbyte) 0;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (uint) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      int selectedIndex = this.comboBox10.SelectedIndex;
      Struct91 struct91_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct91_1 = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 1) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 2) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 3) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 4) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 5) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 8) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 9) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 10) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 11) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 12) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 13) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 14) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 15) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 16) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 17) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 18) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 19) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 20) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 21) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 22) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 23) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 24) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 25) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 26) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 27) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 28) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 29) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 30) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 31) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 32) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 33) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 34) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 35) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 36) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 37) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 38) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 39) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 40) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 41) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 42) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 43) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 44) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 45) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 46) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 47) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 48) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 49) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 50) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 51) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 52) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 53) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 54) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 55) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 56) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 57) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 58) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 59) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 60) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 61) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 62) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 63) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 64) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 65) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 66) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 67) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 68) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 69) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 70) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 71) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 72) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 73) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 74) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 75) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 76) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 77) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 78) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 79) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 80) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 81) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 82) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 83) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 84) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 85) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 86) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 87) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 88) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 89) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 90) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 91) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 92) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 93) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 94) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 95) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 96) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 97) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 98) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 99) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 100) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 101) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 102) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 103) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 104) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 105) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 106) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 107) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 108) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 109) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 110) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 111) = (sbyte) 0;
      this.textBox6.AppendText("Sending LO83info request to I/O port " + this.label123.Text + "\r\n\r\n");
      this.label88.Text = " ";
      this.label87.Text = " ";
      this.Cursor = Cursors.WaitCursor;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 14), (byte) num2);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 18), (byte) 8);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      do
        ;
      while (((int) _Module.smethod_0(^(ushort&) ((IntPtr) &gstruct3 + 16)) & 128) != 0);
      if (this.method_128() == 1)
      {
        _Module.Sleep(500U);
      }
      else
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("Power on drive with tray half open.", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      for (uint index = 0U; index < 768U; ++index)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        //if ((int) ^(ushort&) @gstruct3 == 0)
        if(gstruct3 == null)
        {
          this.method_424((byte) 9);
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          do
            ;
          while (((int) _Module.smethod_0(^(ushort&) ((IntPtr) &gstruct3 + 16)) & 128) != 0);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 14), (byte) num2);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          do
            ;
          while (((int) _Module.smethod_0(^(ushort&) ((IntPtr) &gstruct3 + 16)) & 128) != 0);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 18), (byte) 160);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          do
            ;
          while (((int) _Module.smethod_0(^(ushort&) ((IntPtr) &gstruct3 + 16)) & 128) != 0);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 168);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
        }
        if ((int) (index % 64U) == 0)
          this.textBox6.AppendText(".");
        Application.DoEvents();
      }
      this.textBox6.AppendText("\r\n");
      if (this.method_127() == 1)
      {
        _Module.Sleep(250U);
        this.method_126();
        _Module.Sleep(500U);
      }
      else
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("Move drive tray to the full open position.", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      Struct91 struct91_2;
      _Module.memset((void*) &struct91_2, 0, 112U);
      Struct91 struct91_3;
      _Module.memset((void*) &struct91_3, 0, 112U);
      uint num4 = (int) num2 != 160 ? 16U : 0U;
      for (uint index = 0U; index < 256U; ++index)
      {
        Struct52 struct52_2;
        _Module.memset((void*) &struct52_2, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52_2 = (sbyte) -3;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 1) = (sbyte) 14;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 2) = (sbyte) 66;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 3) = (sbyte) 69;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 4) = (sbyte) 78;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 5) = (sbyte) 81;
        uint num3;
        if (_Module.smethod_16((byte*) &struct52_2, 12U, (byte) num4, (ushort) 512, (void*) &struct91_2, &num3, 112U, (byte) 1, &gstruct3) != 0)
        {
          if ((int) (index % 16U) == 0)
            this.textBox6.AppendText(".");
          Application.DoEvents();
        }
        else
          break;
      }
      this.method_5((byte*) &struct91_2, 112U, 0U);
      this.textBox6.AppendText("\r\n" + this.string_0 + "\r\n");
      if (_Module.memcmp((void*) &struct91_2, (void*) &struct91_3, 112U) == 0)
      {
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else if (_Module.memcmp((void*) &struct91_2, (void*) &struct91_1, 112U) == 0)
      {
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else if (_Module.memcmp((void*) &struct91_2, (void*) &struct91_3, 8U) == 0)
      {
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        this.label88.Text = "";
        this.label87.Text = "";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 964), (void*) &struct91_2, 112U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2348), (void*) &struct55, 32U);
        return 1;
      }
    }

    private unsafe int method_104()
    {
      Struct55 struct55;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct55 = (sbyte) 76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 1) = (sbyte) 79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 2) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 3) = (sbyte) 51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 4) = (sbyte) 105;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 5) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 6) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 7) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 8) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 9) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 10) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 11) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 12) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 13) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 14) = (sbyte) 99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 15) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 16) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 17) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 18) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 19) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 20) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 21) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 22) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 23) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 24) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 25) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 26) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 27) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 28) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 29) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 30) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 31) = (sbyte) 0;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (uint) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      int selectedIndex = this.comboBox10.SelectedIndex;
      Struct91 struct91_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct91_1 = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 1) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 2) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 3) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 4) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 5) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 8) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 9) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 10) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 11) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 12) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 13) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 14) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 15) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 16) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 17) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 18) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 19) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 20) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 21) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 22) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 23) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 24) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 25) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 26) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 27) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 28) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 29) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 30) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 31) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 32) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 33) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 34) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 35) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 36) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 37) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 38) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 39) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 40) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 41) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 42) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 43) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 44) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 45) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 46) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 47) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 48) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 49) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 50) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 51) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 52) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 53) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 54) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 55) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 56) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 57) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 58) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 59) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 60) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 61) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 62) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 63) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 64) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 65) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 66) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 67) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 68) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 69) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 70) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 71) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 72) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 73) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 74) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 75) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 76) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 77) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 78) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 79) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 80) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 81) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 82) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 83) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 84) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 85) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 86) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 87) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 88) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 89) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 90) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 91) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 92) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 93) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 94) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 95) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 96) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 97) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 98) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 99) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 100) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 101) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 102) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 103) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 104) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 105) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 106) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 107) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 108) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 109) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 110) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct91_1 + 111) = (sbyte) 0;
      this.textBox6.AppendText("Sending LO83info request to I/O port " + this.label123.Text + "\r\n\r\n");
      this.label88.Text = " ";
      this.label87.Text = " ";
      this.Cursor = Cursors.WaitCursor;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 14), (byte) num2);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 18), (byte) 8);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      do
        ;
      while (((int) _Module.smethod_0(^(ushort&) ((IntPtr) &gstruct3 + 16)) & 128) != 0);
      if (this.method_128() == 1)
      {
        _Module.Sleep(500U);
      }
      else
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("Power on drive with tray half open.", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      for (uint index = 0U; index < 768U; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        do
          ;
        while (((int) _Module.smethod_0(^(ushort&) ((IntPtr) &gstruct3 + 16)) & 128) != 0);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 14), (byte) num2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        do
          ;
        while (((int) _Module.smethod_0(^(ushort&) ((IntPtr) &gstruct3 + 16)) & 128) != 0);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 18), (byte) 160);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        do
          ;
        while (((int) _Module.smethod_0(^(ushort&) ((IntPtr) &gstruct3 + 16)) & 128) != 0);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 168);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.smethod_3(^(ushort&) @gstruct3, (ushort) 0);
        if ((int) (index % 64U) == 0)
          this.textBox6.AppendText(".");
        Application.DoEvents();
      }
      this.textBox6.AppendText("\r\n");
      if (this.method_127() == 1)
      {
        _Module.Sleep(250U);
        this.method_126();
        _Module.Sleep(500U);
      }
      else
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("Move drive tray to the full open position.", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      Struct92 struct92;
      _Module.memset((void*) &struct92, 0, 120U);
      Struct91 struct91_2;
      _Module.memset((void*) &struct91_2, 0, 112U);
      uint num4 = (int) num2 != 160 ? 16U : 0U;
      for (uint index = 0U; index < 256U; ++index)
      {
        Struct28 struct28;
        _Module.memset((void*) &struct28, 0, 16U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct28 = (sbyte) -3;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28 + 1) = (sbyte) 14;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28 + 2) = (sbyte) 66;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28 + 3) = (sbyte) 69;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28 + 4) = (sbyte) 78;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28 + 5) = (sbyte) 81;
        uint num3;
        if (_Module.smethod_16((byte*) &struct28, 16U, (byte) num4, (ushort) 512, (void*) &struct92, &num3, 120U, (byte) 1, &gstruct3) != 0)
        {
          if ((int) (index % 16U) == 0)
            this.textBox6.AppendText(".");
          Application.DoEvents();
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num5 = (int) _Module.smethod_1(^(ushort&) @gstruct3);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num6 = (int) _Module.smethod_1(^(ushort&) @gstruct3);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num7 = (int) _Module.smethod_1(^(ushort&) @gstruct3);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num8 = (int) _Module.smethod_1(^(ushort&) @gstruct3);
        }
        else
          break;
      }
      this.method_5((byte*) ((IntPtr) &struct92 + 8), 112U, 0U);
      this.textBox6.AppendText("\r\n" + this.string_0 + "\r\n");
      if (_Module.memcmp((void*) ((IntPtr) &struct92 + 8), (void*) &struct91_2, 112U) == 0)
      {
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else if (_Module.memcmp((void*) ((IntPtr) &struct92 + 8), (void*) &struct91_1, 112U) == 0)
      {
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else if (_Module.memcmp((void*) ((IntPtr) &struct92 + 8), (void*) &struct91_2, 8U) == 0)
      {
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else if (_Module.memcmp((void*) ((IntPtr) &struct92 + 112), (void*) &struct91_2, 8U) == 0)
      {
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        this.label88.Text = "";
        this.label87.Text = "";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 964), (void*) ((IntPtr) &struct92 + 8), 112U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2348), (void*) &struct55, 32U);
        return 1;
      }
    }

    private unsafe int method_105()
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_1 + 1), 0, 15);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte num = (byte) ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 625) / 2 % 5 * 16);
      Struct28 struct28_2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_2, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 1060), 16U);
      Struct28 struct28_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_3, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 964 + (int) num), 16U);
      Struct28 struct28_4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct28_4, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 1044), 16U);
      Struct89 struct89;
      int int_43 = _Module.smethod_143((uint*) &struct89, (byte*) &struct28_3, 128);
      Struct28 struct28_5;
      _Module.smethod_145((uint*) &struct89, int_43, (byte*) &struct28_2, (byte*) &struct28_5);
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_5 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_5 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_4 + index));
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), (void*) &struct28_5, 16U);
      if (this.method_107((byte*) &struct28_5) != 1)
      {
        this.textBox6.AppendText("\r\n" + "Extracted drive key failed Verification !" + "\r\n\r\n");
        return 0;
      }
      else
      {
        this.method_6((byte*) &struct28_5, 16U, 0U);
        this.label88.Text = "Good";
        this.label87.Text = this.string_0;
        this.textBox6.AppendText("\r\n" + "Extracted drive key " + this.string_0 + "\r\n");
        this.textBox6.AppendText("Extracted drive key Passed Verification !" + "\r\n\r\n");
        this.Cursor = Cursors.Arrow;
        return 1;
      }
    }

    private unsafe int method_106(byte* pByte_0)
    {
      if (Registry.CurrentUser.CreateSubKey("JungleFlasher").GetValue("Nforce590") == null)
        return this.method_107(pByte_0) == 0 ? 0 : 1;
      else
        return this.method_114(pByte_0) == 0 ? 0 : 1;
    }

    private unsafe int method_107(byte* pByte_0)
    {
      if (string.Compare(this.label109.Text, 0, "DG-16D5S", 0, 8) == 0)
      {
        if (this.method_109(pByte_0) == 1)
          return 1;
      }
      else if (this.method_108(pByte_0) == 1)
        return 1;
      return 0;
    }

    private unsafe int method_108(byte* pByte_0)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) 67;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) 118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 114;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) 117;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) 103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) 108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) 70;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) 108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) 115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) 104;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) 0;
      Struct28 struct28_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 1) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 2) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 3) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 4) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 5) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 6) = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 7) = (sbyte) 7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 8) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 9) = (sbyte) 9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 10) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 11) = (sbyte) 11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 12) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 13) = (sbyte) 13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 14) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 15) = (sbyte) 15;
      Struct28 struct28_4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_4 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_4 + 1), 0, 15);
      Struct28 struct28_5;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_5 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_5 + 1), 0, 15);
      Struct90 struct90_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct90_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct90&) ((IntPtr) &struct90_1 + 1), 0, 57);
      if (this.comboBox1.Items.Count == 0)
        return 0;
      int selectedIndex = this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num1 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      this.Cursor = Cursors.WaitCursor;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct90_1 + 8) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct90_1 + 9) = (sbyte) 48;
      this.method_89(pByte_0, (byte*) &struct28_3, (byte*) &struct28_2, (byte*) ((IntPtr) &struct90_1 + 10));
      this.method_89(pByte_0, (byte*) ((IntPtr) &struct90_1 + 10), (byte*) &struct28_1, (byte*) ((IntPtr) &struct90_1 + 26));
      _Module.memcpy((void*) ((IntPtr) &struct90_1 + 42), (void*) &struct28_3, 16U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 58;
      uint num2;
      if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_1, &num2, 58U, (byte) 1, &gstruct3) != 0 && _Module.smethod_17((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_1, &num2, 58U, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("\r\n" + "Stage 1 failed" + "\r\n");
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72 + 3) == 1)
          this.method_424((byte) 88);
        Struct90 struct90_2;
        _Module.memset((void*) &struct90_2, 0, 58U);
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) 90;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 59;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 58;
        if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_2, &num2, 58U, (byte) 1, &gstruct3) != 0 && _Module.smethod_16((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90_2, &num2, 58U, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("\r\n" + "Stage 2 failed" + "\r\n");
          this.Cursor = Cursors.Arrow;
          return 0;
        }
        else
        {
          this.method_90((byte*) &struct28_2, (byte*) &struct28_3, (byte*) ((IntPtr) &struct90_2 + 10), (byte*) &struct28_4);
          if (_Module.memcmp((void*) &struct28_5, (void*) &struct28_4, 16U) != 0)
          {
            this.Cursor = Cursors.Arrow;
            return 0;
          }
          else
          {
            this.method_90((byte*) &struct28_2, (byte*) ((IntPtr) &struct90_2 + 10), (byte*) ((IntPtr) &struct90_2 + 26), (byte*) &struct28_4);
            if (_Module.memcmp((void*) &struct28_1, (void*) &struct28_4, 16U) != 0)
            {
              this.Cursor = Cursors.Arrow;
              return 0;
            }
            else
            {
              this.Cursor = Cursors.Arrow;
              return 1;
            }
          }
        }
      }
    }

    private unsafe int method_109(byte* pByte_0)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) 67;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) 118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 114;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) 117;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) 103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) 108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) 70;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) 108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) 115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) 104;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) 0;
      Struct28 struct28_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 1) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 2) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 3) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 4) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 5) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 6) = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 7) = (sbyte) 7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 8) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 9) = (sbyte) 9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 10) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 11) = (sbyte) 11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 12) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 13) = (sbyte) 13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 14) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 15) = (sbyte) 15;
      Struct28 struct28_4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_4 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_4 + 1), 0, 15);
      Struct28 struct28_5;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_5 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_5 + 1), 0, 15);
      Struct28 struct28_6;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_6 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_6 + 1), 0, 15);
      Struct28 struct28_7;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_7 = (sbyte) 71;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 1) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 2) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 3) = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 4) = (sbyte) 73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 5) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 6) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 7) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 8) = (sbyte) 88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 9) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 10) = (sbyte) 79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 11) = (sbyte) 88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 12) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 13) = (sbyte) 79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 14) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_7 + 15) = (sbyte) 68;
      Struct28 struct28_8;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_8 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_8 + 1), 0, 15);
      Struct28 struct28_9;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_9 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_9 + 1), 0, 15);
      Struct93 struct93;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct93 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct93&) ((IntPtr) &struct93 + 1), 0, 75);
      if (this.comboBox1.Items.Count == 0)
        return 0;
      int selectedIndex = this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num1 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      this.Cursor = Cursors.WaitCursor;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct93 + 8) = (sbyte) 40;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct93 + 9) = (sbyte) 64;
      _Module.memcpy((void*) &struct28_9, (void*) &struct28_3, 16U);
      this.method_110(pByte_0, (byte*) &struct28_9, (byte*) &struct28_6);
      this.method_89((byte*) &struct28_6, (byte*) &struct28_3, (byte*) &struct28_2, (byte*) ((IntPtr) &struct93 + 10));
      this.method_89((byte*) &struct28_6, (byte*) ((IntPtr) &struct93 + 10), (byte*) &struct28_1, (byte*) ((IntPtr) &struct93 + 26));
      _Module.memcpy((void*) ((IntPtr) &struct93 + 42), (void*) &struct28_3, 16U);
      this.method_112((byte*) &struct28_7, (byte*) ((IntPtr) &struct93 + 10), (byte*) &struct28_8);
      this.method_110((byte*) &struct28_6, (byte*) &struct28_8, (byte*) ((IntPtr) &struct93 + 58));
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 74;
      uint num2;
      if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct93, &num2, 74U, (byte) 1, &gstruct3) != 0 && _Module.smethod_17((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct93, &num2, 74U, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("\r\n" + "Stage 1 failed" + "\r\n");
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        Struct90 struct90;
        _Module.memset((void*) &struct90, 0, 58U);
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) 90;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 40;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 58;
        if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90, &num2, 58U, (byte) 1, &gstruct3) != 0 && _Module.smethod_16((byte*) &struct52, 12U, (byte) num1, (ushort) 512, (void*) &struct90, &num2, 58U, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("\r\n" + "Stage 2 failed" + "\r\n");
          this.Cursor = Cursors.Arrow;
          return 0;
        }
        else
        {
          this.method_90((byte*) &struct28_2, (byte*) &struct28_3, (byte*) ((IntPtr) &struct90 + 10), (byte*) &struct28_4);
          if (_Module.memcmp((void*) &struct28_5, (void*) &struct28_4, 16U) != 0)
          {
            this.Cursor = Cursors.Arrow;
            return 0;
          }
          else
          {
            this.method_90((byte*) &struct28_2, (byte*) ((IntPtr) &struct90 + 10), (byte*) ((IntPtr) &struct90 + 26), (byte*) &struct28_4);
            if (_Module.memcmp((void*) &struct28_1, (void*) &struct28_4, 16U) != 0)
            {
              this.Cursor = Cursors.Arrow;
              return 0;
            }
            else
            {
              this.Cursor = Cursors.Arrow;
              return 1;
            }
          }
        }
      }
    }

    private unsafe int method_110(byte* pByte_0, byte* pByte_1, byte* pByte_2)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_1 + 1), 0, 15);
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_2 + 1), 0, 15);
      Struct28 struct28_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_3 + 1), 0, 15);
      Struct71 struct71;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct71 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct71&) ((IntPtr) &struct71 + 1), 0, 15);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 1;
      _Module.memcpy((void*) pByte_2, (void*) pByte_0, 16U);
      for (int index = 128; index > 0; --index)
      {
        this.method_113((byte*) &struct28_1);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        byte num1 = ^(byte&) ((IntPtr) &struct28_1 + 15);
        byte num2 = (byte) ((int) (byte) ((int) *pByte_1 >> 7) | (int) num1);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) ((int) num2 & (int) byte.MaxValue);
        this.method_113(pByte_1);
        this.method_89(pByte_2, (byte*) &struct28_2, (byte*) &struct28_1, (byte*) &struct28_3);
        _Module.memcpy((void*) pByte_2, (void*) &struct28_3, 16U);
      }
      return 1;
    }

    private unsafe int method_111(byte* pByte_0, byte* pByte_1)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_1 + 1), 0, 15);
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_2 + 1), 0, 15);
      Struct28 struct28_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_3 + 1), 0, 15);
      Struct28 struct28_4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_4 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_4 + 1), 0, 15);
      Struct71 struct71;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct71 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct71&) ((IntPtr) &struct71 + 1), 0, 15);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 1;
      _Module.memcpy((void*) &struct28_4, (void*) pByte_0, 16U);
      for (int index = 128; index > 0; --index)
      {
        this.method_113((byte*) &struct28_1);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        byte num1 = ^(byte&) ((IntPtr) &struct28_1 + 15);
        byte num2 = (byte) ((int) (byte) ((int) *pByte_1 >> 7) | (int) num1);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) ((int) num2 & (int) byte.MaxValue);
        this.method_113(pByte_1);
        this.method_89((byte*) &struct28_4, (byte*) &struct28_2, (byte*) &struct28_1, (byte*) &struct28_3);
        _Module.memcpy((void*) &struct28_4, (void*) &struct28_3, 16U);
      }
      string str = "";
      _Module.sprintf((sbyte*) &struct71, (sbyte*) &_Module.struct19_0, __arglist ());
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.sprintf((sbyte*) &struct71, (sbyte*) &_Module.struct10_20, __arglist (out struct71, (int) ^(byte&) ((IntPtr) &struct28_4 + index)));
      }
      this.textBox6.AppendText("New drive key is: " + str + new string((sbyte*) &struct71) + "\r\n");
      return 1;
    }

    private unsafe void method_112(byte* pByte_0, byte* pByte_1, byte* pByte_2)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_1 + 1), 0, 15);
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_2 + 1), 0, 15);
      Struct28 struct28_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_3 + 1), 0, 15);
      _Module.memcpy((void*) &struct28_1, (void*) pByte_0, 16U);
      this.method_89(pByte_1, (byte*) &struct28_3, (byte*) &struct28_1, (byte*) &struct28_2);
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_1 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_1 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_2 + index));
      }
      this.method_89(pByte_1 + 16, (byte*) &struct28_3, (byte*) &struct28_1, (byte*) &struct28_2);
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_1 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_1 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_2 + index));
      }
      _Module.memcpy((void*) pByte_2, (void*) &struct28_1, 16U);
    }

    private unsafe void method_113(byte* pByte_0)
    {
      Struct28 struct28;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28 + 1), 0, 15);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 15) = (sbyte) ((int) pByte_0[15] << 1 & 254);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 14) = (sbyte) ((int) pByte_0[14] << 1 & 254 | (int) pByte_0[15] >> 7 & 1);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 13) = (sbyte) ((int) pByte_0[13] << 1 & 254 | (int) pByte_0[14] >> 7 & 1);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 12) = (sbyte) ((int) pByte_0[12] << 1 & 254 | (int) pByte_0[13] >> 7 & 1);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 11) = (sbyte) ((int) pByte_0[11] << 1 & 254 | (int) pByte_0[12] >> 7 & 1);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 10) = (sbyte) ((int) pByte_0[10] << 1 & 254 | (int) pByte_0[11] >> 7 & 1);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 9) = (sbyte) ((int) pByte_0[9] << 1 & 254 | (int) pByte_0[10] >> 7 & 1);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 8) = (sbyte) ((int) pByte_0[8] << 1 & 254 | (int) pByte_0[9] >> 7 & 1);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 7) = (sbyte) ((int) pByte_0[7] << 1 & 254 | (int) pByte_0[8] >> 7 & 1);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 6) = (sbyte) ((int) pByte_0[6] << 1 & 254 | (int) pByte_0[7] >> 7 & 1);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 5) = (sbyte) ((int) pByte_0[5] << 1 & 254 | (int) pByte_0[6] >> 7 & 1);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 4) = (sbyte) ((int) pByte_0[4] << 1 & 254 | (int) pByte_0[5] >> 7 & 1);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 3) = (sbyte) ((int) pByte_0[3] << 1 & 254 | (int) pByte_0[4] >> 7 & 1);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 2) = (sbyte) ((int) pByte_0[2] << 1 & 254 | (int) pByte_0[3] >> 7 & 1);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 1) = (sbyte) ((int) pByte_0[1] << 1 & 254 | (int) pByte_0[2] >> 7 & 1);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28 = (sbyte) ((int) *pByte_0 << 1 & 254 | (int) pByte_0[1] >> 7 & 1);
      _Module.memcpy((void*) pByte_0, (void*) &struct28, 16U);
    }

    private unsafe int method_114(byte* pByte_0)
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) 67;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) 100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) 118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) 114;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) 117;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) 103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) 108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) 70;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) 108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) 115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) 104;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) 0;
      Struct28 struct28_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 1) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 2) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 3) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 4) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 5) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 6) = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 7) = (sbyte) 7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 8) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 9) = (sbyte) 9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 10) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 11) = (sbyte) 11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 12) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 13) = (sbyte) 13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 14) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 15) = (sbyte) 15;
      Struct28 struct28_4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_4 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_4 + 1), 0, 15);
      Struct28 struct28_5;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_5 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28_5 + 1), 0, 15);
      Struct4 struct4_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct4_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 5) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 8) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 9) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 10) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 11) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 12) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 13) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 14) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 15) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 16) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 17) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 18) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 19) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 20) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 21) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 22) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 23) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 24) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 25) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 26) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 27) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 28) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 29) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 30) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 31) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 32) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 33) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 34) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 35) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 36) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 37) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 38) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 39) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 40) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 41) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 42) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 43) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 44) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 45) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 46) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 47) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 48) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 49) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 50) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 51) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 52) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 53) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 54) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 55) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 56) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 57) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 58) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 59) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 60) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 61) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 62) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 63) = (sbyte) 0;
      Struct28 struct28_6;
      _Module.memcpy((void*) &struct28_6, (void*) pByte_0, 16U);
      if (this.comboBox1.Items.Count == 0)
        return 0;
      int selectedIndex = this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num1 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + selectedIndex * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      this.Cursor = Cursors.WaitCursor;
      this.method_5((byte*) &struct28_6, 16U, 0U);
      this.method_5((byte*) &struct28_3, 16U, 0U);
      Struct28 struct28_7;
      _Module.memcpy((void*) &struct28_7, (void*) &struct28_2, 16U);
      this.method_5((byte*) &struct28_7, 16U, 0U);
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_7 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_7 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_3 + index));
      }
      Struct89 struct89;
      int int_43_1 = _Module.smethod_142((uint*) &struct89, (byte*) &struct28_6, 128);
      _Module.smethod_144((uint*) &struct89, int_43_1, (byte*) &struct28_7, (byte*) &struct28_4);
      this.method_5((byte*) &struct28_4, 16U, 0U);
      Struct4 struct4_2;
      _Module.memcpy((void*) &struct4_2, (void*) &struct4_1, 64U);
      _Module.memcpy((void*) ((IntPtr) &struct4_2 + 10), (void*) &struct28_4, 16U);
      _Module.memcpy((void*) ((IntPtr) &struct4_2 + 42), (void*) &struct28_3, 16U);
      _Module.memcpy((void*) &struct28_3, (void*) &struct28_4, 16U);
      _Module.memcpy((void*) &struct28_7, (void*) &struct28_1, 16U);
      this.method_5((byte*) &struct28_7, 16U, 0U);
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_7 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_7 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_3 + index));
      }
      int int_43_2 = _Module.smethod_142((uint*) &struct89, (byte*) &struct28_6, 128);
      _Module.smethod_144((uint*) &struct89, int_43_2, (byte*) &struct28_7, (byte*) &struct28_4);
      this.method_5((byte*) &struct28_4, 16U, 0U);
      _Module.memcpy((void*) ((IntPtr) &struct4_2 + 26), (void*) &struct28_4, 16U);
      Struct28 struct28_8;
      _Module.memset((void*) &struct28_8, 0, 16U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_8 = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_8 + 8) = (sbyte) 58;
      uint num2;
      if (_Module.smethod_17((byte*) &struct28_8, 16U, (byte) num1, (ushort) 512, (void*) &struct4_2, &num2, 64U, (byte) 1, &gstruct3) != 0 && _Module.smethod_17((byte*) &struct28_8, 16U, (byte) num1, (ushort) 512, (void*) &struct4_2, &num2, 64U, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("\r\n" + "Stage 1 failed" + "\r\n");
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        Struct94 struct94;
        _Module.memset((void*) &struct94, 0, 68U);
        _Module.memset((void*) &struct28_8, 0, 16U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct28_8 = (sbyte) 90;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_8 + 2) = (sbyte) 59;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28_8 + 8) = (sbyte) 58;
        if (_Module.smethod_16((byte*) &struct28_8, 16U, (byte) num1, (ushort) 512, (void*) &struct94, &num2, 68U, (byte) 1, &gstruct3) != 0 && _Module.smethod_16((byte*) &struct28_8, 16U, (byte) num1, (ushort) 512, (void*) &struct94, &num2, 68U, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("\r\n" + "Stage 2 failed" + "\r\n");
          this.Cursor = Cursors.Arrow;
          return 0;
        }
        else
        {
          byte* pByte_0_1 = (byte*) ((IntPtr) &struct94 + 8);
          this.method_5(pByte_0_1, 58U, 0U);
          _Module.memcpy((void*) &struct28_6, (void*) &struct28_2, 16U);
          _Module.memcpy((void*) &struct28_3, (void*) (pByte_0_1 + 42), 16U);
          _Module.memcpy((void*) &struct28_7, (void*) (pByte_0_1 + 10), 16U);
          int int_43_3 = _Module.smethod_143((uint*) &struct89, (byte*) &struct28_6, 128);
          _Module.smethod_145((uint*) &struct89, int_43_3, (byte*) &struct28_7, (byte*) &struct28_4);
          for (int index = 0; index < 16; ++index)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct28_4 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_4 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_3 + index));
          }
          this.method_5((byte*) &struct28_4, 16U, 0U);
          if (_Module.memcmp((void*) &struct28_5, (void*) &struct28_4, 16U) != 0)
          {
            this.Cursor = Cursors.Arrow;
            return 0;
          }
          else
          {
            _Module.memcpy((void*) &struct28_3, (void*) (pByte_0_1 + 10), 16U);
            _Module.memcpy((void*) &struct28_7, (void*) (pByte_0_1 + 26), 16U);
            int int_43_4 = _Module.smethod_143((uint*) &struct89, (byte*) &struct28_6, 128);
            _Module.smethod_145((uint*) &struct89, int_43_4, (byte*) &struct28_7, (byte*) &struct28_4);
            for (int index = 0; index < 16; ++index)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct28_4 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct28_4 + index) ^ (int) ^(byte&) ((IntPtr) &struct28_3 + index));
            }
            this.method_5((byte*) &struct28_4, 16U, 0U);
            this.Cursor = Cursors.Arrow;
            return _Module.memcmp((void*) &struct28_1, (void*) &struct28_4, 16U) != 0 ? 0 : 1;
          }
        }
      }
    }

    private unsafe int method_115()
    {
      string str1 = (string) null;
      string str2 = (string) null;
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB");
      if (subKey.GetValue("Index") == null)
        return 0;
      string str3 = subKey.GetValue("Index").ToString();
      int num1 = (int) Convert.ToInt16(str3) + 1;
      this.Cursor = Cursors.WaitCursor;
      this.textBox6.AppendText("Scanning KeyDB and testing " + str3 + " keys" + "\r\n");
      this.pictureBox5.Visible = false;
      this.pictureBox7.Visible = true;
      this.pictureBox2.Visible = false;
      this.pictureBox6.Visible = true;
      this.menuItem_21.Enabled = false;
      this.menuItem_22.Enabled = false;
      this.menuItem_23.Enabled = false;
      this.menuItem_24.Enabled = false;
      this.label133.Text = "Not Found";
      this.label131.Text = "Not Found";
      this.string_14 = "";
      this.string_15 = "";
      this.string_16 = "";
      this.string_17 = "";
      this.toolTip_0.SetToolTip((Control) this.pictureBox5, (string) null);
      this.toolTip_0.SetToolTip((Control) this.pictureBox2, (string) null);
      for (int index = 1; index < num1; ++index)
      {
        if ((int) _Module.GetAsyncKeyState(27) == 0)
        {
          Application.DoEvents();
          subKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + Convert.ToString(index));
          this.textBox6.AppendText(".");
          if (subKey.GetValue("Key") != null)
            str1 = subKey.GetValue("Key").ToString();
          if (subKey.GetValue("JobName") != null)
            str2 = subKey.GetValue("JobName").ToString();
          string str4 = subKey.GetValue("WorkingDir") == null ? "" : subKey.GetValue("WorkingDir").ToString();
          string strA = subKey.GetValue("LastFile") == null ? "" : subKey.GetValue("LastFile").ToString();
          int startIndex = 0;
          Struct28 struct28;
          while (startIndex < 32)
          {
            sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(str1.Substring(startIndex, 2));
            byte num2;
            this.method_10((void*) &num2, pSbyte_0, 2);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct28 + startIndex / 2) = (sbyte) num2;
            startIndex += 2;
          }
          if (this.method_107((byte*) &struct28) == 1)
          {
            this.toolTip_0.SetToolTip((Control) this.pictureBox5, "Drive Key found in KeyDB (" + (object) Convert.ToString(index) + " - " + str2 + (string) __arglist (")", Environment.NewLine, "Key is: ", str1));
            this.toolTip_0.SetToolTip((Control) this.pictureBox2, "Drive Key found in KeyDB (" + (object) Convert.ToString(index) + " - " + str2 + (string) __arglist (")", Environment.NewLine, "Key is: ", str1));
            this.pictureBox5.Visible = true;
            this.pictureBox7.Visible = false;
            this.pictureBox2.Visible = true;
            this.pictureBox6.Visible = false;
            if (string.Compare(strA, "") != 0)
              this.menuItem_21.Enabled = true;
            this.menuItem_22.Enabled = true;
            this.menuItem_23.Enabled = true;
            this.menuItem_24.Enabled = true;
            this.string_14 = str1;
            this.string_15 = Convert.ToString(index);
            this.string_16 = strA;
            this.string_17 = str4;
            this.label133.Text = "Verified";
            this.label131.Text = "Verified";
            subKey.Close();
            this.Cursor = Cursors.Arrow;
            this.textBox6.AppendText("\r\n" + (object) "Key found in KeyDB at record (" + Convert.ToString(index) + " - " + (string) __arglist (str2, ")", "\r\n", "Key is: ", str1, "\r\n", "Key has been tested and verified, thanks C4eva ! ", "\r\n"));
            return 1;
          }
        }
        else
        {
          this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
          return 0;
        }
      }
      this.textBox6.AppendText("\r\n" + "Key was not found" + "\r\n");
      subKey.Close();
      this.Cursor = Cursors.Arrow;
      return 0;
    }

    private unsafe void menuItem_21_Click(object sender, EventArgs e)
    {
      if (File.Exists(this.string_16))
      {
        this.method_36(this.string_16, 0);
      }
      else
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("LastFile was not found in the specified location.", "Load Last File", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
    }

    private unsafe void menuItem_22_Click(object sender, EventArgs e)
    {
      if (Directory.Exists(Path.GetDirectoryName(this.string_17)))
      {
        OpenFileDialog openFileDialog = new OpenFileDialog();
        openFileDialog.Filter = "Firmware file (*.bin)|*.bin|All Files (*.*)|*.*";
        openFileDialog.FileName = "ix16.bin";
        openFileDialog.DefaultExt = ".bin";
        openFileDialog.CheckFileExists = true;
        openFileDialog.CheckPathExists = true;
        openFileDialog.RestoreDirectory = false;
        openFileDialog.InitialDirectory = this.string_17;
        if (openFileDialog.ShowDialog() != DialogResult.OK)
          return;
        this.method_36(Path.GetFullPath(openFileDialog.FileName), 0);
      }
      else
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Job Folder was not found.", "Open Job Folder", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
    }

    private void menuItem_23_Click(object sender, EventArgs e)
    {
      int num1 = this.method_22(this.string_14);
      int num2 = (int) new Job_history()
      {
        int_0 = num1
      }.ShowDialog((IWin32Window) this);
    }

    private void menuItem_24_Click(object sender, EventArgs e)
    {
      DataBaseView dataBaseView = new DataBaseView();
      dataBaseView.int_0 = this.method_22(this.string_14);
      if (dataBaseView.ShowDialog((IWin32Window) this) != DialogResult.OK)
        return;
      this.string_10 = Path.GetDirectoryName(dataBaseView.textBox15.Text);
      this.string_9 = dataBaseView.textBox2.Text;
    }

    private unsafe void method_116()
    {
      if (this.bool_2)
      {
        string str = this.string_10 + "\\Key.bin";
        if (!File.Exists(str))
        {
          sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(str);
          this.string_13 = str;
          GStruct5* pGstruct5_0 = _Module.fopen(pSbyte_0, (sbyte*) &_Module.struct18_5);
          if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num = (int) MessageBox.Show(str, "Can't open file", MessageBoxButtons.OK);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num = (int) _Module.fwrite((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), 16U, 1U, pGstruct5_0);
            _Module.fclose(pGstruct5_0);
            this.textBox6.AppendText("\r\n" + "Key data saved to " + str + "\r\n");
            return;
          }
        }
      }
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
      saveFileDialog.DefaultExt = ".bin";
      saveFileDialog.FileName = "Key.bin";
      saveFileDialog.RestoreDirectory = false;
      if (this.bool_2)
        saveFileDialog.InitialDirectory = this.string_10;
      if (saveFileDialog.ShowDialog() != DialogResult.OK)
        return;
      GStruct5* pGstruct5_0_1 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(saveFileDialog.FileName)), (sbyte*) &_Module.struct18_5);
      if ((IntPtr) pGstruct5_0_1 == IntPtr.Zero)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        this.textBox6.AppendText("Key data saved to " + saveFileDialog.FileName + "\r\n\r\n");
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num = (int) _Module.fwrite((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), 16U, 1U, pGstruct5_0_1);
        _Module.fclose(pGstruct5_0_1);
      }
    }

    private unsafe void method_117()
    {
      Struct34 struct34;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct34 = sbyte.MaxValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 1) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 2) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 3) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 4) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 5) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 6) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 7) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 8) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 9) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 15) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 16) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 17) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 18) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 19) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 20) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 21) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 22) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 23) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 24) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 25) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 26) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 27) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 28) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 29) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 30) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 31) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 32) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 33) = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 34) = (sbyte) 34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 35) = (sbyte) 51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 36) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 37) = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 38) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 39) = (sbyte) 119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 40) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 41) = (sbyte) -103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 42) = (sbyte) -86;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 43) = (sbyte) -69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 44) = (sbyte) -52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 45) = (sbyte) -35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 46) = (sbyte) -18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 47) = (sbyte) -6;
      Struct28 struct28;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28 = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 1) = (sbyte) 86;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 2) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 3) = (sbyte) 75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 4) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 5) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 6) = (sbyte) 51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 7) = (sbyte) 50;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 8) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 9) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 10) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 11) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 12) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 13) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 14) = (sbyte) 99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 15) = (sbyte) 116;
      Struct30 struct30;
      _Module.memset((void*) &struct30, 0, 512U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct30, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 780), 180U);
      int num = 46;
      while (num < 93)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct30 + num) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 780 + (num + 1));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct30 + (num + 1)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 780 + num);
        num += 2;
      }
      Struct32 struct32;
      _Module.memset((void*) &struct32, 0, 262144U);
      Struct33 struct33;
      _Module.memset((void*) &struct33, (int) byte.MaxValue, 4096U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 11264), (void*) &struct30, 512U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 11776), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 568), 116U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 12032), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 684), 96U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 24512), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2348), 32U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 40960), (void*) &struct33, 4096U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 40960), (void*) &struct34, 48U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 41008), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), 16U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 130816), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2028), 80U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
      this.method_121();
    }

    private unsafe void method_118()
    {
      Struct34 struct34;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct34 = sbyte.MaxValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 1) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 2) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 3) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 4) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 5) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 6) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 7) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 8) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 9) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 15) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 16) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 17) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 18) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 19) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 20) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 21) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 22) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 23) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 24) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 25) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 26) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 27) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 28) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 29) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 30) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 31) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 32) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 33) = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 34) = (sbyte) 34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 35) = (sbyte) 51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 36) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 37) = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 38) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 39) = (sbyte) 119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 40) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 41) = (sbyte) -103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 42) = (sbyte) -86;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 43) = (sbyte) -69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 44) = (sbyte) -52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 45) = (sbyte) -35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 46) = (sbyte) -18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 47) = (sbyte) -6;
      Struct28 struct28;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28 = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 1) = (sbyte) 86;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 2) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 3) = (sbyte) 75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 4) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 5) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 6) = (sbyte) 51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 7) = (sbyte) 50;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 8) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 9) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 10) = (sbyte) 120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 11) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 12) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 13) = (sbyte) 97;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 14) = (sbyte) 99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 15) = (sbyte) 116;
      Struct30 struct30;
      _Module.memset((void*) &struct30, 0, 512U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct30, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 780), 180U);
      int num = 46;
      while (num < 93)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct30 + num) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 780 + (num + 1));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct30 + (num + 1)) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 780 + num);
        num += 2;
      }
      Struct32 struct32;
      _Module.memset((void*) &struct32, 0, 262144U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 172032), (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 4096U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct32 + 258048) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258048);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct32 + 258049) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258049);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) ((IntPtr) &struct32 + 258050) != 229)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32 + 258050) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258050);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct32 + 258051) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258051);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct32 + 126976) = (sbyte) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 126976);
      Struct33 struct33;
      _Module.memset((void*) &struct33, (int) byte.MaxValue, 4096U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 11264), (void*) &struct30, 512U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 11776), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 568), 116U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 12032), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 684), 96U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 24512), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2348), 32U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 40960), (void*) &struct33, 4096U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 40960), (void*) &struct34, 48U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 41008), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), 16U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 130816), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2028), 224U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
      this.method_121();
    }

    private unsafe void textBox11_TextChanged(object sender, EventArgs e)
    {
      if (string.Compare(this.textBox11.Text, "140F0F1011B5223D79587717FFD9EC3A") == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_9 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) 0, _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("This key is from a bad LO83info file, try redumping.", "Spoofing iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_9);
        this.method_43();
      }
      if (string.Compare(this.textBox11.Text, "A79A2F73EC6B1F204BAECB0E8B763018") != 0)
        return;
      // ISSUE: cast to a function pointer type
      _Module.pGstruct14_9 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) 0, _Module.GetCurrentThreadId());
      int num1 = (int) MessageBox.Show("This key is from a bad LO83info file, try redumping.", "Spoofing iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      _Module.UnhookWindowsHookEx(_Module.pGstruct14_9);
      this.method_43();
    }

    private unsafe void method_119()
    {
      Struct91 struct91;
      _Module.memset((void*) &struct91, 0, 112U);
      OpenFileDialog openFileDialog = new OpenFileDialog();
      openFileDialog.Filter = "LO83info file (*.key)|*.key|All Files (*.*)|*.*";
      openFileDialog.FileName = "[barcode].bin.key";
      openFileDialog.DefaultExt = ".key";
      openFileDialog.CheckFileExists = true;
      openFileDialog.CheckPathExists = true;
      openFileDialog.RestoreDirectory = false;
      if (this.bool_2)
        openFileDialog.InitialDirectory = this.string_10;
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return;
      GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(openFileDialog.FileName)), (sbyte*) &_Module.struct18_4);
      if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_9 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) 0, _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show(openFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_9);
      }
      else
      {
        _Module.fseek(pGstruct5_0, 0, 2);
        int num1 = _Module.ftell(pGstruct5_0);
        _Module.rewind(pGstruct5_0);
        if (num1 != 304)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_9 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) 0, _Module.GetCurrentThreadId());
          int num2 = (int) MessageBox.Show("LO83info file should be 304 bytes", "Loading File", MessageBoxButtons.OK);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_9);
          _Module.fclose(pGstruct5_0);
        }
        else
        {
          Struct95 struct95;
          if ((int) _Module.fread((void*) &struct95, 304U, 1U, pGstruct5_0) != 1)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_9 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) 0, _Module.GetCurrentThreadId());
            int num2 = (int) MessageBox.Show("LO83info file should be 304 bytes", "Loading File", MessageBoxButtons.OK);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_9);
            _Module.fclose(pGstruct5_0);
          }
          else if (_Module.memcmp((void*) &struct91, (void*) &struct95, 16U) == 0)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_9 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) 0, _Module.GetCurrentThreadId());
            int num2 = (int) MessageBox.Show("LO83info file looks incorrect, try redumping.", "Loading File", MessageBoxButtons.OK);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_9);
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 964), (void*) &struct95, 304U);
            this.method_120();
          }
        }
      }
    }

    private unsafe void method_120()
    {
      Struct34 struct34;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct34 = sbyte.MaxValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 1) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 2) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 3) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 4) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 5) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 6) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 7) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 8) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 9) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 15) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 16) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 17) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 18) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 19) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 20) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 21) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 22) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 23) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 24) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 25) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 26) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 27) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 28) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 29) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 30) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 31) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 32) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 33) = (sbyte) 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 34) = (sbyte) 34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 35) = (sbyte) 51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 36) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 37) = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 38) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 39) = (sbyte) 119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 40) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 41) = (sbyte) -103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 42) = (sbyte) -86;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 43) = (sbyte) -69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 44) = (sbyte) -52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 45) = (sbyte) -35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 46) = (sbyte) -18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct34 + 47) = (sbyte) -6;
      Struct55 struct55;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct55 = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 1) = (sbyte) 117;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 2) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 3) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 4) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 5) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 6) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 7) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 8) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 9) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 10) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 11) = (sbyte) 76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 12) = (sbyte) 79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 13) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 14) = (sbyte) 51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 15) = (sbyte) 105;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 16) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 17) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 18) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 19) = (sbyte) 46;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 20) = (sbyte) 98;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 21) = (sbyte) 105;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 22) = (sbyte) 110;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 23) = (sbyte) 46;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 24) = (sbyte) 107;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 25) = (sbyte) 101;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 26) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 27) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 28) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 29) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 30) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct55 + 31) = (sbyte) 0;
      Struct30 struct30_1;
      _Module.memset((void*) &struct30_1, 0, 512U);
      _Module.memcpy((void*) &struct30_1, (void*) &_Module.struct46_3, 180U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct30_1 + 20), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 1172), 20U);
      Struct30 struct30_2;
      _Module.memcpy((void*) &struct30_2, (void*) &struct30_1, 512U);
      int num = 46;
      while (num < 93)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct30_1 + num) = (sbyte) ^(byte&) ((IntPtr) &struct30_2 + (num + 1));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct30_1 + (num + 1)) = (sbyte) ^(byte&) ((IntPtr) &struct30_2 + num);
        num += 2;
      }
      Struct32 struct32;
      _Module.memset((void*) &struct32, 0, 262144U);
      Struct33 struct33;
      _Module.memset((void*) &struct33, (int) byte.MaxValue, 4096U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 11264), (void*) &struct30_1, 512U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 11776), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 1076), 96U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 12032), (void*) &_Module.struct29_26, 96U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 24512), (void*) &struct55, 32U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 40960), (void*) &struct33, 4096U);
      _Module.memcpy((void*) ((IntPtr) &struct32 + 40960), (void*) &struct34, 48U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 41008), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 1252), 16U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct32 + 130816), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 1172), 80U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
      this.method_121();
    }

    private unsafe void method_121()
    {
      if (this.bool_2)
      {
        string str = this.string_10 + "\\Dummy.bin";
        for (int index = 1; index < 10; ++index)
        {
          if (!File.Exists(str))
          {
            GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(str), (sbyte*) &_Module.struct18_5);
            if ((IntPtr) pGstruct5_0 != IntPtr.Zero)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num = (int) _Module.fwrite((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U, 1U, pGstruct5_0);
              _Module.fclose(pGstruct5_0);
              this.textBox6.AppendText("\r\n" + "Dummy.bin file saved to " + str + "\r\n");
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_37(str, 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
              return;
            }
          }
          else
            str = this.string_10 + "\\Dummy_" + Convert.ToString(index) + ".bin";
        }
      }
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
      saveFileDialog.DefaultExt = ".bin";
      saveFileDialog.FileName = "Dummy.bin";
      saveFileDialog.RestoreDirectory = false;
      if (this.bool_2)
        saveFileDialog.InitialDirectory = this.string_10;
      if (saveFileDialog.ShowDialog() == DialogResult.OK)
      {
        string fullPath = Path.GetFullPath(saveFileDialog.FileName);
        string fileName = Path.GetFileName(saveFileDialog.FileName);
        GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(fullPath), (sbyte*) &_Module.struct18_5);
        if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num = (int) _Module.fwrite((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U, 1U, pGstruct5_0);
          _Module.fclose(pGstruct5_0);
          this.textBox6.AppendText("\r\n" + "Dummy.bin file saved to " + fileName + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_37(fullPath, 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
        }
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_37("", 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
      }
    }

    private unsafe void method_122()
    {
      uint num1 = (uint) this.comboBox10.SelectedIndex;
      Struct84 struct84;
      _Module.sprintf((sbyte*) &struct84, (sbyte*) &_Module.struct10_22, __arglist (Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + (int) num1 * 324)))));
      this.pVoid_0 = _Module.CreateFileA((sbyte*) &struct84, 3221225472U, 0U, (GStruct100*) 0, 3U, 1073741952U, (void*) 0);
      if ((IntPtr) this.pVoid_0 == IntPtr(-1))
        this.textBox6.AppendText("Failed to open com port " + Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + (int) num1 * 324))) + "\r\n");
      else if (_Module.SetCommMask(this.pVoid_0, 256U) == 0)
      {
        this.textBox6.AppendText("SetCommMask failed with error " + Convert.ToString((int) _Module.GetLastError()) + "\r\n");
      }
      else
      {
        GStruct95 gstruct95;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct95 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) @gstruct95 = 0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct95 + 4) = 0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct95 + 8) = 0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct95 + 12) = 0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &gstruct95 + 16) == 0)
          _Module._assert((sbyte*) &_Module.struct24_8, (sbyte*) &_Module.struct96_0, 20114U);
        uint num2;
        if (_Module.WaitCommEvent(this.pVoid_0, &num2, &gstruct95) != 0)
        {
          if (((int) num2 & 256) == 0)
            return;
          this.textBox6.AppendText("Switch Detected, Sending DVDKey_32" + "\r\n");
          if ((IntPtr) this.pVoid_0 == IntPtr.Zero)
            return;
          _Module.CloseHandle(this.pVoid_0);
        }
        else if (997 == (int) _Module.GetLastError())
        {
          this.textBox6.AppendText("USB Xtractor switch enabled" + "\r\n");
          Application.DoEvents();
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num3 = (int) _Module.WaitForSingleObject((void*) ^(int&) ((IntPtr) &gstruct95 + 16), uint.MaxValue);
          if (((int) num2 & 256) != 0)
          {
            this.textBox6.AppendText("USB Xtractor switch Detected, Sending DVDKey_32" + "\r\n");
            _Module.CloseHandle(this.pVoid_0);
            _Module.SendMessageA(_Module.FindWindowExA(this.pGstruct11_0, (GStruct11*) 0, (sbyte*) 0, (sbyte*) &_Module.struct16_1), 12U, 0U, (int) (void*) Marshal.StringToHGlobalAnsi("DoDVDKey"));
          }
          else
          {
            this.textBox6.AppendText("USB Xtractor switch disabled" + "\r\n");
            while ((IntPtr) this.pVoid_0 != IntPtr.Zero)
              _Module.CloseHandle(this.pVoid_0);
          }
        }
        else
          this.textBox6.AppendText("Wait failed with error " + Convert.ToString((int) _Module.GetLastError()) + "\r\n");
      }
    }

    private void method_123()
    {
      new Thread(new ThreadStart(this.method_122)).Start();
    }

    private unsafe void method_124()
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      if ((IntPtr) this.pVoid_0 != IntPtr.Zero)
        _Module.SetCommMask(this.pVoid_0, 64U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (this.checkBox9.CheckState != CheckState.Checked || ^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) != 2)
        return;
      if (this.method_146() == 1)
      {
        this.textBox6.AppendText("USB Xtractor Found on " + Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324))) + "\r\n");
        this.method_123();
      }
      else
        this.textBox6.AppendText(Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324))) + " could not be opened" + "\r\n");
    }

    private unsafe void tabControl5_SelectedIndexChanged(object sender, EventArgs e)
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      uint num2 = (uint) this.comboBox1.Items.Count;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num3 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      if (this.tabControl5.SelectedTab != this.DVDKey32 && (IntPtr) this.pVoid_0 != IntPtr.Zero)
        _Module.SetCommMask(this.pVoid_0, 64U);
      if (this.tabControl5.SelectedTab != this.Hitachi || !this.radioButton17.Checked || ((int) num3 != 0 || (int) num2 == 0) || this.bool_9)
        return;
      this.method_424((byte) 1);
      this.bool_9 = true;
      _Module.Sleep(10U);
      this.method_424((byte) 5);
      _Module.Sleep(25U);
      this.method_424((byte) 7);
    }

    private unsafe int method_125(byte byte_0)
    {
      Struct77 struct77_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct77_1 = (sbyte) 79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_1 + 1) = (sbyte) 75;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_1 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_1 + 3) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_1 + 4) = (sbyte) 49;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_1 + 5) = (sbyte) 0;
      GStruct95 gstruct95_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95_1 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95_1 + 4), 0, 16);
      GStruct95 gstruct95_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95_2 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95_2 + 4), 0, 16);
      GStruct96 gstruct96;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct96 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct96&) ((IntPtr) &gstruct96 + 4), 0, 24);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct96 = 28;
      uint num1 = (uint) this.comboBox10.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_1 + 3) = (sbyte) ((((int) byte_0 & 240) >> 4) + 48);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct77_1 + 4) = (sbyte) (((int) byte_0 & 15) + 48);
      if ((int) byte_0 == 1)
      {
        this.label135.Text = "xt2: Opening";
        Application.DoEvents();
      }
      if ((int) byte_0 == 2)
      {
        this.label135.Text = "xt2: Closing";
        Application.DoEvents();
      }
      if ((int) byte_0 == 3)
      {
        this.label135.Text = "xt2: Half Tray";
        Application.DoEvents();
      }
      if ((int) byte_0 == 10)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct77_1 + 4) = (sbyte) 65;
        this.label135.Text = "xt2: Power Off";
        Application.DoEvents();
      }
      if ((int) byte_0 == 11)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct77_1 + 4) = (sbyte) 66;
        this.label135.Text = "xt2: Power On";
        Application.DoEvents();
      }
      if ((int) byte_0 == 12)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct77_1 + 4) = (sbyte) 67;
        this.label135.Text = "xt2: Power Cycle";
        Application.DoEvents();
      }
      new Thread(new ThreadStart(this.method_165)).Start();
      Struct84 struct84;
      _Module.sprintf((sbyte*) &struct84, (sbyte*) &_Module.struct10_22, __arglist (Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + (int) num1 * 324)))));
      void* fileA = _Module.CreateFileA((sbyte*) &struct84, 3221225472U, 0U, (GStruct100*) 0, 3U, 1073741952U, (void*) 0);
      if ((IntPtr) fileA == IntPtr(-1))
      {
        this.textBox6.AppendText("Failed to open com port " + Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + (int) num1 * 324))) + "\r\n");
        return 0;
      }
      else
      {
        _Module.GetCommState(fileA, &gstruct96);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct96 + 4) = 19200;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &gstruct96 + 18) = (sbyte) 8;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &gstruct96 + 19) = (sbyte) 0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &gstruct96 + 20) = (sbyte) 0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct96 + 8) = ^(int&) ((IntPtr) &gstruct96 + 8) & -49 | 16;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct96 + 8) = ^(int&) ((IntPtr) &gstruct96 + 8) & -12289 | 4096;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct96 + 8) = ^(int&) ((IntPtr) &gstruct96 + 8) & -257;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct96 + 8) = ^(int&) ((IntPtr) &gstruct96 + 8) & -513;
        _Module.SetCommState(fileA, &gstruct96);
        GStruct94 gstruct94;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) @gstruct94 = 100;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct94 + 8) = 10;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct94 + 4) = 100;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct94 + 16) = 10;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct94 + 12) = 100;
        _Module.SetCommTimeouts(fileA, &gstruct94);
        Struct63 struct63;
        _Module.memset((void*) &struct63, 0, 4U);
        Struct77 struct77_2;
        _Module.memset((void*) &struct77_2, 0, 6U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct63 = (sbyte) 64;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) 85;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) byte_0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) 64;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct95_1 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct95_2 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
        uint num2;
        _Module.WriteFile(fileA, (void*) &struct63, 4U, &num2, &gstruct95_2);
        _Module.GetOverlappedResult(fileA, &gstruct95_2, &num2, 1);
        uint num3;
        _Module.ReadFile(fileA, (void*) &struct77_2, 6U, &num3, &gstruct95_1);
        _Module.GetOverlappedResult(fileA, &gstruct95_1, &num3, 1);
        if (_Module.memcmp((void*) &struct77_2, (void*) &struct77_1, 6U) == 0)
        {
          if ((IntPtr) fileA != IntPtr(-1))
            _Module.CloseHandle(fileA);
          return 1;
        }
        else if (_Module.memcmp((void*) ((IntPtr) &struct77_2 + 1), (void*) &struct77_1, 5U) == 0)
        {
          if ((IntPtr) fileA != IntPtr(-1))
            _Module.CloseHandle(fileA);
          return 1;
        }
        else
        {
          if ((IntPtr) fileA != IntPtr(-1))
            _Module.CloseHandle(fileA);
          return 0;
        }
      }
    }

    private void menuItem_25_Click(object sender, EventArgs e)
    {
      this.method_126();
    }

    private void menuItem_26_Click(object sender, EventArgs e)
    {
      this.method_127();
    }

    private void menuItem_27_Click(object sender, EventArgs e)
    {
      this.method_128();
    }

    private void menuItem_28_Click(object sender, EventArgs e)
    {
      this.method_129();
    }

    private void menuItem_30_Click(object sender, EventArgs e)
    {
      this.method_130();
    }

    private void menuItem_31_Click(object sender, EventArgs e)
    {
      this.method_131();
    }

    private void button43_Click(object sender, EventArgs e)
    {
      this.method_129();
    }

    private void button44_Click(object sender, EventArgs e)
    {
      this.method_130();
    }

    private void button45_Click(object sender, EventArgs e)
    {
      this.method_131();
    }

    private void button46_Click(object sender, EventArgs e)
    {
      this.method_126();
    }

    private void button47_Click(object sender, EventArgs e)
    {
      this.method_127();
    }

    private void button48_Click(object sender, EventArgs e)
    {
      this.method_128();
    }

    private void menuItem_35_Click(object sender, EventArgs e)
    {
      string str1 = (string) null;
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
      if (subKey.GetValue("HalfTrayDelay") != null)
        str1 = subKey.GetValue("HalfTrayDelay").ToString();
      else if (subKey.GetValue("HalfTrayDelay") == null)
      {
        subKey.SetValue("HalfTrayDelay", (object) "250");
        str1 = "250";
      }
      string str2 = Convert.ToString(Convert.ToInt32(str1) + 50);
      subKey.SetValue("HalfTrayDelay", (object) str2);
      this.menuItem_34.Text = str2 + "mS";
    }

    private void menuItem_36_Click(object sender, EventArgs e)
    {
      string str1 = (string) null;
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
      if (subKey.GetValue("HalfTrayDelay") != null)
        str1 = subKey.GetValue("HalfTrayDelay").ToString();
      else if (subKey.GetValue("HalfTrayDelay") == null)
      {
        subKey.SetValue("HalfTrayDelay", (object) "250");
        str1 = "250";
      }
      string str2 = Convert.ToString(Convert.ToInt32(str1) - 50);
      subKey.SetValue("HalfTrayDelay", (object) str2);
      this.menuItem_34.Text = str2 + "mS";
    }

    private unsafe int method_126()
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
      {
        this.method_125((byte) 33);
        this.method_125((byte) 1);
        this.method_125((byte) 32);
        return 1;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
        {
          this.method_164(1U);
          return 1;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) != 9 || this.checkBox9.CheckState != CheckState.Checked)
            return 0;
          this.method_135();
          this.method_143();
          this.method_138();
          return 1;
        }
      }
    }

    private unsafe int method_127()
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
      {
        this.method_125((byte) 33);
        this.method_125((byte) 2);
        this.method_125((byte) 32);
        return 1;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
        {
          this.method_164(2U);
          return 1;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) != 9 || this.checkBox9.CheckState != CheckState.Checked)
            return 0;
          this.method_135();
          this.method_144();
          this.method_138();
          return 1;
        }
      }
    }

    private unsafe int method_128()
    {
      string str = (string) null;
      int selectedIndex = this.comboBox10.SelectedIndex;
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
      if (subKey.GetValue("HalfTrayDelay") != null)
        str = subKey.GetValue("HalfTrayDelay").ToString();
      else if (subKey.GetValue("HalfTrayDelay") == null)
      {
        subKey.SetValue("HalfTrayDelay", (object) "250");
        str = "250";
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
      {
        this.method_125((byte) 33);
        this.method_125((byte) 1);
        _Module.Sleep((uint) Convert.ToInt32(str));
        this.method_125((byte) 12);
        this.method_125((byte) 32);
        return 1;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
        {
          this.method_164(1U);
          _Module.Sleep((uint) Convert.ToInt32(str));
          this.method_164(10U);
          _Module.Sleep(250U);
          this.method_164(11U);
          return 1;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) != 9 || this.checkBox9.CheckState != CheckState.Checked)
            return 0;
          this.method_135();
          this.method_143();
          _Module.Sleep((uint) Convert.ToInt32(str));
          this.method_142();
          _Module.Sleep(250U);
          this.method_141();
          this.method_138();
          return 1;
        }
      }
    }

    private unsafe int method_129()
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
      {
        this.method_125((byte) 33);
        this.method_125((byte) 11);
        this.method_125((byte) 32);
        return 1;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
        {
          this.method_164(11U);
          return 1;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) != 9 || this.checkBox9.CheckState != CheckState.Checked)
            return 0;
          this.method_135();
          this.method_141();
          this.method_138();
          return 1;
        }
      }
    }

    private unsafe int method_130()
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
      {
        this.method_125((byte) 33);
        this.method_125((byte) 10);
        this.method_125((byte) 32);
        return 1;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
        {
          this.method_164(10U);
          return 1;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) != 9 || this.checkBox9.CheckState != CheckState.Checked)
            return 0;
          this.method_135();
          this.method_142();
          this.method_138();
          return 1;
        }
      }
    }

    private unsafe int method_131()
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
      {
        this.method_125((byte) 33);
        this.method_125((byte) 12);
        this.method_125((byte) 32);
        return 1;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
        {
          this.method_164(10U);
          _Module.Sleep(250U);
          this.method_164(11U);
          return 1;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) != 9 || this.checkBox9.CheckState != CheckState.Checked)
            return 0;
          this.method_135();
          this.method_142();
          _Module.Sleep(250U);
          this.method_141();
          this.method_138();
          return 1;
        }
      }
    }

    private unsafe void method_132()
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
      {
        _Module.Sleep(250U);
        this.method_125((byte) 33);
        this.method_125((byte) 11);
        this.method_125((byte) 32);
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
        {
          _Module.Sleep(250U);
          this.method_164(11U);
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) != 9 || this.checkBox9.CheckState != CheckState.Checked)
            return;
          this.method_135();
          _Module.Sleep(250U);
          this.method_141();
          this.method_138();
        }
      }
    }

    private unsafe void method_133()
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
      {
        _Module.Sleep(250U);
        this.method_125((byte) 33);
        this.method_125((byte) 10);
        _Module.Sleep(500U);
        this.method_125((byte) 11);
        this.method_125((byte) 32);
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
        {
          this.method_164(10U);
          _Module.Sleep(500U);
          this.method_164(11U);
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) != 9 || this.checkBox9.CheckState != CheckState.Checked)
            return;
          _Module.Sleep(250U);
          this.method_135();
          this.method_142();
          _Module.Sleep(500U);
          this.method_141();
          this.method_138();
        }
      }
    }

    private unsafe int method_134()
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      return ^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked || ^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked || ^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 9 && this.checkBox9.CheckState == CheckState.Checked ? 1 : 0;
    }

    private unsafe int method_135()
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 9)
      {
        Struct84 struct84;
        _Module.sprintf((sbyte*) &struct84, (sbyte*) &_Module.struct10_22, __arglist (Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324)))));
        this.pVoid_1 = _Module.CreateFileA((sbyte*) &struct84, 3221225472U, 0U, (GStruct100*) 0, 3U, 1073741952U, (void*) 0);
      }
      if ((IntPtr) this.pVoid_1 != IntPtr(-1))
        return 1;
      this.textBox6.AppendText("Failed to open com port " + Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324))) + "\r\n");
      return 0;
    }

    private unsafe void method_136()
    {
      _Module.smethod_135(this.pVoid_1, 1);
      this.method_141();
      this.method_139();
    }

    private unsafe void method_137()
    {
      _Module.smethod_135(this.pVoid_1, 0);
      this.method_142();
      this.method_140();
    }

    private unsafe void method_138()
    {
      if ((IntPtr) this.pVoid_1 != IntPtr.Zero)
        _Module.CloseHandle(this.pVoid_1);
      this.pVoid_1 = (void*) 0;
    }

    private unsafe void method_139()
    {
      byte byte_0;
      _Module.smethod_139(this.pVoid_1, &byte_0);
      if ((int) byte_0 == 0)
        byte_0 = (byte) 0;
      else if ((int) byte_0 == 1)
        byte_0 = (byte) 0;
      else if ((int) byte_0 == 2)
        byte_0 = (byte) 2;
      else if ((int) byte_0 == 3)
        byte_0 = (byte) 2;
      _Module.smethod_138(this.pVoid_1, byte_0);
    }

    private unsafe void method_140()
    {
      byte byte_0;
      _Module.smethod_139(this.pVoid_1, &byte_0);
      if ((int) byte_0 == 0)
        byte_0 = (byte) 1;
      else if ((int) byte_0 == 1)
        byte_0 = (byte) 1;
      else if ((int) byte_0 == 2)
        byte_0 = (byte) 3;
      else if ((int) byte_0 == 3)
        byte_0 = (byte) 3;
      _Module.smethod_138(this.pVoid_1, byte_0);
    }

    private unsafe void method_141()
    {
      byte byte_0;
      _Module.smethod_139(this.pVoid_1, &byte_0);
      if ((int) byte_0 == 0)
        byte_0 = (byte) 0;
      else if ((int) byte_0 == 1)
        byte_0 = (byte) 1;
      else if ((int) byte_0 == 2)
        byte_0 = (byte) 0;
      else if ((int) byte_0 == 3)
        byte_0 = (byte) 1;
      _Module.smethod_138(this.pVoid_1, byte_0);
    }

    private unsafe void method_142()
    {
      byte byte_0;
      _Module.smethod_139(this.pVoid_1, &byte_0);
      if ((int) byte_0 == 0)
        byte_0 = (byte) 2;
      else if ((int) byte_0 == 1)
        byte_0 = (byte) 3;
      else if ((int) byte_0 == 2)
        byte_0 = (byte) 2;
      else if ((int) byte_0 == 3)
        byte_0 = (byte) 3;
      _Module.smethod_138(this.pVoid_1, byte_0);
    }

    private unsafe void method_143()
    {
      _Module.smethod_137(this.pVoid_1, (byte) 1);
    }

    private unsafe void method_144()
    {
      _Module.smethod_137(this.pVoid_1, (byte) 0);
    }

    private unsafe int method_145()
    {
      this.int_0 = 0;
      int num = _Module.smethod_118((GStruct99*) &_Module.struct122_0, 0, (ushort) 32);
      _Module.smethod_131();
      this.comboBox10.Items.Clear();
      if (num == 0)
        return 0;
      for (int index1 = 0; index1 < num; ++index1)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) == 7)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) = 7;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) == 6)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) = 6;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) == 9)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) = 9;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if (^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) == 4)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if (^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 320) == 2)
                {
                  for (int index2 = 0; index2 < num; ++index2)
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if (^(int&) ((IntPtr) &_Module.struct122_0 + index2 * 324 + 8) == 7 && ^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 316) == ^(int&) ((IntPtr) &_Module.struct122_0 + index2 * 324 + 316))
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      ^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) = 6;
                    }
                  }
                }
                else if (_Module.memcmp((void*) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 193), (void*) &_Module.struct66_1, 19U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  ^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) = 5;
                }
                else if (_Module.memcmp((void*) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 193), (void*) &_Module.struct13_2, 20U) == 0)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  ^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) = 5;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  ^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) = 0;
                }
              }
              else if (_Module.memcmp((void*) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 193), (void*) &_Module.struct15_6, 12U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) = 2;
              }
              else if (_Module.memcmp((void*) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 193), (void*) &_Module.struct65_9, 14U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) = 8;
              }
              else if (_Module.memcmp((void*) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 193), (void*) &_Module.struct15_7, 12U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) = 3;
              }
              else if (_Module.memcmp((void*) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 193), (void*) &_Module.struct74_4, 10U) == 0)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(int&) ((IntPtr) &_Module.struct122_0 + index1 * 324 + 8) = 20;
              }
            }
          }
        }
      }
      for (int index = 0; index < num; ++index)
        this.comboBox10.Items.Add((object) Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + index * 324))));
      return num;
    }

    private unsafe int method_146()
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(Convert.ToString(this.comboBox10.Text));
      Struct84 struct84;
      _Module.sprintf((sbyte*) &struct84, (sbyte*) &_Module.struct10_22, __arglist ((IntPtr) numPtr));
      this.label103.Text = "Checking.";
      Application.DoEvents();
      void* fileA = _Module.CreateFileA((sbyte*) &struct84, 3221225472U, 0U, (GStruct100*) 0, 3U, 1073741952U, (void*) 0);
      if ((IntPtr) fileA == IntPtr(-1))
      {
        this.label103.Text = "Checking..";
        Application.DoEvents();
        this.label103.Text = "Checking...";
        Application.DoEvents();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 72) = (sbyte) 0;
        _Module.CloseHandle(fileA);
        this.label103.Text = "Not available";
        return 0;
      }
      else
      {
        this.label103.Text = "Checking..";
        Application.DoEvents();
        this.label103.Text = "Checking...";
        Application.DoEvents();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 72) = (sbyte) 1;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 10)
        {
          this.label103.Text = "Fax Modem Detected:";
          Application.DoEvents();
          _Module.Sleep(1000U);
          this.label103.Text = "Auto-Dialing 911..";
          Application.DoEvents();
          _Module.Sleep(500U);
          this.label103.Text = "Auto-Dialing 911....";
          Application.DoEvents();
          _Module.Sleep(500U);
          this.label103.Text = "Auto-Dialing 911......";
          Application.DoEvents();
          _Module.Sleep(500U);
        }
        _Module.CloseHandle(fileA);
        this.label103.Text = "Ready";
        return 1;
      }
    }

    private unsafe int method_147()
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(Convert.ToString(this.comboBox10.Text));
      Struct84 struct84;
      _Module.sprintf((sbyte*) &struct84, (sbyte*) &_Module.struct10_22, __arglist ((IntPtr) numPtr));
      void* fileA = _Module.CreateFileA((sbyte*) &struct84, 3221225472U, 0U, (GStruct100*) 0, 3U, 1073741952U, (void*) 0);
      if ((IntPtr) fileA == IntPtr(-1))
      {
        _Module.CloseHandle(fileA);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 72) = (sbyte) 0;
        return 0;
      }
      else
      {
        _Module.CloseHandle(fileA);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 72) = (sbyte) 1;
        return 1;
      }
    }

    private void comboBox10_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.label135.Text = "";
      this.method_148();
    }

    private unsafe void method_148()
    {
      string strA = (string) null;
      if (this.comboBox10.Items.Count == 0)
      {
        this.label102.Text = new string((sbyte*) &_Module.struct19_0);
        this.label103.Text = new string((sbyte*) &_Module.struct19_0);
        this.label104.Text = new string((sbyte*) &_Module.struct19_0);
        this.label105.Text = new string((sbyte*) &_Module.struct19_0);
        this.checkBox9.Enabled = false;
      }
      else
      {
        int selectedIndex = this.comboBox10.SelectedIndex;
        if ((IntPtr) this.pVoid_0 != IntPtr.Zero)
          _Module.SetCommMask(this.pVoid_0, 64U);
        RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
        if (subKey.GetValue(Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324)))) != null)
          strA = subKey.GetValue(Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324)))).ToString();
        subKey.Close();
        if (string.Compare(strA, "XT2") == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) = 8;
        }
        else if (string.Compare(strA, "CK3CP") == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) = 6;
        }
        this.label102.Text = Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324)));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 0)
        {
          this.label104.Text = new string((sbyte*) &_Module.struct25_10);
          this.checkBox9.Enabled = false;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 1)
          {
            this.label104.Text = new string((sbyte*) &_Module.struct24_9);
            this.checkBox9.Enabled = false;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 2)
            {
              this.label104.Text = new string((sbyte*) &_Module.struct97_0);
              this.checkBox9.Enabled = true;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 3)
              {
                this.label104.Text = new string((sbyte*) &_Module.struct97_1);
                this.checkBox9.Enabled = false;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 4)
                {
                  this.label104.Text = new string((sbyte*) &_Module.struct98_0);
                  this.checkBox9.Enabled = false;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 5)
                  {
                    this.label104.Text = new string((sbyte*) &_Module.struct1_4);
                    this.checkBox9.Enabled = false;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 6)
                    {
                      this.label104.Text = new string((sbyte*) &_Module.struct66_2);
                      this.checkBox9.Enabled = true;
                    }
                    else
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 7)
                      {
                        this.label104.Text = new string((sbyte*) &_Module.struct66_3);
                        this.checkBox9.Enabled = false;
                      }
                      else
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 8)
                        {
                          this.label104.Text = new string((sbyte*) &_Module.struct99_0);
                          this.checkBox9.Enabled = true;
                        }
                        else
                        {
                          // ISSUE: cast to a reference type
                          // ISSUE: explicit reference operation
                          if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 9)
                          {
                            this.label104.Text = new string((sbyte*) &_Module.struct15_8);
                            this.checkBox9.Enabled = true;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        this.label105.Text = Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 12)));
        if (this.tabControl5.SelectedTab != this.DVDKey32)
          return;
        this.method_146();
        if (this.checkBox9.CheckState != CheckState.Checked)
          return;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 2)
        {
          this.textBox6.AppendText("USB Xtractor Found on " + Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324))) + "\r\n");
          this.method_123();
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 6)
          this.method_166(17U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 9)
        {
          this.method_150();
          this.label135.Text = "CK3i: Enabled";
          new Thread(new ThreadStart(this.method_165)).Start();
          if (this.method_135() == 1)
          {
            this.method_136();
            this.method_138();
          }
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) != 8)
          return;
        this.label135.Text = "xt2: Enabled";
        new Thread(new ThreadStart(this.method_165)).Start();
      }
    }

    private unsafe void button8_Click(object sender, EventArgs e)
    {
      if (this.method_145() != 0)
      {
        this.textBox6.AppendText("Found " + Convert.ToString(this.comboBox10.Items.Count) + " Com Ports.");
        this.textBox6.AppendText("\r\n");
        if ((int) Convert.ToInt16(this.string_12) == -1 && this.comboBox10.Items.Count > 0)
        {
          this.comboBox10.SelectedIndex = 0;
          this.method_148();
        }
        else if ((int) Convert.ToInt16(this.string_12) > this.comboBox10.Items.Count - 1)
        {
          this.comboBox10.SelectedIndex = 0;
          this.method_148();
        }
        else
        {
          this.comboBox10.SelectedIndex = 0;
          this.comboBox10.SelectedIndex = (int) Convert.ToInt16(this.string_12);
        }
      }
      else
      {
        this.comboBox10.Text = new string((sbyte*) &_Module.struct19_0);
        this.label102.Text = new string((sbyte*) &_Module.struct19_0);
        this.label103.Text = new string((sbyte*) &_Module.struct19_0);
        this.label104.Text = new string((sbyte*) &_Module.struct19_0);
        this.label105.Text = new string((sbyte*) &_Module.struct19_0);
        this.checkBox9.Enabled = false;
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No comports were found during enumeration!", "JungleFlasher", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.textBox6.AppendText("Found 0 Com Ports." + "\r\n");
      }
    }

    private unsafe void method_149(object sender, EventArgs e)
    {
      if (this.method_145() != 0)
      {
        this.textBox6.AppendText("Found " + Convert.ToString(this.comboBox10.Items.Count) + " Com Ports.");
        this.textBox6.AppendText("\r\n");
        if ((int) Convert.ToInt16(this.string_12) == -1 && this.comboBox10.Items.Count > 0)
        {
          this.comboBox10.SelectedIndex = 0;
          this.method_148();
        }
        else if ((int) Convert.ToInt16(this.string_12) > this.comboBox10.Items.Count - 1)
        {
          this.comboBox10.SelectedIndex = 0;
          this.method_148();
        }
        else
        {
          this.comboBox10.SelectedIndex = 0;
          this.comboBox10.SelectedIndex = (int) Convert.ToInt16(this.string_12);
        }
      }
      else
      {
        this.comboBox10.Text = new string((sbyte*) &_Module.struct19_0);
        this.label102.Text = new string((sbyte*) &_Module.struct19_0);
        this.label103.Text = new string((sbyte*) &_Module.struct19_0);
        this.label104.Text = new string((sbyte*) &_Module.struct19_0);
        this.label105.Text = new string((sbyte*) &_Module.struct19_0);
        this.checkBox9.Enabled = false;
        this.textBox6.AppendText("Found 0 Com Ports." + "\r\n");
      }
    }

    private unsafe void checkBox9_CheckedChanged(object sender, EventArgs e)
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      if ((IntPtr) this.pVoid_0 != IntPtr.Zero)
        _Module.SetCommMask(this.pVoid_0, 64U);
      if (this.checkBox9.CheckState == CheckState.Checked)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 2)
        {
          if (this.method_146() == 1)
          {
            this.label135.Text = "X-USB: Enabled";
            this.method_123();
          }
          else
            this.textBox6.AppendText(Convert.ToString(new string((sbyte*) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324))) + " could not be opened" + "\r\n");
        }
        else
        {
          this.menuItem_25.Enabled = true;
          this.menuItem_26.Enabled = true;
          this.menuItem_27.Enabled = true;
          this.menuItem_28.Enabled = true;
          this.menuItem_30.Enabled = true;
          this.menuItem_31.Enabled = true;
          this.method_150();
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 6)
            this.method_166(17U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 8)
          {
            this.label135.Text = "xt2: Enabled";
            new Thread(new ThreadStart(this.method_165)).Start();
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) != 9)
            return;
          this.label135.Text = "CK3i: Enabled";
          this.method_135();
          this.method_136();
          this.method_138();
          new Thread(new ThreadStart(this.method_165)).Start();
        }
      }
      else
      {
        this.menuItem_25.Enabled = false;
        this.menuItem_26.Enabled = false;
        this.menuItem_27.Enabled = false;
        this.menuItem_28.Enabled = false;
        this.menuItem_30.Enabled = false;
        this.menuItem_31.Enabled = false;
        this.groupBox18.Visible = false;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 6)
          this.method_166(18U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) == 8)
        {
          this.label135.Text = "xt2: Disabled";
          new Thread(new ThreadStart(this.method_165)).Start();
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.struct122_0 + selectedIndex * 324 + 8) != 9)
          return;
        this.label135.Text = "CK3i: Disabled";
        this.method_135();
        this.method_137();
        this.method_138();
        new Thread(new ThreadStart(this.method_165)).Start();
      }
    }

    private void checkBox9_EnabledChanged(object sender, EventArgs e)
    {
      if (this.checkBox9.Enabled)
      {
        this.menuItem_25.Visible = true;
        this.menuItem_26.Visible = true;
        this.menuItem_27.Visible = true;
        this.menuItem_28.Visible = true;
        this.menuItem_29.Visible = true;
        this.menuItem_30.Visible = true;
        this.menuItem_31.Visible = true;
      }
      else
      {
        if (this.checkBox9.Enabled)
          return;
        this.menuItem_25.Visible = false;
        this.menuItem_26.Visible = false;
        this.menuItem_27.Visible = false;
        this.menuItem_28.Visible = false;
        this.menuItem_29.Visible = false;
        this.menuItem_30.Visible = false;
        this.menuItem_31.Visible = false;
      }
    }

    private void method_150()
    {
      string str = (string) null;
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
      this.groupBox18.Visible = true;
      if (this.method_135() == 1)
      {
        this.method_136();
        this.method_138();
      }
      if (subKey.GetValue("HalfTrayDelay") != null)
        str = subKey.GetValue("HalfTrayDelay").ToString();
      else if (subKey.GetValue("HalfTrayDelay") == null)
      {
        subKey.SetValue("HalfTrayDelay", (object) "250");
        str = "250";
      }
      this.menuItem_34.Text = str + "mS";
      subKey.Close();
    }

    private unsafe void method_151()
    {
      this.int_1 = 0;
      this.int_2 = 1;
      this.int_3 = 1;
      this.int_7 = 0;
      this.int_8 = 0;
      GStruct96 gstruct96;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct96 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct96&) ((IntPtr) &gstruct96 + 4), 0, 24);
      sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.string_1);
      Struct84 struct84;
      _Module.sprintf((sbyte*) &struct84, (sbyte*) &_Module.struct10_22, __arglist ((IntPtr) numPtr));
      this.pVoid_2 = _Module.CreateFileA((sbyte*) &struct84, 3221225472U, 0U, (GStruct100*) 0, 3U, 1073741952U, (void*) 0);
      if ((IntPtr) this.pVoid_2 == IntPtr(-1))
      {
        this.textBox6.AppendText(this.string_1 + ": Not Available" + "\r\n");
      }
      else
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) @gstruct96 = 28;
        _Module.GetCommState(this.pVoid_2, &gstruct96);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct96 + 4) = 9600;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &gstruct96 + 18) = (sbyte) 8;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &gstruct96 + 19) = (sbyte) 0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &gstruct96 + 20) = (sbyte) 0;
        _Module.SetCommState(this.pVoid_2, &gstruct96);
        GStruct94 gstruct94;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) @gstruct94 = 20;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct94 + 8) = 20;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct94 + 4) = 20;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct94 + 16) = 20;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct94 + 12) = 20;
        _Module.SetCommTimeouts(this.pVoid_2, &gstruct94);
        RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
        if (subKey.GetValue("CK3CP_Cont") != null)
          this.string_6 = subKey.GetValue("CK3CP_Cont").ToString();
        else if (subKey.GetValue("CK3CP_Cont") == null)
        {
          subKey.SetValue("CK3CP_Cont", (object) "0");
          this.string_6 = "0";
        }
        if (subKey.GetValue("CK3CP_Back") != null)
          this.string_7 = subKey.GetValue("CK3CP_Back").ToString();
        else if (subKey.GetValue("CK3CP_Back") == null)
        {
          subKey.SetValue("CK3CP_Back", (object) "75");
          this.string_7 = "75";
        }
        subKey.Close();
        this.method_159((uint) Convert.ToInt16(this.string_7));
        this.method_160((uint) Convert.ToInt16(this.string_6));
        this.string_2 = "Jungle Flasher";
        this.string_3 = "Ver 0.1.96 (323)";
        this.thread_0 = new Thread(new ThreadStart(this.method_161));
        this.thread_0.Start();
        this.thread_1 = new Thread(new ThreadStart(this.method_163));
        this.thread_1.Start();
      }
    }

    private unsafe void method_152()
    {
      this.method_166(18U);
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
      subKey.SetValue("CK3CP_Cont", (object) this.string_6);
      subKey.SetValue("CK3CP_Back", (object) this.string_7);
      subKey.Close();
      this.string_2 = "";
      this.string_3 = "";
      this.string_2 = " XECUTER CK3-CP ";
      _Module.Sleep(400U);
      do
        ;
      while (this.int_7 == 1);
      while (this.int_8 == 1)
        _Module.SetCommMask(this.pVoid_2, 64U);
      _Module.Sleep(400U);
      try
      {
        this.thread_0.Abort();
      }
      catch (Exception ex)
      {
        string message = ex.Message;
      }
      try
      {
        this.thread_1.Abort();
      }
      catch (Exception ex)
      {
        string message = ex.Message;
      }
      if ((IntPtr) this.pVoid_2 == IntPtr.Zero)
        return;
      try
      {
        _Module.CloseHandle(this.pVoid_2);
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message, "Closing Com Handle", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      }
    }

    private unsafe void method_153()
    {
      if ((IntPtr) this.pVoid_2 == IntPtr.Zero)
        return;
      GStruct95 gstruct95;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95 + 4), 0, 16);
      Struct100 struct100;
      _Module.memset((void*) &struct100, 32, 36U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct100 = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct100 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct100 + 18) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct100 + 19) = (sbyte) -64;
      sbyte* pSbyte_0_1 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.string_2);
      sbyte* pSbyte_0_2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.string_3);
      _Module.memcpy((void*) ((IntPtr) &struct100 + 2), (void*) pSbyte_0_1, _Module.strlen(pSbyte_0_1));
      _Module.memcpy((void*) ((IntPtr) &struct100 + 20), (void*) pSbyte_0_2, _Module.strlen(pSbyte_0_2));
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      uint num;
      _Module.WriteFile(this.pVoid_2, (void*) &struct100, 36U, &num, &gstruct95);
      _Module.GetOverlappedResult(this.pVoid_2, &gstruct95, &num, 1);
    }

    private unsafe int method_154()
    {
      Struct60 struct60;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct60 = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct60 + 1) = (sbyte) 10;
      GStruct95 gstruct95;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95 + 4), 0, 16);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      Struct101 struct101;
      uint num;
      _Module.ReadFile(this.pVoid_2, (void*) &struct101, 10U, &num, &gstruct95);
      _Module.GetOverlappedResult(this.pVoid_2, &gstruct95, &num, 1);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (((int) ^(sbyte&) @struct101 & 1) != 0)
      {
        this.method_167(3U);
        return 1;
      }
      else
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (((int) ^(sbyte&) @struct101 & 2) != 0)
        {
          this.method_167(4U);
          return 1;
        }
        else
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (((int) ^(sbyte&) @struct101 & 4) != 0)
          {
            this.method_167(1U);
            return 1;
          }
          else
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (((int) ^(sbyte&) @struct101 & 8) == 0)
              return 0;
            this.method_167(2U);
            return 1;
          }
        }
      }
    }

    private unsafe void method_155()
    {
      Struct60 struct60;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct60 = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct60 + 1) = (sbyte) 10;
      GStruct95 gstruct95;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95 + 4), 0, 16);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      uint num;
      _Module.WriteFile(this.pVoid_2, (void*) &struct60, 2U, &num, &gstruct95);
      _Module.GetOverlappedResult(this.pVoid_2, &gstruct95, &num, 1);
    }

    private unsafe void method_156()
    {
      Struct60 struct60;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct60 = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct60 + 1) = (sbyte) 5;
      GStruct95 gstruct95_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95_1 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95_1 + 4), 0, 16);
      GStruct95 gstruct95_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95_2 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95_2 + 4), 0, 16);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95_1 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95_2 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      Struct101 struct101;
      uint num1;
      _Module.ReadFile(this.pVoid_2, (void*) &struct101, 10U, &num1, &gstruct95_1);
      uint num2;
      _Module.WriteFile(this.pVoid_2, (void*) &struct60, 2U, &num2, &gstruct95_2);
      _Module.GetOverlappedResult(this.pVoid_2, &gstruct95_1, &num1, 1);
      this.string_2 = "" + new string((sbyte*) &struct101);
      this.string_3 = "";
    }

    private unsafe void method_157()
    {
      Struct60 struct60;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct60 = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct60 + 1) = (sbyte) 4;
      GStruct95 gstruct95_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95_1 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95_1 + 4), 0, 16);
      GStruct95 gstruct95_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95_2 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95_2 + 4), 0, 16);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95_1 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95_2 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      Struct101 struct101;
      uint num1;
      _Module.ReadFile(this.pVoid_2, (void*) &struct101, 10U, &num1, &gstruct95_1);
      uint num2;
      _Module.WriteFile(this.pVoid_2, (void*) &struct60, 2U, &num2, &gstruct95_2);
      _Module.GetOverlappedResult(this.pVoid_2, &gstruct95_1, &num1, 1);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.string_7 = "" + Convert.ToString((int) ^(sbyte&) @struct101);
    }

    private unsafe void method_158()
    {
      Struct60 struct60;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct60 = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct60 + 1) = (sbyte) 3;
      GStruct95 gstruct95_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95_1 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95_1 + 4), 0, 16);
      GStruct95 gstruct95_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95_2 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95_2 + 4), 0, 16);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95_1 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95_2 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      Struct101 struct101;
      uint num1;
      _Module.ReadFile(this.pVoid_2, (void*) &struct101, 10U, &num1, &gstruct95_1);
      uint num2;
      _Module.WriteFile(this.pVoid_2, (void*) &struct60, 2U, &num2, &gstruct95_2);
      _Module.GetOverlappedResult(this.pVoid_2, &gstruct95_1, &num1, 1);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.string_6 = "" + Convert.ToString((int) ^(sbyte&) @struct101);
    }

    private unsafe void method_159(uint uint_0)
    {
      Struct102 struct102;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct102 = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct102 + 1) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct102 + 2) = (sbyte) 0;
      GStruct95 gstruct95;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95 + 4), 0, 16);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct102 + 2) = (sbyte) uint_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      uint num;
      _Module.WriteFile(this.pVoid_2, (void*) &struct102, 3U, &num, &gstruct95);
      _Module.GetOverlappedResult(this.pVoid_2, &gstruct95, &num, 1);
    }

    private unsafe void method_160(uint uint_0)
    {
      Struct102 struct102;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct102 = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct102 + 1) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct102 + 2) = (sbyte) 0;
      GStruct95 gstruct95;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95 + 4), 0, 16);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct102 + 2) = (sbyte) uint_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      uint num;
      _Module.WriteFile(this.pVoid_2, (void*) &struct102, 3U, &num, &gstruct95);
      _Module.GetOverlappedResult(this.pVoid_2, &gstruct95, &num, 1);
    }

    private unsafe void method_161()
    {
      if (_Module.SetCommMask(this.pVoid_2, 1U) == 0)
      {
        this.textBox6.AppendText("SetCommMask failed with error: " + Convert.ToString((int) _Module.GetLastError()) + "\r\n");
      }
      else
      {
        GStruct95 gstruct95;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &gstruct95 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &gstruct95 + 16) == 0)
          _Module._assert((sbyte*) &_Module.struct72_5, (sbyte*) &_Module.struct96_0, 21557U);
        while (true)
        {
          uint num1;
          if (_Module.WaitCommEvent(this.pVoid_2, &num1, &gstruct95) == 0 && 997 == (int) _Module.GetLastError())
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            int num2 = (int) _Module.WaitForSingleObject((void*) ^(int&) ((IntPtr) &gstruct95 + 16), uint.MaxValue);
            uint num3;
            _Module.GetOverlappedResult(this.pVoid_2, &gstruct95, &num3, 1);
            if (((int) num1 & 64) == 0)
            {
              if (((int) num1 & 1) != 0)
              {
                while (this.method_154() == 1)
                {
                  _Module.Sleep(200U);
                  this.method_155();
                }
              }
            }
            else
              break;
          }
          _Module.Sleep(200U);
        }
        this.int_8 = 0;
      }
    }

    private void method_162()
    {
      string strA = this.string_2;
      _Module.Sleep(1500U);
      if (string.Compare(strA, this.string_2) != 0)
        return;
      this.string_2 = "Jungle Flasher";
      this.string_3 = "Ver 0.1.96 (323)";
    }

    private void method_163()
    {
      this.int_7 = 1;
      while (true)
      {
        do
        {
          _Module.Sleep(200U);
          if (string.Compare(" XECUTER CK3-CP ", this.string_2) == 0)
            goto label_4;
        }
        while (string.Compare(this.string_2, this.string_4) == 0 && string.Compare(this.string_3, this.string_5) == 0);
        this.method_153();
        this.string_4 = this.string_2;
        this.string_5 = this.string_3;
      }
label_4:
      this.method_153();
      _Module.Sleep(200U);
      this.int_7 = 0;
    }

    private unsafe void method_164(uint uint_0)
    {
      Struct102 struct102;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct102 = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct102 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct102 + 2) = (sbyte) 0;
      this.method_155();
      if ((int) uint_0 == 1)
      {
        this.label135.Text = "CK3-CP: Opening";
        Application.DoEvents();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct102 + 1) = (sbyte) 7;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct102 + 2) = (sbyte) 4;
      }
      else if ((int) uint_0 == 2)
      {
        this.label135.Text = "CK3-CP: Closing";
        Application.DoEvents();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct102 + 1) = (sbyte) 6;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct102 + 2) = (sbyte) 4;
      }
      else if ((int) uint_0 == 10)
      {
        this.label135.Text = "CK3-CP: Power Off";
        Application.DoEvents();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct102 + 1) = (sbyte) 6;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct102 + 2) = (sbyte) 3;
      }
      else
      {
        if ((int) uint_0 != 11)
          return;
        this.label135.Text = "CK3-CP: Power On";
        Application.DoEvents();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct102 + 1) = (sbyte) 7;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct102 + 2) = (sbyte) 3;
      }
      GStruct95 gstruct95;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95 + 4), 0, 16);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      uint num;
      _Module.WriteFile(this.pVoid_2, (void*) &struct102, 3U, &num, &gstruct95);
      _Module.GetOverlappedResult(this.pVoid_2, &gstruct95, &num, 1);
      new Thread(new ThreadStart(this.method_165)).Start();
    }

    private void method_165()
    {
      string text = this.label135.Text;
      _Module.Sleep(1500U);
      if (string.Compare(text, this.label135.Text) != 0)
        return;
      this.label135.Text = "";
    }

    private unsafe void method_166(uint uint_0)
    {
      Struct60 struct60;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct60 = (sbyte) -2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct60 + 1) = (sbyte) 11;
      if ((int) uint_0 == 17)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct60 + 1) = (sbyte) 11;
        this.label135.Text = "CK3-CP: Software Mode";
        Application.DoEvents();
      }
      else
      {
        if ((int) uint_0 != 18)
          return;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct60 + 1) = (sbyte) 12;
        this.label135.Text = "CK3-CP: Manual mode";
        Application.DoEvents();
      }
      GStruct95 gstruct95;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @gstruct95 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((GStruct95&) ((IntPtr) &gstruct95 + 4), 0, 16);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &gstruct95 + 16) = (int) _Module.CreateEventA((GStruct100*) 0, 1, 0, (sbyte*) 0);
      uint num;
      _Module.WriteFile(this.pVoid_2, (void*) &struct60, 2U, &num, &gstruct95);
      _Module.GetOverlappedResult(this.pVoid_2, &gstruct95, &num, 1);
      new Thread(new ThreadStart(this.method_165)).Start();
    }

    private unsafe void method_167(uint uint_0)
    {
      string str1 = (string) null;
      string str2 = "MTK-Flash";
      string str3 = "Benq-UnLock";
      string str4 = "Sammy-UnLock";
      string str5 = "LiteOn-Erase";
      string str6 = "Intro-DevID";
      string str7 = "Bad-Flash";
      string str8 = "Outro";
      string str9 = "DVD-Key32";
      string str10 = "DVD-Key";
      string str11 = "LO83info";
      string str12 = "dummy <- iX";
      string str13 = "dummy <- DB";
      string str14 = "Hitachi";
      string str15 = "Mode-B";
      string str16 = "79 Unlock";
      string str17 = "Restore";
      string str18 = "Flash-IX";
      string str19 = "CK3-CP";
      string str20 = "Backlight";
      string str21 = "Contrast";
      string str22 = "F/w Ver";
      string str23 = "Open Tray";
      string str24 = "Close Tray";
      string str25 = "Half Tray";
      string str26 = "Power On";
      string str27 = "Power Off";
      string str28 = "Power Cycle";
      if ((int) uint_0 == 1)
        this.int_1 = this.int_1 - 1;
      else if ((int) uint_0 == 2)
        this.int_1 = this.int_1 + 1;
      else if ((int) uint_0 == 3)
      {
        if (this.int_1 == 1)
          this.int_2 = this.int_2 - 1;
        else if (this.int_1 == 2)
          this.int_3 = this.int_3 - 1;
        else if (this.int_1 == 3 && this.int_2 == 4 && this.int_3 == 1)
        {
          int num = (int) Convert.ToInt16(this.string_7) - 1;
          if (num < 0)
            num = 0;
          this.string_7 = Convert.ToString(num);
          this.method_159((uint) num);
        }
        else if (this.int_1 == 3 && this.int_2 == 4 && this.int_3 == 2)
        {
          int num = Convert.ToInt32(this.string_6) - 1;
          if (num < 0)
            num = 0;
          this.string_6 = Convert.ToString(num);
          this.method_160((uint) num);
        }
      }
      else if ((int) uint_0 == 4)
      {
        if (this.int_1 == 1)
          this.int_2 = this.int_2 + 1;
        else if (this.int_1 == 2)
          this.int_3 = this.int_3 + 1;
        else if (this.int_1 == 3 && this.int_2 == 1 && this.int_3 == 1)
        {
          this.method_186();
          this.int_1 = 0;
          this.int_2 = 1;
          this.int_3 = 1;
          this.method_162();
          return;
        }
        else if (this.int_1 == 3 && this.int_2 == 1 && this.int_3 == 2)
        {
          this.method_191();
          this.int_1 = 0;
          this.int_2 = 1;
          this.int_3 = 1;
          this.method_162();
          return;
        }
        else if (this.int_1 == 3 && this.int_2 == 1 && this.int_3 == 3)
        {
          this.method_207();
          this.int_1 = 0;
          this.int_2 = 1;
          this.int_3 = 1;
          this.method_162();
          return;
        }
        else if (this.int_1 == 3 && this.int_2 == 1 && this.int_3 == 4)
        {
          this.method_202();
          this.int_1 = 0;
          this.int_2 = 1;
          this.int_3 = 1;
          this.method_162();
          return;
        }
        else if (this.int_1 == 3 && this.int_2 == 1 && this.int_3 == 5)
        {
          this.int_1 = 0;
          this.int_2 = 1;
          this.int_3 = 1;
          _Module.SendMessageA(_Module.FindWindowExA(this.pGstruct11_0, (GStruct11*) 0, (sbyte*) 0, (sbyte*) &_Module.struct16_1), 12U, 0U, (int) (void*) Marshal.StringToHGlobalAnsi("DoBadFlash"));
          this.method_162();
          return;
        }
        else if (this.int_1 == 3 && this.int_2 == 1 && this.int_3 == 6)
        {
          this.method_209();
          this.int_1 = 0;
          this.int_2 = 1;
          this.int_3 = 1;
          this.string_2 = this.label110.Text + " " + this.label106.Text;
          this.string_3 = this.label109.Text;
          this.method_162();
          return;
        }
        else if (this.int_1 == 3 && this.int_2 == 2 && this.int_3 == 1)
        {
          this.method_61();
          this.int_1 = 0;
          this.int_2 = 1;
          this.int_3 = 1;
          this.method_162();
          return;
        }
        else if (this.int_1 == 3 && this.int_2 == 2 && this.int_3 == 2)
        {
          this.method_101();
          this.int_1 = 0;
          this.int_2 = 1;
          this.int_3 = 1;
          this.method_162();
          return;
        }
        else if (this.int_1 == 3 && this.int_2 == 2 && this.int_3 == 3)
        {
          this.method_98();
          this.int_1 = 0;
          this.int_2 = 1;
          this.int_3 = 1;
          this.method_162();
          return;
        }
        else if (this.int_1 == 3 && this.int_2 == 2 && this.int_3 == 4)
        {
          this.method_102();
          this.int_1 = 0;
          this.int_2 = 1;
          this.int_3 = 1;
          this.method_162();
          return;
        }
        else if (this.int_1 == 3 && this.int_2 == 3 && this.int_3 == 1)
        {
          this.method_336();
          this.int_1 = 0;
          this.int_2 = 1;
          this.int_3 = 1;
          this.method_162();
          return;
        }
        else if (this.int_1 == 3 && this.int_2 == 3 && this.int_3 == 2)
        {
          this.method_379();
          this.int_1 = 0;
          this.int_2 = 1;
          this.int_3 = 1;
          this.method_162();
          return;
        }
        else if (this.int_1 == 3 && this.int_2 == 3 && this.int_3 == 3)
        {
          this.radioButton9.Checked = true;
          this.method_364();
          this.int_1 = 0;
          this.int_2 = 1;
          this.int_3 = 1;
          this.method_162();
          return;
        }
        else if (this.int_1 == 3 && this.int_2 == 3 && this.int_3 == 4)
        {
          this.radioButton8.Checked = true;
          this.method_364();
          this.int_1 = 0;
          this.int_2 = 1;
          this.int_3 = 1;
          this.method_162();
          return;
        }
        else if (this.int_1 == 3 && this.int_2 == 4 && this.int_3 == 1)
        {
          int num = (int) Convert.ToInt16(this.string_7) + 1;
          if (num > 100)
            num = 100;
          this.string_7 = Convert.ToString(num);
          this.method_159((uint) num);
        }
        else if (this.int_1 == 3 && this.int_2 == 4 && this.int_3 == 2)
        {
          int num = Convert.ToInt32(this.string_6) + 1;
          if (num > 100)
            num = 100;
          this.string_6 = Convert.ToString(num);
          this.method_160((uint) num);
        }
      }
      if (this.int_1 < 1)
      {
        this.int_1 = 0;
        this.int_2 = 1;
        this.int_3 = 1;
      }
      if (this.int_1 > 3)
        this.int_1 = 3;
      if (this.int_1 == 1)
      {
        if (this.int_2 < 1)
          this.int_2 = 4;
        else if (this.int_2 > 4)
          this.int_2 = 1;
        this.int_3 = 1;
      }
      if (this.int_1 == 2)
      {
        if (this.int_2 == 1)
        {
          if (this.int_3 < 1)
            this.int_3 = 6;
          else if (this.int_3 > 6)
            this.int_3 = 1;
        }
        if (this.int_2 == 2)
        {
          if (this.int_3 < 1)
            this.int_3 = 4;
          else if (this.int_3 > 4)
            this.int_3 = 1;
        }
        if (this.int_2 == 3)
        {
          if (this.int_3 < 1)
            this.int_3 = 4;
          else if (this.int_3 > 4)
            this.int_3 = 1;
        }
        if (this.int_2 == 4)
        {
          if (this.int_3 < 1)
            this.int_3 = 9;
          else if (this.int_3 > 9)
            this.int_3 = 1;
        }
      }
      if (this.int_1 == 0)
      {
        this.string_2 = "Jungle Flasher";
        this.string_3 = "Ver 0.1.96 (323)";
      }
      else if (this.int_1 == 1)
      {
        if (this.int_2 == 1)
        {
          this.string_2 = "1." + str2;
          this.string_3 = "";
        }
        else if (this.int_2 == 2)
        {
          this.string_2 = "2." + str9;
          this.string_3 = "";
        }
        else if (this.int_2 == 3)
        {
          this.string_2 = "3." + str14;
          this.string_3 = "";
        }
        else
        {
          if (this.int_2 != 4)
            return;
          this.string_2 = "4." + str19;
          this.string_3 = "";
        }
      }
      else if (this.int_1 == 2)
      {
        if (this.int_2 == 1)
        {
          if (this.int_3 == 1)
          {
            this.string_2 = "1." + str2;
            this.string_3 = " 1." + str3;
          }
          if (this.int_3 == 2)
          {
            this.string_2 = "1." + str2;
            this.string_3 = " 2." + str4;
          }
          if (this.int_3 == 3)
          {
            this.string_2 = "1." + str2;
            this.string_3 = " 3." + str5;
          }
          if (this.int_3 == 4)
          {
            this.string_2 = "1." + str2;
            this.string_3 = " 4." + str6;
          }
          if (this.int_3 == 5)
          {
            this.string_2 = "1." + str2;
            this.string_3 = " 5." + str7;
          }
          if (this.int_3 == 6)
          {
            this.string_2 = "1." + str2;
            this.string_3 = " 6." + str8;
          }
          this.tabControl5.SelectedTab = this.Benq;
        }
        else if (this.int_2 == 2)
        {
          if (this.int_3 == 1)
          {
            this.string_2 = "2." + str9;
            this.string_3 = " 1." + str10;
          }
          if (this.int_3 == 2)
          {
            this.string_2 = "2." + str9;
            this.string_3 = " 2." + str11;
          }
          if (this.int_3 == 3)
          {
            this.string_2 = "2." + str9;
            this.string_3 = " 3." + str12;
          }
          if (this.int_3 == 4)
          {
            this.string_2 = "2." + str9;
            this.string_3 = " 4." + str13;
          }
          this.tabControl5.SelectedTab = this.DVDKey32;
        }
        else if (this.int_2 == 3)
        {
          if (this.int_3 == 1)
          {
            this.string_2 = "3." + str14;
            this.string_3 = " 1." + str15;
          }
          if (this.int_3 == 2)
          {
            this.string_2 = "3." + str14;
            this.string_3 = " 2." + str16;
          }
          if (this.int_3 == 3)
          {
            this.string_2 = "3." + str14;
            this.string_3 = " 3." + str17;
          }
          if (this.int_3 == 4)
          {
            this.string_2 = "3." + str14;
            this.string_3 = " 4." + str18;
          }
          this.tabControl5.SelectedTab = this.Hitachi;
        }
        else
        {
          if (this.int_2 != 4)
            return;
          if (this.int_3 == 1)
          {
            this.string_2 = "4." + str19;
            this.string_3 = " 1." + str20;
          }
          if (this.int_3 == 2)
          {
            this.string_2 = "4." + str19;
            this.string_3 = " 2." + str21;
          }
          if (this.int_3 == 3)
          {
            this.string_2 = "4." + str19;
            this.string_3 = " 3." + str22;
          }
          if (this.int_3 == 4)
          {
            this.string_2 = "4." + str19;
            this.string_3 = " 4." + str23;
          }
          if (this.int_3 == 5)
          {
            this.string_2 = "4." + str19;
            this.string_3 = " 5." + str24;
          }
          if (this.int_3 == 6)
          {
            this.string_2 = "4." + str19;
            this.string_3 = " 6." + str25;
          }
          if (this.int_3 == 7)
          {
            this.string_2 = "4." + str19;
            this.string_3 = " 7." + str26;
          }
          if (this.int_3 == 8)
          {
            this.string_2 = "4." + str19;
            this.string_3 = " 8." + str27;
          }
          if (this.int_3 == 9)
          {
            this.string_2 = "4." + str19;
            this.string_3 = " 9." + str28;
          }
          this.tabControl5.SelectedTab = this.Firmtools;
        }
      }
      else
      {
        if (this.int_1 != 3)
          return;
        if (this.int_2 == 1)
        {
          if (this.int_3 == 1)
          {
            this.string_2 = " 1." + str3;
            this.string_3 = " ^ Quit    OK > ";
          }
          if (this.int_3 == 2)
          {
            this.string_2 = " 2." + str4;
            this.string_3 = " ^ Quit    OK > ";
          }
          if (this.int_3 == 3)
          {
            this.string_2 = " 3." + str5;
            this.string_3 = " ^ Quit    OK > ";
          }
          if (this.int_3 == 4)
          {
            this.string_2 = " 4." + str6;
            this.string_3 = " ^ Quit    OK > ";
          }
          if (this.int_3 == 5)
          {
            this.string_2 = " 5." + str7;
            this.string_3 = " ^ Quit    OK > ";
          }
          if (this.int_3 != 6)
            return;
          this.string_2 = " 6." + str8;
          this.string_3 = " ^ Quit    OK > ";
        }
        else if (this.int_2 == 2)
        {
          if (this.int_3 == 1)
          {
            this.string_2 = " 1." + str10;
            this.string_3 = " ^ Quit    OK > ";
          }
          if (this.int_3 == 2)
          {
            this.string_2 = " 2." + str11;
            this.string_3 = " ^ Quit    OK > ";
          }
          if (this.int_3 == 3)
          {
            this.string_2 = " 3." + str12;
            this.string_3 = " ^ Quit    OK > ";
          }
          if (this.int_3 != 4)
            return;
          this.string_2 = " 4." + str13;
          this.string_3 = " ^ Quit    OK > ";
        }
        else if (this.int_2 == 3)
        {
          if (this.int_3 == 1)
          {
            this.string_2 = " 1." + str15;
            this.string_3 = " ^ Quit    OK > ";
          }
          if (this.int_3 == 2)
          {
            this.string_2 = " 2." + str16;
            this.string_3 = " ^ Quit    OK > ";
          }
          if (this.int_3 == 3)
          {
            this.string_2 = " 3." + str17;
            this.string_3 = " ^ Quit    OK > ";
          }
          if (this.int_3 != 4)
            return;
          this.string_2 = " 4." + str18;
          this.string_3 = " ^ Quit    OK > ";
        }
        else
        {
          if (this.int_2 != 4)
            return;
          if (this.int_3 == 1)
          {
            this.string_2 = " 1." + str20;
            this.string_3 = (int) Convert.ToInt16(this.string_7) != 100 ? ((int) Convert.ToInt16(this.string_7) >= 10 ? "<<<    " + this.string_7 + "    >>>" : "<<<     " + this.string_7 + "    >>>") : string.Concat((object) "<<<   100    >>>");
          }
          if (this.int_3 == 2)
          {
            this.string_2 = " 2." + str21;
            this.string_3 = (int) Convert.ToInt16(this.string_6) != 100 ? ((int) Convert.ToInt16(this.string_6) >= 10 ? "<<<    " + this.string_6 + "    >>>" : "<<<     " + this.string_6 + "    >>>") : string.Concat((object) "<<<   100    >>>");
          }
          if (this.int_3 == 3)
            this.method_156();
          if (this.int_3 == 4)
          {
            this.string_2 = " 4." + str23;
            this.string_3 = string.Concat((object) "  Opening");
            this.method_164(1U);
          }
          if (this.int_3 == 5)
          {
            this.string_2 = " 5." + str24;
            this.string_3 = string.Concat((object) "  Closing");
            this.method_164(2U);
          }
          if (this.int_3 == 6)
          {
            this.string_2 = " 5." + str25;
            RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            if (subKey.GetValue("HalfTrayDelay") != null)
              str1 = subKey.GetValue("HalfTrayDelay").ToString();
            else if (subKey.GetValue("HalfTrayDelay") == null)
            {
              subKey.SetValue("HalfTrayDelay", (object) "250");
              str1 = "250";
            }
            this.string_3 = string.Concat((object) "  Opening");
            this.method_164(1U);
            _Module.Sleep((uint) Convert.ToInt32(str1));
            this.string_3 = string.Concat((object) "  Power Off");
            this.method_164(10U);
            _Module.Sleep(250U);
            this.string_3 = string.Concat((object) "  Power On");
            this.method_164(11U);
          }
          if (this.int_3 == 7)
          {
            this.string_2 = " 5." + str26;
            this.string_3 = string.Concat((object) "  Power On");
            this.method_164(11U);
          }
          if (this.int_3 == 8)
          {
            this.string_2 = " 5." + str27;
            this.string_3 = string.Concat((object) "  Power Off");
            this.method_164(10U);
          }
          if (this.int_3 != 9)
            return;
          this.string_2 = " 5." + str28;
          this.string_3 = string.Concat((object) "  Power Off");
          this.method_164(10U);
          _Module.Sleep(250U);
          this.string_3 = string.Concat((object) "  Power On");
          this.method_164(11U);
        }
      }
    }

    private void checkBox2_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.bool_1)
        return;
      this.checkBox11.CheckState = this.checkBox2.CheckState;
      Application.DoEvents();
      this.Cursor = Cursors.WaitCursor;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(ushort&) @_Module.struct38_0 == 0 && ^(int&) @_Module.gstruct10_0 != 0)
        this.method_422();
      this.method_170();
      this.Cursor = Cursors.Arrow;
    }

    private void checkBox4_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.bool_1)
        return;
      this.checkBox10.CheckState = this.checkBox4.CheckState;
      if (this.checkBox4.CheckState == CheckState.Checked)
      {
        this.checkBox10.CheckState = CheckState.Checked;
        this.checkBox2.Enabled = false;
        this.checkBox11.Enabled = false;
        this.checkBox15.Enabled = false;
        this.checkBox16.Enabled = false;
        this.radioButton14.Checked = true;
      }
      else
      {
        this.checkBox10.CheckState = CheckState.Unchecked;
        this.checkBox2.Enabled = true;
        this.checkBox11.Enabled = true;
        if (this.bool_5)
        {
          this.checkBox15.Enabled = true;
          this.checkBox16.Enabled = true;
        }
        this.radioButton18.Enabled = false;
        this.radioButton17.Checked = true;
      }
      Application.DoEvents();
      this.Cursor = Cursors.WaitCursor;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(ushort&) @_Module.struct38_0 == 0 && ^(int&) @_Module.gstruct10_0 != 0)
        this.method_422();
      this.method_170();
      if (this.checkBox4.CheckState == CheckState.Checked)
        this.method_168();
      this.Cursor = Cursors.Arrow;
    }

    private unsafe void checkBox15_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.bool_1)
        return;
      this.checkBox16.CheckState = this.checkBox15.CheckState;
      if (this.checkBox15.CheckState == CheckState.Checked)
      {
        this.checkBox16.CheckState = CheckState.Checked;
        this.checkBox2.Enabled = false;
        this.checkBox11.Enabled = false;
        this.checkBox4.Enabled = false;
        this.checkBox10.Enabled = false;
        this.string_18 = "1";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.smethod_150((void*) ^(int&) ((IntPtr) &_Module.gstruct101_0 + 4));
        _Module.smethod_148((sbyte*) &_Module.struct24_5);
        this.textBox6.AppendText("PortIO unloaded." + "\r\n");
        this.radioButton18.Enabled = true;
        this.radioButton17.Checked = true;
      }
      else
      {
        this.checkBox16.CheckState = CheckState.Unchecked;
        this.checkBox2.Enabled = true;
        this.checkBox11.Enabled = true;
        this.checkBox4.Enabled = true;
        this.checkBox10.Enabled = true;
        this.string_18 = "0";
        this.method_2();
        this.radioButton18.Enabled = false;
        this.radioButton17.Checked = true;
      }
      Application.DoEvents();
      this.Cursor = Cursors.WaitCursor;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) @_Module.gstruct10_0 != 0)
        this.method_422();
      this.method_170();
      this.Cursor = Cursors.Arrow;
    }

    private void checkBox16_CheckedChanged(object sender, EventArgs e)
    {
      this.checkBox15.CheckState = this.checkBox16.CheckState;
    }

    private void checkBox10_CheckedChanged(object sender, EventArgs e)
    {
      this.checkBox4.CheckState = this.checkBox10.CheckState;
    }

    private void checkBox11_CheckedChanged(object sender, EventArgs e)
    {
      this.checkBox2.CheckState = this.checkBox11.CheckState;
    }

    private unsafe void method_168()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 68) == 0)
      {
        this.radioButton18.Enabled = false;
        this.radioButton17.Checked = true;
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 68) != 39)
        return;
      if (this.textBox6.TextLength > 0)
      {
        this.textBox6.AppendText("Via Card with status (Code 39), Hitachi Port IO enabled!" + "\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num2 = (int) MessageBox.Show("Via Card with status (Code 39), Hitachi Port IO enabled!", "Via Port Enumeration", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      this.radioButton18.Enabled = true;
    }

    private unsafe void method_169()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 68) == 0)
      {
        this.radioButton18.Enabled = false;
        this.radioButton17.Checked = true;
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 68) != 39)
        return;
      this.radioButton18.Enabled = true;
    }

    private unsafe int method_170()
    {
      int int_43 = 0;
      for (int index = 0; index < 32; ++index)
        _Module.memset((void*) ((IntPtr) &_Module.struct38_0 + index * 72), 0, 72U);
      int num1;
      while (true)
      {
        this.comboBox1.Items.Clear();
        this.comboBox7.Items.Clear();
        this.comboBox13.Items.Clear();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 4) != 0)
          goto label_26;
label_3:
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 8) != 0)
          this.method_423();
        this.method_410();
        this.method_411();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 12) == 1)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(short&) ((IntPtr) &_Module.struct38_0 + int_43 * 72) = (short) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &_Module.struct38_0 + int_43 * 72 + 2) = (sbyte) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &_Module.struct38_0 + int_43 * 72 + 3) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &_Module.struct38_0 + int_43 * 72 + 4) = (sbyte) -96;
          _Module.memcpy((void*) ((IntPtr) &_Module.struct38_0 + int_43 * 72 + 5), (void*) &_Module.struct67_2, 13U);
          ++int_43;
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 13) == 1)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(short&) ((IntPtr) &_Module.struct38_0 + int_43 * 72) = (short) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &_Module.struct38_0 + int_43 * 72 + 2) = (sbyte) 2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &_Module.struct38_0 + int_43 * 72 + 3) = (sbyte) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &_Module.struct38_0 + int_43 * 72 + 4) = (sbyte) -96;
          _Module.memcpy((void*) ((IntPtr) &_Module.struct38_0 + int_43 * 72 + 5), (void*) &_Module.struct0_3, 17U);
          ++int_43;
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 12) == 1)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &_Module.gstruct10_0 + 14) = (sbyte) 0;
          this.checkBox16.Enabled = true;
          this.checkBox15.Enabled = true;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 13) == 1)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &_Module.gstruct10_0 + 14) = (sbyte) 1;
            this.checkBox16.Enabled = true;
            this.checkBox15.Enabled = true;
          }
          else
          {
            this.checkBox16.Enabled = false;
            this.checkBox15.Enabled = false;
          }
        }
        if (string.Compare(this.string_18, "1") == 0)
        {
          if (int_43 == 1)
          {
            this.comboBox1.Items.Add((object) "0x0000");
            this.comboBox7.Items.Add((object) "0x0000");
            this.comboBox13.Items.Add((object) "0x0000");
          }
          if (int_43 == 2)
          {
            this.comboBox1.Items.Add((object) "0x0000");
            this.comboBox7.Items.Add((object) "0x0000");
            this.comboBox13.Items.Add((object) "0x0000");
            this.comboBox1.Items.Add((object) "0x0000");
            this.comboBox7.Items.Add((object) "0x0000");
            this.comboBox13.Items.Add((object) "0x0000");
          }
          if (int_43 == 0)
          {
            this.checkBox2.Enabled = true;
            this.checkBox11.Enabled = true;
            this.checkBox4.Enabled = true;
            this.checkBox10.Enabled = true;
          }
          else
            break;
        }
        num1 = this.checkBox4.CheckState != CheckState.Checked ? _Module.smethod_85((GStruct86*) &_Module.struct38_0, int_43, (ushort) 32) : _Module.smethod_86((GStruct86*) &_Module.struct38_0, 0, (ushort) 32);
        if (num1 == 0)
        {
          if (this.checkBox4.CheckState == CheckState.Checked)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num2 = (int) MessageBox.Show("No VIA ports were found!", "JungleFlasher", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            this.checkBox4.CheckState = CheckState.Unchecked;
            this.checkBox10.CheckState = CheckState.Unchecked;
            continue;
          }
          else if (this.checkBox2.CheckState == CheckState.Unchecked)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num2 = (int) MessageBox.Show("No VIA or SATA Class ports were found!", "JungleFlasher", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            this.checkBox2.CheckState = CheckState.Checked;
            this.checkBox11.CheckState = CheckState.Checked;
            continue;
          }
          else
            goto label_29;
        }
        else
          goto label_30;
label_26:
        this.method_422();
        goto label_3;
      }
      this.comboBox1.SelectedIndex = 0;
      this.comboBox7.SelectedIndex = 0;
      this.comboBox13.SelectedIndex = 0;
      this.checkBox2.Enabled = false;
      this.checkBox11.Enabled = false;
      this.checkBox4.Enabled = false;
      this.checkBox10.Enabled = false;
      this.radioButton18.Enabled = true;
      this.radioButton17.Checked = true;
      return 1;
label_29:
      return 0;
label_30:
      for (int index = 0; index < num1; ++index)
      {
        Struct60 struct60;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct60 + 1) = (sbyte) ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + index * 72) & (int) byte.MaxValue);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct60 = (sbyte) (((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + index * 72) & 65280) >> 8);
        this.comboBox1.Items.Add((object) this.method_171((byte*) &struct60, 2U, 0U));
        this.comboBox7.Items.Add((object) this.method_171((byte*) &struct60, 2U, 0U));
        this.comboBox13.Items.Add((object) this.method_171((byte*) &struct60, 2U, 0U));
        this.comboBox1.SelectedIndex = 0;
        this.comboBox7.SelectedIndex = 0;
        this.comboBox13.SelectedIndex = 0;
      }
      return num1;
    }

    private unsafe string method_171(byte* pByte_0, uint uint_0, uint uint_1)
    {
      string str1 = (string) null;
      for (uint index = 0U; index < uint_0; ++index)
      {
        Struct62 struct62;
        _Module.sprintf((sbyte*) &struct62, (sbyte*) &_Module.struct35_121, __arglist ((int) pByte_0[(int) index]));
        string str2 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct62);
        str1 = str1 + str2;
      }
      return new string((sbyte*) &_Module.struct18_10) + str1;
    }

    private unsafe int method_172()
    {
      string str1 = (string) null;
      string str2 = (string) null;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (uint) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.Cursor = Cursors.WaitCursor;
      _Module.Sleep(100U);
      uint num3 = 0U;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 3) == 1)
        this.method_175();
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 1000U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 18), (byte) num3);
      _Module.Sleep(1U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 14), (byte) num2);
      _Module.Sleep(500U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num4 = (uint) (byte) _Module.smethod_1(^(ushort&) ((IntPtr) &gstruct3 + 18));
      if ((int) num4 == 112 | (int) num4 == 114 | (int) num4 == 115)
      {
        this.label110.Text = "Drive in Vendor Mode!";
        this.label109.Text = "";
        this.label106.Text = "";
        this.label92.Text = "";
        this.label72.Text = "Drive in Vendor Mode!";
        this.label68.Text = "";
        this.label61.Text = "";
        this.label58.Text = "";
        this.label100.Text = "Drive in Vendor Mode!";
        this.label99.Text = "";
        this.label98.Text = "";
        this.label97.Text = "";
        if (this.checkBox5.CheckState == CheckState.Checked)
          this.method_205();
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        if ((int) ushort_0 == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 4), (byte) 3);
          _Module.Sleep(1U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 6), (byte) 1);
          _Module.Sleep(1U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 18), (byte) 239);
          _Module.Sleep(50U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          uint num5 = (uint) (byte) _Module.smethod_1(^(ushort&) ((IntPtr) &gstruct3 + 18));
        }
        this.toolTip_0.SetToolTip((Control) this.button42, "Lock/UnLock Slim Lite-On Spi ");
        this.button42.Enabled = false;
        this.button42.Text = "";
        if (this.method_174() == 1)
        {
          this.Cursor = Cursors.Arrow;
          return 0;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          uint num5 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
          Struct52 struct52;
          _Module.memset((void*) &struct52, 0, 12U);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) @struct52 = (sbyte) 18;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 96;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -64;
          Struct85 struct85;
          uint num6;
          if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num5, (ushort) 512, (void*) &struct85, &num6, 96U, (byte) 1, &gstruct3) != 0)
          {
            this.label110.Text = "No Drive Detected!";
            this.label109.Text = "";
            this.label106.Text = "";
            this.label92.Text = "";
            this.label72.Text = "No Drive Detected!";
            this.label68.Text = "";
            this.label61.Text = "";
            this.label58.Text = "";
            this.label100.Text = "No Drive Detected!";
            this.label99.Text = "";
            this.label98.Text = "";
            this.label97.Text = "";
            this.Cursor = Cursors.Arrow;
            return 0;
          }
          else
          {
            this.label110.Text = "";
            this.label72.Text = "";
            this.label110.Text = this.method_176((byte*) ((IntPtr) &struct85 + 8), 8U);
            this.label72.Text = this.label110.Text;
            this.label100.Text = this.label110.Text;
            this.label109.Text = "";
            this.label68.Text = "";
            this.label109.Text = this.method_176((byte*) ((IntPtr) &struct85 + 16), 16U);
            this.label68.Text = this.label109.Text;
            this.label99.Text = this.label109.Text;
            this.label106.Text = "";
            this.label61.Text = "";
            this.label106.Text = this.method_176((byte*) ((IntPtr) &struct85 + 32), 4U);
            this.label61.Text = this.label106.Text;
            this.label98.Text = this.label106.Text;
            this.label92.Text = new string((sbyte*) &_Module.struct19_0);
            this.label58.Text = new string((sbyte*) &_Module.struct19_0);
            this.label92.Text = this.method_176((byte*) ((IntPtr) &struct85 + 36), 20U);
            this.label58.Text = this.label92.Text;
            this.label97.Text = this.label92.Text;
            Application.DoEvents();
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) ((IntPtr) &struct85 + 8) == 0 | (int) ^(byte&) ((IntPtr) &struct85 + 8) == (int) byte.MaxValue)
            {
              this.label110.Text = "No Drive Detected!";
              this.label109.Text = "";
              this.label106.Text = "";
              this.label92.Text = "";
              this.label72.Text = "No Drive Detected!";
              this.label68.Text = "";
              this.label61.Text = "";
              this.label58.Text = "";
              this.label100.Text = "No Drive Detected!";
              this.label99.Text = "";
              this.label98.Text = "";
              this.label97.Text = "";
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) ((IntPtr) &struct85 + 8) == (int) ^(byte&) ((IntPtr) &struct85 + 10) | (int) ^(byte&) ((IntPtr) &struct85 + 8) == (int) ^(byte&) ((IntPtr) &struct85 + 12) | (int) ^(byte&) ((IntPtr) &struct85 + 8) == (int) ^(byte&) ((IntPtr) &struct85 + 14) | (int) ^(byte&) ((IntPtr) &struct85 + 8) == (int) ^(byte&) ((IntPtr) &struct85 + 16))
            {
              this.label110.Text = "No Drive Detected!";
              this.label109.Text = "";
              this.label106.Text = "";
              this.label92.Text = "";
              this.label72.Text = "No Drive Detected!";
              this.label68.Text = "";
              this.label61.Text = "";
              this.label58.Text = "";
              this.label100.Text = "No Drive Detected!";
              this.label99.Text = "";
              this.label98.Text = "";
              this.label97.Text = "";
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) ((IntPtr) &struct85 + 32) == 48 & (int) ^(byte&) ((IntPtr) &struct85 + 33) == 48)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 53)
              {
                this.radioButton4.Checked = true;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 55)
                {
                  this.radioButton5.Checked = true;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((((int) ^(byte&) ((IntPtr) &struct85 + 34) == 52 ? 1 : 0) & ((int) ^(byte&) ((IntPtr) &struct85 + 35) != 48 ? 1 : 0)) != 0)
                  {
                    this.radioButton3.Checked = true;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 51 & (int) ^(byte&) ((IntPtr) &struct85 + 35) == 54)
                      this.radioButton2.Checked = true;
                    else
                      this.radioButton1.Checked = true;
                  }
                }
              }
            }
            this.pictureBox5.Visible = false;
            this.pictureBox7.Visible = true;
            this.pictureBox2.Visible = false;
            this.pictureBox6.Visible = true;
            this.menuItem_21.Enabled = false;
            this.menuItem_22.Enabled = false;
            this.menuItem_23.Enabled = false;
            this.menuItem_24.Enabled = false;
            this.toolTip_0.SetToolTip((Control) this.pictureBox5, (string) null);
            this.toolTip_0.SetToolTip((Control) this.pictureBox2, (string) null);
            this.label133.Text = "Not Found";
            this.label131.Text = "Not Found";
            this.string_14 = "";
            this.string_15 = "";
            this.string_16 = "";
            this.string_17 = "";
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) ((IntPtr) &struct85 + 24) != 68 && (int) ^(byte&) ((IntPtr) &struct85 + 25) != 76 && ((int) ^(byte&) ((IntPtr) &struct85 + 26) != 49 && (int) ^(byte&) ((IntPtr) &struct85 + 27) != 48))
              this.method_178();
            string name;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) ((IntPtr) &struct85 + 42) == 68 && (int) ^(byte&) ((IntPtr) &struct85 + 43) == 54 && ((int) ^(byte&) ((IntPtr) &struct85 + 46) == 67 && (int) ^(byte&) ((IntPtr) &struct85 + 47) == 71))
            {
              name = this.method_176((byte*) ((IntPtr) &struct85 + 42), 17U);
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(byte&) ((IntPtr) &struct85 + 32) == 57 && (int) ^(byte&) ((IntPtr) &struct85 + 33) == 53 && ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 48 && (int) ^(byte&) ((IntPtr) &struct85 + 35) == 52) || (int) ^(byte&) ((IntPtr) &struct85 + 32) == 48 && (int) ^(byte&) ((IntPtr) &struct85 + 33) == 50 && ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 50 && (int) ^(byte&) ((IntPtr) &struct85 + 35) == 53) || ((int) ^(byte&) ((IntPtr) &struct85 + 32) == 48 && (int) ^(byte&) ((IntPtr) &struct85 + 33) == 50 && ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 55 && (int) ^(byte&) ((IntPtr) &struct85 + 35) == 50) || (int) ^(byte&) ((IntPtr) &struct85 + 32) == 48 && (int) ^(byte&) ((IntPtr) &struct85 + 33) == 52 && ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 48 && (int) ^(byte&) ((IntPtr) &struct85 + 35) == 49)) || ((int) ^(byte&) ((IntPtr) &struct85 + 32) == 49 && (int) ^(byte&) ((IntPtr) &struct85 + 33) == 48 && ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 55 && (int) ^(byte&) ((IntPtr) &struct85 + 35) == 49) || (int) ^(byte&) ((IntPtr) &struct85 + 32) == 49 && (int) ^(byte&) ((IntPtr) &struct85 + 33) == 49 && ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 55 && (int) ^(byte&) ((IntPtr) &struct85 + 35) == 53) || (int) ^(byte&) ((IntPtr) &struct85 + 32) == 49 && (int) ^(byte&) ((IntPtr) &struct85 + 33) == 53 && ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 51 && (int) ^(byte&) ((IntPtr) &struct85 + 35) == 50)))
              {
                _Module.memset((void*) &struct52, 0, 12U);
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(sbyte&) @struct52 = (sbyte) 18;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 116;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -64;
                if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num5, (ushort) 512, (void*) &struct85, &num6, 116U, (byte) 1, &gstruct3) != 0)
                {
                  this.Cursor = Cursors.Arrow;
                  return 0;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) ^(byte&) ((IntPtr) &struct85 + 96) == (int) byte.MaxValue && (int) ^(byte&) ((IntPtr) &struct85 + 97) == (int) byte.MaxValue)
                    return 0;
                  name = this.method_176((byte*) ((IntPtr) &struct85 + 96), 17U);
                }
              }
              else
              {
                this.Cursor = Cursors.Arrow;
                return 1;
              }
            }
            RegistryKey subKey1 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\SerList");
            if (subKey1.GetValue(name) != null)
            {
              string str3 = subKey1.GetValue(name).ToString();
              subKey1.Close();
              RegistryKey subKey2 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + str3);
              if (subKey2.GetValue("Key") != null)
              {
                str1 = subKey2.GetValue("Key").ToString();
                this.string_14 = str1;
              }
              if (subKey2.GetValue("JobName") != null)
                str2 = subKey2.GetValue("JobName").ToString();
              string str4 = subKey2.GetValue("WorkingDir") == null ? "" : subKey2.GetValue("WorkingDir").ToString();
              string strA = subKey2.GetValue("LastFile") == null ? "" : subKey2.GetValue("LastFile").ToString();
              int startIndex = 0;
              Struct28 struct28;
              while (startIndex < 32)
              {
                sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(str1.Substring(startIndex, 2));
                this.method_10((void*) &num6, pSbyte_0, 2);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(sbyte&) ((IntPtr) &struct28 + startIndex / 2) = (sbyte) num6;
                startIndex += 2;
              }
              if (this.method_107((byte*) &struct28) != 1)
                return 1;
              this.toolTip_0.SetToolTip((Control) this.pictureBox5, "Drive Barcode found in KeyDB (" + (object) str3 + " - " + str2 + (string) __arglist (")", Environment.NewLine, "Barcode is: ", name, Environment.NewLine, "Key is: ", str1));
              this.toolTip_0.SetToolTip((Control) this.pictureBox2, "Drive Barcode found in KeyDB (" + (object) str3 + " - " + str2 + (string) __arglist (")", Environment.NewLine, "Barcode is: ", name, Environment.NewLine, "Key is: ", str1));
              this.pictureBox5.Visible = true;
              this.pictureBox7.Visible = false;
              this.pictureBox2.Visible = true;
              this.pictureBox6.Visible = false;
              if (string.Compare(strA, "") != 0)
                this.menuItem_21.Enabled = true;
              this.menuItem_22.Enabled = true;
              this.menuItem_23.Enabled = true;
              this.menuItem_24.Enabled = true;
              this.label133.Text = "Verified";
              this.label131.Text = "Verified";
              this.string_14 = str1;
              this.string_15 = str3;
              this.string_16 = strA;
              this.string_17 = str4;
              subKey2.Close();
              this.Cursor = Cursors.Arrow;
              if (this.bool_1)
                this.textBox6.AppendText("\r\n" + (object) "Key found in KeyDB at record (" + str3 + " - " + (string) __arglist (str2, ")", "\r\n", "Key is: ", str1, "\r\n", "Key has been tested and verified, thanks C4eva ! ", "\r\n"));
              return 2;
            }
            else
            {
              this.pictureBox5.Visible = false;
              this.pictureBox7.Visible = true;
              this.pictureBox2.Visible = false;
              this.pictureBox6.Visible = true;
              this.menuItem_21.Enabled = false;
              this.menuItem_22.Enabled = false;
              this.menuItem_23.Enabled = false;
              this.menuItem_24.Enabled = false;
              this.toolTip_0.SetToolTip((Control) this.pictureBox5, (string) null);
              this.toolTip_0.SetToolTip((Control) this.pictureBox2, (string) null);
              this.label133.Text = "Not Found";
              this.label131.Text = "Not Found";
              this.Cursor = Cursors.Arrow;
              subKey1.Close();
              return 1;
            }
          }
        }
      }
    }

    private unsafe int method_173()
    {
      string str1 = (string) null;
      string str2 = (string) null;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (uint) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.Cursor = Cursors.WaitCursor;
      _Module.Sleep(100U);
      uint num3 = 0U;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 3) == 1)
        this.method_175();
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 1000U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 18), (byte) num3);
      _Module.Sleep(1U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 14), (byte) num2);
      _Module.Sleep(500U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num4 = (uint) (byte) _Module.smethod_1(^(ushort&) ((IntPtr) &gstruct3 + 18));
      if ((int) num4 == 112 | (int) num4 == 114 | (int) num4 == 115)
      {
        this.label110.Text = "Drive in Vendor Mode!";
        this.label109.Text = "";
        this.label106.Text = "";
        this.label92.Text = "";
        this.label72.Text = "Drive in Vendor Mode!";
        this.label68.Text = "";
        this.label61.Text = "";
        this.label58.Text = "";
        this.label100.Text = "Drive in Vendor Mode!";
        this.label99.Text = "";
        this.label98.Text = "";
        this.label97.Text = "";
        if (this.checkBox5.CheckState == CheckState.Checked)
          this.method_205();
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        this.toolTip_0.SetToolTip((Control) this.button42, "Lock/UnLock Slim Lite-On Spi ");
        this.button42.Enabled = false;
        this.button42.Text = "";
        if (this.method_174() == 1)
        {
          this.Cursor = Cursors.Arrow;
          return 0;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          uint num5 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
          Struct52 struct52;
          _Module.memset((void*) &struct52, 0, 12U);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) @struct52 = (sbyte) 18;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 96;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -64;
          Struct85 struct85;
          uint num6;
          if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num5, (ushort) 512, (void*) &struct85, &num6, 96U, (byte) 1, &gstruct3) != 0)
          {
            this.label110.Text = "No Drive Detected!";
            this.label109.Text = "";
            this.label106.Text = "";
            this.label92.Text = "";
            this.label72.Text = "No Drive Detected!";
            this.label68.Text = "";
            this.label61.Text = "";
            this.label58.Text = "";
            this.label100.Text = "No Drive Detected!";
            this.label99.Text = "";
            this.label98.Text = "";
            this.label97.Text = "";
            this.Cursor = Cursors.Arrow;
            return 0;
          }
          else
          {
            this.label110.Text = "";
            this.label72.Text = "";
            this.label110.Text = this.method_176((byte*) ((IntPtr) &struct85 + 8), 8U);
            this.label72.Text = this.label110.Text;
            this.label100.Text = this.label110.Text;
            this.label109.Text = "";
            this.label68.Text = "";
            this.label109.Text = this.method_176((byte*) ((IntPtr) &struct85 + 16), 16U);
            this.label68.Text = this.label109.Text;
            this.label99.Text = this.label109.Text;
            this.label106.Text = "";
            this.label61.Text = "";
            this.label106.Text = this.method_176((byte*) ((IntPtr) &struct85 + 32), 4U);
            this.label61.Text = this.label106.Text;
            this.label98.Text = this.label106.Text;
            this.label92.Text = new string((sbyte*) &_Module.struct19_0);
            this.label58.Text = new string((sbyte*) &_Module.struct19_0);
            this.label92.Text = this.method_176((byte*) ((IntPtr) &struct85 + 36), 20U);
            this.label58.Text = this.label92.Text;
            this.label97.Text = this.label92.Text;
            Application.DoEvents();
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) ((IntPtr) &struct85 + 8) == 0 | (int) ^(byte&) ((IntPtr) &struct85 + 8) == (int) byte.MaxValue)
            {
              this.label110.Text = "No Drive Detected!";
              this.label109.Text = "";
              this.label106.Text = "";
              this.label92.Text = "";
              this.label72.Text = "No Drive Detected!";
              this.label68.Text = "";
              this.label61.Text = "";
              this.label58.Text = "";
              this.label100.Text = "No Drive Detected!";
              this.label99.Text = "";
              this.label98.Text = "";
              this.label97.Text = "";
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) ((IntPtr) &struct85 + 8) == (int) ^(byte&) ((IntPtr) &struct85 + 10) | (int) ^(byte&) ((IntPtr) &struct85 + 8) == (int) ^(byte&) ((IntPtr) &struct85 + 12) | (int) ^(byte&) ((IntPtr) &struct85 + 8) == (int) ^(byte&) ((IntPtr) &struct85 + 14) | (int) ^(byte&) ((IntPtr) &struct85 + 8) == (int) ^(byte&) ((IntPtr) &struct85 + 16))
            {
              this.label110.Text = "No Drive Detected!";
              this.label109.Text = "";
              this.label106.Text = "";
              this.label92.Text = "";
              this.label72.Text = "No Drive Detected!";
              this.label68.Text = "";
              this.label61.Text = "";
              this.label58.Text = "";
              this.label100.Text = "No Drive Detected!";
              this.label99.Text = "";
              this.label98.Text = "";
              this.label97.Text = "";
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) ((IntPtr) &struct85 + 32) == 48 & (int) ^(byte&) ((IntPtr) &struct85 + 33) == 48)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 53)
              {
                this.radioButton4.Checked = true;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 55)
                {
                  this.radioButton5.Checked = true;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((((int) ^(byte&) ((IntPtr) &struct85 + 34) == 52 ? 1 : 0) & ((int) ^(byte&) ((IntPtr) &struct85 + 35) != 48 ? 1 : 0)) != 0)
                  {
                    this.radioButton3.Checked = true;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 51 & (int) ^(byte&) ((IntPtr) &struct85 + 35) == 54)
                      this.radioButton2.Checked = true;
                    else
                      this.radioButton1.Checked = true;
                  }
                }
              }
            }
            this.pictureBox5.Visible = false;
            this.pictureBox7.Visible = true;
            this.pictureBox2.Visible = false;
            this.pictureBox6.Visible = true;
            this.menuItem_21.Enabled = false;
            this.menuItem_22.Enabled = false;
            this.menuItem_23.Enabled = false;
            this.menuItem_24.Enabled = false;
            this.toolTip_0.SetToolTip((Control) this.pictureBox5, (string) null);
            this.toolTip_0.SetToolTip((Control) this.pictureBox2, (string) null);
            this.label133.Text = "Not Found";
            this.label131.Text = "Not Found";
            this.string_14 = "";
            this.string_15 = "";
            this.string_16 = "";
            this.string_17 = "";
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 3) == 1)
            {
              this.Cursor = Cursors.Arrow;
              return 1;
            }
            else
            {
              this.method_178();
              string str3;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(byte&) ((IntPtr) &struct85 + 42) == 68 && (int) ^(byte&) ((IntPtr) &struct85 + 43) == 54 && ((int) ^(byte&) ((IntPtr) &struct85 + 46) == 67 && (int) ^(byte&) ((IntPtr) &struct85 + 47) == 71))
              {
                str3 = this.method_176((byte*) ((IntPtr) &struct85 + 42), 17U);
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(byte&) ((IntPtr) &struct85 + 32) == 57 && (int) ^(byte&) ((IntPtr) &struct85 + 33) == 53 && ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 48 && (int) ^(byte&) ((IntPtr) &struct85 + 35) == 52) || (int) ^(byte&) ((IntPtr) &struct85 + 32) == 48 && (int) ^(byte&) ((IntPtr) &struct85 + 33) == 50 && ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 50 && (int) ^(byte&) ((IntPtr) &struct85 + 35) == 53) || ((int) ^(byte&) ((IntPtr) &struct85 + 32) == 48 && (int) ^(byte&) ((IntPtr) &struct85 + 33) == 50 && ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 55 && (int) ^(byte&) ((IntPtr) &struct85 + 35) == 50) || (int) ^(byte&) ((IntPtr) &struct85 + 32) == 48 && (int) ^(byte&) ((IntPtr) &struct85 + 33) == 52 && ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 48 && (int) ^(byte&) ((IntPtr) &struct85 + 35) == 49)) || (int) ^(byte&) ((IntPtr) &struct85 + 32) == 49 && (int) ^(byte&) ((IntPtr) &struct85 + 33) == 48 && ((int) ^(byte&) ((IntPtr) &struct85 + 34) == 55 && (int) ^(byte&) ((IntPtr) &struct85 + 35) == 49))
                {
                  _Module.memset((void*) &struct52, 0, 12U);
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  ^(sbyte&) @struct52 = (sbyte) 18;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 116;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -64;
                  if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num5, (ushort) 512, (void*) &struct85, &num6, 116U, (byte) 1, &gstruct3) != 0)
                  {
                    this.Cursor = Cursors.Arrow;
                    return 0;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(byte&) ((IntPtr) &struct85 + 96) == (int) byte.MaxValue && (int) ^(byte&) ((IntPtr) &struct85 + 97) == (int) byte.MaxValue)
                      return 0;
                    str3 = this.method_176((byte*) ((IntPtr) &struct85 + 96), 17U);
                  }
                }
                else
                {
                  this.Cursor = Cursors.Arrow;
                  return 1;
                }
              }
              RegistryKey subKey1 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\SerList");
              string str4;
              if (subKey1.GetValue(str3) != null)
              {
                string str5 = subKey1.GetValue(str3).ToString();
                subKey1.Close();
                RegistryKey subKey2 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + str5);
                if (subKey2.GetValue("Key") != null)
                {
                  str1 = subKey2.GetValue("Key").ToString();
                  this.string_14 = str1;
                }
                if (subKey2.GetValue("JobName") != null)
                  str2 = subKey2.GetValue("JobName").ToString();
                string str6 = subKey2.GetValue("WorkingDir") == null ? "" : subKey2.GetValue("WorkingDir").ToString();
                string strA1 = subKey2.GetValue("LastFile") == null ? "" : subKey2.GetValue("LastFile").ToString();
                int startIndex1 = 0;
                Struct28 struct28;
                while (startIndex1 < 32)
                {
                  sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(str1.Substring(startIndex1, 2));
                  this.method_10((void*) &num6, pSbyte_0, 2);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  ^(sbyte&) ((IntPtr) &struct28 + startIndex1 / 2) = (sbyte) num6;
                  startIndex1 += 2;
                }
                if (this.method_107((byte*) &struct28) == 1)
                {
                  this.toolTip_0.SetToolTip((Control) this.pictureBox5, "Drive Barcode found in KeyDB (" + (object) str5 + " - " + str2 + (string) __arglist (")", Environment.NewLine, "Barcode is: ", str3, Environment.NewLine, "Key is: ", str1));
                  this.toolTip_0.SetToolTip((Control) this.pictureBox2, "Drive Barcode found in KeyDB (" + (object) str5 + " - " + str2 + (string) __arglist (")", Environment.NewLine, "Barcode is: ", str3, Environment.NewLine, "Key is: ", str1));
                  this.pictureBox5.Visible = true;
                  this.pictureBox7.Visible = false;
                  this.pictureBox2.Visible = true;
                  this.pictureBox6.Visible = false;
                  if (string.Compare(strA1, "") != 0)
                    this.menuItem_21.Enabled = true;
                  this.menuItem_22.Enabled = true;
                  this.menuItem_23.Enabled = true;
                  this.menuItem_24.Enabled = true;
                  this.label133.Text = "Verified";
                  this.label131.Text = "Verified";
                  this.string_14 = str1;
                  this.string_15 = str5;
                  this.string_16 = strA1;
                  this.string_17 = str6;
                  subKey2.Close();
                  this.Cursor = Cursors.Arrow;
                  if (this.bool_1)
                    this.textBox6.AppendText("\r\n" + (object) "Key found in KeyDB at record (" + str5 + " - " + (string) __arglist (str2, ")", "\r\n", "Key is: ", str1, "\r\n", "Key has been tested and verified, thanks C4eva ! ", "\r\n"));
                  return 2;
                }
                else
                {
                  if (string.Compare(str3, "D608CG73880800348") == 0 && this.bool_1)
                  {
                    // ISSUE: cast to a function pointer type
                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    uint num7 = (uint) MessageBox.Show("Barcode is common to all Lite-On DG-16D2S following the 13146 System update" + (object) "\n" + "Key DB entrys from before update may exist and match" + "\n" + (string) __arglist ("Click YES to manually enter and search for the Case Barcode."), "Dummy-From-KeyDB", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if ((int) num7 == 6)
                    {
                      Common_Barcode commonBarcode = new Common_Barcode();
                      if (commonBarcode.ShowDialog((IWin32Window) this) == DialogResult.OK)
                      {
                        str3 = commonBarcode.textBox3.Text.Substring(0, 17);
                        RegistryKey subKey3 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\SerList");
                        if (subKey3.GetValue(str3) != null)
                        {
                          str5 = subKey3.GetValue(str3).ToString();
                          subKey3.Close();
                        }
                        else
                        {
                          this.pictureBox5.Visible = false;
                          this.pictureBox7.Visible = true;
                          this.pictureBox2.Visible = false;
                          this.pictureBox6.Visible = true;
                          this.menuItem_21.Enabled = false;
                          this.menuItem_22.Enabled = false;
                          this.menuItem_23.Enabled = false;
                          this.menuItem_24.Enabled = false;
                          this.toolTip_0.SetToolTip((Control) this.pictureBox5, (string) null);
                          this.toolTip_0.SetToolTip((Control) this.pictureBox2, (string) null);
                          this.label133.Text = "Not Found";
                          this.label131.Text = "Not Found";
                          str4 = "";
                          this.Cursor = Cursors.Arrow;
                          subKey3.Close();
                          return 1;
                        }
                      }
                    }
                  }
                  RegistryKey subKey4 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + str5);
                  if (subKey4.GetValue("Key") != null)
                  {
                    str1 = subKey4.GetValue("Key").ToString();
                    this.string_14 = str1;
                  }
                  if (subKey4.GetValue("JobName") != null)
                    str2 = subKey4.GetValue("JobName").ToString();
                  string str7 = subKey4.GetValue("WorkingDir") == null ? "" : subKey4.GetValue("WorkingDir").ToString();
                  string strA2 = subKey4.GetValue("LastFile") == null ? "" : subKey4.GetValue("LastFile").ToString();
                  int startIndex2 = 0;
                  while (startIndex2 < 32)
                  {
                    sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(str1.Substring(startIndex2, 2));
                    this.method_10((void*) &num6, pSbyte_0, 2);
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    ^(sbyte&) ((IntPtr) &struct28 + startIndex2 / 2) = (sbyte) num6;
                    startIndex2 += 2;
                  }
                  if (this.method_107((byte*) &struct28) != 1)
                    return 1;
                  this.toolTip_0.SetToolTip((Control) this.pictureBox5, "Drive Barcode found in KeyDB (" + (object) str5 + " - " + str2 + (string) __arglist (")", Environment.NewLine, "Barcode is: ", str3, Environment.NewLine, "Key is: ", str1));
                  this.toolTip_0.SetToolTip((Control) this.pictureBox2, "Drive Barcode found in KeyDB (" + (object) str5 + " - " + str2 + (string) __arglist (")", Environment.NewLine, "Barcode is: ", str3, Environment.NewLine, "Key is: ", str1));
                  this.pictureBox5.Visible = true;
                  this.pictureBox7.Visible = false;
                  this.pictureBox2.Visible = true;
                  this.pictureBox6.Visible = false;
                  if (string.Compare(strA2, "") != 0)
                    this.menuItem_21.Enabled = true;
                  this.menuItem_22.Enabled = true;
                  this.menuItem_23.Enabled = true;
                  this.menuItem_24.Enabled = true;
                  this.label133.Text = "Verified";
                  this.label131.Text = "Verified";
                  this.string_14 = str1;
                  this.string_15 = str5;
                  this.string_16 = strA2;
                  this.string_17 = str7;
                  subKey4.Close();
                  this.Cursor = Cursors.Arrow;
                  if (this.bool_1)
                    this.textBox6.AppendText("\r\n" + (object) "Key found in KeyDB at record (" + str5 + " - " + (string) __arglist (str2, ")", "\r\n", "Key is: ", str1, "\r\n", "Key has been tested and verified, thanks C4eva ! ", "\r\n"));
                  return 2;
                }
              }
              else
              {
                this.pictureBox5.Visible = false;
                this.pictureBox7.Visible = true;
                this.pictureBox2.Visible = false;
                this.pictureBox6.Visible = true;
                this.menuItem_21.Enabled = false;
                this.menuItem_22.Enabled = false;
                this.menuItem_23.Enabled = false;
                this.menuItem_24.Enabled = false;
                this.toolTip_0.SetToolTip((Control) this.pictureBox5, (string) null);
                this.toolTip_0.SetToolTip((Control) this.pictureBox2, (string) null);
                this.label133.Text = "Not Found";
                this.label131.Text = "Not Found";
                str4 = "";
                this.Cursor = Cursors.Arrow;
                subKey1.Close();
                return 1;
              }
            }
          }
        }
      }
    }

    private unsafe int method_174()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      ushort num1 = (ushort) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 1000U);
      Struct30 struct30_1;
      uint num3;
      if (_Module.smethod_12((byte) 236, (byte) num2, (GStruct4*) 0, (GStruct4*) 0, (byte) 64, (void*) &struct30_1, &num3, 512U, 512U, (byte) 1, &gstruct3) != 0)
      {
        this.label110.Text = "No Drive Detected!";
        this.label109.Text = "";
        this.label106.Text = "";
        this.label92.Text = "";
        this.label72.Text = "No Drive Detected!";
        this.label68.Text = "";
        this.label61.Text = "";
        this.label58.Text = "";
        this.label100.Text = "No Drive Detected!";
        this.label99.Text = "";
        this.label98.Text = "";
        this.label97.Text = "";
        return 0;
      }
      else
      {
        uint num4 = 0U;
        Struct30 struct30_2;
        while (num4 < 512U)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct30_2 + (int) num4) = (sbyte) ^(byte&) ((IntPtr) &struct30_1 + ((int) num4 + 1));
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct30_2 + ((int) num4 + 1)) = (sbyte) ^(byte&) ((IntPtr) &struct30_1 + (int) num4);
          num4 += 2U;
        }
        byte* numPtr1 = (byte*) ((IntPtr) &struct30_2 + 54);
        Struct37 struct37_1;
        _Module.memset((void*) &struct37_1, 0, 40U);
        Struct37 struct37_2;
        _Module.memset((void*) &struct37_2, 0, 40U);
        Struct42 struct42;
        _Module.memset((void*) &struct42, 0, 20U);
        uint num5;
        for (num5 = 0U; num5 < 40U && (int) numPtr1[(int) num5] != 32; ++num5)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct37_1 + (int) num5) = (sbyte) numPtr1[(int) num5];
        }
        for (uint index = 0U; index < 40U - num5; ++index)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct37_2 + (int) index) = (sbyte) numPtr1[(int) index + (int) num5 + 1];
        }
        byte* numPtr2 = (byte*) ((IntPtr) &struct30_2 + 20);
        uint uint_0_1 = 0U;
        while (uint_0_1 < 20U && (int) numPtr2[(int) uint_0_1] == 32)
          ++uint_0_1;
        uint uint_0_2;
        for (uint_0_2 = 0U; uint_0_2 < 20U - uint_0_1; ++uint_0_2)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct42 + (int) uint_0_2) = (sbyte) numPtr2[(int) uint_0_2 + (int) uint_0_1];
        }
        this.label110.Text = "";
        this.label72.Text = "";
        this.label100.Text = "";
        this.label110.Text = this.method_176((byte*) &struct37_1, uint_0_1);
        this.label72.Text = this.label110.Text;
        this.label100.Text = this.label110.Text;
        this.label109.Text = "";
        this.label68.Text = "";
        this.label99.Text = "";
        this.label109.Text = this.method_176((byte*) &struct37_2, uint_0_2);
        this.label68.Text = this.label109.Text;
        this.label99.Text = this.label109.Text;
        this.label106.Text = "";
        this.label61.Text = "";
        this.label98.Text = "";
        this.label106.Text = this.method_176((byte*) ((IntPtr) &struct30_2 + 46), 8U);
        this.label61.Text = this.label106.Text;
        this.label98.Text = this.label106.Text;
        this.label92.Text = "";
        this.label58.Text = "";
        this.label97.Text = "";
        this.label92.Text = this.method_176((byte*) &struct42, 20U);
        this.label58.Text = this.label92.Text;
        this.label97.Text = this.label92.Text;
        this.method_14();
        this.method_18();
        this.method_17();
        this.checkBox6.CheckState = CheckState.Unchecked;
        return 1;
      }
    }

    private unsafe int method_175()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      ushort num1 = (ushort) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 1000U);
      return _Module.smethod_11((byte) 8, (byte) num2, (GStruct4*) 0, (GStruct4*) 0, (byte) 64, (byte) 1, &gstruct3) != 0 ? 0 : 1;
    }

    private unsafe string method_176(byte* pByte_0, uint uint_0)
    {
      string str1 = (string) null;
      for (uint index = 0U; index < uint_0; ++index)
      {
        if ((int) pByte_0[(int) index] >= 32 && (int) pByte_0[(int) index] <= 126)
        {
          Struct20 struct20;
          _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct18_0, __arglist ((int) pByte_0[(int) index]));
          string str2 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
          str1 = str1 + str2;
        }
        else
          str1 = str1 + " ";
      }
      return str1;
    }

    private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
    {
      int selectedIndex = this.comboBox1.SelectedIndex;
      if (!this.bool_1)
        return;
      if (this.bool_1)
        this.method_177();
      this.int_9 = this.comboBox1.SelectedIndex;
    }

    private void comboBox7_SelectedIndexChanged(object sender, EventArgs e)
    {
      uint num = (uint) this.comboBox7.SelectedIndex;
      this.comboBox1.SelectedIndex = (int) num;
      this.comboBox13.SelectedIndex = (int) num;
    }

    private void comboBox13_SelectedIndexChanged(object sender, EventArgs e)
    {
      uint num = (uint) this.comboBox13.SelectedIndex;
      this.comboBox1.SelectedIndex = (int) num;
      this.comboBox7.SelectedIndex = (int) num;
    }

    private unsafe void method_177()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      if ((int) num == -1)
        return;
      this.comboBox7.SelectedIndex = (int) num;
      this.comboBox13.SelectedIndex = (int) num;
      this.label118.Text = "";
      this.label119.Text = "";
      this.label120.Text = "";
      this.label121.Text = "";
      this.label122.Text = "";
      this.label133.Text = "";
      this.label131.Text = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 4) != 0)
        this.method_422();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 8) != 0)
        this.method_423();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72) == 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 3) == 0)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &_Module.gstruct10_0 + 14) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 4) != 0)
            this.method_422();
          if (this.method_420() == 1)
          {
            this.label135.Text = "X360USB PRO: Opened";
            Application.DoEvents();
            new Thread(new ThreadStart(this.method_165)).Start();
          }
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &_Module.gstruct10_0 + 14) = (sbyte) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 8) != 0)
            this.method_423();
          if (this.method_421() == 1)
          {
            this.label135.Text = "X360USB BADASS: Opened";
            Application.DoEvents();
            new Thread(new ThreadStart(this.method_165)).Start();
          }
        }
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 4) != 0)
        {
          this.method_424((byte) 1);
          this.bool_9 = true;
          this.method_422();
          this.label135.Text = "X360USB PRO: Closed";
          Application.DoEvents();
          new Thread(new ThreadStart(this.method_165)).Start();
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 8) != 0)
        {
          this.method_423();
          this.label135.Text = "X360USB BADASS: Closed";
          Application.DoEvents();
          new Thread(new ThreadStart(this.method_165)).Start();
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 2) == 1)
      {
        this.label117.Text = new string((sbyte*) &_Module.struct35_126);
        this.label83.Text = new string((sbyte*) &_Module.struct35_126);
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 2) == 2)
        {
          this.label117.Text = new string((sbyte*) &_Module.struct35_127);
          this.label83.Text = new string((sbyte*) &_Module.struct35_127);
        }
        else
        {
          this.label117.Text = new string((sbyte*) &_Module.struct35_128);
          this.label83.Text = new string((sbyte*) &_Module.struct35_128);
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 3) != 0)
      {
        this.label116.Text = new string((sbyte*) &_Module.struct7_5);
        this.label81.Text = new string((sbyte*) &_Module.struct7_5);
      }
      else
      {
        this.label116.Text = new string((sbyte*) &_Module.struct7_6);
        this.label81.Text = new string((sbyte*) &_Module.struct7_6);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4) == 160)
      {
        this.label115.Text = new string((sbyte*) &_Module.struct10_24);
        this.label76.Text = new string((sbyte*) &_Module.struct10_24);
      }
      else
      {
        this.label115.Text = new string((sbyte*) &_Module.struct10_25);
        this.label76.Text = new string((sbyte*) &_Module.struct10_25);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72) == 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 3) == 0)
        {
          this.label113.Text = "XECUTER X360USB PRO" + (object) Environment.NewLine + "( Ver " + this.string_23 + (string) __arglist (" )");
          this.label75.Text = "XECUTER X360USB PRO" + (object) Environment.NewLine + "( Ver " + this.string_23 + (string) __arglist (" )");
        }
        else
        {
          this.label113.Text = "XECUTER X360USB BAD ASS" + (object) Environment.NewLine + "( Ver " + this.string_24 + (string) __arglist (" )");
          this.label75.Text = "XECUTER X360USB BAD ASS" + (object) Environment.NewLine + "( Ver " + this.string_24 + (string) __arglist (" )");
        }
      }
      else
      {
        this.label113.Text = new string((sbyte*) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 5));
        this.label75.Text = new string((sbyte*) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 5));
      }
      Struct60 struct60;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct60 + 1) = (sbyte) ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72) & (int) byte.MaxValue);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct60 = (sbyte) (((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72) & 65280) >> 8);
      this.label123.Text = this.method_171((byte*) &struct60, 2U, 0U);
      this.label84.Text = this.method_171((byte*) &struct60, 2U, 0U);
      this.method_15();
      this.method_19();
      this.method_16();
      this.pictureBox2.Visible = false;
      this.pictureBox5.Visible = false;
      this.menuItem_21.Enabled = false;
      this.menuItem_22.Enabled = false;
      this.menuItem_23.Enabled = false;
      this.menuItem_24.Enabled = false;
      Application.DoEvents();
      this.method_172();
    }

    private void button9_Click(object sender, EventArgs e)
    {
      this.method_177();
    }

    private void button10_Click(object sender, EventArgs e)
    {
      this.method_177();
    }

    private unsafe void button25_Click(object sender, EventArgs e)
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      uint num2 = (uint) this.comboBox1.Items.Count;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num3 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.method_177();
      if (!this.radioButton17.Checked || (int) num3 != 0 || (int) num2 == 0)
        return;
      this.method_424((byte) 1);
      this.bool_9 = true;
      _Module.Sleep(10U);
      this.method_424((byte) 5);
      _Module.Sleep(25U);
      this.method_424((byte) 7);
    }

    private void method_178()
    {
      if (this.method_179() == 1)
      {
        if (!this.bool_1)
          return;
        this.textBox6.AppendText("Drive is Hitachi.. " + "\r\n");
      }
      else if (this.method_180() == 1)
      {
        if (!this.bool_1)
          return;
        this.textBox6.AppendText("Drive is Hitachi.. 78/79 " + "\r\n");
      }
      else if (this.method_181() == 1)
      {
        if (this.bool_1)
          this.textBox6.AppendText("Drive is Samsung.. " + "\r\n");
        this.radioButton20.Checked = true;
      }
      else if (this.method_182() == 1)
      {
        if (this.bool_1)
          this.textBox6.AppendText("Drive is Benq.. " + "\r\n");
        this.radioButton20.Checked = true;
      }
      else if (this.method_184() == 1)
      {
        if (this.bool_1)
          this.textBox6.AppendText("Drive is Slim Lite-On.. " + "\r\n");
        if (!this.radioButton21.Checked)
          return;
        this.radioButton19.Checked = true;
      }
      else if (this.method_185() == 1)
      {
        if (this.bool_1)
          this.textBox6.AppendText("Drive is Slim Lite-On.. " + "\r\n");
        if (!this.radioButton21.Visible)
          return;
        this.radioButton21.Checked = true;
      }
      else if (this.method_183() == 1)
      {
        if (this.bool_1)
          this.textBox6.AppendText("Drive is Lite-On.. " + "\r\n");
        this.radioButton20.Checked = true;
      }
      else
        this.textBox6.AppendText("Drive type Un-determined" + "\r\n");
    }

    private unsafe int method_179()
    {
      string str1 = (string) null;
      string str2 = (string) null;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 500U);
      Struct28 struct28;
      _Module.memset((void*) &struct28, 0, 16U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) -111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 16;
      uint num3;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct28, &num3, 16U, (byte) 1, &gstruct3) != 0)
        return 0;
      this.method_6((byte*) &struct28, 16U, 0U);
      if (this.method_107((byte*) &struct28) == 1)
      {
        this.method_6((byte*) &struct28, 16U, 0U);
        if (this.bool_1)
          this.textBox6.AppendText("Drive key " + this.string_0 + "\r\n");
        RegistryKey subKey1 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\KeyList");
        if (subKey1.GetValue(this.string_0) != null)
        {
          string str3 = subKey1.GetValue(this.string_0).ToString();
          subKey1.Close();
          RegistryKey subKey2 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + str3);
          if (subKey2.GetValue("JobName") != null)
            str2 = subKey2.GetValue("JobName").ToString();
          string str4 = subKey2.GetValue("WorkingDir") == null ? "" : subKey2.GetValue("WorkingDir").ToString();
          string strA = subKey2.GetValue("LastFile") == null ? "" : subKey2.GetValue("LastFile").ToString();
          if (subKey2.GetValue("Index") != null)
            str3 = subKey2.GetValue("Index").ToString();
          this.toolTip_0.SetToolTip((Control) this.pictureBox5, "Drive Key found in KeyDB (" + (object) str3 + " - " + str2 + (string) __arglist (")", Environment.NewLine, "Key is: ", this.string_0));
          this.toolTip_0.SetToolTip((Control) this.pictureBox2, "Drive Key found in KeyDB (" + (object) str3 + " - " + str2 + (string) __arglist (")", Environment.NewLine, "Key is: ", this.string_0));
          this.pictureBox5.Visible = true;
          this.pictureBox7.Visible = false;
          this.pictureBox2.Visible = true;
          this.pictureBox6.Visible = false;
          if (string.Compare(strA, "") != 0)
            this.menuItem_21.Enabled = true;
          this.menuItem_22.Enabled = true;
          this.menuItem_23.Enabled = true;
          this.menuItem_24.Enabled = true;
          this.string_14 = str1;
          this.string_15 = str3;
          this.string_16 = strA;
          this.string_17 = str4;
          this.label133.Text = "Verified";
          this.label131.Text = "Verified";
          subKey2.Close();
          this.Cursor = Cursors.Arrow;
          if (this.bool_1)
            this.textBox6.AppendText("\r\n" + (object) "Key found in KeyDB at record (" + str3 + " - " + (string) __arglist (str2, ")", "\r\n", "Key is: ", this.string_0, "\r\n", "Key has been tested and verified, thanks C4eva ! ", "\r\n"));
        }
        else
        {
          this.toolTip_0.SetToolTip((Control) this.pictureBox5, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + this.string_0);
          this.toolTip_0.SetToolTip((Control) this.pictureBox2, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + this.string_0);
          this.pictureBox5.Visible = true;
          this.pictureBox7.Visible = false;
          this.pictureBox2.Visible = true;
          this.pictureBox6.Visible = false;
          this.string_14 = str1;
          this.label133.Text = "Verified";
          this.label131.Text = "Verified";
          subKey1.Close();
          this.Cursor = Cursors.Arrow;
          if (this.bool_1)
            this.textBox6.AppendText("\r\n" + (object) "Key NOT in KeyDB " + "\r\n" + "Key is: " + (string) __arglist (this.string_0, "\r\n", "Key has been tested and verified, thanks C4eva ! ", "\r\n"));
          return 1;
        }
      }
      return 1;
    }

    private unsafe int method_180()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 250U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) -112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) -48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 1;
      return _Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0 ? 0 : 1;
    }

    private unsafe int method_181()
    {
      string str1 = (string) null;
      string str2 = (string) null;
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) -1;
      uint uint_2 = 12U;
      uint uint_3 = 16U;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 250U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      Struct28 struct28_2;
      _Module.memset((void*) &struct28_2, 0, 16U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) 7;
      uint num3;
      if (_Module.smethod_16((byte*) &struct52, uint_2, (byte) num2, (ushort) 512, (void*) &struct28_2, &num3, uint_3, (byte) 1, &gstruct3) != 0)
        return 0;
      if (this.method_107((byte*) &struct28_2) == 1)
      {
        this.method_6((byte*) &struct28_2, 16U, 0U);
        RegistryKey subKey1 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\KeyList");
        if (subKey1.GetValue(this.string_0) != null)
        {
          string str3 = subKey1.GetValue(this.string_0).ToString();
          subKey1.Close();
          RegistryKey subKey2 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + str3);
          if (subKey2.GetValue("JobName") != null)
            str2 = subKey2.GetValue("JobName").ToString();
          string str4 = subKey2.GetValue("WorkingDir") == null ? "" : subKey2.GetValue("WorkingDir").ToString();
          string strA = subKey2.GetValue("LastFile") == null ? "" : subKey2.GetValue("LastFile").ToString();
          if (subKey2.GetValue("Index") != null)
            str3 = subKey2.GetValue("Index").ToString();
          this.toolTip_0.SetToolTip((Control) this.pictureBox5, "Drive Key found in KeyDB (" + (object) str3 + " - " + str2 + (string) __arglist (")", Environment.NewLine, "Key is: ", this.string_0));
          this.toolTip_0.SetToolTip((Control) this.pictureBox2, "Drive Key found in KeyDB (" + (object) str3 + " - " + str2 + (string) __arglist (")", Environment.NewLine, "Key is: ", this.string_0));
          this.pictureBox5.Visible = true;
          this.pictureBox7.Visible = false;
          this.pictureBox2.Visible = true;
          this.pictureBox6.Visible = false;
          if (string.Compare(strA, "") != 0)
            this.menuItem_21.Enabled = true;
          this.menuItem_22.Enabled = true;
          this.menuItem_23.Enabled = true;
          this.menuItem_24.Enabled = true;
          this.string_14 = str1;
          this.string_15 = str3;
          this.string_16 = strA;
          this.string_17 = str4;
          this.label133.Text = "Verified";
          this.label131.Text = "Verified";
          subKey2.Close();
          this.Cursor = Cursors.Arrow;
          if (this.bool_1)
            this.textBox6.AppendText("\r\n" + (object) "Key found in KeyDB at record (" + str3 + " - " + (string) __arglist (str2, ")", "\r\n", "Key is: ", this.string_0, "\r\n", "Key has been tested and verified, thanks C4eva ! ", "\r\n"));
        }
        else
        {
          this.toolTip_0.SetToolTip((Control) this.pictureBox5, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + this.string_0);
          this.toolTip_0.SetToolTip((Control) this.pictureBox2, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + this.string_0);
          this.pictureBox5.Visible = true;
          this.pictureBox7.Visible = false;
          this.pictureBox2.Visible = true;
          this.pictureBox6.Visible = false;
          this.string_14 = str1;
          this.label133.Text = "Verified";
          this.label131.Text = "Verified";
          subKey1.Close();
          this.Cursor = Cursors.Arrow;
          if (this.bool_1)
            this.textBox6.AppendText("\r\n" + (object) "Key NOT in KeyDB " + "\r\n" + "Key is: " + (string) __arglist (this.string_0, "\r\n", "Key has been tested and verified, thanks C4eva ! ", "\r\n"));
          return 1;
        }
      }
      return 1;
    }

    private unsafe int method_182()
    {
      Struct28 struct28;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 1) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 2) = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 3) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 4) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 5) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 6) = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 7) = (sbyte) 7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 8) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 9) = (sbyte) 9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 10) = (sbyte) 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 11) = (sbyte) 11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 12) = (sbyte) 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 13) = (sbyte) 13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 14) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 15) = (sbyte) 15;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 3) == 1)
        return 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 5000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 16;
      uint num3;
      return _Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct28, &num3, 16U, (byte) 1, &gstruct3) != 0 ? 0 : 1;
    }

    private unsafe int method_183()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 250U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 80;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) 76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 83;
      Struct29 struct29;
      uint num3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      return _Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct29, &num3, 96U, (byte) 1, &gstruct3) != 0 || ((int) ^(byte&) ((IntPtr) &struct29 + 8) != 80 || (int) ^(byte&) ((IntPtr) &struct29 + 9) != 76 || ((int) ^(byte&) ((IntPtr) &struct29 + 10) != 68 || (int) ^(byte&) ((IntPtr) &struct29 + 11) != 83)) ? 0 : 1;
    }

    private unsafe int method_184()
    {
      Struct103 struct103;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct103 = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 1) = (sbyte) 71;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 2) = (sbyte) 45;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 3) = (sbyte) 49;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 4) = (sbyte) 54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 5) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 6) = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 7) = (sbyte) 83;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 250U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -64;
      Struct85 struct85;
      uint num3;
      return _Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct85, &num3, 116U, (byte) 1, &gstruct3) != 0 || _Module.memcmp((void*) ((IntPtr) &struct85 + 16), (void*) &struct103, 8U) != 0 ? 0 : 1;
    }

    private unsafe int method_185()
    {
      Struct103 struct103;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct103 = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 1) = (sbyte) 71;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 2) = (sbyte) 45;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 3) = (sbyte) 49;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 4) = (sbyte) 54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 5) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 6) = (sbyte) 53;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 7) = (sbyte) 83;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 250U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -64;
      Struct85 struct85;
      uint num3;
      return _Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct85, &num3, 116U, (byte) 1, &gstruct3) != 0 || _Module.memcmp((void*) ((IntPtr) &struct85 + 16), (void*) &struct103, 8U) != 0 ? 0 : 1;
    }

    private void button18_Click(object sender, EventArgs e)
    {
      this.method_14();
      this.radioButton20.Checked = true;
      this.method_197();
      this.method_186();
      this.method_15();
    }

    private unsafe void method_186()
    {
      string str = (string) null;
      this.method_172();
      if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No Drive Detected!" + "\n" + "Benq Un Lock aborted! ", "Benq Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive in Vendor Mode!" + "\n" + "Benq Un Lock aborted!", "Benq Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
      }
      else
      {
        if (this.comboBox1.Items.Count == 0)
          return;
        uint num1 = (uint) this.comboBox1.SelectedIndex;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
        GStruct3 gstruct3;
        _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 1000U);
        Struct28 struct28_1;
        _Module.memset((void*) &struct28_1, 0, 16U);
        Struct52 struct52;
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) -3;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 15;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 66;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 69;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 78;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 81;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) 0;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 16;
        this.textBox6.AppendText("\r\n" + "Sending Magic Keys to Drive on port " + this.label123.Text + "\r\n");
        uint num3 = 0U;
        while (num3 < 784U)
        {
          Struct28 struct28_2;
          _Module.memcpy((void*) &struct28_2, (void*) ((IntPtr) &_Module.struct51_0 + (int) num3), 16U);
          this.method_391((byte*) &struct28_2, (byte*) &struct28_1, 16);
          uint num4;
          if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct28_1, &num4, 16U, (byte) 1, &gstruct3) == 0)
          {
            uint num5 = (uint) this.comboBox1.SelectedIndex;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num5 * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num5 * 72 + 3) == 1)
              this.method_424((byte) 88);
            this.textBox6.AppendText(new string((sbyte*) &_Module.struct6_9));
            num3 += 16U;
          }
          else
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num5 = (int) MessageBox.Show("Benq-Un-Lock command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            return;
          }
        }
        this.textBox6.AppendText("\r\n" + "Done!" + "\r\n");
        this.textBox6.AppendText("Sending Vendor Intro" + str + "\r\n");
        if ((int) this.method_252() != 115)
        {
          _Module.Sleep(250U);
          if ((int) this.method_252() != 115)
          {
            _Module.Sleep(250U);
            if ((int) this.method_252() != 115)
            {
              _Module.Sleep(250U);
              if ((int) this.method_252() != 115)
              {
                this.textBox6.AppendText("Vendor Intro Failed" + str + "\r\n");
                return;
              }
            }
          }
        }
        else
          this.label122.Text = "Serial flash with status 0x73";
        this.textBox6.AppendText("Requesting Device ID" + str + "\r\n");
        if (this.method_206((uint) this.method_297()) != 0 || !this.bool_2)
          return;
        this.method_187();
      }
    }

    private unsafe void method_187()
    {
      this.Cursor = Cursors.WaitCursor;
      if (this.method_298() != 0)
      {
        this.Cursor = Cursors.Arrow;
      }
      else
      {
        this.Cursor = Cursors.Arrow;
        this.method_263();
        this.tabControl5.SelectedTab = this.Firmtools;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 0)
        {
          this.textBox6.AppendText("Load Failed" + "\r\n");
        }
        else
        {
          string text = "Drive has been unlocked, put in vendor mode and dumped." + "\n" + "iXtreme has auto-loaded and been spoofed from source." + "\n\n" + "Do You wish to proceed with erase and Flash" + "\n";
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(text, "Auto Flash", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          if (num == 7)
          {
            this.textBox6.AppendText("Auto-Flashing was aborted!" + "\r\n");
          }
          else
          {
            this.Cursor = Cursors.WaitCursor;
            this.method_299();
            this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
            if (this.method_302() == 1)
            {
              this.Cursor = Cursors.Arrow;
            }
            else
            {
              this.Cursor = Cursors.Arrow;
              _Module.Sleep(500U);
              this.Cursor = Cursors.WaitCursor;
              this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
              this.method_298();
              this.Cursor = Cursors.Arrow;
              for (int index = 0; index < 262144; ++index)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + index) != (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + index))
                {
                  this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                  return;
                }
              }
              this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
              this.string_2 = "Write verified !";
              this.string_3 = "OK";
            }
          }
        }
      }
    }

    private unsafe void method_188()
    {
      this.Cursor = Cursors.WaitCursor;
      Application.DoEvents();
      this.textBox6.AppendText("\r\n");
      for (int index = 0; index < 12; ++index)
      {
        _Module.Sleep(250U);
        this.textBox6.AppendText(".");
      }
      this.textBox6.AppendText("\r\n");
      if (this.method_307() != 0)
      {
        this.Cursor = Cursors.Arrow;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 82176), (void*) &_Module.struct43_16, 6U) != 0)
        {
          this.Cursor = Cursors.Arrow;
        }
        else
        {
          this.Cursor = Cursors.Arrow;
          this.method_264();
          this.textBox6.AppendText("\r\n" + "Loading MTK_Flash source file " + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 0)
          {
            this.textBox6.AppendText("Load Failed" + "\r\n");
          }
          else
          {
            string text = "Drive has been unlocked, put in vendor mode and dumped." + "\n" + "iXtreme has auto-loaded and been spoofed from source." + "\n\n" + "Do You wish to proceed with erase and Flash" + "\n";
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num = (int) MessageBox.Show(text, "Auto Flash", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            if (num == 7)
            {
              this.textBox6.AppendText("Auto-Flashing was aborted!" + "\r\n");
            }
            else
            {
              this.Cursor = Cursors.WaitCursor;
              this.method_311();
              this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
              if (this.method_326() == 1)
              {
                this.Cursor = Cursors.Arrow;
              }
              else
              {
                this.Cursor = Cursors.Arrow;
                _Module.Sleep(500U);
                this.Cursor = Cursors.WaitCursor;
                this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                this.method_307();
                this.Cursor = Cursors.Arrow;
                for (int index = 0; index < 262144; ++index)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + index) != (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + index))
                  {
                    this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                    return;
                  }
                }
                this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                this.string_2 = "Write verified !";
                this.string_3 = "OK";
              }
            }
          }
        }
      }
    }

    private void button40_Click(object sender, EventArgs e)
    {
      this.method_14();
      this.method_197();
      if (string.Compare(this.label109.Text, 0, "DG-16D5S", 0, 8) == 0)
        this.method_190();
      else
        this.method_189();
      this.method_15();
    }

    private unsafe int method_189()
    {
      Struct68 struct68;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct68 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct68&) ((IntPtr) &struct68 + 1), 0, 259);
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      this.Cursor = Cursors.WaitCursor;
      this.method_172();
      this.radioButton19.Checked = true;
      if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No Drive Detected!" + "\n" + "Slim Un Lock aborted! ", "Slim Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
        return 0;
      }
      else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive in Vendor Mode!" + "\n" + "Slim Un Lock aborted!", "Slim Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
        return 0;
      }
      else
      {
        this.method_82();
        Struct28 struct28;
        this.method_85((byte*) &struct28);
        if (this.method_87((byte*) &struct28) == 0)
        {
          this.Cursor = Cursors.Arrow;
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show("Unlock failed !", "Slim Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          return 0;
        }
        else if (this.method_200() == 0)
        {
          this.Cursor = Cursors.Arrow;
          return 0;
        }
        else
        {
          this.Cursor = Cursors.Arrow;
          return 1;
        }
      }
    }

    private unsafe int method_190()
    {
      Struct68 struct68;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct68 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct68&) ((IntPtr) &struct68 + 1), 0, 259);
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      this.Cursor = Cursors.WaitCursor;
      this.method_172();
      this.radioButton19.Checked = true;
      if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No Drive Detected!" + "\n" + "Slim Un Lock aborted! ", "Slim Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
        return 0;
      }
      else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive in Vendor Mode!" + "\n" + "Slim Un Lock aborted!", "Slim Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        this.label88.Text = " ";
        this.label87.Text = " ";
        return 0;
      }
      else
      {
        this.method_82();
        Struct28 struct28;
        this.method_86((byte*) &struct28);
        if (this.method_88((byte*) &struct28) == 0)
        {
          this.Cursor = Cursors.Arrow;
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show("Unlock failed !", "Slim Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          return 0;
        }
        else if (this.method_201() == 0)
        {
          this.Cursor = Cursors.Arrow;
          return 0;
        }
        else
        {
          this.Cursor = Cursors.Arrow;
          return 1;
        }
      }
    }

    private void button21_Click(object sender, EventArgs e)
    {
      this.method_14();
      this.radioButton20.Checked = true;
      this.method_191();
      this.method_15();
    }

    private unsafe void method_191()
    {
      string str = (string) null;
      Struct4 struct4_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct4_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 5) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 8) = (sbyte) -5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 9) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 15) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 16) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 17) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 18) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 19) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 20) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 21) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 22) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 23) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 24) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 25) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 26) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 27) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 28) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 29) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 30) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 31) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 32) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 33) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 34) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 35) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 36) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 37) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 38) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 39) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 40) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 41) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 42) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 43) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 44) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 45) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 46) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 47) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 48) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 49) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 50) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 51) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 52) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 53) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 54) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 55) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 56) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 57) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 58) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 59) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 60) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 61) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 62) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 63) = (sbyte) -1;
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) -1;
      if (this.comboBox1.Items.Count == 0)
        return;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      if (!this.bool_2)
      {
        string text = "Sammy_Un_Lock will unlock a Samsung MS28 with stock f/w and LT " + "\n" + "and LT+ flashed drives. " + "\n" + "For iXtreme ver 1.4 and before, unlock using 0800 DVD. " + "\n" + "For iXtreme 1.5, unlock drive by powering up with tray half open." + "\n" + "Do you wish to proceed anyway ?" + "\n";
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show(text, "Sammy-Un-Lock", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num3 == 7)
        {
          this.textBox6.AppendText("Sammy-Un-Lock NOT sent " + "\r\n");
          return;
        }
      }
      Application.DoEvents();
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) 7;
      this.textBox6.AppendText("\r\n" + "Sending Sammy_Un_Lock to Drive on port " + this.label123.Text + "\r\n");
      Struct28 struct28_2;
      uint num4;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct28_2, &num4, 16U, (byte) 1, &gstruct3) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("Failed at Stage 1", "Sammy_Un_Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        this.textBox6.AppendText("Stage 1, Complete!" + "\r\n");
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(byte&) @struct28_2 == (int) ^(byte&) @struct28_1)
          _Module.memset((void*) &struct28_2, 0, 16U);
        Struct4 struct4_2;
        _Module.memcpy((void*) &struct4_2, (void*) &struct4_1, 64U);
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) 85;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 58;
        if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct4_2, &num4, 64U, (byte) 1, &gstruct3) != 0)
        {
          _Module.Sleep(2000U);
          if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct4_2, &num4, 64U, (byte) 1, &gstruct3) != 0)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num3 = (int) MessageBox.Show("Failed at Stage 2", "Sammy_Un_Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            return;
          }
        }
        this.textBox6.AppendText("Stage 2, Complete!" + "\r\n");
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 3) == 1)
          this.method_424((byte) 88);
        _Module.Sleep(2000U);
        _Module.memcpy((void*) ((IntPtr) &struct4_2 + 10), (void*) &struct28_2, 16U);
        if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct4_2, &num4, 64U, (byte) 1, &gstruct3) != 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num3 = (int) MessageBox.Show("Failed at Stage 3", "Sammy_Un_Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        else
        {
          this.textBox6.AppendText("Stage 3, Complete!" + "\r\n" + "Done!" + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 3) == 1)
            this.method_424((byte) 88);
          Application.DoEvents();
          this.textBox6.AppendText("Sending Vendor Intro" + str + "\r\n");
          Application.DoEvents();
          if ((int) this.method_252() != 112)
          {
            _Module.Sleep(250U);
            if ((int) this.method_252() != 112)
            {
              _Module.Sleep(250U);
              if ((int) this.method_252() != 112)
              {
                _Module.Sleep(250U);
                if ((int) this.method_252() != 112)
                {
                  this.textBox6.AppendText("Vendor Intro Failed" + str + "\r\n");
                  return;
                }
              }
            }
          }
          else
            this.label122.Text = "Parallel flash with Status 0x70";
          this.textBox6.AppendText("Requesting Device ID" + str + "\r\n");
          if (this.method_206((uint) this.method_290()) != 0 || !this.bool_2)
            return;
          this.method_193();
        }
      }
    }

    private unsafe void method_192()
    {
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) -1;
      if (this.comboBox1.Items.Count == 0)
        return;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) 7;
      this.textBox6.AppendText("\r\n" + "Retrieving Key from Samsung Drive on port " + this.label123.Text + "\r\n");
      Struct28 struct28_2;
      uint num3;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct28_2, &num3, 16U, (byte) 1, &gstruct3) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num4 = (int) MessageBox.Show(new string((sbyte*) &_Module.struct97_2), "Sammy_Key", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(byte&) @struct28_2 == (int) ^(byte&) @struct28_1)
          _Module.memset((void*) &struct28_2, 0, 16U);
        this.method_6((byte*) &struct28_2, 16U, 0U);
        this.textBox6.AppendText("Extracted drive key " + this.string_0 + "\r\n");
        string str;
        if (this.bool_2)
        {
          str = this.string_10 + "\\" + this.string_0 + ".bin";
        }
        else
        {
          SaveFileDialog saveFileDialog = new SaveFileDialog();
          saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
          saveFileDialog.DefaultExt = ".bin";
          saveFileDialog.FileName = this.string_0 + ".bin";
          saveFileDialog.RestoreDirectory = false;
          if (this.bool_2)
            saveFileDialog.InitialDirectory = this.string_10;
          if (saveFileDialog.ShowDialog() != DialogResult.OK)
            return;
          str = Path.GetFullPath(saveFileDialog.FileName);
        }
        GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(str), (sbyte*) &_Module.struct18_5);
        if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num4 = (int) MessageBox.Show(str, "Can't open file", MessageBoxButtons.OK);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        else
        {
          int num4 = (int) _Module.fwrite((void*) &struct28_2, 16U, 1U, pGstruct5_0);
          _Module.fclose(pGstruct5_0);
          this.textBox6.AppendText("Sammy key saved to " + str + "\r\n");
        }
      }
    }

    private unsafe void method_193()
    {
      this.Cursor = Cursors.WaitCursor;
      if (this.method_291() != 0)
      {
        this.Cursor = Cursors.Arrow;
      }
      else
      {
        this.Cursor = Cursors.Arrow;
        this.method_262();
        this.textBox6.AppendText("\r\n" + "Loading MTK_Flash source file " + "\r\n");
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 0)
        {
          this.textBox6.AppendText("Load Failed" + "\r\n");
        }
        else
        {
          string text = "Drive has been unlocked, put in vendor mode and dumped." + "\n" + "iXtreme has auto-loaded and been spoofed from source." + "\n\n" + "Do You wish to proceed with erase and Flash" + "\n";
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(text, "Auto Flash", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          if (num == 7)
          {
            this.textBox6.AppendText("Auto-Flashing was aborted!" + "\r\n");
          }
          else
          {
            this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
            this.Cursor = Cursors.WaitCursor;
            this.method_292();
            if (this.method_296() == 1)
            {
              this.Cursor = Cursors.Arrow;
            }
            else
            {
              this.Cursor = Cursors.Arrow;
              _Module.Sleep(500U);
              this.Cursor = Cursors.WaitCursor;
              this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
              this.method_291();
              this.Cursor = Cursors.Arrow;
              for (int index = 0; index < 262144; ++index)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + index) != (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + index))
                {
                  this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                  return;
                }
              }
              this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
              this.string_2 = "Write verified !";
              this.string_3 = "OK";
            }
          }
        }
      }
    }

    private void method_194()
    {
      if (string.Compare(this.label109.Text, 0, "DG-16D5S", 0, 8) == 0)
        this.method_196();
      else
        this.method_195();
    }

    private unsafe void method_195()
    {
      Struct4 struct4_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct4_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 5) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 8) = (sbyte) -5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 9) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 15) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 16) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 17) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 18) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 19) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 20) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 21) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 22) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 23) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 24) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 25) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 26) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 27) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 28) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 29) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 30) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 31) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 32) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 33) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 34) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 35) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 36) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 37) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 38) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 39) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 40) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 41) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 42) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 43) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 44) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 45) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 46) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 47) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 48) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 49) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 50) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 51) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 52) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 53) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 54) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 55) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 56) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 57) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 58) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 59) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 60) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 61) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 62) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct4_1 + 63) = (sbyte) -1;
      Struct28 struct28;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28 = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 1) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 2) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 3) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 4) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 5) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 6) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 7) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 8) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 9) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28 + 15) = (sbyte) -1;
      if (this.comboBox1.Items.Count == 0)
        return;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 1000U);
      Struct4 struct4_2;
      _Module.memcpy((void*) &struct4_2, (void*) &struct4_1, 64U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 58;
      uint num3;
      if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct4_2, &num3, 64U, (byte) 1, &gstruct3) != 0)
      {
        _Module.Sleep(2000U);
        if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct4_2, &num3, 64U, (byte) 1, &gstruct3) != 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num4 = (int) MessageBox.Show("Failed at Stage 1", "Set Drive Key", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          return;
        }
      }
      this.textBox6.AppendText("Stage 1, Complete!" + "\r\n");
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 3) == 1)
        this.method_424((byte) 88);
      _Module.Sleep(2000U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct4_2 + 10), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), 16U);
      if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct4_2, &num3, 64U, (byte) 1, &gstruct3) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num4 = (int) MessageBox.Show("Failed at Stage 2", "Set Drive Key", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 3) == 1)
          this.method_424((byte) 88);
        this.textBox6.AppendText("Stage 2, Complete!" + "\r\n" + "Done!" + "\r\n");
      }
    }

    private unsafe void method_196()
    {
      Struct80 struct80_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct80_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 5) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 6) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 8) = (sbyte) -85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 9) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 10) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 11) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 12) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 13) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 14) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 15) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 16) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 17) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 18) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 19) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 20) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 21) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 22) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 23) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 24) = (sbyte) -1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct80_1 + 25) = (sbyte) -1;
      if (this.comboBox1.Items.Count == 0)
        return;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 1000U);
      Struct80 struct80_2;
      _Module.memcpy((void*) &struct80_2, (void*) &struct80_1, 26U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ((IntPtr) &struct80_2 + 10), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), 16U);
      uint num3;
      if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct80_2, &num3, 26U, (byte) 1, &gstruct3) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num4 = (int) MessageBox.Show("Failed at Stage 1", "Set Drive Key", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 3) == 1)
          this.method_424((byte) 88);
        this.textBox6.AppendText("Stage 1, Complete!" + "\r\n" + "Done!" + "\r\n");
      }
    }

    private void button17_Click(object sender, EventArgs e)
    {
      this.method_14();
      this.bool_1 = false;
      this.method_197();
      this.method_197();
      this.method_198();
      this.bool_1 = true;
      this.method_15();
    }

    private unsafe void method_197()
    {
      this.method_360();
      this.method_172();
      string strA = this.label72.Text + this.label68.Text + this.label61.Text;
      int count = this.comboBox16.Items.Count;
      for (int index = 0; index < count; ++index)
      {
        string str = Convert.ToString(this.comboBox16.Items[index]);
        string string_25 = str.Substring(0, 3);
        string strB = str.Substring(5, 28);
        if (string.Compare(strA, strB) == 0)
        {
          string text = "" + (object) "The drive on I/O port " + this.label84.Text + " has windows drive letter " + (string) __arglist (string_25, "\n") + "assigned to it. This may cause read back issues." + "\n\n" + "Do you wish to disable " + string_25 + " ?";
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(text, "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          if (num == 7)
            break;
          this.method_335(string_25);
          break;
        }
      }
    }

    private unsafe void method_198()
    {
      string str1 = (string) null;
      bool flag = false;
      int selectedIndex = this.comboBox10.SelectedIndex;
      if (this.comboBox1.Items.Count == 0)
        return;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      this.label118.Text = "";
      this.label119.Text = "";
      this.label120.Text = "";
      this.label121.Text = "";
      this.label122.Text = "";
      this.textBox6.AppendText("Sending Vendor Intro to port " + this.label123.Text + "\r\n");
      byte num2 = !this.radioButton19.Checked ? (!this.radioButton21.Checked ? (byte) this.method_252() : (byte) this.method_254()) : (byte) this.method_253();
      this.bool_0 = false;
      uint uint_0;
      if ((int) num2 == 115)
      {
        this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x73" + "\r\n");
        this.label122.Text = "Serial flash with status 0x73";
        this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
        uint_0 = (uint) this.method_297();
      }
      else if ((int) num2 == 112)
      {
        this.textBox6.AppendText("\r\n" + "Parallel flash found with Status 0x70" + "\r\n");
        this.label122.Text = "Parallel flash with Status 0x70";
        this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
        uint_0 = (uint) this.method_290();
      }
      else if ((int) num2 == 114)
      {
        this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
        this.label122.Text = "Serial flash with status 0x72";
        this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
        _Module.Sleep(1000U);
        uint_0 = (uint) this.method_303();
        if (this.radioButton19.Checked)
          this.method_239();
        if (this.radioButton21.Checked)
          this.method_240();
        if (this.radioButton20.Checked)
          this.method_241();
        if ((int) uint_0 == 0)
        {
          _Module.Sleep(1000U);
          uint_0 = (uint) this.method_303();
        }
        if ((int) uint_0 == (int) ushort.MaxValue)
        {
          _Module.Sleep(1000U);
          uint_0 = (uint) this.method_303();
          if ((int) uint_0 == (int) ushort.MaxValue)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num3 = (int) MessageBox.Show("Please return MRA Hack device to the Normal position !" + "\r\n\r\n" + "Then, press OK to continue.", "Device ID Failed !", MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            if (num3 != 1)
              return;
            uint_0 = (uint) this.method_303();
          }
        }
      }
      else
      {
        Struct20 struct20;
        _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num2));
        string str2 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
        this.textBox6.AppendText("Status 0x" + str1 + str2 + "\r\n");
        int num3;
        if (this.method_130() == 1)
        {
          num3 = 6;
          new Thread(new ThreadStart(this.method_132)).Start();
        }
        else
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          num3 = (int) MessageBox.Show("If you wish to resend the command you should click Yes." + (object) "\n" + "Power off the drive and then back on (within 1 second)." + "\n\n" + (string) __arglist ("Press Escape to cancel."), "MTK Vendor Intro failed", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        if (num3 == 6)
        {
          this.textBox6.AppendText("Re-sending Vendor Intro: " + "\r\n");
          uint num4 = (uint) _Module.smethod_6();
          while ((((int) num2 != 112 ? 1 : 0) & ((int) num2 != 114 ? 1 : 0) & ((int) num2 != 115 ? 1 : 0)) != 0)
          {
            if ((uint) _Module.smethod_6() - num4 < 200000U)
            {
              if ((int) _Module.GetAsyncKeyState(27) == 0)
              {
                if (flag)
                {
                  _Module.Sleep(500U);
                  num2 = (byte) this.method_252();
                }
                else
                  num2 = (byte) this.method_250();
                _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num2));
                this.label122.Text = "Status 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
                Application.DoEvents();
                this.textBox6.AppendText(new string((sbyte*) &_Module.struct6_9));
                if ((int) num2 != 115)
                {
                  if ((int) num2 != 112)
                  {
                    if ((int) num2 != 114)
                    {
                      if ((int) num2 == 209 && !flag)
                      {
                        flag = true;
                        if (this.method_130() == 1)
                        {
                          Thread thread = new Thread(new ThreadStart(this.method_132));
                        }
                      }
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72) == 0 && (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 3) == 1)
                        _Module.Sleep(50U);
                      else
                        _Module.Sleep(250U);
                    }
                    else
                    {
                      this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                      this.label122.Text = "Serial flash with status 0x72";
                      this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                      _Module.Sleep(1500U);
                      uint_0 = (uint) this.method_303();
                      if (this.radioButton19.Checked)
                        this.method_239();
                      if (this.radioButton20.Checked)
                        this.method_241();
                      if (this.radioButton21.Checked)
                        this.method_240();
                      if ((int) uint_0 == 0)
                      {
                        _Module.Sleep(1000U);
                        uint_0 = (uint) this.method_303();
                      }
                      if ((int) uint_0 == (int) ushort.MaxValue)
                      {
                        _Module.Sleep(1000U);
                        uint_0 = (uint) this.method_303();
                        if ((int) uint_0 == (int) ushort.MaxValue)
                        {
                          // ISSUE: cast to a function pointer type
                          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                          int num5 = (int) MessageBox.Show("Please return MRA Hack Device to the Normal position !" + "\r\n\r\n" + "Then, press OK to continue.", "Device ID Failed !", MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation);
                          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                          if (num5 != 1)
                            return;
                          uint_0 = (uint) this.method_303();
                          break;
                        }
                        else
                          break;
                      }
                      else
                        break;
                    }
                  }
                  else
                  {
                    this.textBox6.AppendText("\r\n" + "Parallel flash found with Status 0x70" + "\r\n");
                    this.label122.Text = "Parallel flash with Status 0x70";
                    this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                    uint_0 = (uint) this.method_290();
                    break;
                  }
                }
                else
                {
                  this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x73" + "\r\n");
                  this.label122.Text = "Serial flash with status 0x73";
                  this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                  uint_0 = (uint) this.method_297();
                  break;
                }
              }
              else
              {
                this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                return;
              }
            }
            else
            {
              this.textBox6.AppendText("\r\n" + "Device Intro failed!" + "\r\n");
              return;
            }
          }
        }
        else
          return;
      }
      if (this.method_206(uint_0) != 0)
        return;
      _Module.Sleep(1000U);
      if (this.bool_2 & (int) num2 == 115)
        this.method_187();
      if (this.bool_2 & (int) num2 == 112)
        this.method_193();
      if (!(this.bool_2 & (int) num2 == 114 & this.radioButton20.Checked))
        return;
      this.method_188();
    }

    private unsafe void method_199()
    {
      byte num1 = (byte) 0;
      int selectedIndex1 = this.comboBox10.SelectedIndex;
      if (this.comboBox1.Items.Count == 0)
        return;
      int selectedIndex2 = this.comboBox1.SelectedIndex;
      this.label118.Text = "";
      this.label119.Text = "";
      this.label120.Text = "";
      this.label121.Text = "";
      this.label122.Text = "";
      this.textBox6.AppendText("Sending Vendor Intro to port " + this.label123.Text + "\r\n");
      this.bool_0 = false;
      for (uint index1 = 137U; index1 < 256U; ++index1)
      {
        for (uint index2 = 0U; index2 < 256U; ++index2)
        {
          Struct20 struct20;
          _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_121, __arglist ((int) (byte) index1));
          this.label118.Text = "0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
          _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_121, __arglist ((int) (byte) index2));
          this.label119.Text = "0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
          int num2;
          if (this.method_130() == 1)
          {
            num2 = 6;
            new Thread(new ThreadStart(this.method_132)).Start();
          }
          else
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            num2 = (int) MessageBox.Show("If you wish to resend the command you should click Yes." + (object) "\n" + "Power off the drive and then back on (within 1 second)." + "\n\n" + (string) __arglist ("Press Escape to cancel."), "MTK Vendor Intro failed", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          }
          if (num2 == 6)
          {
            uint num3 = (uint) _Module.smethod_6();
            while ((((int) num1 != 112 ? 1 : 0) & ((int) num1 != 114 ? 1 : 0) & ((int) num1 != 115 ? 1 : 0) & ((int) num1 != 112 ? 1 : 0) & ((int) num1 != 82 ? 1 : 0)) != 0 && (uint) _Module.smethod_6() - num3 < 3000U)
            {
              if ((int) _Module.GetAsyncKeyState(27) == 0)
              {
                num1 = (byte) this.method_255((byte) index2, (byte) index1);
                _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num1));
                this.label122.Text = "Status 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
                Application.DoEvents();
                if ((int) num1 != 115)
                {
                  if ((int) num1 != 112)
                  {
                    if ((int) num1 != 114)
                    {
                      _Module.Sleep(250U);
                    }
                    else
                    {
                      this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                      this.label122.Text = "Serial flash with status 0x72";
                      return;
                    }
                  }
                  else
                  {
                    this.textBox6.AppendText("\r\n" + "Parallel flash found with Status 0x70" + "\r\n");
                    this.label122.Text = "Parallel flash with Status 0x70";
                    return;
                  }
                }
                else
                {
                  this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x73" + "\r\n");
                  this.label122.Text = "Serial flash with status 0x73";
                  return;
                }
              }
              else
              {
                this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                return;
              }
            }
          }
        }
      }
    }

    private unsafe int method_200()
    {
      string str1 = (string) null;
      int selectedIndex = this.comboBox10.SelectedIndex;
      this.label118.Text = "";
      this.label119.Text = "";
      this.label120.Text = "";
      this.label121.Text = "";
      this.label122.Text = "";
      this.textBox6.AppendText("Sending Vendor Intro to port " + this.label123.Text + "\r\n");
      byte num1 = (byte) this.method_253();
      this.bool_0 = false;
      uint uint_0;
      if ((int) num1 == 114)
      {
        this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
        this.label122.Text = "Serial flash with status 0x72";
        this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
        _Module.Sleep(100U);
        this.radioButton19.Checked = true;
        uint_0 = (uint) this.method_305();
      }
      else
      {
        Struct20 struct20;
        _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_121, __arglist ((int) num1));
        string str2 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
        this.textBox6.AppendText("Status 0x" + str1 + str2 + "\r\n");
        int num2;
        if (this.method_130() == 1)
        {
          num2 = 6;
          new Thread(new ThreadStart(this.method_132)).Start();
        }
        else
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          num2 = (int) MessageBox.Show("If you wish to resend the command you should click Yes." + (object) "\n" + "Power off the drive and then back on (within 1 second)." + "\n\n" + (string) __arglist ("Press Escape to cancel."), "MTK Vendor Intro failed", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        if (num2 == 6)
        {
          this.textBox6.AppendText("Re-sending Vendor Intro: " + "\r\n");
          uint num3 = (uint) _Module.smethod_6();
          while ((int) num1 != 114)
          {
            if ((uint) _Module.smethod_6() - num3 < 10000U)
            {
              if ((int) _Module.GetAsyncKeyState(27) == 0)
              {
                num1 = (byte) this.method_253();
                _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num1));
                this.label122.Text = "Status 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
                Application.DoEvents();
                this.textBox6.AppendText(new string((sbyte*) &_Module.struct6_9));
                if ((int) num1 != 114)
                {
                  _Module.Sleep(250U);
                }
                else
                {
                  this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                  this.label122.Text = "Serial flash with status 0x72";
                  this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                  _Module.Sleep(100U);
                  uint_0 = (uint) this.method_305();
                  break;
                }
              }
              else
              {
                this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                return 0;
              }
            }
            else
            {
              this.textBox6.AppendText("\r\n" + "Device Intro failed!" + "\r\n");
              return 0;
            }
          }
        }
        else
          return 0;
      }
      return this.method_206(uint_0) != 0 ? 0 : 1;
    }

    private unsafe int method_201()
    {
      string str1 = (string) null;
      int selectedIndex = this.comboBox10.SelectedIndex;
      this.label118.Text = "";
      this.label119.Text = "";
      this.label120.Text = "";
      this.label121.Text = "";
      this.label122.Text = "";
      this.textBox6.AppendText("Sending Vendor Intro to port " + this.label123.Text + "\r\n");
      byte num1 = (byte) this.method_253();
      this.bool_0 = false;
      uint uint_0;
      if ((int) num1 == 114)
      {
        this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
        this.label122.Text = "Serial flash with status 0x72";
        this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
        _Module.Sleep(100U);
        if (this.radioButton21.Visible)
          this.radioButton21.Checked = true;
        uint_0 = (uint) this.method_306();
      }
      else
      {
        Struct20 struct20;
        _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_121, __arglist ((int) num1));
        string str2 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
        this.textBox6.AppendText("Status 0x" + str1 + str2 + "\r\n");
        int num2;
        if (this.method_130() == 1)
        {
          num2 = 6;
          new Thread(new ThreadStart(this.method_132)).Start();
        }
        else
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          num2 = (int) MessageBox.Show("If you wish to resend the command you should click Yes." + (object) "\n" + "Power off the drive and then back on (within 1 second)." + "\n\n" + (string) __arglist ("Press Escape to cancel."), "MTK Vendor Intro failed", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        if (num2 == 6)
        {
          this.textBox6.AppendText("Re-sending Vendor Intro: " + "\r\n");
          uint num3 = (uint) _Module.smethod_6();
          while ((int) num1 != 114)
          {
            if ((uint) _Module.smethod_6() - num3 < 10000U)
            {
              if ((int) _Module.GetAsyncKeyState(27) == 0)
              {
                num1 = (byte) this.method_254();
                _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num1));
                this.label122.Text = "Status 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
                Application.DoEvents();
                this.textBox6.AppendText(new string((sbyte*) &_Module.struct6_9));
                if ((int) num1 != 114)
                {
                  _Module.Sleep(250U);
                }
                else
                {
                  this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                  this.label122.Text = "Serial flash with status 0x72";
                  this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                  _Module.Sleep(100U);
                  uint_0 = (uint) this.method_306();
                  break;
                }
              }
              else
              {
                this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                return 0;
              }
            }
            else
            {
              this.textBox6.AppendText("\r\n" + "Device Intro failed!" + "\r\n");
              return 0;
            }
          }
        }
        else
          return 0;
      }
      return this.method_206(uint_0) != 0 ? 0 : 1;
    }

    private unsafe void method_202()
    {
      string str1 = (string) null;
      this.label118.Text = "";
      this.label119.Text = "";
      this.label120.Text = "";
      this.label121.Text = "";
      this.label122.Text = "";
      this.textBox6.AppendText("Sending Vendor Intro to port " + this.label123.Text + "\r\n");
      sbyte num1 = (sbyte) this.method_250();
      this.bool_0 = false;
      uint uint_0;
      if ((int) num1 == 115)
      {
        this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x73" + "\r\n");
        this.label122.Text = "Serial flash with status 0x73";
        this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
        uint_0 = (uint) this.method_297();
      }
      else if ((int) num1 == 112)
      {
        this.textBox6.AppendText("\r\n" + "Parallel flash found with Status 0x70" + "\r\n");
        this.label122.Text = "Parallel flash with Status 0x70";
        this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
        uint_0 = (uint) this.method_290();
      }
      else if ((int) num1 == 114)
      {
        this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
        this.label122.Text = "Serial flash with status 0x72";
        this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
        uint_0 = (uint) this.method_303();
      }
      else
      {
        Struct20 struct20;
        _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) (byte) num1));
        string str2 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
        this.textBox6.AppendText("Status 0x" + str1 + str2 + "\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num2 = (int) MessageBox.Show("If you wish to resend the command you should click Yes." + (object) "\n" + "Power off the drive and then back on (within 1 second)." + "\n\n" + (string) __arglist ("Press Escape to cancel."), "MTK Vendor Intro failed", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num2 == 6)
        {
          this.textBox6.AppendText("Re-sending Vendor Intro: " + "\r\n");
          uint num3 = (uint) _Module.smethod_6();
          while ((((int) num1 != 112 ? 1 : 0) & ((int) num1 != 114 ? 1 : 0) & ((int) num1 != 115 ? 1 : 0)) != 0)
          {
            if ((uint) _Module.smethod_6() - num3 < 20000U)
            {
              if ((int) _Module.GetAsyncKeyState(27) == 0)
              {
                num1 = (sbyte) this.method_250();
                _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) (byte) num1));
                this.label122.Text = "Status 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
                Application.DoEvents();
                this.textBox6.AppendText(new string((sbyte*) &_Module.struct6_9));
                if ((int) num1 != 115)
                {
                  if ((int) num1 != 112)
                  {
                    if ((int) num1 != 114)
                    {
                      _Module.Sleep(250U);
                    }
                    else
                    {
                      this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                      this.label122.Text = "Serial flash with status 0x72";
                      this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                      uint_0 = (uint) this.method_303();
                      break;
                    }
                  }
                  else
                  {
                    this.textBox6.AppendText("\r\n" + "Parallel flash found with Status 0x70" + "\r\n");
                    this.label122.Text = "Parallel flash with Status 0x70";
                    this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                    uint_0 = (uint) this.method_290();
                    break;
                  }
                }
                else
                {
                  this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x73" + "\r\n");
                  this.label122.Text = "Serial flash with status 0x73";
                  this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                  uint_0 = (uint) this.method_297();
                  break;
                }
              }
              else
              {
                this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                return;
              }
            }
            else
            {
              this.textBox6.AppendText("\r\n" + "Device Intro failed!" + "\r\n");
              return;
            }
          }
        }
        else
          return;
      }
      this.method_206(uint_0);
    }

    private unsafe int method_203()
    {
      string str1 = (string) null;
      this.label118.Text = "";
      this.label119.Text = "";
      this.label120.Text = "";
      this.label121.Text = "";
      this.label122.Text = "";
      this.textBox6.AppendText("Sending Vendor Intro to port " + this.label123.Text + "\r\n");
      sbyte num1 = (sbyte) this.method_252();
      this.bool_0 = false;
      uint num2;
      if ((int) num1 == 114)
      {
        this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
        this.label122.Text = "Serial flash with status 0x72";
        this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
        num2 = (uint) this.method_303();
        return 0;
      }
      else if ((int) num1 == 82)
      {
        this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x52" + "\r\n");
        this.label122.Text = "Serial flash with status 0x52";
        num2 = 0U;
        return 1;
      }
      else
      {
        Struct20 struct20;
        _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) (byte) num1));
        string str2 = new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
        this.textBox6.AppendText("Status 0x" + str1 + str2 + "\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("To resend the command you should click Yes." + (object) "\n" + "Press and hold Probe 3 cable button... Probe MPX01... Then release cable button." + "\n\n" + (string) __arglist ("Press Escape to cancel."), "MTK Vendor Intro failed", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num3 == 6)
        {
          this.textBox6.AppendText("Re-sending Vendor Intro: " + "\r\n");
          uint num4 = (uint) _Module.smethod_6();
          while ((((int) num1 != 82 ? 1 : 0) & ((int) num1 != 114 ? 1 : 0)) != 0)
          {
            if ((uint) _Module.smethod_6() - num4 < 20000U)
            {
              if ((int) _Module.GetAsyncKeyState(27) == 0)
              {
                num1 = (sbyte) this.method_252();
                _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) (byte) num1));
                this.label122.Text = "Status 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
                Application.DoEvents();
                this.textBox6.AppendText(new string((sbyte*) &_Module.struct6_9));
                if ((int) num1 == 114)
                {
                  this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                  this.label122.Text = "Serial flash with status 0x72";
                  this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                  if (this.method_206((uint) this.method_303()) != 0)
                    return 0;
                }
                else if ((int) num1 == 82)
                {
                  this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x52" + "\r\n");
                  this.label122.Text = "Serial flash with status 0x52";
                  num2 = 0U;
                  return 1;
                }
                _Module.Sleep(250U);
              }
              else
              {
                this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                return 0;
              }
            }
            else
            {
              this.textBox6.AppendText("\r\n" + "Device Intro failed!" + "\r\n");
              return 0;
            }
          }
        }
        return 0;
      }
    }

    private int method_204()
    {
      this.label118.Text = "";
      this.label119.Text = "";
      this.label120.Text = "";
      this.label121.Text = "";
      this.label122.Text = "";
      sbyte num1 = (sbyte) this.method_250();
      this.bool_0 = false;
      if ((int) num1 != 82)
        return 0;
      this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x52" + "\r\n");
      this.label122.Text = "Serial flash with status 0x52";
      int num2 = (int) this.method_96();
      return 1;
    }

    private void method_205()
    {
      this.label118.Text = "";
      this.label119.Text = "";
      this.label120.Text = "";
      this.label121.Text = "";
      this.label122.Text = "";
      sbyte num = (sbyte) this.method_250();
      uint uint_0;
      switch (num)
      {
        case (sbyte) 115:
          this.label122.Text = "Serial flash with status 0x73";
          uint_0 = (uint) this.method_297();
          break;
        case (sbyte) 112:
          this.label122.Text = "Parallel flash with Status 0x70";
          uint_0 = (uint) this.method_290();
          break;
        case (sbyte) 114:
          this.label122.Text = "Serial flash with status 0x72";
          uint_0 = (uint) this.method_303();
          break;
        default:
          if ((((int) num != 112 ? 1 : 0) & ((int) num != 114 ? 1 : 0) & ((int) num != 115 ? 1 : 0)) != 0)
            return;
          else
            break;
      }
      this.method_206(uint_0);
    }

    private unsafe int method_206(uint uint_0)
    {
      uint num1 = (uint_0 & 65280U) >> 8;
      Struct20 struct20;
      _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num1));
      string str1 = new string((sbyte*) &_Module.struct19_0);
      string str2 = new string((sbyte*) &_Module.struct19_0) + str1 + new string((sbyte*) &struct20);
      this.label118.Text = "0x" + str2;
      this.textBox6.AppendText("Manufacturer ID: 0x" + str2 + "\r\n");
      uint num2 = uint_0 & (uint) byte.MaxValue;
      _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num2));
      string str3 = new string((sbyte*) &_Module.struct19_0);
      string str4 = new string((sbyte*) &_Module.struct19_0) + str3 + new string((sbyte*) &struct20);
      this.label119.Text = "0x" + str4;
      this.textBox6.AppendText("Device ID: 0x" + str4 + "\r\n");
      string str5;
      string str6;
      int num3;
      if ((int) num1 == 191 && (int) num2 == 182)
      {
        str5 = "SST(SST39SF020)";
        str6 = "262144 bytes";
        num3 = 0;
        this.string_2 = "DevID: 0xBF 0xB6";
        this.string_3 = "SST(SST39SF020)";
      }
      else if ((int) num1 == 191 && (int) num2 == 67)
      {
        str5 = "SST(25LF020/25VF020)";
        str6 = "262144 bytes";
        num3 = 0;
        this.string_2 = "DevID: 0xBF 0x43";
        this.string_3 = "SST(25LF020/25VF020)";
      }
      else if ((int) num1 == 239 && (int) num2 == 17)
      {
        str5 = "Winbond/NEX(W25P20/NX25P20)";
        str6 = "262144 bytes";
        num3 = 0;
        this.string_2 = "DevID: 0xEF 0x11";
        this.string_3 = "Winbond(W25P20)";
      }
      else if ((int) num1 == 157 && (int) num2 == 125)
      {
        str5 = "PMC(PM25LV020)";
        str6 = "262144 bytes";
        num3 = 0;
        this.string_2 = "DevID: 0x9D 0x7D";
        this.string_3 = "PMC(PM25LV020)";
      }
      else if ((int) num1 == 239 && (int) num2 == 49)
      {
        str5 = "Winbond/NEX(W25B20/NX25B20)";
        str6 = "262144 bytes";
        num3 = 0;
        this.string_2 = "DevID: 0xEF 0x31";
        this.string_3 = "Winbond(W25B20)";
      }
      else if ((int) num1 == 55 && (int) num2 == 17)
      {
        str5 = "AMIC(A25L20P)";
        str6 = "262144 bytes";
        num3 = 0;
        this.string_2 = "DevID: 0x37 0x11";
        this.string_3 = "AMIC(A25L20P)";
      }
      else if ((int) num1 == 194 && (int) num2 == 17)
      {
        str5 = "MXIC(MX25L2005)";
        str6 = "262144 bytes";
        num3 = 0;
        this.string_2 = "DevID: 0xC2 0x11";
        this.string_3 = "MXIC(MX25L2005)";
      }
      else if ((int) num1 == 16 && (int) num2 == 0)
      {
        str5 = "Spansion(S25FL002D)";
        str6 = "262144 bytes";
        num3 = 0;
        this.string_2 = "DevID: 0x10 0x00";
        this.string_3 = "SPANSION(S25FL002D)";
      }
      else if ((int) num1 == 28 && (int) num2 == 20)
      {
        str5 = "EON(EN25P16)";
        str6 = "2097152 bytes";
        num3 = 0;
        this.string_2 = "DevID: 0x1C 0x14";
        this.string_3 = "EON(EN25P16)";
      }
      else if ((int) num1 == 239 && (int) num2 == 20)
      {
        str5 = "Winbond/NEX(W25P16/NX25P16)";
        str6 = "2097152 bytes";
        num3 = 0;
        this.string_2 = "DevID: 0xEF 0x14";
        this.string_3 = "Winbond(W25P16)";
      }
      else if ((int) num1 == 194 && (int) num2 == 20)
      {
        str5 = "MXIC(MX25L1605D)";
        str6 = "2097152 bytes";
        num3 = 0;
        this.string_2 = "DevID: 0xC2 0x14";
        this.string_3 = "MXIC(MX25L1605D)";
      }
      else if ((int) num1 == 28 && (int) num2 == 19)
      {
        str5 = "EON(EN25P80)";
        str6 = "1048576 bytes";
        num3 = 0;
        this.string_2 = "DevID: 0x1C 0x13";
        this.string_3 = "EON(EN25P80)";
      }
      else if ((int) num1 == 239 && (int) num2 == 19)
      {
        str5 = "Winbond/NEX(W25P80/NX25P80)";
        str6 = "1048576 bytes";
        num3 = 0;
        this.string_2 = "DevID: 0xEF 0x13";
        this.string_3 = "Winbond(W25P80)";
      }
      else if ((int) num1 == 194 && (int) num2 == 19)
      {
        str5 = "MXIC(MX25L8005)";
        str6 = "1048576 bytes";
        num3 = 0;
        this.string_2 = "DevID: 0xC2 0x13";
        this.string_3 = "MXIC(MX25L8005)";
      }
      else
      {
        str5 = "Unknown type";
        str6 = "n/a";
        num3 = 1;
      }
      this.label120.Text = str5;
      this.label121.Text = str6;
      this.textBox6.AppendText("Flash Name:  " + str5 + "\r\n");
      this.textBox6.AppendText("Flash Size:  " + str6 + "\r\n");
      this.label110.Text = "Drive in Vendor Mode!";
      this.label109.Text = "";
      this.label106.Text = "";
      this.label92.Text = "";
      this.label72.Text = "Drive in Vendor Mode!";
      this.label68.Text = "";
      this.label61.Text = "";
      this.label58.Text = "";
      this.label100.Text = "Drive in Vendor Mode!";
      this.label99.Text = "";
      this.label98.Text = "";
      this.label97.Text = "";
      return num3;
    }

    private void button7_Click(object sender, EventArgs e)
    {
      this.method_14();
      this.radioButton20.Checked = true;
      this.method_207();
      this.method_15();
    }

    private unsafe void method_207()
    {
      int selectedIndex = this.comboBox10.SelectedIndex;
      if (this.comboBox1.Items.Count == 0)
        return;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (uint) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("No Firmware is loaded to Target buffer," + "\n" + "Are you sure you wish to proceed ?", "Lite-On Erase", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num3 == 7)
        {
          this.textBox6.AppendText("Lite-On-Erase NOT sent " + "\r\n");
          return;
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 4 && (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("Firmware in Target buffer is not Lite-On," + "\n" + "Are you sure you wish to proceed ?", "Lite-On Erase", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num3 == 7)
        {
          this.textBox6.AppendText("Lite-On-Erase NOT sent " + "\r\n");
          return;
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (this.method_69() == 1 && this.method_107((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280)) != 1)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("Target DVDKey Can't be verified to drive !" + "\n" + "Are you sure you wish to proceed ?", "Lite-On Erase", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num3 == 7)
        {
          this.textBox6.AppendText("Lite-On-Erase NOT sent " + "\r\n");
          return;
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (this.method_69() == 1 && (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 4 && _Module.memcmp((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 130816), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 2028), 20U) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("The Target f/w in does not appear to match the attached drive !" + (object) "\n" + "This is based on a comparison of the drive barcode." + "\n" + (string) __arglist ("Please make sure you have done DVDKey32.", "\n\n", "Are you sure you wish to proceed ?"), "Lite-On Erase", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num3 == 7)
        {
          this.textBox6.AppendText("Lite-On-Erase NOT sent " + "\r\n");
          return;
        }
      }
      if (!this.bool_2)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("Are you 100% sure you have the Correct Drive Key" + (object) "\n\n" + "This Command will Completely Erase your Drive f/w!" + "\n\n" + (string) __arglist ("                Do you Wish to Proceed ?"), "Lite-On-Erase", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num3 == 7)
        {
          this.textBox6.AppendText("Lite-On-Erase NOT sent " + "\r\n");
          return;
        }
      }
      if (this.method_134() == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("When Erase is complete, Vendor Intro will be sent." + (object) "\n\n" + "Power drive Off then On in quick succession, Once!" + "\n\n" + (string) __arglist ("Drive should return Status 0x72 and a good Device ID.", "\n\n", "                Do you Wish to Proceed ?"), "Lite-On-Erase", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num3 == 7)
        {
          this.textBox6.AppendText("Lite-On-Erase NOT sent " + "\r\n");
          return;
        }
      }
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      this.textBox6.AppendText("\r\n" + "Sending Lite-On-Erase request to port " + this.label123.Text + "\r\n");
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 14), (byte) num2);
      _Module.Sleep(250U);
      this.textBox6.AppendText(".");
      _Module.Sleep(250U);
      this.textBox6.AppendText(".");
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 14), (byte) num2);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 8), (byte) 46);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 18), (byte) sbyte.MinValue);
      if (this.method_134() == 1)
      {
        new Thread(new ThreadStart(this.method_133)).Start();
      }
      else
      {
        for (int index = 0; index < 12; ++index)
        {
          _Module.Sleep(250U);
          this.textBox6.AppendText(".");
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num4 = (ushort) (byte) _Module.smethod_1(^(ushort&) ((IntPtr) &gstruct3 + 18));
      Struct20 struct20;
      _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) (byte) num4));
      this.textBox6.AppendText("\r\n" + "Drive returned Status 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20) + "\r\n");
      uint num5 = (uint) _Module.smethod_6();
      uint uint_0;
      while ((int) num4 != 114)
      {
        if ((uint) _Module.smethod_6() - num5 < 10000U)
        {
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 14), (byte) num2);
            _Module.Sleep(500U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 8), (byte) 46);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.smethod_2(^(ushort&) ((IntPtr) &gstruct3 + 18), (byte) sbyte.MinValue);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            num4 = (ushort) (byte) _Module.smethod_1(^(ushort&) ((IntPtr) &gstruct3 + 18));
            _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) (byte) num4));
            this.label122.Text = "Status 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
            Application.DoEvents();
            this.textBox6.AppendText(new string((sbyte*) &_Module.struct6_9));
            Application.DoEvents();
            if ((int) num4 != 242)
            {
              if ((int) num4 == 114)
              {
                this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                this.label122.Text = "Serial flash with status 0x72";
                _Module.Sleep(250U);
                int num3 = (int) this.method_258();
                _Module.Sleep(250U);
                int num6 = (int) this.method_252();
                uint_0 = (uint) this.method_304();
                break;
              }
            }
            else
            {
              this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
              this.label122.Text = "Serial flash with status 0x72";
              _Module.Sleep(250U);
              int num3 = (int) this.method_258();
              _Module.Sleep(250U);
              int num6 = (int) this.method_252();
              uint_0 = (uint) this.method_304();
              break;
            }
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return;
          }
        }
        else
        {
          this.textBox6.AppendText("\r\n" + "Device Intro failed!" + "\r\n");
          return;
        }
      }
      if (this.method_206(uint_0) != 0)
        return;
      Application.DoEvents();
      if (!this.bool_2)
        return;
      this.method_208();
    }

    private unsafe void method_208()
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No Firmware is loaded to Target buffer", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 4)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show("Firmware in Target buffer is not Lite-On, write aborted", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        else
        {
          this.Cursor = Cursors.WaitCursor;
          this.method_311();
          this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
          if (this.method_326() == 1)
          {
            this.Cursor = Cursors.Arrow;
          }
          else
          {
            this.Cursor = Cursors.Arrow;
            _Module.Sleep(500U);
            this.Cursor = Cursors.WaitCursor;
            this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
            this.method_307();
            this.Cursor = Cursors.Arrow;
            for (int index = 0; index < 262144; ++index)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + index) != (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + index))
              {
                this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                return;
              }
            }
            this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
            new Thread(new ThreadStart(this.method_162)).Start();
          }
        }
      }
    }

    private void button16_Click(object sender, EventArgs e)
    {
      this.method_14();
      this.method_209();
      this.method_15();
    }

    private void method_209()
    {
      this.textBox6.AppendText("Sending Vendor Outro to port " + this.label123.Text + "\r\n");
      int num = (int) this.method_251();
      this.toolTip_0.SetToolTip((Control) this.button42, "Lock/UnLock Slim Lite-On Spi ");
      this.button42.Enabled = false;
      this.button42.Text = "";
      this.label118.Text = "";
      this.label119.Text = "";
      this.label120.Text = "";
      this.label121.Text = "";
      this.label122.Text = "";
      _Module.Sleep(1500U);
      this.method_172();
    }

    private void button15_Click(object sender, EventArgs e)
    {
      this.method_14();
      this.method_210();
      this.method_15();
    }

    private void method_210()
    {
      if (this.radioButton19.Checked)
        this.method_212();
      else
        this.method_211();
    }

    private unsafe void method_211()
    {
      if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") == 0)
      {
        this.textBox6.AppendText("Unknown flash type Read aborted !" + "\r\n");
      }
      else
      {
        uint num1 = (uint) this.method_261();
        Struct20 struct20;
        _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num1));
        string str = "0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
        int num2 = _Module.clock();
        if ((int) num1 == 112)
        {
          this.textBox6.AppendText("Parallel flash found with Status 0x70" + "\r\n");
          this.Cursor = Cursors.WaitCursor;
          this.method_291();
          this.textBox6.AppendText("\r\n" + (object) "Dumped in " + Convert.ToString(_Module.clock() - num2) + "mS" + (string) __arglist ("\r\n"));
          this.Cursor = Cursors.Arrow;
          this.method_262();
          this.textBox6.AppendText("\r\n" + "Loading MTK_Flash source file " + "\r\n");
        }
        else if ((int) num1 == 115)
        {
          this.textBox6.AppendText("Serial flash found with Status 0x73" + "\r\n");
          this.Cursor = Cursors.WaitCursor;
          this.method_298();
          this.textBox6.AppendText("\r\n" + (object) "Dumped in " + Convert.ToString(_Module.clock() - num2) + "mS" + (string) __arglist ("\r\n"));
          this.Cursor = Cursors.Arrow;
          this.method_263();
          this.textBox6.AppendText("\r\n" + "Loading MTK_Flash source file " + "\r\n");
        }
        else if ((int) num1 == 114)
        {
          this.textBox6.AppendText("Serial flash found with Status 0x72" + "\r\n");
          this.Cursor = Cursors.WaitCursor;
          this.method_307();
          this.textBox6.AppendText("\r\n" + (object) "Dumped in " + Convert.ToString(_Module.clock() - num2) + "mS" + (string) __arglist ("\r\n"));
          this.Cursor = Cursors.Arrow;
          this.method_264();
          this.textBox6.AppendText("\r\n" + "Loading MTK_Flash source file " + "\r\n");
        }
        else
          this.textBox6.AppendText("Invalid Status " + str + "\r\n");
      }
    }

    private unsafe void method_212()
    {
      string strA = (string) null;
      int num1 = 0;
      Struct28 struct28_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_1 = (sbyte) -17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 1) = (sbyte) -76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 2) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 3) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 4) = (sbyte) 51;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 5) = (sbyte) -70;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 6) = (sbyte) 40;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 7) = (sbyte) 88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 8) = (sbyte) 99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 9) = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 10) = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 11) = (sbyte) 115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 12) = (sbyte) 79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 13) = (sbyte) -83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 14) = (sbyte) 24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_1 + 15) = (sbyte) -109;
      Struct28 struct28_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_2 = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 1) = (sbyte) -43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 2) = (sbyte) -91;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 3) = (sbyte) -17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 4) = (sbyte) -5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 5) = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 6) = (sbyte) 87;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 7) = (sbyte) -125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 8) = (sbyte) -4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 9) = (sbyte) 60;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 10) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 11) = (sbyte) 73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 12) = (sbyte) -89;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 13) = (sbyte) -78;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 14) = (sbyte) -71;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_2 + 15) = (sbyte) 12;
      Struct28 struct28_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_3 = (sbyte) 52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 1) = (sbyte) 69;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 2) = (sbyte) -79;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 3) = (sbyte) -42;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 4) = (sbyte) -29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 5) = (sbyte) -108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 6) = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 7) = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 8) = (sbyte) -58;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 9) = (sbyte) -28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 10) = (sbyte) -44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 11) = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 12) = (sbyte) -37;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 13) = (sbyte) 73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 14) = (sbyte) 84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_3 + 15) = (sbyte) 20;
      Struct28 struct28_4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_4 = (sbyte) 26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 1) = (sbyte) -62;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 2) = (sbyte) 56;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 3) = (sbyte) -48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 4) = (sbyte) -25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 5) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 6) = (sbyte) 102;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 7) = (sbyte) 115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 8) = (sbyte) -109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 9) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 10) = (sbyte) -19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 11) = (sbyte) -39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 12) = (sbyte) 109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 13) = (sbyte) -115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 14) = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_4 + 15) = (sbyte) 46;
      Struct28 struct28_5;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_5 = (sbyte) 64;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 1) = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 2) = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 3) = (sbyte) -48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 4) = (sbyte) 84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 5) = (sbyte) 22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 6) = (sbyte) 95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 7) = (sbyte) -46;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 8) = (sbyte) 63;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 9) = (sbyte) -55;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 10) = (sbyte) -48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 11) = (sbyte) 33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 12) = (sbyte) -127;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 13) = (sbyte) -66;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 14) = (sbyte) -103;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_5 + 15) = (sbyte) 53;
      Struct28 struct28_6;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28_6 = (sbyte) 123;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 2) = (sbyte) 74;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 3) = (sbyte) 89;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 4) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 5) = (sbyte) 11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 6) = (sbyte) -35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 7) = (sbyte) -125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 8) = (sbyte) -76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 9) = (sbyte) -60;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 10) = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 11) = (sbyte) 121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 12) = (sbyte) 111;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 13) = (sbyte) 65;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 14) = (sbyte) -88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct28_6 + 15) = (sbyte) 106;
      GStruct93 gstruct93;
      _Module.smethod_111(&gstruct93);
      GStruct19 gstruct19_1;
      // ISSUE: fault handler
      try
      {
        _Module.smethod_90(&gstruct19_1);
        // ISSUE: fault handler
        try
        {
          if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") == 0)
            this.textBox6.AppendText("Unknown flash type Read aborted !" + "\r\n");
          else
            goto label_8;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_8:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          uint num2 = (uint) this.method_261();
          Struct20 struct20;
          _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num2));
          string str = "0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
          if ((int) num2 != 114)
            this.textBox6.AppendText("Invalid Status " + str + "\r\n");
          else
            goto label_14;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_14:
      int num3;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.textBox6.AppendText("Serial flash found with Status 0x72" + "\r\n");
          num3 = this.method_323();
          if (num3 == 140)
            this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
          else
            goto label_20;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_20:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (num3 == 142)
            this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
          else
            goto label_26;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_26:
      Struct28 struct28_7;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.Cursor = Cursors.WaitCursor;
          this.textBox6.AppendText("Reading Drive Key." + "\r\n");
          int num2 = (int) this.method_256();
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) &struct28_7, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), 16U);
          int num4 = (int) this.method_259();
          for (int index = 0; index < 12; ++index)
          {
            _Module.Sleep(250U);
            this.textBox6.AppendText(".");
          }
          if (this.method_107((byte*) &struct28_7) == 1)
          {
            this.Cursor = Cursors.WaitCursor;
            this.textBox6.AppendText("\r\n" + "Authorised !" + "\r\n");
            goto label_36;
          }
          else
            this.textBox6.AppendText("\r\n" + "Authorisation Failed!" + "\r\n");
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_36:
      Struct28 struct28_8;
      int num5;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.textBox6.AppendText("Grabbing sector 0x3E000." + "\r\n");
          this.method_92((byte) 0, (byte) 0, (byte) 0, (byte*) &struct28_8);
          num5 = 16;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      int num6;
      Struct33 struct33_1;
      while (true)
      {
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            if (num5 < 32)
              num6 = 0;
            else
              goto label_62;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
        while (true)
        {
          // ISSUE: fault handler
          try
          {
            // ISSUE: fault handler
            try
            {
              if (num6 < 256)
              {
                if (this.method_91((byte) 0, (byte) num5, (byte) num6, (byte*) &struct28_8) == 0)
                  this.textBox6.AppendText("\r\n" + "Read Failed !" + "\r\n");
                else
                  goto label_49;
              }
              else
                break;
            }
            __fault
            {
              // ISSUE: cast to a function pointer type
              _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
            }
            _Module.smethod_92(&gstruct19_1);
            goto label_61;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
          }
label_49:
          // ISSUE: fault handler
          try
          {
            // ISSUE: fault handler
            try
            {
              _Module.memcpy((void*) ((IntPtr) &struct33_1 + num1), (void*) &struct28_8, 16U);
            }
            __fault
            {
              // ISSUE: cast to a function pointer type
              _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
            }
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
          }
          // ISSUE: fault handler
          try
          {
            // ISSUE: fault handler
            try
            {
              num6 += 16;
              num1 += 16;
            }
            __fault
            {
              // ISSUE: cast to a function pointer type
              _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
            }
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
          }
        }
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            this.textBox6.AppendText(".");
            Application.DoEvents();
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            ++num5;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
      }
label_61:
      _Module.smethod_112(&gstruct93);
      return;
label_62:
      Struct28 struct28_9;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.textBox6.AppendText(string.Concat((object) "\r\n"));
          GStruct19 gstruct19_2;
          int num2 = (int) _Module.smethod_115(&gstruct93, &gstruct19_2, (byte*) &struct33_1, 4096U);
          // ISSUE: fault handler
          try
          {
            _Module.smethod_93(&gstruct19_1, (GStruct19*) num2);
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_2);
          }
          _Module.smethod_92(&gstruct19_2);
          strA = new string(_Module.smethod_94(&gstruct19_1));
          if (this.method_93((byte) 35, (byte) 16, (byte) num6, (byte*) &struct28_9) != 1)
            this.textBox6.AppendText("Drive hashing failed, aborting!" + "\r\n");
          else
            goto label_71;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_71:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (string.Compare(strA, "72fedc223e7285fa14e97efc5c26f095") == 0)
          {
            if (_Module.memcmp((void*) &struct28_9, (void*) &struct28_1, 16U) != 0)
              this.textBox6.AppendText("Unknown f/w, aborting !" + "\r\n");
            else
              goto label_78;
          }
          else
            goto label_96;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_78:
      Struct33 struct33_2;
      Struct33 struct33_3;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.textBox6.AppendText("Known f/w confirmed !" + "\r\n");
          _Module.memcpy((void*) &struct33_2, (void*) &struct33_1, 4096U);
          _Module.memcpy((void*) &struct33_3, (void*) &struct33_1, 4096U);
          for (num6 = 0; num6 < 1568; ++num6)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct33_3 + (num6 + 1536)) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct33_3 + (num6 + 1536)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct61_0 + num6));
          }
          this.method_189();
          this.textBox6.AppendText("\r\n" + "Updating flash for on-line dump." + "\r\n");
          if (this.method_329() != 0)
            goto label_86;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_86:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (this.method_330((byte*) &struct33_3) != 0)
            goto label_91;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_91:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          int num2 = (int) this.method_259();
          for (int index = 0; index < 12; ++index)
          {
            _Module.Sleep(250U);
            this.textBox6.AppendText(".");
          }
          goto label_207;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
label_96:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (string.Compare(strA, "641c9d5df2a5b22549970a9904f82aba") == 0)
          {
            if (_Module.memcmp((void*) &struct28_9, (void*) &struct28_1, 16U) != 0)
              this.textBox6.AppendText("Unknown f/w, aborting !" + "\r\n");
            else
              goto label_103;
          }
          else
            goto label_108;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_103:
      Struct33 struct33_4;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.textBox6.AppendText("Modded sector detected !" + "\r\n");
          this.textBox6.AppendText("Ready for on-line dump." + "\r\n");
          _Module.memcpy((void*) &struct33_2, (void*) &struct33_1, 4096U);
          _Module.memcpy((void*) &struct33_4, (void*) &struct33_1, 4096U);
          for (num6 = 0; num6 < 1568; ++num6)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct33_2 + (num6 + 1536)) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct33_2 + (num6 + 1536)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct61_0 + num6));
          }
          goto label_207;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
label_108:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (string.Compare(strA, "29d96e15f409aadec008b539203ff300") == 0)
          {
            if (_Module.memcmp((void*) &struct28_9, (void*) &struct28_4, 16U) != 0)
              this.textBox6.AppendText("Unknown f/w, aborting !" + "\r\n");
            else
              goto label_115;
          }
          else
            goto label_133;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_115:
      Struct33 struct33_5;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.textBox6.AppendText("Known f/w confirmed !" + "\r\n");
          _Module.memcpy((void*) &struct33_2, (void*) &struct33_1, 4096U);
          _Module.memcpy((void*) &struct33_5, (void*) &struct33_1, 4096U);
          for (num6 = 0; num6 < 80; ++num6)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct33_5 + (num6 + 2064)) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct33_5 + (num6 + 2064)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct31_0 + num6));
          }
          this.method_189();
          this.textBox6.AppendText("\r\n" + "Updating flash for on-line dump." + "\r\n");
          if (this.method_329() != 0)
            goto label_123;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_123:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (this.method_330((byte*) &struct33_5) != 0)
            goto label_128;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_128:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          int num2 = (int) this.method_259();
          for (int index = 0; index < 12; ++index)
          {
            _Module.Sleep(250U);
            this.textBox6.AppendText(".");
          }
          goto label_207;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
label_133:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (string.Compare(strA, "70e8e44dba1f2c9cd419f253f8a8da55") == 0)
          {
            if (_Module.memcmp((void*) &struct28_9, (void*) &struct28_4, 16U) != 0)
              this.textBox6.AppendText("Unknown f/w, aborting !" + "\r\n");
            else
              goto label_140;
          }
          else
            goto label_145;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_140:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.textBox6.AppendText("Modded sector detected !" + "\r\n");
          this.textBox6.AppendText("Ready for on-line dump." + "\r\n");
          _Module.memcpy((void*) &struct33_2, (void*) &struct33_1, 4096U);
          _Module.memcpy((void*) &struct33_4, (void*) &struct33_1, 4096U);
          for (num6 = 0; num6 < 80; ++num6)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct33_2 + (num6 + 2064)) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct33_2 + (num6 + 2064)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct31_0 + num6));
          }
          goto label_207;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
label_145:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (string.Compare(strA, "2445fc4f85f71359de0406003c60d559") == 0)
          {
            if (_Module.memcmp((void*) &struct28_9, (void*) &struct28_2, 16U) != 0)
            {
              if (_Module.memcmp((void*) &struct28_9, (void*) &struct28_3, 16U) != 0)
              {
                if (_Module.memcmp((void*) &struct28_9, (void*) &struct28_5, 16U) != 0)
                {
                  if (_Module.memcmp((void*) &struct28_9, (void*) &struct28_6, 16U) != 0)
                    this.textBox6.AppendText("Unknown f/w, aborting !" + "\r\n");
                  else
                    goto label_155;
                }
                else
                  goto label_155;
              }
              else
                goto label_155;
            }
            else
              goto label_155;
          }
          else
            goto label_158;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_155:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.textBox6.AppendText("Modded sector detected !" + "\r\n");
          this.textBox6.AppendText("Ready for on-line dump." + "\r\n");
          _Module.memset((void*) &struct33_2, (int) byte.MaxValue, 4096U);
          _Module.memcpy((void*) &struct33_4, (void*) &struct33_1, 4096U);
          goto label_207;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
label_158:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (string.Compare(strA, "b8164e88115adea4ecd164fb88ccb426") == 0)
          {
            if (_Module.memcmp((void*) &struct28_9, (void*) &struct28_4, 16U) != 0)
              this.textBox6.AppendText("Unknown f/w, aborting !" + "\r\n");
            else
              goto label_165;
          }
          else
            goto label_168;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_165:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.textBox6.AppendText("Modded sector detected !" + "\r\n");
          this.textBox6.AppendText("Ready for on-line dump." + "\r\n");
          _Module.memset((void*) &struct33_2, (int) byte.MaxValue, 4096U);
          _Module.memcpy((void*) &struct33_4, (void*) &struct33_1, 4096U);
          goto label_207;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
label_168:
      Struct33 struct33_6;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (string.Compare(strA, "6ae59e64850377ee5470c854761551ea") == 0)
          {
            this.textBox6.AppendText("Blank 3E000 sector detected!" + "\r\n");
            if (_Module.memcmp((void*) &struct28_9, (void*) &struct28_2, 16U) != 0 && _Module.memcmp((void*) &struct28_9, (void*) &struct28_3, 16U) != 0 && _Module.memcmp((void*) &struct28_9, (void*) &struct28_5, 16U) != 0)
            {
              if (_Module.memcmp((void*) &struct28_9, (void*) &struct28_6, 16U) != 0)
                goto label_186;
            }
            this.textBox6.AppendText("Known f/w confirmed !" + "\r\n");
            _Module.memset((void*) &struct33_2, (int) byte.MaxValue, 4096U);
            _Module.memcpy((void*) &struct33_6, (void*) &struct33_1, 4096U);
            _Module.memcpy((void*) ((IntPtr) &struct33_6 + 2048), (void*) &_Module.struct59_1, 84U);
            this.method_200();
            this.textBox6.AppendText("\r\n" + "Updating flash for on-line dump." + "\r\n");
            if (this.method_329() != 0)
              goto label_176;
          }
          else
            goto label_207;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_176:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (this.method_330((byte*) &struct33_6) != 0)
            goto label_181;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_181:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          int num2 = (int) this.method_259();
          for (int index = 0; index < 12; ++index)
          {
            _Module.Sleep(250U);
            this.textBox6.AppendText(".");
          }
          goto label_207;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
label_186:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (_Module.memcmp((void*) &struct28_9, (void*) &struct28_4, 16U) == 0)
          {
            this.textBox6.AppendText("Known f/w confirmed !" + "\r\n");
            _Module.memset((void*) &struct33_2, (int) byte.MaxValue, 4096U);
            _Module.memcpy((void*) &struct33_6, (void*) &struct33_1, 4096U);
            _Module.memcpy((void*) ((IntPtr) &struct33_6 + 2048), (void*) &_Module.struct59_0, 84U);
            this.method_200();
            this.textBox6.AppendText("\r\n" + "Updating flash for on-line dump." + "\r\n");
            if (this.method_329() != 0)
              goto label_192;
          }
          else
            goto label_202;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_192:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (this.method_330((byte*) &struct33_6) != 0)
            goto label_197;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_197:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          int num2 = (int) this.method_259();
          for (int index = 0; index < 12; ++index)
          {
            _Module.Sleep(250U);
            this.textBox6.AppendText(".");
          }
          goto label_207;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
label_202:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.textBox6.AppendText("Unknown f/w, Aborting !" + "\r\n");
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_207:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (this.method_214((byte*) &struct33_2) == 0)
            this.Cursor = Cursors.Arrow;
          else
            goto label_213;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_213:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          int num2 = (int) this.method_253();
          this.textBox6.AppendText("Restoring sector 0x3E000." + "\r\n");
          if (this.method_324() == 0)
          {
            this.method_264();
            this.Cursor = Cursors.Arrow;
          }
          else
            goto label_219;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_219:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (this.method_329() == 0)
          {
            this.method_264();
            this.Cursor = Cursors.Arrow;
          }
          else
            goto label_225;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_225:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (this.method_330((byte*) &struct33_2) == 0)
          {
            this.method_264();
            this.Cursor = Cursors.Arrow;
          }
          else
            goto label_231;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_231:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          int num2 = (int) this.method_259();
          for (int index = 0; index < 12; ++index)
          {
            _Module.Sleep(250U);
            this.textBox6.AppendText(".");
          }
          if (this.method_107((byte*) &struct28_7) == 1)
          {
            this.Cursor = Cursors.WaitCursor;
            this.textBox6.AppendText("\r\n" + "Authorised !" + "\r\n");
            goto label_241;
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Authorisation Failed!" + "\r\n");
            this.method_264();
            this.Cursor = Cursors.Arrow;
          }
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_241:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.method_92((byte) 0, (byte) 0, (byte) 0, (byte*) &struct28_8);
          num1 = 0;
          num5 = 16;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      while (true)
      {
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            if (num5 < 32)
              num6 = 0;
            else
              goto label_267;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
        while (true)
        {
          // ISSUE: fault handler
          try
          {
            // ISSUE: fault handler
            try
            {
              if (num6 < 256)
              {
                if (this.method_91((byte) 0, (byte) num5, (byte) num6, (byte*) &struct28_8) == 0)
                {
                  this.textBox6.AppendText("\r\n" + "Read Failed !" + "\r\n");
                  this.method_264();
                }
                else
                  goto label_254;
              }
              else
                break;
            }
            __fault
            {
              // ISSUE: cast to a function pointer type
              _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
            }
            _Module.smethod_92(&gstruct19_1);
            goto label_266;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
          }
label_254:
          // ISSUE: fault handler
          try
          {
            // ISSUE: fault handler
            try
            {
              _Module.memcpy((void*) ((IntPtr) &struct33_1 + num1), (void*) &struct28_8, 16U);
            }
            __fault
            {
              // ISSUE: cast to a function pointer type
              _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
            }
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
          }
          // ISSUE: fault handler
          try
          {
            // ISSUE: fault handler
            try
            {
              num6 += 16;
              num1 += 16;
            }
            __fault
            {
              // ISSUE: cast to a function pointer type
              _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
            }
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
          }
        }
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            this.textBox6.AppendText(".");
            Application.DoEvents();
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            ++num5;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
      }
label_266:
      _Module.smethod_112(&gstruct93);
      return;
label_267:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.textBox6.AppendText(string.Concat((object) "\r\n"));
          num6 = 0;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      while (true)
      {
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            if (num6 < 4096)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(byte&) ((IntPtr) &struct33_2 + num6) != (int) ^(byte&) ((IntPtr) &struct33_1 + num6))
              {
                this.textBox6.AppendText("Restore 0x3E000 failed !" + "\r\n");
                this.method_264();
              }
              else
                goto label_276;
            }
            else
              goto label_283;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
          _Module.smethod_92(&gstruct19_1);
          break;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
label_276:
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            ++num6;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
      }
      _Module.smethod_112(&gstruct93);
      return;
label_283:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.textBox6.AppendText("Restore 0x3E000 verified !" + "\r\n");
          this.method_264();
          this.Cursor = Cursors.Arrow;
          this.method_177();
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
    }

    private unsafe void method_213()
    {
      Struct33 struct33_1;
      _Module.memset((void*) &struct33_1, (int) byte.MaxValue, 4096U);
      Struct33 struct33_2;
      _Module.memset((void*) &struct33_2, (int) byte.MaxValue, 4096U);
      _Module.memcpy((void*) ((IntPtr) &struct33_2 + 2048), (void*) &_Module.struct59_1, 84U);
      if (this.method_329() == 0)
      {
        this.Cursor = Cursors.Arrow;
      }
      else
      {
        if (this.method_330((byte*) &struct33_2) != 0)
          return;
        this.Cursor = Cursors.Arrow;
      }
    }

    private unsafe int method_214(byte* pByte_0)
    {
      Struct28 struct28;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28 + 1), 0, 15);
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      this.Cursor = Cursors.WaitCursor;
      int num3 = _Module.clock();
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct33 struct33;
      Struct52 struct52;
      uint num4;
      Struct32 struct32;
      for (byte index1 = (byte) 0; (int) index1 < 4; ++index1)
      {
        this.textBox6.AppendText("\r\n" + "Reading Bank " + Convert.ToString(index1) + ": ");
        this.string_2 = "Reading Bank " + Convert.ToString(index1) + ": ";
        this.string_3 = "";
        for (byte index2 = (byte) 0; (int) index2 < 2; ++index2)
        {
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            _Module.memset((void*) &struct33, 0, 4096U);
            _Module.memset((void*) &struct52, 0, 12U);
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) @struct52 = (sbyte) -3;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 15;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 80;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 76;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 68;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 83;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) ((int) index1 * 16 + (int) index2 * 8);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 16;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 0;
            if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct28, &num4, 16U, (byte) 1, &gstruct3) == 0)
            {
              for (byte index3 = (byte) 0; (int) index3 < 8; ++index3)
              {
                this.textBox6.AppendText(".");
                this.string_3 = this.string_3 + ".";
                Application.DoEvents();
                if (_Module.smethod_9((void*) &struct33, &num4, 4096U, 512U, &gstruct3) != 0)
                  return 0;
                _Module.memcpy((void*) ((IntPtr) &struct32 + ((int) index1 * 65536 + (int) index2 * 32768 + (int) index3 * 4096)), (void*) &struct33, 4096U);
              }
            }
            else
            {
              this.textBox6.AppendText("Dump Failed" + "\r\n");
              this.Cursor = Cursors.Arrow;
              return 0;
            }
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return 0;
          }
        }
      }
      if ((int) *pByte_0 != 0)
        _Module.memcpy((void*) ((IntPtr) &struct32 + 253952), (void*) pByte_0, 4096U);
      this.textBox6.AppendText("\r\n" + (object) "Dumped in " + Convert.ToString(_Module.clock() - num3) + "mS" + (string) __arglist ("\r\n"));
      this.textBox6.AppendText("\r\n");
      this.string_2 = "Done! ";
      this.string_3 = "";
      _Module.memset((void*) &struct33, 0, 4096U);
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 80;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 0;
      if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct28, &num4, 16U, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("Dump Failed" + "\r\n");
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        this.Cursor = Cursors.Arrow;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
        return 1;
      }
    }

    private unsafe int method_215()
    {
      Struct28 struct28;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28 + 1), 0, 15);
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      this.Cursor = Cursors.WaitCursor;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 80;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 76;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 0;
      uint num3;
      if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct28, &num3, 16U, (byte) 1, &gstruct3) != 0)
      {
        this.Cursor = Cursors.Arrow;
        return 0;
      }
      else
      {
        this.Cursor = Cursors.Arrow;
        return 1;
      }
    }

    private void button14_Click(object sender, EventArgs e)
    {
      this.method_14();
      this.method_216();
      this.method_15();
    }

    private void method_216()
    {
      if (this.radioButton19.Checked)
        this.method_218();
      if (this.radioButton21.Checked)
        this.method_219();
      else
        this.method_217();
    }

    private unsafe void method_217()
    {
      if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") == 0)
      {
        this.textBox6.AppendText("Unknown flash type Erase aborted !" + "\r\n");
      }
      else
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num1 = (int) MessageBox.Show("You are about to Erase your flash," + "\n" + "Are you sure you wish to proceed ?", "Erase Flash", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num1 == 7)
          return;
        uint num2 = (uint) this.method_261();
        Struct20 struct20;
        _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num2));
        string str = "0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
        if ((int) num2 == 112)
        {
          this.textBox6.AppendText("Parallel flash found with Status 0x70" + "\r\n");
          this.Cursor = Cursors.WaitCursor;
          this.method_292();
          _Module.Sleep(200U);
          this.textBox6.AppendText("Blank Test !" + "\r\n");
          int num3 = this.method_293();
          this.Cursor = Cursors.Arrow;
          if (num3 != 1)
            this.textBox6.AppendText("Blank test Failed !" + "\r\n");
          else
            this.textBox6.AppendText("Blank verified OK !" + "\r\n");
        }
        else if ((int) num2 == 115)
        {
          this.textBox6.AppendText("SPi flash found with Status 0x73" + "\r\n");
          this.method_299();
          this.textBox6.AppendText("Blank Test !" + "\r\n");
          this.method_298();
          this.Cursor = Cursors.Arrow;
          for (int index = 0; index < 262144; ++index)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + index) != (int) byte.MaxValue)
            {
              this.textBox6.AppendText("Blank test Failed !" + "\r\n");
              return;
            }
          }
          this.textBox6.AppendText("Blank verified OK !" + "\r\n");
        }
        else if ((int) num2 == 114)
        {
          this.textBox6.AppendText("SPi flash found with Status 0x72" + "\r\n");
          this.Cursor = Cursors.WaitCursor;
          this.method_311();
          this.textBox6.AppendText("Blank Test !" + "\r\n");
          this.method_307();
          this.Cursor = Cursors.Arrow;
          for (int index = 0; index < 262144; ++index)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + index) != (int) byte.MaxValue)
            {
              this.textBox6.AppendText("Blank test Failed !" + "\r\n");
              return;
            }
          }
          this.textBox6.AppendText("Blank verified OK !" + "\r\n");
        }
        else
        {
          this.textBox6.AppendText("Invalid Status " + str + "\r\n");
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num3 = (int) MessageBox.Show("Drive returned Invalid Status!", "Flash Erase", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
      }
    }

    private unsafe void method_218()
    {
      if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") == 0)
      {
        this.textBox6.AppendText("Unknown flash type Erase aborted !" + "\r\n");
      }
      else
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num1 = (int) MessageBox.Show("You are about to Erase your flash," + "\n" + "Are you sure you wish to proceed ?", "Erase Flash", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num1 == 7)
          return;
        uint num2 = (uint) this.method_261();
        Struct20 struct20;
        _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num2));
        string str = "0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
        if ((int) num2 == 114)
        {
          this.textBox6.AppendText("SPi flash found with Status 0x72" + "\r\n");
          this.Cursor = Cursors.WaitCursor;
          this.method_312();
          this.textBox6.AppendText("Done !" + "\r\n");
          this.Cursor = Cursors.Arrow;
        }
        else
        {
          this.textBox6.AppendText("Invalid Status " + str + "\r\n");
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num3 = (int) MessageBox.Show("Drive returned Invalid Status!", "Flash Erase", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
      }
    }

    private unsafe void method_219()
    {
      if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") == 0)
      {
        this.textBox6.AppendText("Unknown flash type Erase aborted !" + "\r\n");
      }
      else
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num1 = (int) MessageBox.Show("You are about to Erase your flash," + "\n" + "Are you sure you wish to proceed ?", "Erase Flash", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num1 == 7)
          return;
        uint num2 = (uint) this.method_261();
        Struct20 struct20;
        _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num2));
        string str = "0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
        if ((int) num2 == 114)
        {
          this.textBox6.AppendText("SPi flash found with Status 0x72" + "\r\n");
          this.Cursor = Cursors.WaitCursor;
          this.method_313();
          this.textBox6.AppendText("Done !" + "\r\n");
          this.Cursor = Cursors.Arrow;
        }
        else
        {
          this.textBox6.AppendText("Invalid Status " + str + "\r\n");
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num3 = (int) MessageBox.Show("Drive returned Invalid Status!", "Flash Erase", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
      }
    }

    private void button42_Click(object sender, EventArgs e)
    {
      if (this.radioButton19.Checked)
        this.method_221();
      else
        this.method_220();
    }

    private unsafe void method_220()
    {
      int num1 = 0;
      this.Cursor = Cursors.WaitCursor;
      if (string.Compare(this.button42.Text, "0x00") == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num2 = (int) MessageBox.Show("This Lock is intended for:" + (object) "\r\n" + " - XECUTER DG-16D4S UNLOCKED PCB" + "\r\n" + (string) __arglist (" - XECUTER DG-16D4S PRO INSTALL KIT", "\r\n\r\n", "You should not attempt to lock a Phat Lite-on.", "\r\n", "If you do, LO-Erase will fail !", "\r\n", "You will have no recourse other than to MRA ", "\r\n", "the drive to Intro it."), "SPi Lock", MessageBoxButtons.OKCancel, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num2 == 2)
        {
          this.Cursor = Cursors.Arrow;
          return;
        }
        else
        {
          this.textBox6.AppendText("\r\n" + "Sending Spi Lock request to Port " + this.label123.Text + "\r\n");
          if (this.method_314() == 1)
          {
            this.button42.Text = "0x8C";
            this.toolTip_0.SetToolTip((Control) this.button42, "Click to clear Spi status register");
          }
          else
            this.textBox6.AppendText("Lock Failed !" + "\r\n" + "Spi Status: 0x00" + "\r\n");
        }
      }
      else if (string.Compare(this.button42.Text, "0x8C") == 0)
      {
        this.textBox6.AppendText("\r\n" + "Sending Spi UnLock request to Port " + this.label123.Text + "\r\n");
        if (this.method_315() == 1)
        {
          this.button42.Text = "0x00";
          this.toolTip_0.SetToolTip((Control) this.button42, "Click to lock Spi status register");
        }
        else
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num2 = (int) MessageBox.Show("Spi Status Register is H/W protected" + (object) "\n" + "If you wish to resend clear Spi Status Register" + "\n\n" + (string) __arglist ("Press Escape to cancel."), "SPI Status 0x8C", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          if (num2 == 6)
          {
            this.Cursor = Cursors.AppStarting;
            while (this.method_315() == 0)
            {
              _Module.Sleep(5U);
              ++num1;
              if ((int) _Module.GetAsyncKeyState(27) == 0)
              {
                if (num1 % 8 == 0)
                  this.textBox6.AppendText(".");
                Application.DoEvents();
              }
              else
              {
                this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                this.Cursor = Cursors.Arrow;
                return;
              }
            }
            this.Cursor = Cursors.Arrow;
          }
        }
      }
      this.Cursor = Cursors.Arrow;
    }

    private unsafe void method_221()
    {
      int num1 = 0;
      this.Cursor = Cursors.WaitCursor;
      if (string.Compare(this.button42.Text, "0x00") == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num2 = (int) MessageBox.Show("***                                 Warning                                     ***" + (object) "\r\n\r\n" + "This lock can be quite permanent... You should stop if: " + "\r\n" + (string) __arglist ("You do not have a Sputnik or Russian type hack for MXIC.", "\r\n", "                                      -OR-  ", "\r\n", "Cannot do a Kamikaze hack on Winbond."), "SPi Lock", MessageBoxButtons.OKCancel, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num2 == 2)
        {
          this.Cursor = Cursors.Arrow;
          return;
        }
        else
        {
          this.textBox6.AppendText("\r\n" + "Sending Spi Lock request to Port " + this.label123.Text + "\r\n");
          if (this.method_322() == 1)
          {
            this.button42.Text = "0x8C";
            this.toolTip_0.SetToolTip((Control) this.button42, "Click to clear Spi status register");
          }
          else
            this.textBox6.AppendText("Lock Failed !" + "\r\n" + "Spi Status: 0x00" + "\r\n");
        }
      }
      else if (string.Compare(this.button42.Text, "0x8C") == 0)
      {
        this.textBox6.AppendText("\r\n" + "Sending Spi UnLock request to Port " + this.label123.Text + "\r\n");
        if (this.method_321() == 1)
        {
          this.button42.Text = "0x00";
          this.toolTip_0.SetToolTip((Control) this.button42, "Click to lock Spi status register");
        }
        else
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num2 = (int) MessageBox.Show("Spi Status Register is H/W protected" + (object) "\n" + "If you wish to resend clear Spi Status Register" + "\n\n" + (string) __arglist ("Press Escape to cancel."), "SPI Status 0x8C", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          if (num2 == 6)
          {
            this.Cursor = Cursors.AppStarting;
            while (this.method_321() == 0)
            {
              _Module.Sleep(5U);
              ++num1;
              if ((int) _Module.GetAsyncKeyState(27) == 0)
              {
                if (num1 % 16 == 0)
                  this.textBox6.AppendText(".");
                Application.DoEvents();
              }
              else
              {
                this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                this.Cursor = Cursors.Arrow;
                return;
              }
            }
            this.Cursor = Cursors.Arrow;
          }
        }
      }
      this.Cursor = Cursors.Arrow;
    }

    private void button13_Click(object sender, EventArgs e)
    {
      this.method_14();
      if (((int) _Module.GetAsyncKeyState(17) & 32768) != 0)
        this.method_226();
      else
        this.method_222();
      this.method_15();
    }

    private void method_222()
    {
      if (this.radioButton19.Checked)
        this.method_224();
      else if (this.radioButton21.Checked)
        this.method_225();
      else
        this.method_223();
    }

    private unsafe void method_223()
    {
      if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") == 0)
      {
        this.textBox6.AppendText("Unknown flash type Write aborted !" + "\r\n");
      }
      else
      {
        uint num1 = (uint) this.method_261();
        Struct20 struct20;
        _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num1));
        string str = "0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num2 = (int) MessageBox.Show("No Firmware is loaded to Target buffer", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        else
        {
          if (!this.bool_10 & !this.bool_11)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num2 = (int) MessageBox.Show("Target has not been spoofed," + "\n" + "Are you sure you wish to proceed ?", "F/W Write", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            if (num2 == 7)
              return;
          }
          Application.DoEvents();
          if ((int) num1 == 112)
          {
            this.textBox6.AppendText("Parallel flash found with Status 0x70" + "\r\n");
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 1)
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num2 = (int) MessageBox.Show("Firmware in Target buffer is not Samsung, write aborted", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
              this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
              this.Cursor = Cursors.WaitCursor;
              this.method_292();
              if (this.method_296() == 1)
              {
                this.Cursor = Cursors.Arrow;
              }
              else
              {
                this.Cursor = Cursors.Arrow;
                _Module.Sleep(500U);
                this.Cursor = Cursors.WaitCursor;
                this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                this.method_291();
                this.Cursor = Cursors.Arrow;
                for (int index = 0; index < 262144; ++index)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + index) != (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + index))
                  {
                    this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                    return;
                  }
                }
                this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                this.string_2 = "Write verified !";
                this.string_3 = "OK";
              }
            }
          }
          else if ((int) num1 == 115)
          {
            this.textBox6.AppendText("SPi flash found with Status 0x73" + "\r\n");
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 3)
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num2 = (int) MessageBox.Show("Firmware in Target buffer is not Benq, write aborted", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
              this.Cursor = Cursors.WaitCursor;
              this.method_299();
              this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
              if (this.method_302() == 1)
              {
                this.Cursor = Cursors.Arrow;
              }
              else
              {
                this.Cursor = Cursors.Arrow;
                _Module.Sleep(500U);
                this.Cursor = Cursors.WaitCursor;
                this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                this.method_298();
                this.Cursor = Cursors.Arrow;
                for (int index = 0; index < 262144; ++index)
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + index) != (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + index))
                  {
                    this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                    return;
                  }
                }
                this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                this.string_2 = "Write verified !";
                this.string_3 = "OK";
              }
            }
          }
          else if ((int) num1 == 114)
          {
            this.textBox6.AppendText("SPi flash found with Status 0x72" + "\r\n");
            switch ((uint) this.method_317())
            {
              case 140U:
                this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
                break;
              case 142U:
                this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
                break;
              default:
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 7 && (int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 5 && ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 4 && *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 560) != 70628) && (*(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 560) != 73464 && *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 560) != 82278))
                {
                  // ISSUE: cast to a function pointer type
                  _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                  int num2 = (int) MessageBox.Show("Firmware in Target buffer is not Lite-On, write aborted", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                  _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                  break;
                }
                else
                {
                  this.Cursor = Cursors.WaitCursor;
                  this.method_311();
                  this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                  if (this.method_326() == 1)
                  {
                    this.Cursor = Cursors.Arrow;
                    break;
                  }
                  else
                  {
                    this.Cursor = Cursors.Arrow;
                    if (!this.radioButton20.Checked)
                      break;
                    _Module.Sleep(500U);
                    this.Cursor = Cursors.WaitCursor;
                    this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                    this.method_307();
                    this.Cursor = Cursors.Arrow;
                    for (int index = 0; index < 262144; ++index)
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + index) != (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + index))
                      {
                        this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                        return;
                      }
                    }
                    this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                    this.string_2 = "Write verified !";
                    this.string_3 = "OK";
                    break;
                  }
                }
            }
          }
          else
          {
            this.textBox6.AppendText("Invalid Status " + str + "\r\n");
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num2 = (int) MessageBox.Show("Drive returned Invalid Status!", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          }
        }
      }
    }

    private unsafe void method_224()
    {
      string str = (string) null;
      string strA = (string) null;
      int num1 = 0;
      GStruct93 gstruct93;
      _Module.smethod_111(&gstruct93);
      GStruct19 gstruct19_1;
      // ISSUE: fault handler
      try
      {
        _Module.smethod_90(&gstruct19_1);
        // ISSUE: fault handler
        try
        {
          if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") == 0)
            this.textBox6.AppendText("Unknown flash type Write aborted !" + "\r\n");
          else
            goto label_8;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_8:
      uint num2;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          num2 = (uint) this.method_261();
          Struct20 struct20;
          _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num2));
          str = new string((sbyte*) &_Module.struct19_0);
          str = str + new string((sbyte*) &struct20);
          str = "0x" + str;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 0)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num3 = (int) MessageBox.Show("No Firmware is loaded to Target buffer", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          }
          else
            goto label_14;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_14:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (!this.bool_10 & !this.bool_11)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num3 = (int) MessageBox.Show("Target has not been spoofed," + "\n" + "Are you sure you wish to proceed ?", "F/W Write", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            if (num3 != 7)
              goto label_20;
          }
          else
            goto label_20;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_20:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          Application.DoEvents();
          if ((int) num2 != 114)
          {
            this.textBox6.AppendText("Invalid Status " + str + "\r\n");
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num3 = (int) MessageBox.Show("Drive returned Invalid Status!", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          }
          else
            goto label_26;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_26:
      uint num4;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.textBox6.AppendText("SPi flash found with Status 0x72" + "\r\n");
          num4 = (uint) this.method_323();
          if ((int) num4 == 140)
            this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
          else
            goto label_32;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_32:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if ((int) num4 == 142)
            this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
          else
            goto label_38;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_38:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 5)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num3 = (int) MessageBox.Show("Firmware in Target buffer is not Lite-On, write aborted", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          }
          else
            goto label_44;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_44:
      Struct33 struct33_1;
      Struct33 struct33_2;
      Struct33 struct33_3;
      int num5;
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) &struct33_1, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 253952), 4096U);
          GStruct19 gstruct19_2;
          int num3 = (int) _Module.smethod_115(&gstruct93, &gstruct19_2, (byte*) &struct33_1, 4096U);
          // ISSUE: fault handler
          try
          {
            _Module.smethod_93(&gstruct19_1, (GStruct19*) num3);
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_2);
          }
          _Module.smethod_92(&gstruct19_2);
          strA = new string(_Module.smethod_94(&gstruct19_1));
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 1)
          {
            if (string.Compare(strA, "72fedc223e7285fa14e97efc5c26f095") == 0)
            {
              _Module.memcpy((void*) &struct33_2, (void*) &struct33_1, 4096U);
              _Module.memcpy((void*) &struct33_3, (void*) &struct33_1, 4096U);
              for (num5 = 0; num5 < 1568; ++num5)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(sbyte&) ((IntPtr) &struct33_3 + (num5 + 1536)) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct33_3 + (num5 + 1536)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct61_0 + num5));
              }
              goto label_56;
            }
          }
          else
            goto label_59;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_56:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        goto label_84;
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
label_59:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) != 2 && (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) != 3)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) != 5)
              goto label_70;
          }
          if (string.Compare(strA, "6ae59e64850377ee5470c854761551ea") == 0)
          {
            _Module.memcpy((void*) &struct33_2, (void*) &struct33_1, 4096U);
            _Module.memcpy((void*) &struct33_3, (void*) &struct33_1, 4096U);
            _Module.memcpy((void*) ((IntPtr) &struct33_3 + 2048), (void*) &_Module.struct59_1, 84U);
            goto label_67;
          }
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_67:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        goto label_84;
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
label_70:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) == 4)
          {
            if (string.Compare(strA, "6ae59e64850377ee5470c854761551ea") == 0)
            {
              _Module.memcpy((void*) &struct33_2, (void*) &struct33_1, 4096U);
              _Module.memcpy((void*) &struct33_3, (void*) &struct33_1, 4096U);
              _Module.memcpy((void*) ((IntPtr) &struct33_3 + 2048), (void*) &_Module.struct59_0, 84U);
              goto label_81;
            }
            else if (string.Compare(strA, "29d96e15f409aadec008b539203ff300") == 0)
            {
              _Module.memcpy((void*) &struct33_2, (void*) &struct33_1, 4096U);
              _Module.memcpy((void*) &struct33_3, (void*) &struct33_1, 4096U);
              for (num5 = 0; num5 < 80; ++num5)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                ^(sbyte&) ((IntPtr) &struct33_3 + (num5 + 2064)) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct33_3 + (num5 + 2064)) ^ (int) ^(byte&) ((IntPtr) &_Module.struct31_0 + num5));
              }
              goto label_81;
            }
          }
          else
            goto label_158;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_81:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        goto label_84;
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
label_158:
      // ISSUE: fault handler
      try
      {
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_84:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 253952), (void*) &struct33_3, 4096U);
          this.Cursor = Cursors.WaitCursor;
          this.method_312();
          this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
          if (this.method_327() == 1)
          {
            this.Cursor = Cursors.Arrow;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 253952), (void*) &struct33_2, 4096U);
          }
          else
            goto label_90;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_90:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          _Module.Sleep(500U);
          int num3 = (int) this.method_259();
          for (int index = 0; index < 12; ++index)
          {
            _Module.Sleep(250U);
            this.textBox6.AppendText(".");
          }
          this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
          if (this.method_214((byte*) &struct33_3) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 253952), (void*) &struct33_2, 4096U);
          }
          else
            goto label_99;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_99:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          num5 = 0;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      while (true)
      {
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            if (num5 < 262144)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + num5) != (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + num5))
              {
                this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 253952), (void*) &struct33_2, 4096U);
              }
              else
                goto label_108;
            }
            else
              goto label_115;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
          _Module.smethod_92(&gstruct19_1);
          break;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
label_108:
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            ++num5;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
      }
      _Module.smethod_112(&gstruct93);
      return;
label_115:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
          this.string_2 = "Write verified !";
          this.string_3 = "OK";
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 253952), (void*) &struct33_2, 4096U);
          int num3 = (int) this.method_253();
          this.textBox6.AppendText("Restoring sector 0x3E000." + "\r\n");
          if (this.method_324() != 0)
            goto label_120;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_120:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (this.method_329() != 0)
            goto label_125;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_125:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          if (this.method_330((byte*) &struct33_2) != 0)
            goto label_130;
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_130:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          int num3 = (int) this.method_259();
          for (int index = 0; index < 12; ++index)
          {
            _Module.Sleep(250U);
            this.textBox6.AppendText(".");
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (this.method_107((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280)) == 1)
          {
            this.Cursor = Cursors.WaitCursor;
            this.textBox6.AppendText("\r\n" + "Authorised !" + "\r\n");
            goto label_140;
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Authorisation Failed!" + "\r\n");
            this.textBox6.AppendText("Restore Verify Failed !" + "\r\n");
          }
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
      return;
label_140:
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          Struct28 struct28;
          this.method_92((byte) 0, (byte) 0, (byte) 0, (byte*) &struct28);
          for (int index = 16; index < 32; ++index)
          {
            int num3 = 0;
            while (num3 < 256)
            {
              this.method_91((byte) 0, (byte) index, (byte) num3, (byte*) &struct28);
              _Module.memcpy((void*) ((IntPtr) &struct33_1 + num1), (void*) &struct28, 16U);
              num3 += 16;
              num1 += 16;
            }
            this.textBox6.AppendText(".");
            Application.DoEvents();
          }
          this.textBox6.AppendText(string.Concat((object) "\r\n"));
          int num6;
          for (num6 = 0; num6 < 4096; ++num6)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) ((IntPtr) &struct33_2 + num6) != (int) ^(byte&) ((IntPtr) &struct33_1 + num6))
            {
              this.textBox6.AppendText("Restore Verify Failed !" + "\r\n");
              break;
            }
          }
          if (num6 == 4096)
          {
            this.textBox6.AppendText("Restore verified OK !" + "\r\n");
            this.string_2 = "Restore verified !";
          }
          this.method_177();
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
        }
        _Module.smethod_92(&gstruct19_1);
      }
      __fault
      {
        // ISSUE: cast to a function pointer type
        _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
      }
      _Module.smethod_112(&gstruct93);
    }

    private unsafe void method_225()
    {
      if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") == 0)
      {
        this.textBox6.AppendText("Unknown flash type Write aborted !" + "\r\n");
      }
      else
      {
        uint num1 = (uint) this.method_261();
        Struct20 struct20;
        _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num1));
        string str = "0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) == 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num2 = (int) MessageBox.Show("No Firmware is loaded to Target buffer", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        else
        {
          if (!this.bool_10 & !this.bool_11)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num2 = (int) MessageBox.Show("Target has not been spoofed," + "\n" + "Are you sure you wish to proceed ?", "F/W Write", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            if (num2 == 7)
              return;
          }
          Application.DoEvents();
          if ((int) num1 == 114)
          {
            this.textBox6.AppendText("SPi flash found with Status 0x72" + "\r\n");
            switch ((uint) this.method_325())
            {
              case 140U:
                this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
                break;
              case 142U:
                this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
                break;
              default:
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != 6)
                {
                  // ISSUE: cast to a function pointer type
                  _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                  int num2 = (int) MessageBox.Show("Firmware in Target buffer is not Lite-On, write aborted", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                  _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                  break;
                }
                else
                {
                  this.Cursor = Cursors.WaitCursor;
                  this.method_313();
                  this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                  if (this.method_328() == 1)
                  {
                    this.Cursor = Cursors.Arrow;
                    break;
                  }
                  else
                  {
                    this.Cursor = Cursors.Arrow;
                    if (!this.radioButton20.Checked)
                      break;
                    _Module.Sleep(500U);
                    this.Cursor = Cursors.WaitCursor;
                    this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                    this.method_310();
                    this.Cursor = Cursors.Arrow;
                    for (int index = 0; index < 262144; ++index)
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + index) != (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + index))
                      {
                        this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                        return;
                      }
                    }
                    this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                    this.string_2 = "Write verified !";
                    this.string_3 = "OK";
                    break;
                  }
                }
            }
          }
          else
          {
            this.textBox6.AppendText("Invalid Status " + str + "\r\n");
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num2 = (int) MessageBox.Show("Drive returned Invalid Status!", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          }
        }
      }
    }

    private unsafe void method_226()
    {
      uint num1 = (uint) this.method_261();
      Struct20 struct20;
      _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_129, __arglist ((int) num1));
      string str = "0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memset((void*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4), 0, 2392U);
      this.method_43();
      this.label87.Text = "";
      this.label88.Text = "";
      Application.DoEvents();
      if (this.method_227() == 0)
        return;
      if ((int) num1 == 112)
      {
        this.textBox6.AppendText("Parallel flash found with Status 0x70" + "\r\n");
        this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
        this.Cursor = Cursors.WaitCursor;
        this.method_292();
        if (this.method_296() == 1)
        {
          this.Cursor = Cursors.Arrow;
        }
        else
        {
          this.Cursor = Cursors.Arrow;
          _Module.Sleep(500U);
          this.Cursor = Cursors.WaitCursor;
          this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
          this.method_291();
          this.Cursor = Cursors.Arrow;
          for (int index = 0; index < 262144; ++index)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + index) != (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + index))
            {
              this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
              return;
            }
          }
          this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
          this.string_2 = "Write verified !";
          this.string_3 = "OK";
        }
      }
      else if ((int) num1 == 115)
      {
        this.textBox6.AppendText("SPi flash found with Status 0x73" + "\r\n");
        this.Cursor = Cursors.WaitCursor;
        this.method_299();
        this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
        if (this.method_302() == 1)
        {
          this.Cursor = Cursors.Arrow;
        }
        else
        {
          this.Cursor = Cursors.Arrow;
          _Module.Sleep(500U);
          this.Cursor = Cursors.WaitCursor;
          this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
          this.method_298();
          this.Cursor = Cursors.Arrow;
          for (int index = 0; index < 262144; ++index)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + index) != (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + index))
            {
              this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
              return;
            }
          }
          this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
          this.string_2 = "Write verified !";
          this.string_3 = "OK";
        }
      }
      else if ((int) num1 == 114)
      {
        this.textBox6.AppendText("SPi flash found with Status 0x72" + "\r\n");
        this.Cursor = Cursors.WaitCursor;
        if (this.radioButton20.Checked)
        {
          this.method_311();
          this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
          if (this.method_326() == 1)
          {
            this.Cursor = Cursors.Arrow;
          }
          else
          {
            this.Cursor = Cursors.Arrow;
            _Module.Sleep(500U);
            this.Cursor = Cursors.WaitCursor;
            this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
            this.method_307();
            this.Cursor = Cursors.Arrow;
            for (int index = 0; index < 262144; ++index)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + index) != (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + index))
              {
                this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                return;
              }
            }
            this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
            this.string_2 = "Write verified !";
            this.string_3 = "OK";
          }
        }
        else if (this.radioButton19.Checked)
        {
          this.method_312();
          this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
          if (this.method_327() == 1)
            this.Cursor = Cursors.Arrow;
          else
            this.Cursor = Cursors.Arrow;
        }
        else
        {
          this.method_313();
          this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
          if (this.method_328() == 1)
            this.Cursor = Cursors.Arrow;
          else
            this.Cursor = Cursors.Arrow;
        }
      }
      else
      {
        this.textBox6.AppendText("Invalid Status " + str + "\r\n");
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num2 = (int) MessageBox.Show("Drive returned Invalid Status!", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
    }

    private unsafe int method_227()
    {
      string str = (string) null;
      string directoryName = Path.GetDirectoryName(Environment.GetCommandLineArgs()[0]);
      OpenFileDialog openFileDialog = new OpenFileDialog();
      openFileDialog.Filter = "f/w files |*.bin|All Files (*.*)|*.*";
      openFileDialog.FileName = "firm.bin";
      openFileDialog.DefaultExt = ".bin";
      openFileDialog.CheckFileExists = true;
      openFileDialog.CheckPathExists = true;
      openFileDialog.RestoreDirectory = false;
      openFileDialog.InitialDirectory = directoryName + "\\firmware";
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return 0;
      string fullPath = Path.GetFullPath(openFileDialog.FileName);
      Struct68 struct68;
      _Module.memset((void*) &struct68, 0, 260U);
      str = new string((sbyte*) &_Module.struct19_0);
      sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(Path.GetFullPath(fullPath));
      _Module.memcpy((void*) &struct68, (void*) numPtr, 260U);
      this.method_44((sbyte*) &struct68, 1);
      return 1;
    }

    private int method_228(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1, byte byte_2)
    {
      uint num = (int) ushort_0 != 0 ? 327680U : 512U;
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 4U), (byte) ((uint) ushort_1 & (uint) byte.MaxValue));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 5U), (byte) (((int) ushort_1 & 65280) >> 8));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 3U), byte_2);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 1);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      for (uint index = 0U; index <= num && (int) _Module.GetAsyncKeyState(27) == 0; ++index)
      {
        if ((int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) == (int) byte_1)
          return 0;
      }
      return 1;
    }

    private unsafe int method_229(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1, byte* pByte_0)
    {
      uint num1 = (int) ushort_0 != 0 ? 327680U : 512U;
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 4U), (byte) ((uint) ushort_1 & (uint) byte.MaxValue));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 5U), (byte) (((int) ushort_1 & 65280) >> 8));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      uint num2;
      for (num2 = 0U; num2 <= num1; ++num2)
      {
        if ((int) _Module.GetAsyncKeyState(27) != 0)
          return 1;
        if ((int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) == (int) byte_1)
          break;
      }
      if ((int) num2 == (int) num1)
        return 1;
      *pByte_0 = _Module.smethod_0((ushort) ((uint) ushort_0 + 3U));
      return 0;
    }

    private unsafe int method_230(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1, byte* pByte_0)
    {
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 4U), (byte) ((uint) ushort_1 & (uint) byte.MaxValue));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 5U), (byte) (((int) ushort_1 & 65280) >> 8));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 2);
      do
        ;
      while (((int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) & 128) != 0);
      ushort num1 = _Module.smethod_1(ushort_0);
      *pByte_0 = (byte) ((int) num1 & (int) byte.MaxValue);
      pByte_0[1] = (byte) (((int) num1 & 65280) >> 8);
      do
        ;
      while (((int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) & 128) != 0);
      ushort num2 = _Module.smethod_1(ushort_0);
      pByte_0[2] = (byte) ((int) num2 & (int) byte.MaxValue);
      pByte_0[3] = (byte) (((int) num2 & 65280) >> 8);
      return 0;
    }

    private int method_231(ushort ushort_0, byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte byte_4, byte byte_5)
    {
      uint num1 = (int) ushort_0 != 0 ? 327680U : 512U;
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 1U), byte_2);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 2U), byte_3);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 3U), (byte) 0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 4U), byte_4);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 5U), byte_5);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 4);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      uint num2;
      for (num2 = 0U; num2 <= 327680U; ++num2)
      {
        if ((int) _Module.GetAsyncKeyState(27) != 0)
          return 1;
        if ((int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) == (int) byte_1)
          break;
      }
      if ((int) num2 == 327680)
        return 1;
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 5);
      for (uint index = 0U; index <= num1 && (int) _Module.GetAsyncKeyState(27) == 0; ++index)
      {
        if ((int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) == (int) byte_1)
          return 0;
      }
      return 1;
    }

    private unsafe int method_232(ushort ushort_0, byte byte_0, byte byte_1, byte byte_2)
    {
      uint num1 = (int) ushort_0 != 0 ? 327680U : 512U;
      if ((int) byte_1 == 115)
      {
        for (uint index = 0U; index <= num1; ++index)
        {
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            this.method_228(ushort_0, byte_0, byte_1, (ushort) 0, (byte) 5);
            this.method_231(ushort_0, byte_0, byte_1, (byte) 0, (byte) 1, (byte) 0, (byte) 1);
            byte num2;
            this.method_229(ushort_0, byte_0, byte_1, (ushort) 1, &num2);
            if ((int) num2 == (int) byte_2)
              return 0;
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return 1;
          }
        }
        return 1;
      }
      else
      {
        if ((int) byte_1 != 114)
          return 1;
        for (uint index = 0U; index <= num1; ++index)
        {
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            this.method_228(ushort_0, byte_0, byte_1, (ushort) 34816, (byte) 5);
            this.method_231(ushort_0, byte_0, byte_1, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
            byte num2;
            this.method_229(ushort_0, byte_0, byte_1, (ushort) 1, &num2);
            if ((int) num2 == (int) byte_2)
              return 0;
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return 1;
          }
        }
        return 1;
      }
    }

    private byte method_233(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1)
    {
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 4U), (byte) ((uint) ushort_1 & (uint) byte.MaxValue));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 5U), (byte) (((int) ushort_1 & 65280) >> 8));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      uint num = 0U;
      while (num <= 327680U && (int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) != (int) byte_1)
        ++num;
      return _Module.smethod_0((ushort) ((uint) ushort_0 + 3U));
    }

    private int method_234(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1, byte byte_2)
    {
      uint num = (int) ushort_0 != 0 ? 327680U : 512U;
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 4U), (byte) ((uint) ushort_1 & (uint) byte.MaxValue));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 5U), (byte) (((int) ushort_1 & 65280) >> 8));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 3U), byte_2);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 104);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      for (uint index = 0U; index <= num && (int) _Module.GetAsyncKeyState(27) == 0; ++index)
      {
        if ((int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) == (int) byte_1)
          return 0;
      }
      return 1;
    }

    private unsafe int method_235(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1, byte* pByte_0)
    {
      uint num1 = (int) ushort_0 != 0 ? 327680U : 512U;
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 4U), (byte) ((uint) ushort_1 & (uint) byte.MaxValue));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 5U), (byte) (((int) ushort_1 & 65280) >> 8));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 145);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      uint num2;
      for (num2 = 0U; num2 <= num1; ++num2)
      {
        if ((int) _Module.GetAsyncKeyState(27) != 0)
          return 0;
        if ((int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) == (int) byte_1)
          break;
      }
      if ((int) num2 == (int) num1)
        return 0;
      *pByte_0 = _Module.smethod_0((ushort) ((uint) ushort_0 + 3U));
      return 1;
    }

    private int method_236(ushort ushort_0, byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte byte_4, byte byte_5)
    {
      uint num1 = (int) ushort_0 != 0 ? 327680U : 512U;
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 1U), byte_2);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 2U), byte_3);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 3U), (byte) 0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 4U), byte_4);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 5U), byte_5);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 27);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      uint num2;
      for (num2 = 0U; num2 <= num1; ++num2)
      {
        if ((int) _Module.GetAsyncKeyState(27) != 0)
          return 1;
        if ((int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) == (int) byte_1)
          break;
      }
      return (int) num2 == (int) num1 ? 1 : 0;
    }

    private unsafe int method_237(ushort ushort_0, byte byte_0, byte byte_1, byte byte_2)
    {
      uint num1 = (int) ushort_0 != 0 ? 327680U : 512U;
      for (uint index = 0U; index < num1; ++index)
      {
        if ((int) _Module.GetAsyncKeyState(27) == 0)
        {
          this.method_234(ushort_0, byte_0, byte_1, (ushort) 34816, (byte) 5);
          this.method_236(ushort_0, byte_0, byte_1, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
          byte num2;
          this.method_235(ushort_0, byte_0, byte_1, (ushort) 1, &num2);
          if ((int) num2 == (int) byte_2)
            return 0;
          _Module.Sleep(1U);
        }
        else
        {
          this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
          return 1;
        }
      }
      return 1;
    }

    private unsafe void method_238()
    {
      int num1 = 0;
      if (this.comboBox1.Items.Count == 0)
        return;
      uint num2 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num2 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num2 * 72);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
      this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
      Struct104 struct104;
      this.method_235(ushort_0, byte_0, (byte) 114, (ushort) 1, (byte*) &struct104);
      Struct20 struct20;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_121, __arglist ((int) ^(byte&) @struct104));
      this.textBox6.AppendText("Spi Status: 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20) + "\r\n");
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (((int) ^(byte&) @struct104 & 128) == 0)
        return;
      // ISSUE: cast to a function pointer type
      _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
      int num3 = (int) MessageBox.Show("Spi Status Register is S/W protected" + (object) "\n" + "If you wish to resend clear Spi Status Register" + "\n\n" + (string) __arglist ("Press Escape to cancel."), "SPI Status 0x8C", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
      _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      if (num3 != 6)
        return;
      this.Cursor = Cursors.AppStarting;
      while (this.method_321() == 0)
      {
        _Module.Sleep(5U);
        ++num1;
        if ((int) _Module.GetAsyncKeyState(27) == 0)
        {
          if (num1 % 16 == 0)
            this.textBox6.AppendText(".");
          Application.DoEvents();
        }
        else
        {
          this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
          this.Cursor = Cursors.Arrow;
          return;
        }
      }
      this.Cursor = Cursors.Arrow;
    }

    private unsafe void method_239()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
      this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
      Struct104 struct104;
      this.method_235(ushort_0, byte_0, (byte) 114, (ushort) 1, (byte*) &struct104);
      Struct20 struct20;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_121, __arglist ((int) ^(byte&) @struct104));
      this.textBox6.AppendText("Spi Status: 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20) + "\r\n");
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      switch (struct104)
      {
        case (byte) 140:
          this.button42.Text = new string((sbyte*) &_Module.struct35_130);
          this.button42.Enabled = true;
          this.toolTip_0.SetToolTip((Control) this.button42, "Click to clear Spi status register");
          break;
        case (byte) 0:
          this.button42.Text = new string((sbyte*) &_Module.struct35_131);
          this.button42.Enabled = true;
          this.toolTip_0.SetToolTip((Control) this.button42, "Click to lock Spi status register");
          break;
      }
    }

    private unsafe void method_240()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
      this.method_244(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
      Struct104 struct104;
      this.method_243(ushort_0, byte_0, (byte) 114, (ushort) 1, (byte*) &struct104);
      Struct20 struct20;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_121, __arglist ((int) ^(byte&) @struct104));
      this.textBox6.AppendText("Spi Status: 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20) + "\r\n");
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      switch (struct104)
      {
        case (byte) 140:
          this.button42.Text = new string((sbyte*) &_Module.struct35_130);
          this.button42.Enabled = true;
          this.toolTip_0.SetToolTip((Control) this.button42, "Click to clear Spi status register");
          break;
        case (byte) 0:
          this.button42.Text = new string((sbyte*) &_Module.struct35_131);
          this.button42.Enabled = true;
          this.toolTip_0.SetToolTip((Control) this.button42, "Click to lock Spi status register");
          break;
      }
    }

    private unsafe void method_241()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
      this.method_231(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
      Struct104 struct104;
      this.method_229(ushort_0, byte_0, (byte) 114, (ushort) 1, (byte*) &struct104);
      Struct20 struct20;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_121, __arglist ((int) ^(byte&) @struct104));
      this.textBox6.AppendText("Spi Status: 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20) + "\r\n");
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      switch (struct104)
      {
        case (byte) 140:
          this.button42.Text = new string((sbyte*) &_Module.struct35_130);
          this.button42.Enabled = true;
          this.toolTip_0.SetToolTip((Control) this.button42, "Click to clear Spi status register");
          break;
        case (byte) 0:
          this.button42.Text = new string((sbyte*) &_Module.struct35_131);
          this.button42.Enabled = true;
          this.toolTip_0.SetToolTip((Control) this.button42, "Click to lock Spi status register");
          break;
      }
    }

    private int method_242(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1, byte byte_2)
    {
      uint num = (int) ushort_0 != 0 ? 327680U : 512U;
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 4U), (byte) ((uint) ushort_1 & (uint) byte.MaxValue));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 5U), (byte) (((int) ushort_1 & 65280) >> 8));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 3U), byte_2);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 82);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      for (uint index = 0U; index <= num && (int) _Module.GetAsyncKeyState(27) == 0; ++index)
      {
        if ((int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) == (int) byte_1)
          return 0;
      }
      return 1;
    }

    private unsafe int method_243(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1, byte* pByte_0)
    {
      uint num1 = (int) ushort_0 != 0 ? 327680U : 512U;
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 4U), (byte) ((uint) ushort_1 & (uint) byte.MaxValue));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 5U), (byte) (((int) ushort_1 & 65280) >> 8));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 31);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      uint num2;
      for (num2 = 0U; num2 <= num1; ++num2)
      {
        if ((int) _Module.GetAsyncKeyState(27) != 0)
          return 0;
        if ((int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) == (int) byte_1)
          break;
      }
      if ((int) num2 == (int) num1)
        return 0;
      *pByte_0 = _Module.smethod_0((ushort) ((uint) ushort_0 + 3U));
      return 1;
    }

    private int method_244(ushort ushort_0, byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte byte_4, byte byte_5)
    {
      uint num1 = (int) ushort_0 != 0 ? 327680U : 512U;
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 1U), byte_2);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 2U), byte_3);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 3U), (byte) 0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 4U), byte_4);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 5U), byte_5);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 194);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      uint num2;
      for (num2 = 0U; num2 <= num1; ++num2)
      {
        if ((int) _Module.GetAsyncKeyState(27) != 0)
          return 1;
        if ((int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) == (int) byte_1)
          break;
      }
      return (int) num2 == (int) num1 ? 1 : 0;
    }

    private unsafe int method_245(ushort ushort_0, byte byte_0, byte byte_1, byte byte_2)
    {
      uint num1 = (int) ushort_0 != 0 ? 327680U : 512U;
      for (uint index = 0U; index < num1; ++index)
      {
        if ((int) _Module.GetAsyncKeyState(27) == 0)
        {
          this.method_242(ushort_0, byte_0, byte_1, (ushort) 34816, (byte) 5);
          this.method_244(ushort_0, byte_0, byte_1, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
          byte num2;
          this.method_243(ushort_0, byte_0, byte_1, (ushort) 1, &num2);
          if ((int) num2 == (int) byte_2)
            return 0;
          _Module.Sleep(1U);
        }
        else
        {
          this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
          return 1;
        }
      }
      return 1;
    }

    private int method_246(ushort ushort_0, byte byte_0, byte byte_1, uint uint_0, byte byte_2)
    {
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 4U), (byte) (uint_0 & (uint) byte.MaxValue));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 5U), (byte) ((uint_0 & 65280U) >> 8));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), (byte) ((uint_0 & 16711680U) >> 16 | (uint) byte_0));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 3U), byte_2);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 1);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      for (uint index = 0U; index <= 327680U; ++index)
      {
        if ((int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) == (int) byte_1)
          return 0;
      }
      return 1;
    }

    private unsafe int method_247(ushort ushort_0, byte byte_0, byte byte_1, uint uint_0, byte* pByte_0)
    {
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 4U), (byte) (uint_0 & (uint) byte.MaxValue));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 5U), (byte) ((uint_0 & 65280U) >> 8));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), (byte) ((uint_0 & 16711680U) >> 16 | (uint) byte_0));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      uint num = 0U;
      while (num <= 327680U && (int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) != (int) byte_1)
        ++num;
      if ((int) num == 327680)
        return 0;
      *pByte_0 = _Module.smethod_0((ushort) ((uint) ushort_0 + 3U));
      return 1;
    }

    private int method_248(ushort ushort_0, byte byte_0, byte byte_1)
    {
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      for (uint index = 0U; index <= 327680U; ++index)
      {
        if ((int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) == (int) byte_1)
          return 0;
      }
      return 1;
    }

    private byte method_249(ushort ushort_0, byte byte_0, byte byte_1, uint uint_0)
    {
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 4U), (byte) (uint_0 & (uint) byte.MaxValue));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 5U), (byte) ((uint_0 & 65280U) >> 8));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), (byte) ((uint_0 & 16711680U) >> 16 | (uint) byte_0));
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      uint num = 0U;
      while (num <= 327680U && (int) _Module.smethod_0((ushort) ((uint) ushort_0 + 7U)) != (int) byte_1)
        ++num;
      return _Module.smethod_0((ushort) ((uint) ushort_0 + 3U));
    }

    private uint method_250()
    {
      return !this.radioButton20.Checked ? (!this.radioButton19.Checked ? this.method_254() : this.method_253()) : this.method_252();
    }

    private uint method_251()
    {
      if (this.radioButton19.Checked)
        this.method_259();
      return !this.radioButton21.Checked ? this.method_258() : this.method_260();
    }

    private unsafe uint method_252()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num2 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      if ((int) num2 != 0)
      {
        _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
        _Module.Sleep(250U);
        _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      }
      _Module.smethod_2((ushort) ((uint) num2 + 3U), (byte) 42);
      _Module.smethod_2((ushort) ((uint) num2 + 7U), (byte) sbyte.MinValue);
      _Module.Sleep(2U);
      if ((int) num2 != 0)
        _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      uint num3 = (uint) (byte) _Module.smethod_1((ushort) ((uint) num2 + 7U));
      _Module.Sleep(1U);
      return num3;
    }

    private unsafe uint method_253()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num2 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      if ((int) num2 != 0)
        _Module.Sleep(250U);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) num2 + 3U), (byte) 217);
      _Module.smethod_2((ushort) ((uint) num2 + 7U), (byte) 137);
      _Module.Sleep(2U);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      uint num3 = (uint) (byte) _Module.smethod_1((ushort) ((uint) num2 + 7U));
      _Module.Sleep(1U);
      return num3;
    }

    private unsafe uint method_254()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num2 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      if ((int) num2 != 0)
        _Module.Sleep(250U);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) num2 + 3U), (byte) 121);
      _Module.smethod_2((ushort) ((uint) num2 + 7U), (byte) 141);
      _Module.Sleep(2U);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      uint num3 = (uint) (byte) _Module.smethod_1((ushort) ((uint) num2 + 7U));
      _Module.Sleep(1U);
      return num3;
    }

    private unsafe uint method_255(byte byte_0, byte byte_1)
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0_1 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num2 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      if ((int) num2 != 0)
        _Module.Sleep(250U);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0_1);
      _Module.smethod_2((ushort) ((uint) num2 + 3U), byte_0);
      _Module.smethod_2((ushort) ((uint) num2 + 7U), byte_1);
      _Module.Sleep(2U);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0_1);
      uint num3 = (uint) (byte) _Module.smethod_1((ushort) ((uint) num2 + 7U));
      _Module.Sleep(1U);
      return num3;
    }

    private unsafe uint method_256()
    {
      Struct28 struct28;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct28 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct28&) ((IntPtr) &struct28 + 1), 0, 15);
      Struct43 struct43;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct43 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct43&) ((IntPtr) &struct43 + 1), 0, (int) byte.MaxValue);
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num2 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      _Module.Sleep(250U);
      if ((int) num2 == 0)
      {
        this.method_276((byte) 114, (byte*) &struct43);
      }
      else
      {
        for (int index = 0; index < 256; ++index)
        {
          _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
          _Module.smethod_2((ushort) ((uint) num2 + 2U), (byte) 3);
          _Module.smethod_2((ushort) ((uint) num2 + 3U), (byte) 217);
          _Module.smethod_2((ushort) ((uint) num2 + 4U), (byte) index);
          int num3 = (int) _Module.smethod_0((ushort) ((uint) num2 + 7U));
          _Module.smethod_2((ushort) ((uint) num2 + 7U), (byte) 145);
          int num4 = (int) _Module.smethod_0((ushort) ((uint) num2 + 7U));
          _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct43 + index) = (sbyte) _Module.smethod_1((ushort) ((uint) num2 + 3U));
          int num5 = (int) _Module.smethod_0((ushort) ((uint) num2 + 7U));
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      int num6 = (int) ^(byte&) ((IntPtr) &struct43 + 117) != 0 || (int) ^(byte&) ((IntPtr) &struct43 + 118) != 0 || (int) ^(byte&) ((IntPtr) &struct43 + 119) != 0 ? 117 : (int) sbyte.MaxValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) ((IntPtr) &struct43 + (int) sbyte.MaxValue) == (int) ^(byte&) ((IntPtr) &struct43 + 128) && (int) ^(byte&) ((IntPtr) &struct43 + (int) sbyte.MaxValue) == (int) ^(byte&) ((IntPtr) &struct43 + 129) && ((int) ^(byte&) ((IntPtr) &struct43 + (int) sbyte.MaxValue) == (int) ^(byte&) ((IntPtr) &struct43 + 130) && (int) ^(byte&) ((IntPtr) &struct43 + (int) sbyte.MaxValue) == (int) ^(byte&) ((IntPtr) &struct43 + 131)))
        return 0U;
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28 + index) = (sbyte) ((int) ^(byte&) ((IntPtr) &struct43 + (index + num6)) ^ (int) (sbyte) index);
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 8) + 280), (void*) &struct28, 16U);
      return 1U;
    }

    private unsafe uint method_257()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num2 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      _Module.Sleep(250U);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) num2 + 3U), (byte) 46);
      _Module.smethod_2((ushort) ((uint) num2 + 7U), (byte) sbyte.MinValue);
      _Module.Sleep(2U);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      uint num3 = (uint) (byte) _Module.smethod_1((ushort) ((uint) num2 + 7U));
      _Module.Sleep(1U);
      return num3;
    }

    private unsafe uint method_258()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num2 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      uint num3;
      if ((int) num2 == 0)
      {
        _Module.smethod_2((ushort) ((uint) num2 + 7U), (byte) 129);
        _Module.smethod_2((ushort) ((uint) num2 + 8U), (byte) 4);
        _Module.Sleep(1U);
        _Module.smethod_2((ushort) ((uint) num2 + 8U), (byte) 0);
        _Module.Sleep(100U);
        num3 = (uint) _Module.smethod_0((ushort) 7);
      }
      else
      {
        _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
        _Module.smethod_2((ushort) ((uint) num2 + 7U), (byte) 129);
        _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
        _Module.smethod_2((ushort) ((uint) num2 + 7U), (byte) 8);
        num3 = (uint) (byte) _Module.smethod_1((ushort) ((uint) num2 + 7U));
      }
      _Module.Sleep(350U);
      return num3;
    }

    private unsafe uint method_259()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num2 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) num2 + 7U), (byte) 240);
      _Module.Sleep(250U);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) num2 + 7U), (byte) 8);
      _Module.Sleep(500U);
      return (uint) (byte) _Module.smethod_1((ushort) ((uint) num2 + 7U));
    }

    private unsafe uint method_260()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num2 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) num2 + 7U), (byte) 190);
      _Module.Sleep(250U);
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) num2 + 7U), (byte) 8);
      _Module.Sleep(500U);
      return (uint) (byte) _Module.smethod_1((ushort) ((uint) num2 + 7U));
    }

    private unsafe int method_261()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num2 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.textBox6.AppendText("\r\n" + "Getting Status from port " + this.label123.Text + "\r\n");
      _Module.smethod_2((ushort) ((uint) num2 + 6U), byte_0);
      _Module.Sleep(20U);
      uint num3 = (uint) (byte) _Module.smethod_1((ushort) ((uint) num2 + 7U));
      _Module.Sleep(1U);
      return (int) num3;
    }

    private unsafe void method_262()
    {
      if (this.bool_2)
      {
        string str = this.string_10 + "\\SAM-OFW.bin";
        for (int index = 1; index < 10; ++index)
        {
          if (!File.Exists(str))
          {
            GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(str), (sbyte*) &_Module.struct18_5);
            if ((IntPtr) pGstruct5_0 != IntPtr.Zero)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num = (int) _Module.fwrite((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U, 1U, pGstruct5_0);
              _Module.fclose(pGstruct5_0);
              this.textBox6.AppendText("\r\n" + "Samsung Dump file saved to " + str + "\r\n");
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_37(str, 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
              return;
            }
          }
          else
            str = this.string_10 + "\\SAM-OFW_" + Convert.ToString(index) + ".bin";
        }
      }
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
      saveFileDialog.DefaultExt = ".bin";
      saveFileDialog.FileName = "SAM-OFW.bin";
      saveFileDialog.RestoreDirectory = false;
      if (this.bool_2)
        saveFileDialog.InitialDirectory = this.string_10;
      if (saveFileDialog.ShowDialog() == DialogResult.OK)
      {
        string fullPath = Path.GetFullPath(saveFileDialog.FileName);
        string fileName = Path.GetFileName(saveFileDialog.FileName);
        GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(fullPath), (sbyte*) &_Module.struct18_5);
        if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num = (int) _Module.fwrite((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U, 1U, pGstruct5_0);
          _Module.fclose(pGstruct5_0);
          this.textBox6.AppendText("\r\n" + "Samsung Dump file saved to " + fileName + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_37(fullPath, 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
        }
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_37("", 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
      }
    }

    private unsafe void method_263()
    {
      if (this.bool_2)
      {
        string str = this.string_10 + "\\BENQ-OFW.bin";
        for (int index = 1; index < 10; ++index)
        {
          if (!File.Exists(str))
          {
            GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(str), (sbyte*) &_Module.struct18_5);
            if ((IntPtr) pGstruct5_0 != IntPtr.Zero)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num = (int) _Module.fwrite((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U, 1U, pGstruct5_0);
              _Module.fclose(pGstruct5_0);
              this.textBox6.AppendText("\r\n" + "Benq Dump file saved to " + str + "\r\n");
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_37(str, 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
              return;
            }
          }
          else
            str = this.string_10 + "\\BENQ-OFW_" + Convert.ToString(index) + ".bin";
        }
      }
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
      saveFileDialog.DefaultExt = ".bin";
      saveFileDialog.FileName = "BENQ-OFW.bin";
      saveFileDialog.RestoreDirectory = false;
      if (this.bool_2)
        saveFileDialog.InitialDirectory = this.string_10;
      if (saveFileDialog.ShowDialog() == DialogResult.OK)
      {
        string fullPath = Path.GetFullPath(saveFileDialog.FileName);
        string fileName = Path.GetFileName(saveFileDialog.FileName);
        GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(fullPath), (sbyte*) &_Module.struct18_5);
        if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num = (int) _Module.fwrite((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U, 1U, pGstruct5_0);
          _Module.fclose(pGstruct5_0);
          this.textBox6.AppendText("\r\n" + "Benq Dump file saved to " + fileName + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_37(fullPath, 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
        }
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_37("", 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
      }
    }

    private unsafe void method_264()
    {
      if (this.bool_2)
      {
        string str = this.string_10 + "\\Lite-OFW.bin";
        for (int index = 1; index < 10; ++index)
        {
          if (!File.Exists(str))
          {
            GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(str), (sbyte*) &_Module.struct18_5);
            if ((IntPtr) pGstruct5_0 != IntPtr.Zero)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num = (int) _Module.fwrite((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U, 1U, pGstruct5_0);
              _Module.fclose(pGstruct5_0);
              this.textBox6.AppendText("\r\n" + "Lite-On Dump file saved to " + str + "\r\n");
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_37(str, 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
              return;
            }
          }
          else
            str = this.string_10 + "\\Lite-OFW_" + Convert.ToString(index) + ".bin";
        }
      }
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
      saveFileDialog.DefaultExt = ".bin";
      saveFileDialog.FileName = "Lite-OFW.bin";
      saveFileDialog.RestoreDirectory = false;
      if (this.bool_2)
        saveFileDialog.InitialDirectory = this.string_10;
      if (saveFileDialog.ShowDialog() == DialogResult.OK)
      {
        string fullPath = Path.GetFullPath(saveFileDialog.FileName);
        string fileName = Path.GetFileName(saveFileDialog.FileName);
        GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(fullPath), (sbyte*) &_Module.struct18_5);
        if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num = (int) _Module.fwrite((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U, 1U, pGstruct5_0);
          _Module.fclose(pGstruct5_0);
          this.textBox6.AppendText("\r\n" + "Lite-On Dump file saved to " + fileName + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_37(fullPath, 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
        }
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_37("", 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
      }
    }

    private unsafe int method_265(byte byte_0, ushort ushort_0, byte byte_1, byte* pByte_0)
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      int num1 = 0;
      uint num2 = 6U;
      uint num3 = (uint) byte_1 + 6U;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 80;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 1) = (sbyte) byte_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 3) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 4) = (sbyte) ((int) ushort_0 & (int) byte.MaxValue);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 5) = (sbyte) (((int) ushort_0 & 65280) >> 8);
      while (num1 != 8)
      {
        if (this.method_416((sbyte*) &struct3_1, (int) num2, (sbyte*) &struct3_2, (int) num3) == 1)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(sbyte&) @struct3_2 != 80 || (int) ^(sbyte&) ((IntPtr) &struct3_2 + 2) != (int) byte_0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) @struct3_2 != 81)
            {
              ++num1;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
                return 0;
              ++num1;
            }
          }
          else
          {
            _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct3_2 + 6), (uint) byte_1);
            return 1;
          }
        }
        else
          ++num1;
      }
      return 0;
    }

    private unsafe int method_266(byte byte_0, byte* pByte_0)
    {
      Struct3 struct3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3 + 1), 0, 63);
      Struct105 struct105;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct105 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct105&) ((IntPtr) &struct105 + 1), 0, 285);
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3 + 1) = (sbyte) byte_0;
      while (num != 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, (sbyte*) &struct3, 6, 2000) == 6)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, (sbyte*) &struct105, 286, 2000) == 286)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) ((IntPtr) &struct105 + 2) != (int) byte_0)
            {
              ++num;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct105 + 66) != (int) byte_0)
              {
                ++num;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(sbyte&) ((IntPtr) &struct105 + 130) != (int) byte_0)
                {
                  ++num;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) ^(sbyte&) ((IntPtr) &struct105 + 194) != (int) byte_0)
                  {
                    ++num;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(sbyte&) ((IntPtr) &struct105 + 258) != (int) byte_0)
                    {
                      ++num;
                    }
                    else
                    {
                      _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct105 + 6), 58U);
                      _Module.memcpy((void*) (pByte_0 + 58), (void*) ((IntPtr) &struct105 + 70), 58U);
                      _Module.memcpy((void*) (pByte_0 + 116), (void*) ((IntPtr) &struct105 + 134), 58U);
                      _Module.memcpy((void*) (pByte_0 + 174), (void*) ((IntPtr) &struct105 + 198), 58U);
                      _Module.memcpy((void*) (pByte_0 + 232), (void*) ((IntPtr) &struct105 + 262), 24U);
                      return 1;
                    }
                  }
                }
              }
            }
          }
          else
            ++num;
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_267(byte byte_0, byte* pByte_0)
    {
      Struct3 struct3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3 + 1), 0, 63);
      Struct106 struct106;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct106 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct106&) ((IntPtr) &struct106 + 1), 0, 293);
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 99;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3 + 1) = (sbyte) byte_0;
      while (num != 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, (sbyte*) &struct3, 6, 2000) == 6)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, (sbyte*) &struct106, 294, 2000) == 294)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) ((IntPtr) &struct106 + 2) != (int) byte_0)
            {
              ++num;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct106 + 66) != (int) byte_0)
              {
                ++num;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(sbyte&) ((IntPtr) &struct106 + 130) != (int) byte_0)
                {
                  ++num;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) ^(sbyte&) ((IntPtr) &struct106 + 194) != (int) byte_0)
                  {
                    ++num;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(sbyte&) ((IntPtr) &struct106 + 258) != (int) byte_0)
                    {
                      ++num;
                    }
                    else
                    {
                      _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct106 + 6), 56U);
                      _Module.memcpy((void*) (pByte_0 + 56), (void*) ((IntPtr) &struct106 + 70), 56U);
                      _Module.memcpy((void*) (pByte_0 + 112), (void*) ((IntPtr) &struct106 + 134), 56U);
                      _Module.memcpy((void*) (pByte_0 + 168), (void*) ((IntPtr) &struct106 + 198), 56U);
                      _Module.memcpy((void*) (pByte_0 + 224), (void*) ((IntPtr) &struct106 + 262), 32U);
                      return 1;
                    }
                  }
                }
              }
            }
          }
          else
            ++num;
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_268(byte byte_0, byte* pByte_0)
    {
      Struct3 struct3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3 + 1), 0, 63);
      Struct105 struct105;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct105 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct105&) ((IntPtr) &struct105 + 1), 0, 285);
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) -109;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3 + 1) = (sbyte) byte_0;
      while (num != 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, (sbyte*) &struct3, 6, 2000) == 6)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, (sbyte*) &struct105, 286, 2000) == 286)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) ((IntPtr) &struct105 + 2) != (int) byte_0)
            {
              ++num;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct105 + 66) != (int) byte_0)
              {
                ++num;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(sbyte&) ((IntPtr) &struct105 + 130) != (int) byte_0)
                {
                  ++num;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) ^(sbyte&) ((IntPtr) &struct105 + 194) != (int) byte_0)
                  {
                    ++num;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(sbyte&) ((IntPtr) &struct105 + 258) != (int) byte_0)
                    {
                      ++num;
                    }
                    else
                    {
                      _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct105 + 6), 58U);
                      _Module.memcpy((void*) (pByte_0 + 58), (void*) ((IntPtr) &struct105 + 70), 58U);
                      _Module.memcpy((void*) (pByte_0 + 116), (void*) ((IntPtr) &struct105 + 134), 58U);
                      _Module.memcpy((void*) (pByte_0 + 174), (void*) ((IntPtr) &struct105 + 198), 58U);
                      _Module.memcpy((void*) (pByte_0 + 232), (void*) ((IntPtr) &struct105 + 262), 24U);
                      return 1;
                    }
                  }
                }
              }
            }
          }
          else
            ++num;
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_269(byte byte_0, ushort ushort_0, byte byte_1, byte* pByte_0)
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      int int_16 = (int) byte_1 + 6;
      int int_17 = 6;
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 81;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 1) = (sbyte) byte_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 3) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 4) = (sbyte) ((int) ushort_0 & (int) byte.MaxValue);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 5) = (sbyte) (((int) ushort_0 & 65280) >> 8);
      _Module.memcpy((void*) ((IntPtr) &struct3_1 + 6), (void*) pByte_0, (uint) byte_1);
      while (num != 8)
      {
        if (this.method_416((sbyte*) &struct3_1, int_16, (sbyte*) &struct3_2, int_17) == 1)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(sbyte&) @struct3_2 == 81 && (int) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
            return 1;
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(sbyte&) @struct3_2 != 81)
          {
            ++num;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
              return 0;
            ++num;
          }
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_270(byte byte_0, byte* pByte_0)
    {
      Struct107 struct107;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct107 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct107&) ((IntPtr) &struct107 + 1), 0, 511);
      Struct3 struct3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3 + 1), 0, 63);
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct107 = (sbyte) 84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct107 + 1) = (sbyte) byte_0;
      _Module.memcpy((void*) ((IntPtr) &struct107 + 2), (void*) pByte_0, 260U);
      while (num != 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, (sbyte*) &struct107, 262, 1000) == 262)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, (sbyte*) &struct3, 2, 1000) == 2)
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) @struct3 == 84 && (int) ^(sbyte&) ((IntPtr) &struct3 + 1) == (int) byte_0)
              return 1;
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) @struct3 != 84)
            {
              ++num;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct3 + 2) == (int) byte_0)
                return 0;
              ++num;
            }
          }
          else
            ++num;
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_271(byte byte_0, byte* pByte_0)
    {
      Struct107 struct107;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct107 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct107&) ((IntPtr) &struct107 + 1), 0, 511);
      Struct3 struct3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3 + 1), 0, 63);
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct107 = (sbyte) 100;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct107 + 1) = (sbyte) byte_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct107 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct107 + 3) = (sbyte) 0;
      _Module.memcpy((void*) ((IntPtr) &struct107 + 4), (void*) pByte_0, 260U);
      while (num != 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, (sbyte*) &struct107, 264, 5000) == 264)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, (sbyte*) &struct3, 6, 5000) == 6)
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) @struct3 == 100 && (int) ^(sbyte&) ((IntPtr) &struct3 + 1) == 88)
              return 1;
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) @struct3 != 100)
            {
              ++num;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct3 + 2) == (int) byte_0)
                return 0;
              ++num;
            }
          }
          else
            ++num;
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_272(byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte byte_4)
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      int int_16 = 7;
      int int_17 = 7;
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 1) = (sbyte) byte_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 3) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 4) = (sbyte) byte_2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 5) = (sbyte) byte_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 6) = (sbyte) byte_4;
      while (num != 8)
      {
        if (this.method_416((sbyte*) &struct3_1, int_16, (sbyte*) &struct3_2, int_17) == 1)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(sbyte&) @struct3_2 == 82 && (int) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
            return 1;
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(sbyte&) @struct3_2 != 81)
          {
            ++num;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
              return 0;
            ++num;
          }
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_273(byte byte_0, ushort ushort_0, byte byte_1, byte* pByte_0)
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      int num1 = 0;
      uint num2 = 6U;
      uint num3 = (uint) byte_1 + 6U;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 1) = (sbyte) byte_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 3) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 4) = (sbyte) ((int) ushort_0 & (int) byte.MaxValue);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 5) = (sbyte) (((int) ushort_0 & 65280) >> 8);
      while (num1 != 8)
      {
        if (this.method_416((sbyte*) &struct3_1, (int) num2, (sbyte*) &struct3_2, (int) num3) == 1)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(sbyte&) @struct3_2 != 112 || (int) ^(sbyte&) ((IntPtr) &struct3_2 + 2) != (int) byte_0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) @struct3_2 != 112)
            {
              ++num1;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
                return 0;
              ++num1;
            }
          }
          else
          {
            _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct3_2 + 6), (uint) byte_1);
            return 1;
          }
        }
        else
          ++num1;
      }
      return 0;
    }

    private unsafe int method_274(byte byte_0, byte* pByte_0)
    {
      Struct3 struct3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3 + 1), 0, 63);
      Struct105 struct105;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct105 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct105&) ((IntPtr) &struct105 + 1), 0, 285);
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3 + 1) = (sbyte) byte_0;
      while (num != 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, (sbyte*) &struct3, 6, 2000) == 6)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, (sbyte*) &struct105, 286, 2000) == 286)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) ((IntPtr) &struct105 + 2) != (int) byte_0)
            {
              ++num;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct105 + 66) != (int) byte_0)
              {
                ++num;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(sbyte&) ((IntPtr) &struct105 + 130) != (int) byte_0)
                {
                  ++num;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) ^(sbyte&) ((IntPtr) &struct105 + 194) != (int) byte_0)
                  {
                    ++num;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(sbyte&) ((IntPtr) &struct105 + 258) != (int) byte_0)
                    {
                      ++num;
                    }
                    else
                    {
                      _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct105 + 6), 58U);
                      _Module.memcpy((void*) (pByte_0 + 58), (void*) ((IntPtr) &struct105 + 70), 58U);
                      _Module.memcpy((void*) (pByte_0 + 116), (void*) ((IntPtr) &struct105 + 134), 58U);
                      _Module.memcpy((void*) (pByte_0 + 174), (void*) ((IntPtr) &struct105 + 198), 58U);
                      _Module.memcpy((void*) (pByte_0 + 232), (void*) ((IntPtr) &struct105 + 262), 24U);
                      return 1;
                    }
                  }
                }
              }
            }
          }
          else
            ++num;
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_275(byte byte_0, byte* pByte_0)
    {
      Struct3 struct3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3 + 1), 0, 63);
      Struct106 struct106;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct106 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct106&) ((IntPtr) &struct106 + 1), 0, 293);
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) -125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3 + 1) = (sbyte) byte_0;
      while (num != 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, (sbyte*) &struct3, 6, 2000) == 6)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, (sbyte*) &struct106, 294, 2000) == 294)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) ((IntPtr) &struct106 + 2) != (int) byte_0)
            {
              ++num;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct106 + 66) != (int) byte_0)
              {
                ++num;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(sbyte&) ((IntPtr) &struct106 + 130) != (int) byte_0)
                {
                  ++num;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) ^(sbyte&) ((IntPtr) &struct106 + 194) != (int) byte_0)
                  {
                    ++num;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(sbyte&) ((IntPtr) &struct106 + 258) != (int) byte_0)
                    {
                      ++num;
                    }
                    else
                    {
                      _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct106 + 6), 56U);
                      _Module.memcpy((void*) (pByte_0 + 56), (void*) ((IntPtr) &struct106 + 70), 56U);
                      _Module.memcpy((void*) (pByte_0 + 112), (void*) ((IntPtr) &struct106 + 134), 56U);
                      _Module.memcpy((void*) (pByte_0 + 168), (void*) ((IntPtr) &struct106 + 198), 56U);
                      _Module.memcpy((void*) (pByte_0 + 224), (void*) ((IntPtr) &struct106 + 262), 32U);
                      return 1;
                    }
                  }
                }
              }
            }
          }
          else
            ++num;
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_276(byte byte_0, byte* pByte_0)
    {
      Struct3 struct3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3 + 1), 0, 63);
      Struct105 struct105;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct105 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct105&) ((IntPtr) &struct105 + 1), 0, 285);
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) -108;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3 + 1) = (sbyte) byte_0;
      while (num != 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, (sbyte*) &struct3, 6, 2000) == 6)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, (sbyte*) &struct105, 286, 2000) == 286)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) ((IntPtr) &struct105 + 2) != (int) byte_0)
            {
              ++num;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct105 + 66) != (int) byte_0)
              {
                ++num;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(sbyte&) ((IntPtr) &struct105 + 130) != (int) byte_0)
                {
                  ++num;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) ^(sbyte&) ((IntPtr) &struct105 + 194) != (int) byte_0)
                  {
                    ++num;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(sbyte&) ((IntPtr) &struct105 + 258) != (int) byte_0)
                    {
                      ++num;
                    }
                    else
                    {
                      _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct105 + 6), 58U);
                      _Module.memcpy((void*) (pByte_0 + 58), (void*) ((IntPtr) &struct105 + 70), 58U);
                      _Module.memcpy((void*) (pByte_0 + 116), (void*) ((IntPtr) &struct105 + 134), 58U);
                      _Module.memcpy((void*) (pByte_0 + 174), (void*) ((IntPtr) &struct105 + 198), 58U);
                      _Module.memcpy((void*) (pByte_0 + 232), (void*) ((IntPtr) &struct105 + 262), 24U);
                      return 1;
                    }
                  }
                }
              }
            }
          }
          else
            ++num;
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_277(byte byte_0, ushort ushort_0, byte byte_1, byte* pByte_0)
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      int int_16 = (int) byte_1 + 6;
      int int_17 = 6;
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 113;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 1) = (sbyte) byte_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 3) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 4) = (sbyte) ((int) ushort_0 & (int) byte.MaxValue);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 5) = (sbyte) (((int) ushort_0 & 65280) >> 8);
      _Module.memcpy((void*) ((IntPtr) &struct3_1 + 6), (void*) pByte_0, (uint) byte_1);
      while (num != 8)
      {
        if (this.method_416((sbyte*) &struct3_1, int_16, (sbyte*) &struct3_2, int_17) == 1)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(sbyte&) @struct3_2 == 113 && (int) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
            return 1;
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(sbyte&) @struct3_2 != 113)
          {
            ++num;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
              return 0;
            ++num;
          }
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_278(byte byte_0, byte* pByte_0)
    {
      Struct107 struct107;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct107 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct107&) ((IntPtr) &struct107 + 1), 0, 511);
      Struct3 struct3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3 + 1), 0, 63);
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct107 = (sbyte) 116;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct107 + 1) = (sbyte) byte_0;
      _Module.memcpy((void*) ((IntPtr) &struct107 + 2), (void*) pByte_0, 260U);
      while (num != 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, (sbyte*) &struct107, 262, 1000) == 262)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, (sbyte*) &struct3, 2, 1000) == 2)
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) @struct3 == 116 && (int) ^(sbyte&) ((IntPtr) &struct3 + 1) == (int) byte_0)
              return 1;
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) @struct3 != 116)
            {
              ++num;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct3 + 2) == (int) byte_0)
                return 0;
              ++num;
            }
          }
          else
            ++num;
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_279(byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte byte_4)
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      int int_16 = 7;
      int int_17 = 7;
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 1) = (sbyte) byte_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 3) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 4) = (sbyte) byte_2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 5) = (sbyte) byte_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 6) = (sbyte) byte_4;
      while (num != 8)
      {
        if (this.method_416((sbyte*) &struct3_1, int_16, (sbyte*) &struct3_2, int_17) == 1)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(sbyte&) @struct3_2 == 114 && (int) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
            return 1;
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(sbyte&) @struct3_2 != 114)
          {
            ++num;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
              return 0;
            ++num;
          }
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_280(byte byte_0, ushort ushort_0, byte byte_1, byte* pByte_0)
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      int num1 = 0;
      uint num2 = 6U;
      uint num3 = (uint) byte_1 + 6U;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = sbyte.MinValue;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 1) = (sbyte) byte_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 3) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 4) = (sbyte) ((int) ushort_0 & (int) byte.MaxValue);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 5) = (sbyte) (((int) ushort_0 & 65280) >> 8);
      while (num1 != 8)
      {
        if (this.method_416((sbyte*) &struct3_1, (int) num2, (sbyte*) &struct3_2, (int) num3) == 1)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) (byte) ^(sbyte&) @struct3_2 != 128 || (int) (byte) ^(sbyte&) ((IntPtr) &struct3_2 + 2) != (int) byte_0)
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) (byte) ^(sbyte&) @struct3_2 != 128)
            {
              ++num1;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) (byte) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
                return 0;
              ++num1;
            }
          }
          else
          {
            _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct3_2 + 6), (uint) byte_1);
            return 1;
          }
        }
        else
          ++num1;
      }
      return 0;
    }

    private unsafe int method_281(byte byte_0, byte* pByte_0)
    {
      Struct3 struct3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3 + 1), 0, 63);
      Struct105 struct105;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct105 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct105&) ((IntPtr) &struct105 + 1), 0, 285);
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) -123;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3 + 1) = (sbyte) byte_0;
      while (num != 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, (sbyte*) &struct3, 6, 2000) == 6)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, (sbyte*) &struct105, 286, 2000) == 286)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) (byte) ^(sbyte&) ((IntPtr) &struct105 + 2) != (int) byte_0)
            {
              ++num;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct105 + 66) != (int) byte_0)
              {
                ++num;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(sbyte&) ((IntPtr) &struct105 + 130) != (int) byte_0)
                {
                  ++num;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) ^(sbyte&) ((IntPtr) &struct105 + 194) != (int) byte_0)
                  {
                    ++num;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(sbyte&) ((IntPtr) &struct105 + 258) != (int) byte_0)
                    {
                      ++num;
                    }
                    else
                    {
                      _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct105 + 6), 58U);
                      _Module.memcpy((void*) (pByte_0 + 58), (void*) ((IntPtr) &struct105 + 70), 58U);
                      _Module.memcpy((void*) (pByte_0 + 116), (void*) ((IntPtr) &struct105 + 134), 58U);
                      _Module.memcpy((void*) (pByte_0 + 174), (void*) ((IntPtr) &struct105 + 198), 58U);
                      _Module.memcpy((void*) (pByte_0 + 232), (void*) ((IntPtr) &struct105 + 262), 24U);
                      return 1;
                    }
                  }
                }
              }
            }
          }
          else
            ++num;
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_282(byte byte_0, byte* pByte_0)
    {
      Struct3 struct3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3 + 1), 0, 63);
      Struct106 struct106;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct106 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct106&) ((IntPtr) &struct106 + 1), 0, 293);
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3 + 1) = (sbyte) byte_0;
      while (num != 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, (sbyte*) &struct3, 6, 2000) == 6)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, (sbyte*) &struct106, 294, 2000) == 294)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) (byte) ^(sbyte&) ((IntPtr) &struct106 + 2) != (int) byte_0)
            {
              ++num;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct106 + 66) != (int) byte_0)
              {
                ++num;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(sbyte&) ((IntPtr) &struct106 + 130) != (int) byte_0)
                {
                  ++num;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) ^(sbyte&) ((IntPtr) &struct106 + 194) != (int) byte_0)
                  {
                    ++num;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(sbyte&) ((IntPtr) &struct106 + 258) != (int) byte_0)
                    {
                      ++num;
                    }
                    else
                    {
                      _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct106 + 6), 56U);
                      _Module.memcpy((void*) (pByte_0 + 56), (void*) ((IntPtr) &struct106 + 70), 56U);
                      _Module.memcpy((void*) (pByte_0 + 112), (void*) ((IntPtr) &struct106 + 134), 56U);
                      _Module.memcpy((void*) (pByte_0 + 168), (void*) ((IntPtr) &struct106 + 198), 56U);
                      _Module.memcpy((void*) (pByte_0 + 224), (void*) ((IntPtr) &struct106 + 262), 32U);
                      return 1;
                    }
                  }
                }
              }
            }
          }
          else
            ++num;
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_283(byte byte_0, ushort ushort_0, byte byte_1, byte* pByte_0)
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      int int_16 = (int) byte_1 + 6;
      int int_17 = 6;
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) -127;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 1) = (sbyte) byte_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 3) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 4) = (sbyte) ((int) ushort_0 & (int) byte.MaxValue);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 5) = (sbyte) (((int) ushort_0 & 65280) >> 8);
      _Module.memcpy((void*) ((IntPtr) &struct3_1 + 6), (void*) pByte_0, (uint) byte_1);
      while (num != 8)
      {
        if (this.method_416((sbyte*) &struct3_1, int_16, (sbyte*) &struct3_2, int_17) == 1)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) (byte) ^(sbyte&) @struct3_2 == 129 && (int) (byte) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
            return 1;
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) (byte) ^(sbyte&) @struct3_2 != 129)
          {
            ++num;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) (byte) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
              return 0;
            ++num;
          }
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_284(byte byte_0, byte* pByte_0)
    {
      Struct107 struct107;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct107 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct107&) ((IntPtr) &struct107 + 1), 0, 511);
      Struct3 struct3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3 + 1), 0, 63);
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct107 = (sbyte) -121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct107 + 1) = (sbyte) byte_0;
      _Module.memcpy((void*) ((IntPtr) &struct107 + 2), (void*) pByte_0, 260U);
      while (num != 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, (sbyte*) &struct107, 262, 1000) == 262)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, (sbyte*) &struct3, 2, 1000) == 2)
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) (byte) ^(sbyte&) @struct3 == 135 && (int) (byte) ^(sbyte&) ((IntPtr) &struct3 + 1) == (int) byte_0)
              return 1;
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) (byte) ^(sbyte&) @struct3 != 135)
            {
              ++num;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) (byte) ^(sbyte&) ((IntPtr) &struct3 + 2) == (int) byte_0)
                return 0;
              ++num;
            }
          }
          else
            ++num;
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_285(byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte byte_4)
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      int int_16 = 7;
      int int_17 = 7;
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) -126;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 1) = (sbyte) byte_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 3) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 4) = (sbyte) byte_2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 5) = (sbyte) byte_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 6) = (sbyte) byte_4;
      while (num != 8)
      {
        if (this.method_416((sbyte*) &struct3_1, int_16, (sbyte*) &struct3_2, int_17) == 1)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) (byte) ^(sbyte&) @struct3_2 == 130 && (int) (byte) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
            return 1;
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) (byte) ^(sbyte&) @struct3_2 != 130)
          {
            ++num;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) (byte) ^(sbyte&) ((IntPtr) &struct3_2 + 2) == (int) byte_0)
              return 0;
            ++num;
          }
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_286(byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte* pByte_0)
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      uint num1 = 6U;
      uint num2 = (uint) byte_3 + 6U;
      int num3 = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 2) = (sbyte) byte_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 3) = (sbyte) byte_2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 4) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 5) = (sbyte) byte_0;
      while (num3 != 2)
      {
        if (this.method_416((sbyte*) &struct3_1, (int) num1, (sbyte*) &struct3_2, (int) num2) == 1)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(sbyte&) @struct3_2 != 85 || (int) ^(sbyte&) ((IntPtr) &struct3_2 + 1) != 112)
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) @struct3_2 != 85)
            {
              ++num3;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct3_2 + 1) == 112)
                return 0;
              ++num3;
            }
          }
          else
          {
            _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct3_2 + 6), (uint) byte_3);
            return 1;
          }
        }
        else
          ++num3;
      }
      return 0;
    }

    private unsafe int method_287(byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte* pByte_0)
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      int num1 = 0;
      uint num2 = (uint) byte_3 + 6U;
      uint num3 = 6U;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 86;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 2) = (sbyte) byte_3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 3) = (sbyte) byte_2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 4) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 5) = (sbyte) byte_0;
      _Module.memcpy((void*) ((IntPtr) &struct3_1 + 6), (void*) pByte_0, (uint) byte_3);
      while (num1 != 2)
      {
        if (this.method_416((sbyte*) &struct3_1, (int) num2, (sbyte*) &struct3_2, (int) num3) == 1)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(sbyte&) @struct3_2 == 86 && (int) ^(sbyte&) ((IntPtr) &struct3_2 + 1) == 112)
            return 1;
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(sbyte&) @struct3_2 != 86)
          {
            ++num1;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) ((IntPtr) &struct3_2 + 1) == 112)
              return 0;
            ++num1;
          }
        }
        else
          ++num1;
      }
      return 0;
    }

    private unsafe int method_288(byte byte_0, byte byte_1, byte* pByte_0)
    {
      Struct3 struct3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3 + 1), 0, 63);
      Struct105 struct105;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct105 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct105&) ((IntPtr) &struct105 + 1), 0, 285);
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 87;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3 + 4) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3 + 5) = (sbyte) byte_0;
      while (num != 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, (sbyte*) &struct3, 6, 2000) == 6)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, (sbyte*) &struct105, 286, 2000) == 286)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) ((IntPtr) &struct105 + 1) != 112)
            {
              ++num;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct105 + 65) != 112)
              {
                ++num;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(sbyte&) ((IntPtr) &struct105 + 129) != 112)
                {
                  ++num;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) ^(sbyte&) ((IntPtr) &struct105 + 193) != 112)
                  {
                    ++num;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(sbyte&) ((IntPtr) &struct105 + 257) != 112)
                    {
                      ++num;
                    }
                    else
                    {
                      _Module.memcpy((void*) pByte_0, (void*) ((IntPtr) &struct105 + 6), 58U);
                      _Module.memcpy((void*) (pByte_0 + 58), (void*) ((IntPtr) &struct105 + 70), 58U);
                      _Module.memcpy((void*) (pByte_0 + 116), (void*) ((IntPtr) &struct105 + 134), 58U);
                      _Module.memcpy((void*) (pByte_0 + 174), (void*) ((IntPtr) &struct105 + 198), 58U);
                      _Module.memcpy((void*) (pByte_0 + 232), (void*) ((IntPtr) &struct105 + 262), 24U);
                      return 1;
                    }
                  }
                }
              }
            }
          }
          else
            ++num;
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_289(byte byte_0, byte byte_1, byte* pByte_0)
    {
      Struct107 struct107;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct107 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct107&) ((IntPtr) &struct107 + 1), 0, 511);
      Struct3 struct3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3 + 1), 0, 63);
      int num = 0;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct107 = (sbyte) 88;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct107 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct107 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct107 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct107 + 4) = (sbyte) byte_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct107 + 5) = (sbyte) byte_0;
      _Module.memcpy((void*) ((IntPtr) &struct107 + 6), (void*) pByte_0, 256U);
      while (num != 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, (sbyte*) &struct107, 262, 1000) == 262)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, (sbyte*) &struct3, 2, 1000) == 2)
          {
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) @struct3 == 88 && (int) ^(sbyte&) ((IntPtr) &struct3 + 1) == 112)
              return 1;
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(sbyte&) @struct3 != 88)
            {
              ++num;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(sbyte&) ((IntPtr) &struct3 + 2) == 112)
                return 0;
              ++num;
            }
          }
          else
            ++num;
        }
        else
          ++num;
      }
      return 0;
    }

    private unsafe int method_290()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 170);
      this.method_246(ushort_0, byte_0, (byte) 112, 10922U, (byte) 85);
      this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 144);
      byte num2;
      this.method_247(ushort_0, byte_0, (byte) 112, 0U, &num2);
      byte num3;
      this.method_247(ushort_0, byte_0, (byte) 112, 1U, &num3);
      this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 170);
      this.method_246(ushort_0, byte_0, (byte) 112, 10922U, (byte) 85);
      this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 240);
      return (int) (ushort) ((int) num3 | (int) num2 << 8);
    }

    private unsafe int method_291()
    {
      byte num1 = (byte) 0;
      byte num2 = (byte) 0;
      uint num3 = 0U;
      int num4 = 0;
      uint num5 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num5 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num5 * 72);
      Struct32 struct32;
      for (uint index1 = 0U; index1 < 4U; ++index1)
      {
        this.textBox6.AppendText("\r\n" + "Reading Bank " + Convert.ToString(index1) + ": ");
        this.string_2 = "Reading Bank " + Convert.ToString(index1) + ": ";
        this.string_3 = "";
label_25:
        for (uint index2 = 0U; index2 < 256U; ++index2)
        {
          uint num6 = index2 % 16U;
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            if ((int) num6 == 0)
            {
              this.textBox6.AppendText(".");
              this.string_3 = this.string_3 + ".";
              Application.DoEvents();
            }
            while (num4 != 2)
            {
              if ((int) ushort_0 == 0)
              {
                Struct43 struct43;
                if (this.method_286((byte) index1, (byte) index2, (byte) 0, (byte) 56, (byte*) &struct43) == 0)
                  ++num4;
                else if (this.method_286((byte) index1, (byte) index2, (byte) 56, (byte) 56, (byte*) ((IntPtr) &struct43 + 56)) == 0)
                  ++num4;
                else if (this.method_286((byte) index1, (byte) index2, (byte) 112, (byte) 56, (byte*) ((IntPtr) &struct43 + 112)) == 0)
                  ++num4;
                else if (this.method_286((byte) index1, (byte) index2, (byte) 168, (byte) 56, (byte*) ((IntPtr) &struct43 + 168)) == 0)
                  ++num4;
                else if (this.method_286((byte) index1, (byte) index2, (byte) 224, (byte) 32, (byte*) ((IntPtr) &struct43 + 224)) == 0)
                {
                  ++num4;
                }
                else
                {
                  _Module.memcpy((void*) ((IntPtr) &struct32 + ((int) index2 * 256 + (int) index1 * 65536)), (void*) &struct43, 256U);
                  goto label_25;
                }
              }
              else
              {
                for (uint index3 = 0U; index3 < 256U; ++index3)
                {
                  uint uint_0 = (uint) ((int) index3 | (int) index2 << 8 | (int) index1 << 16);
                  this.method_247(ushort_0, byte_0, (byte) 112, uint_0, &num1);
                  this.method_247(ushort_0, byte_0, (byte) 112, uint_0, &num2);
                  if ((int) num2 != (int) num1)
                  {
                    this.textBox6.AppendText("x");
                    --index3;
                    ++num3;
                    if (num3 > 16U)
                    {
                      this.textBox6.AppendText("Read Failed!" + "\r\n");
                      return 1;
                    }
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    ^(sbyte&) ((IntPtr) &struct32 + (int) uint_0) = (sbyte) num1;
                  }
                }
                goto label_25;
              }
            }
            this.textBox6.AppendText("Read Failed!" + "\r\n");
            return 1;
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return 1;
          }
        }
        _Module.Sleep(200U);
      }
      this.textBox6.AppendText("\r\n");
      this.string_2 = "Done! ";
      this.string_3 = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
      return 0;
    }

    private unsafe void method_292()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      this.textBox6.AppendText("\r\n" + "Sending Chip Erase request to port " + this.label123.Text + "\r\n");
      this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 170);
      this.method_246(ushort_0, byte_0, (byte) 112, 10922U, (byte) 85);
      this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) sbyte.MinValue);
      this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 170);
      this.method_246(ushort_0, byte_0, (byte) 112, 10922U, (byte) 85);
      this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 16);
      this.textBox6.AppendText("Erasing:");
      this.string_2 = string.Concat((object) "Erasing Chip: ");
      this.string_3 = "";
      for (uint index = 0U; index < 12U; ++index)
      {
        _Module.Sleep(250U);
        this.textBox6.AppendText(".");
        this.string_3 = this.string_3 + ".";
      }
      this.textBox6.AppendText("\r\n");
    }

    private unsafe int method_293()
    {
      byte num1 = (byte) 0;
      uint num2 = 0U;
      uint num3 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num3 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num3 * 72);
      for (uint index1 = 0U; index1 < 4U; ++index1)
      {
        this.textBox6.AppendText("Reading Bank " + Convert.ToString(index1) + ": ");
        for (uint index2 = 0U; index2 < 256U; ++index2)
        {
          if ((int) (index2 % 16U) == 0)
          {
            this.textBox6.AppendText(".");
            Application.DoEvents();
          }
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            if ((int) ushort_0 == 0)
            {
              Struct43 struct43;
              this.method_286((byte) index1, (byte) index2, (byte) 0, (byte) 56, (byte*) &struct43);
              this.method_286((byte) index1, (byte) index2, (byte) 56, (byte) 56, (byte*) ((IntPtr) &struct43 + 56));
              this.method_286((byte) index1, (byte) index2, (byte) 112, (byte) 56, (byte*) ((IntPtr) &struct43 + 112));
              this.method_286((byte) index1, (byte) index2, (byte) 168, (byte) 56, (byte*) ((IntPtr) &struct43 + 168));
              this.method_286((byte) index1, (byte) index2, (byte) 224, (byte) 32, (byte*) ((IntPtr) &struct43 + 224));
              for (uint index3 = 0U; index3 < 256U; ++index3)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(byte&) ((IntPtr) &struct43 + (int) index3) != (int) byte.MaxValue)
                {
                  this.textBox6.AppendText("x");
                  ++num2;
                  if (num2 > 16U)
                    return 0;
                }
              }
            }
            else
            {
              for (uint index3 = 0U; index3 < 256U; ++index3)
              {
                this.method_247(ushort_0, byte_0, (byte) 112, (uint) ((int) index3 | (int) index2 << 8 | (int) index1 << 16), &num1);
                if ((int) num1 != (int) byte.MaxValue)
                {
                  --index3;
                  this.textBox6.AppendText("x");
                  ++num2;
                  if (num2 > 16U)
                    return 0;
                }
              }
            }
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return 1;
          }
        }
        this.textBox6.AppendText("\r\n");
      }
      return 1;
    }

    private unsafe void method_294(int int_16)
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      ushort num2 = (ushort) 0;
      while ((int) num2 < 256)
      {
        uint uint_0 = (uint) ((int) num2 << 8 | int_16 << 16);
        this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 170);
        this.method_246(ushort_0, byte_0, (byte) 112, 10922U, (byte) 85);
        this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) sbyte.MinValue);
        this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 170);
        this.method_246(ushort_0, byte_0, (byte) 112, 10922U, (byte) 85);
        this.method_246(ushort_0, byte_0, (byte) 112, uint_0, (byte) 48);
        _Module.Sleep(100U);
        num2 += (ushort) 16;
      }
    }

    private unsafe int method_295(int int_16)
    {
      byte num1 = (byte) 0;
      uint num2 = 0U;
      int num3 = 0;
      uint num4 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num4 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num4 * 72);
      Struct32 struct32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct32, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), 262144U);
      this.textBox6.AppendText("Writing Bank " + Convert.ToString(3 - int_16) + ": ");
      this.string_2 = "Writing Bank " + Convert.ToString(3 - int_16) + ": ";
      this.string_3 = "";
      for (uint index1 = 0U; index1 < 256U; ++index1)
      {
        if ((int) _Module.GetAsyncKeyState(27) == 0)
        {
          if ((int) (index1 % 16U) == 0)
          {
            this.textBox6.AppendText(".");
            this.string_3 = this.string_3 + ".";
            Application.DoEvents();
          }
          if (num3 != 8)
          {
            if ((int) ushort_0 == 0)
            {
              byte* numPtr = (byte*) ((IntPtr) &struct32 + ((int) index1 * 256 + int_16 * 65536));
              Struct43 struct43;
              _Module.memcpy((void*) &struct43, (void*) numPtr, 256U);
              if (this.method_287((byte) int_16, (byte) index1, (byte) 0, (byte) 56, (byte*) &struct43) != 0)
              {
                if (this.method_287((byte) int_16, (byte) index1, (byte) 56, (byte) 56, (byte*) ((IntPtr) &struct43 + 56)) != 0)
                {
                  if (this.method_287((byte) int_16, (byte) index1, (byte) 112, (byte) 56, (byte*) ((IntPtr) &struct43 + 112)) != 0)
                  {
                    if (this.method_287((byte) int_16, (byte) index1, (byte) 168, (byte) 56, (byte*) ((IntPtr) &struct43 + 168)) != 0)
                    {
                      if (this.method_287((byte) int_16, (byte) index1, (byte) 224, (byte) 32, (byte*) ((IntPtr) &struct43 + 224)) == 0)
                      {
                        this.textBox6.AppendText("Write Failed!" + "\r\n");
                        return 1;
                      }
                    }
                    else
                    {
                      this.textBox6.AppendText("Write Failed!" + "\r\n");
                      return 1;
                    }
                  }
                  else
                  {
                    this.textBox6.AppendText("Write Failed!" + "\r\n");
                    return 1;
                  }
                }
                else
                {
                  this.textBox6.AppendText("Write Failed!" + "\r\n");
                  return 1;
                }
              }
              else
              {
                this.textBox6.AppendText("Write Failed!" + "\r\n");
                return 1;
              }
            }
            else
            {
              for (uint index2 = 0U; index2 < 256U; ++index2)
              {
                uint uint_0 = (uint) ((int) index2 | (int) index1 << 8 | int_16 << 16);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                byte byte_2 = ^(byte&) ((IntPtr) &struct32 + (int) uint_0);
                this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 170);
                this.method_246(ushort_0, byte_0, (byte) 112, 10922U, (byte) 85);
                this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 160);
                this.method_246(ushort_0, byte_0, (byte) 112, uint_0, byte_2);
                this.method_247(ushort_0, byte_0, (byte) 112, uint_0, &num1);
                if ((int) num1 != (int) byte_2)
                  this.method_247(ushort_0, byte_0, (byte) 112, uint_0, &num1);
                if ((int) num1 != (int) byte_2)
                  this.method_247(ushort_0, byte_0, (byte) 112, uint_0, &num1);
                if ((int) num1 != (int) byte_2)
                {
                  --index2;
                  ++num2;
                  if (num2 > 16U)
                  {
                    this.textBox6.AppendText("Write Failed !");
                    this.textBox6.AppendText("\r\n");
                    return 1;
                  }
                }
                else if (num2 > 0U)
                {
                  this.textBox6.AppendText("y");
                  num2 = 0U;
                }
              }
            }
            _Module.Sleep(20U);
          }
          else
          {
            this.textBox6.AppendText("Read Failed!" + "\r\n");
            return 1;
          }
        }
        else
        {
          this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
          return 1;
        }
      }
      _Module.Sleep(200U);
      this.textBox6.AppendText("\r\n");
      this.string_2 = "Done! ";
      this.string_3 = "";
      return 0;
    }

    private unsafe int method_296()
    {
      byte num1 = (byte) 0;
      uint num2 = 0U;
      int num3 = 0;
      uint num4 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num4 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num4 * 72);
      Struct32 struct32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct32, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), 262144U);
      Struct43 struct43;
      for (uint index1 = 0U; index1 < 4U; ++index1)
      {
        uint num5 = 3U - index1;
        this.textBox6.AppendText("Writing Bank " + Convert.ToString(index1) + ": .");
        this.string_2 = "Writing Bank " + Convert.ToString(index1) + ": ";
        this.string_3 = "";
        this.method_294((int) num5);
label_29:
        for (uint index2 = 1U; index2 < 256U; ++index2)
        {
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            if ((int) (index2 % 16U) == 0)
            {
              this.textBox6.AppendText(".");
              this.string_3 = this.string_3 + ".";
              Application.DoEvents();
            }
            while (num3 != 2)
            {
              if ((int) ushort_0 == 0)
              {
                byte* numPtr = (byte*) ((IntPtr) &struct32 + ((int) index2 * 256 + (int) num5 * 65536));
                _Module.memcpy((void*) &struct43, (void*) numPtr, 256U);
                if (this.method_287((byte) num5, (byte) index2, (byte) 0, (byte) 56, (byte*) &struct43) == 0)
                {
                  ++num3;
                  continue;
                }
                else if (this.method_287((byte) num5, (byte) index2, (byte) 56, (byte) 56, (byte*) ((IntPtr) &struct43 + 56)) == 0)
                {
                  ++num3;
                  continue;
                }
                else if (this.method_287((byte) num5, (byte) index2, (byte) 112, (byte) 56, (byte*) ((IntPtr) &struct43 + 112)) == 0)
                {
                  ++num3;
                  continue;
                }
                else if (this.method_287((byte) num5, (byte) index2, (byte) 168, (byte) 56, (byte*) ((IntPtr) &struct43 + 168)) == 0)
                {
                  ++num3;
                  continue;
                }
                else if (this.method_287((byte) num5, (byte) index2, (byte) 224, (byte) 32, (byte*) ((IntPtr) &struct43 + 224)) == 0)
                {
                  ++num3;
                  continue;
                }
              }
              else
              {
                for (uint index3 = 0U; index3 < 256U; ++index3)
                {
                  uint uint_0 = (uint) ((int) index3 | (int) index2 << 8 | (int) num5 << 16);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  byte byte_2 = ^(byte&) ((IntPtr) &struct32 + (int) uint_0);
                  this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 170);
                  this.method_246(ushort_0, byte_0, (byte) 112, 10922U, (byte) 85);
                  this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 160);
                  this.method_246(ushort_0, byte_0, (byte) 112, uint_0, byte_2);
                  this.method_247(ushort_0, byte_0, (byte) 112, uint_0, &num1);
                  if ((int) num1 != (int) byte_2)
                    this.method_247(ushort_0, byte_0, (byte) 112, uint_0, &num1);
                  if ((int) num1 != (int) byte_2)
                    this.method_247(ushort_0, byte_0, (byte) 112, uint_0, &num1);
                  if ((int) num1 != (int) byte_2)
                  {
                    --index3;
                    ++num2;
                    if (num2 > 16U)
                    {
                      this.textBox6.AppendText("Write Failed !");
                      this.textBox6.AppendText("\r\n");
                      return 1;
                    }
                  }
                  else if (num2 > 0U)
                  {
                    this.textBox6.AppendText("y");
                    num2 = 0U;
                  }
                }
              }
              _Module.Sleep(20U);
              goto label_29;
            }
            this.textBox6.AppendText("Write Failed!" + "\r\n");
            return 1;
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return 1;
          }
        }
        this.textBox6.AppendText("\r\n");
      }
label_61:
      for (uint index1 = 0U; index1 < 4U; ++index1)
      {
        uint num5 = 3U - index1;
        uint num6 = 0U;
        while (num3 != 8)
        {
          if ((int) ushort_0 == 0)
          {
            byte* numPtr = (byte*) ((IntPtr) &struct32 + ((int) num6 * 256 + (int) num5 * 65536));
            _Module.memcpy((void*) &struct43, (void*) numPtr, 256U);
            if (this.method_287((byte) num5, (byte) num6, (byte) 0, (byte) 56, (byte*) &struct43) == 0)
            {
              ++num3;
              continue;
            }
            else if (this.method_287((byte) num5, (byte) num6, (byte) 56, (byte) 56, (byte*) ((IntPtr) &struct43 + 56)) == 0)
            {
              ++num3;
              continue;
            }
            else if (this.method_287((byte) num5, (byte) num6, (byte) 112, (byte) 56, (byte*) ((IntPtr) &struct43 + 112)) == 0)
            {
              ++num3;
              continue;
            }
            else if (this.method_287((byte) num5, (byte) num6, (byte) 168, (byte) 56, (byte*) ((IntPtr) &struct43 + 168)) == 0)
            {
              ++num3;
              continue;
            }
            else if (this.method_287((byte) num5, (byte) num6, (byte) 224, (byte) 32, (byte*) ((IntPtr) &struct43 + 224)) == 0)
            {
              ++num3;
              continue;
            }
          }
          else
          {
            for (uint index2 = 0U; index2 < 256U; ++index2)
            {
              uint uint_0 = (uint) ((int) index2 | (int) num6 << 8 | (int) num5 << 16);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              byte byte_2 = ^(byte&) ((IntPtr) &struct32 + (int) uint_0);
              this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 170);
              this.method_246(ushort_0, byte_0, (byte) 112, 10922U, (byte) 85);
              this.method_246(ushort_0, byte_0, (byte) 112, 21845U, (byte) 160);
              this.method_246(ushort_0, byte_0, (byte) 112, uint_0, byte_2);
              this.method_247(ushort_0, byte_0, (byte) 112, uint_0, &num1);
              if ((int) num1 != (int) byte_2)
                this.method_247(ushort_0, byte_0, (byte) 112, uint_0, &num1);
              if ((int) num1 != (int) byte_2)
                this.method_247(ushort_0, byte_0, (byte) 112, uint_0, &num1);
              if ((int) num1 != (int) byte_2)
              {
                --index2;
                ++num2;
                if (num2 > 16U)
                {
                  this.textBox6.AppendText("Write Failed !");
                  this.textBox6.AppendText("\r\n");
                  return 1;
                }
              }
              else if (num2 > 0U)
              {
                this.textBox6.AppendText("y");
                num2 = 0U;
              }
            }
          }
          _Module.Sleep(20U);
          goto label_61;
        }
        this.textBox6.AppendText("Write Failed!" + "\r\n");
        return 1;
      }
      _Module.Sleep(200U);
      this.string_2 = "Done! ";
      this.string_3 = "";
      return 0;
    }

    private unsafe int method_297()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 0, (byte) 144);
      this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 1, (byte) 0);
      this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 2, (byte) 0);
      this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 3, (byte) 0);
      this.method_231(ushort_0, byte_0, (byte) 115, (byte) 1, (byte) 0, (byte) 3, (byte) 0);
      _Module.Sleep(200U);
      byte num2;
      this.method_229(ushort_0, byte_0, (byte) 115, (ushort) 4, &num2);
      byte num3;
      this.method_229(ushort_0, byte_0, (byte) 115, (ushort) 5, &num3);
      ushort num4 = (ushort) ((int) num3 | (int) num2 << 8);
      if ((int) num4 == 48963)
        this.method_301();
      return (int) num4;
    }

    private unsafe int method_298()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      Struct63 struct63;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) 0;
      Struct32 struct32;
      for (uint index1 = 0U; index1 < 4U; ++index1)
      {
        this.textBox6.AppendText("\r\n" + "Reading Bank " + Convert.ToString(index1) + ": ");
        this.string_2 = "Reading Bank " + Convert.ToString(index1) + ": ";
        this.string_3 = "";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) index1;
        for (uint index2 = 0U; index2 < 256U; ++index2)
        {
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) index2;
            if ((int) (index2 % 16U) == 0)
            {
              this.textBox6.AppendText(".");
              this.string_3 = this.string_3 + ".";
              Application.DoEvents();
            }
            Struct43 struct43;
            if ((int) ushort_0 == 0)
            {
              if (this.method_269((byte) 115, (ushort) 0, (byte) 4, (byte*) &struct63) == 0 || this.method_272((byte) 115, (byte) 0, (byte) 4, (byte) 1, (byte) 0) == 0 || this.method_266((byte) 115, (byte*) &struct43) == 0)
                return 1;
            }
            else
            {
              this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 0, (byte) 3);
              this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 1, (byte) index1);
              this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 2, (byte) index2);
              this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 3, (byte) 0);
              this.method_231(ushort_0, byte_0, (byte) 115, (byte) 0, (byte) 4, (byte) 1, (byte) 0);
              for (uint index3 = 4U; index3 < 260U; ++index3)
                this.method_229(ushort_0, byte_0, (byte) 115, (ushort) index3, (byte*) ((IntPtr) &struct43 + ((int) index3 - 4)));
            }
            _Module.memcpy((void*) ((IntPtr) &struct32 + ((int) index2 * 256 + (int) index1 * 65536)), (void*) &struct43, 256U);
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return 1;
          }
        }
      }
      this.textBox6.AppendText("\r\n");
      this.string_2 = "Done! ";
      this.string_3 = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
      return 0;
    }

    private unsafe int method_299()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      this.textBox6.AppendText("\r\n" + "Sending Chip Erase to Port " + this.label123.Text + "\r\n");
      this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 0, (byte) 6);
      this.method_231(ushort_0, byte_0, (byte) 115, (byte) 0, (byte) 1, (byte) 0, (byte) 0);
      if (this.method_232(ushort_0, byte_0, (byte) 115, (byte) 2) == 1)
        return 0;
      if (this.label118.Text == new string((sbyte*) &_Module.struct35_132))
        this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 0, (byte) 96);
      else if (this.label118.Text == new string((sbyte*) &_Module.struct35_133))
        this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 0, (byte) 98);
      else
        this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 0, (byte) 199);
      this.method_231(ushort_0, byte_0, (byte) 115, (byte) 0, (byte) 1, (byte) 0, (byte) 0);
      this.textBox6.AppendText("Erasing:");
      this.string_2 = string.Concat((object) "Erasing Chip: ");
      this.string_3 = "";
      if (this.method_232(ushort_0, byte_0, (byte) 115, (byte) 0) == 1)
        return 0;
      this.textBox6.AppendText("\r\n");
      return 1;
    }

    private unsafe void method_300()
    {
      Struct63 struct63;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) 0;
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      if ((int) ushort_0 == 0)
      {
        this.method_269((byte) 115, (ushort) 0, (byte) 4, (byte*) &struct63);
        this.method_272((byte) 115, (byte) 0, (byte) 1, (byte) 0, (byte) 0);
      }
      else
      {
        this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 0, (byte) 6);
        this.method_231(ushort_0, byte_0, (byte) 115, (byte) 0, (byte) 1, (byte) 0, (byte) 0);
      }
    }

    private unsafe void method_301()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 0, (byte) 80);
      this.method_231(ushort_0, byte_0, (byte) 115, (byte) 0, (byte) 1, (byte) 0, (byte) 0);
      this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 0, (byte) 1);
      this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 1, (byte) 0);
      this.method_231(ushort_0, byte_0, (byte) 115, (byte) 0, (byte) 2, (byte) 0, (byte) 0);
    }

    private unsafe int method_302()
    {
      Struct63 struct63;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) 0;
      Struct76 struct76;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct76 = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 3) = (sbyte) 0;
      Struct32 struct32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct32, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), 262144U);
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      for (uint index1 = 0U; index1 < 4U; ++index1)
      {
        this.textBox6.AppendText("Writing Bank " + Convert.ToString(index1) + ": ");
        this.string_2 = "Writing Bank " + Convert.ToString(index1) + ": ";
        this.string_3 = "";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct76 + 1) = (sbyte) index1;
        for (uint index2 = 0U; index2 < 256U; ++index2)
        {
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            if ((int) (index2 % 16U) == 0)
            {
              this.textBox6.AppendText(".");
              this.string_3 = this.string_3 + ".";
              Application.DoEvents();
            }
            if ((int) ushort_0 == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct76 + 2) = (sbyte) index2;
              _Module.memcpy((void*) ((IntPtr) &struct76 + 4), (void*) ((IntPtr) &struct32 + ((int) index2 * 256 + (int) index1 * 65536)), 256U);
              if (this.method_270((byte) 115, (byte*) &struct76) == 0)
                return 1;
            }
            else
            {
              this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 0, (byte) 6);
              this.method_231(ushort_0, byte_0, (byte) 115, (byte) 0, (byte) 1, (byte) 0, (byte) 0);
              if (this.method_232(ushort_0, byte_0, (byte) 115, (byte) 2) == 1)
                return 1;
              this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 0, (byte) 2);
              this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 1, (byte) index1);
              this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 2, (byte) index2);
              this.method_228(ushort_0, byte_0, (byte) 115, (ushort) 3, (byte) 0);
              for (uint index3 = 0U; index3 < 256U; ++index3)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_228(ushort_0, byte_0, (byte) 115, (ushort) (index3 + 4U), ^(byte&) ((IntPtr) &struct32 + ((int) index3 + (int) index2 * 256 + (int) index1 * 65536)));
              }
              this.method_231(ushort_0, byte_0, (byte) 115, (byte) 1, (byte) 4, (byte) 0, (byte) 0);
              if (this.method_232(ushort_0, byte_0, (byte) 115, (byte) 0) == 1)
                return 1;
            }
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return 1;
          }
        }
        this.textBox6.AppendText("\r\n");
        this.string_2 = "Done! ";
        this.string_3 = "";
      }
      return 0;
    }

    private int method_303()
    {
      ushort num;
      if (this.radioButton19.Checked)
      {
        num = (ushort) this.method_305();
        if ((int) num == 0)
        {
          num = (ushort) this.method_304();
          if ((int) num == 0)
          {
            num = (ushort) this.method_306();
            if ((int) num != 0 && this.radioButton21.Visible)
              this.radioButton21.Checked = true;
          }
          else
            this.radioButton20.Checked = true;
        }
      }
      else if (this.radioButton21.Checked)
      {
        num = (ushort) this.method_306();
        if ((int) num == 0)
        {
          num = (ushort) this.method_304();
          if ((int) num == 0)
          {
            num = (ushort) this.method_305();
            if ((int) num != 0)
              this.radioButton19.Checked = true;
          }
          else
            this.radioButton20.Checked = true;
        }
      }
      else
      {
        num = (ushort) this.method_304();
        if ((int) num == 0)
        {
          num = (ushort) this.method_306();
          if ((int) num == 0)
          {
            num = (ushort) this.method_305();
            if ((int) num != 0)
              this.radioButton19.Checked = true;
          }
          else if (this.radioButton21.Visible)
            this.radioButton21.Checked = true;
        }
        if ((int) num == 48963)
          this.method_316();
      }
      return (int) num;
    }

    private unsafe int method_304()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 144);
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) 0);
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34818, (byte) 0);
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34819, (byte) 0);
      this.method_231(ushort_0, byte_0, (byte) 114, (byte) 4, (byte) 0, (byte) 2, (byte) 0);
      _Module.Sleep(200U);
      byte num2;
      this.method_229(ushort_0, byte_0, (byte) 114, (ushort) 34820, &num2);
      byte num3;
      this.method_229(ushort_0, byte_0, (byte) 114, (ushort) 34821, &num3);
      return (int) (ushort) ((int) num3 | (int) num2 << 8);
    }

    private unsafe int method_305()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 0, (byte) 144);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 1, (byte) 0);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 2, (byte) 0);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 3, (byte) 0);
      this.method_236(ushort_0, byte_0, (byte) 114, (byte) 4, (byte) 0, (byte) 2, (byte) 0);
      _Module.Sleep(200U);
      byte num2;
      this.method_235(ushort_0, byte_0, (byte) 114, (ushort) 4, &num2);
      byte num3;
      this.method_235(ushort_0, byte_0, (byte) 114, (ushort) 5, &num3);
      return (int) (ushort) ((int) num3 | (int) num2 << 8);
    }

    private unsafe int method_306()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 0, (byte) 144);
      this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 1, (byte) 0);
      this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 2, (byte) 0);
      this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 3, (byte) 0);
      this.method_244(ushort_0, byte_0, (byte) 114, (byte) 4, (byte) 0, (byte) 2, (byte) 0);
      _Module.Sleep(200U);
      byte num2;
      this.method_243(ushort_0, byte_0, (byte) 114, (ushort) 4, &num2);
      byte num3;
      this.method_243(ushort_0, byte_0, (byte) 114, (ushort) 5, &num3);
      return (int) (ushort) ((int) num3 | (int) num2 << 8);
    }

    private int method_307()
    {
      if (this.radioButton19.Checked)
      {
        uint num = (uint) this.method_309();
      }
      return !this.radioButton21.Checked ? this.method_308() : this.method_310();
    }

    private unsafe int method_308()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      Struct63 struct63;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) 0;
      Struct32 struct32;
      for (uint index1 = 0U; index1 < 4U; ++index1)
      {
        this.textBox6.AppendText("\r\n" + "Reading Bank " + Convert.ToString(index1) + ": ");
        this.string_2 = "Reading Bank " + Convert.ToString(index1) + ": ";
        this.string_3 = "";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) index1;
        for (uint index2 = 0U; index2 < 256U; ++index2)
        {
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) index2;
            if ((int) (index2 % 16U) == 0)
            {
              this.textBox6.AppendText(".");
              this.string_3 = this.string_3 + ".";
              Application.DoEvents();
            }
            Struct43 struct43;
            if ((int) ushort_0 == 0)
            {
              if (this.method_269((byte) 114, (ushort) 0, (byte) 4, (byte*) &struct63) == 0 || this.method_272((byte) 114, (byte) 4, (byte) 0, (byte) 0, (byte) 1) == 0 || this.method_266((byte) 114, (byte*) &struct43) == 0)
                return 1;
            }
            else
            {
              this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 3);
              this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) index1);
              this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34818, (byte) index2);
              this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34819, (byte) 0);
              this.method_231(ushort_0, byte_0, (byte) 114, (byte) 4, (byte) 0, (byte) 0, (byte) 1);
              for (uint index3 = 4U; index3 < 260U; ++index3)
                this.method_229(ushort_0, byte_0, (byte) 114, (ushort) (index3 + 34816U), (byte*) ((IntPtr) &struct43 + ((int) index3 - 4)));
            }
            _Module.memcpy((void*) ((IntPtr) &struct32 + ((int) index2 * 256 + (int) index1 * 65536)), (void*) &struct43, 256U);
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return 1;
          }
        }
      }
      this.textBox6.AppendText("\r\n");
      this.string_2 = "Done! ";
      this.string_3 = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
      return 0;
    }

    private unsafe int method_309()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      Struct63 struct63;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) 0;
      Struct32 struct32;
      for (uint index1 = 0U; index1 < 4U; ++index1)
      {
        this.textBox6.AppendText("\r\n" + "Reading Bank " + Convert.ToString(index1) + ": ");
        this.string_2 = "Reading Bank " + Convert.ToString(index1) + ": ";
        this.string_3 = "";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) index1;
        for (uint index2 = 0U; index2 < 256U; ++index2)
        {
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) index2;
            if ((int) (index2 % 16U) == 0)
            {
              this.textBox6.AppendText(".");
              this.string_3 = this.string_3 + ".";
              Application.DoEvents();
            }
            Struct43 struct43;
            if ((int) ushort_0 == 0)
            {
              if (this.method_277((byte) 114, (ushort) 0, (byte) 4, (byte*) &struct63) == 0 || this.method_279((byte) 114, (byte) 4, (byte) 0, (byte) 0, (byte) 1) == 0 || this.method_274((byte) 114, (byte*) &struct43) == 0)
                return 1;
            }
            else
            {
              this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 3);
              this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) index1);
              this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34818, (byte) index2);
              this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34819, (byte) 0);
              this.method_236(ushort_0, byte_0, (byte) 114, (byte) 4, (byte) 0, (byte) 0, (byte) 1);
              for (uint index3 = 4U; index3 < 260U; ++index3)
                this.method_235(ushort_0, byte_0, (byte) 114, (ushort) (index3 + 34816U), (byte*) ((IntPtr) &struct43 + ((int) index3 - 4)));
            }
            _Module.memcpy((void*) ((IntPtr) &struct32 + ((int) index2 * 256 + (int) index1 * 65536)), (void*) &struct43, 256U);
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return 1;
          }
        }
      }
      this.textBox6.AppendText("\r\n");
      this.string_2 = "Done! ";
      this.string_3 = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
      return 0;
    }

    private unsafe int method_310()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      Struct63 struct63;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) 0;
      Struct32 struct32;
      for (uint index1 = 0U; index1 < 4U; ++index1)
      {
        this.textBox6.AppendText("\r\n" + "Reading Bank " + Convert.ToString(index1) + ": ");
        this.string_2 = "Reading Bank " + Convert.ToString(index1) + ": ";
        this.string_3 = "";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) index1;
        for (uint index2 = 0U; index2 < 256U; ++index2)
        {
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) index2;
            if ((int) (index2 % 16U) == 0)
            {
              this.textBox6.AppendText(".");
              this.string_3 = this.string_3 + ".";
              Application.DoEvents();
            }
            Struct43 struct43;
            if ((int) ushort_0 == 0)
            {
              if (this.method_283((byte) 114, (ushort) 0, (byte) 4, (byte*) &struct63) == 0 || this.method_285((byte) 114, (byte) 4, (byte) 0, (byte) 0, (byte) 1) == 0 || this.method_281((byte) 114, (byte*) &struct43) == 0)
                return 1;
            }
            else
            {
              this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 3);
              this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) index1);
              this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34818, (byte) index2);
              this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34819, (byte) 0);
              this.method_244(ushort_0, byte_0, (byte) 114, (byte) 4, (byte) 0, (byte) 0, (byte) 1);
              for (uint index3 = 4U; index3 < 260U; ++index3)
                this.method_235(ushort_0, byte_0, (byte) 114, (ushort) (index3 + 34816U), (byte*) ((IntPtr) &struct43 + ((int) index3 - 4)));
            }
            _Module.memcpy((void*) ((IntPtr) &struct32 + ((int) index2 * 256 + (int) index1 * 65536)), (void*) &struct43, 256U);
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return 1;
          }
        }
      }
      this.textBox6.AppendText("\r\n");
      this.string_2 = "Done! ";
      this.string_3 = "";
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
      return 0;
    }

    private unsafe int method_311()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      this.textBox6.AppendText("\r\n" + "Sending Chip Erase to Port " + this.label123.Text + "\r\n");
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
      this.method_231(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
      if (this.method_232(ushort_0, byte_0, (byte) 114, (byte) 2) == 1)
        return 0;
      if (string.Compare(this.label118.Text, "0xBF") == 0)
        this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 96);
      else if (string.Compare(this.label118.Text, "0x1F") == 0)
        this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 98);
      else
        this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 199);
      this.method_231(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
      this.textBox6.AppendText("Erasing:");
      this.string_2 = string.Concat((object) "Erasing Chip: ");
      this.string_3 = "";
      if (this.method_232(ushort_0, byte_0, (byte) 114, (byte) 0) == 1)
        return 0;
      this.textBox6.AppendText("\r\n");
      return 1;
    }

    private unsafe int method_312()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      this.textBox6.AppendText("\r\n" + "Sending Chip Erase to Port " + this.label123.Text + "\r\n");
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
      this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
      if (this.method_237(ushort_0, byte_0, (byte) 114, (byte) 2) == 1)
        return 0;
      if (this.label118.Text == new string((sbyte*) &_Module.struct35_132))
        this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 96);
      else if (this.label118.Text == new string((sbyte*) &_Module.struct35_133))
        this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 98);
      else
        this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 199);
      this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
      this.textBox6.AppendText("Erasing:");
      this.string_2 = string.Concat((object) "Erasing Chip: ");
      this.string_3 = "";
      if (this.method_237(ushort_0, byte_0, (byte) 114, (byte) 0) == 1)
        return 0;
      this.textBox6.AppendText("\r\n");
      return 1;
    }

    private unsafe int method_313()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      this.textBox6.AppendText("\r\n" + "Sending Chip Erase to Port " + this.label123.Text + "\r\n");
      this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
      this.method_244(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
      if (this.method_245(ushort_0, byte_0, (byte) 114, (byte) 2) == 1)
        return 0;
      if (this.label118.Text == new string((sbyte*) &_Module.struct35_132))
        this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 96);
      else if (this.label118.Text == new string((sbyte*) &_Module.struct35_133))
        this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 98);
      else
        this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 199);
      this.method_244(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
      this.textBox6.AppendText("Erasing:");
      this.string_2 = string.Concat((object) "Erasing Chip: ");
      this.string_3 = "";
      if (this.method_245(ushort_0, byte_0, (byte) 114, (byte) 0) == 1)
        return 0;
      this.textBox6.AppendText("\r\n");
      return 1;
    }

    private unsafe int method_314()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
      this.method_231(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
      byte num2;
      this.method_229(ushort_0, byte_0, (byte) 114, (ushort) 1, &num2);
      if ((int) num2 == 140)
      {
        this.textBox6.AppendText("Spi Status: 0x8C.. Already locked !" + "\r\n");
        return 0;
      }
      else if ((int) num2 == 142)
      {
        this.textBox6.AppendText("Spi Status: 0x8E.. Already locked !" + "\r\n");
        return 0;
      }
      else
      {
        this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
        this.method_231(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
        this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 1);
        this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) 140);
        this.method_231(ushort_0, byte_0, (byte) 114, (byte) 2, (byte) 0, (byte) 0, (byte) 0);
        _Module.Sleep(500U);
        this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
        this.method_231(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
        this.method_229(ushort_0, byte_0, (byte) 114, (ushort) 1, &num2);
        if (((int) num2 & 128) == 0)
          return 0;
        this.textBox6.AppendText("Spi Status: 0x8C" + "\r\n");
        return 1;
      }
    }

    private unsafe int method_315()
    {
      byte num1 = (byte) 140;
      uint num2 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num2 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num2 * 72);
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
      this.method_231(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 1);
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) 0);
      this.method_231(ushort_0, byte_0, (byte) 114, (byte) 2, (byte) 0, (byte) 0, (byte) 0);
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
      this.method_231(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
      this.method_229(ushort_0, byte_0, (byte) 114, (ushort) 1, &num1);
      Struct20 struct20;
      _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_121, __arglist ((int) num1));
      this.label122.Text = "Spi Status register 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
      if (((int) num1 & 128) == 0)
      {
        _Module.Sleep(500U);
        this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
        this.method_231(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
        this.method_229(ushort_0, byte_0, (byte) 114, (ushort) 1, &num1);
        if ((int) num1 == 0)
        {
          this.textBox6.AppendText("." + "\r\n" + "Spi Status: 0x00" + "\r\n");
          this.button42.Text = new string((sbyte*) &_Module.struct35_131);
          this.button42.Enabled = true;
          this.toolTip_0.SetToolTip((Control) this.button42, "Click to lock Spi status register");
          return 1;
        }
      }
      return 0;
    }

    private unsafe void method_316()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 80);
      this.method_231(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 1);
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) 0);
      this.method_231(ushort_0, byte_0, (byte) 114, (byte) 2, (byte) 0, (byte) 0, (byte) 0);
    }

    private unsafe int method_317()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
      this.method_231(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
      byte num2;
      this.method_229(ushort_0, byte_0, (byte) 114, (ushort) 1, &num2);
      return (int) num2;
    }

    private int method_318()
    {
      if (this.radioButton19.Checked)
      {
        if (this.method_320() == 1)
          return 1;
      }
      else if (this.method_319() == 1)
        return 1;
      return 0;
    }

    private unsafe int method_319()
    {
      Struct63 struct63;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) 0;
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      if ((int) ushort_0 == 0)
      {
        if (this.method_269((byte) 114, (ushort) 0, (byte) 4, (byte*) &struct63) == 0 || this.method_272((byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0) == 0)
          return 1;
      }
      else
      {
        this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
        this.method_231(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
      }
      return 0;
    }

    private unsafe int method_320()
    {
      Struct63 struct63;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) 0;
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      if ((int) ushort_0 == 0)
      {
        if (this.method_277((byte) 114, (ushort) 0, (byte) 4, (byte*) &struct63) == 0 || this.method_279((byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0) == 0)
          return 1;
      }
      else
      {
        this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
        this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
      }
      return 0;
    }

    private unsafe int method_321()
    {
      byte num1 = (byte) 140;
      uint num2 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num2 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num2 * 72);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 3U), (byte) 217);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 7U), (byte) 137);
      _Module.Sleep(2U);
      _Module.smethod_2((ushort) ((uint) ushort_0 + 6U), byte_0);
      if ((int) (byte) _Module.smethod_1((ushort) ((uint) ushort_0 + 7U)) != 114)
      {
        Struct20 struct20;
        _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_121, __arglist ((int) num1));
        this.label122.Text = "Status 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
        return 0;
      }
      else
      {
        this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
        this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
        this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 1);
        this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) 0);
        this.method_236(ushort_0, byte_0, (byte) 114, (byte) 2, (byte) 0, (byte) 0, (byte) 0);
        this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
        this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
        this.method_235(ushort_0, byte_0, (byte) 114, (ushort) 1, &num1);
        Struct20 struct20;
        _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct35_121, __arglist ((int) num1));
        this.label122.Text = "Spi Status register 0x" + new string((sbyte*) &_Module.struct19_0) + new string((sbyte*) &struct20);
        if (((int) num1 & 128) == 0)
        {
          _Module.Sleep(500U);
          this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
          this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
          this.method_235(ushort_0, byte_0, (byte) 114, (ushort) 1, &num1);
          if ((int) num1 == 0)
          {
            this.textBox6.AppendText("\r\n" + "Spi Status: 0x00" + "\r\n");
            this.button42.Text = new string((sbyte*) &_Module.struct35_131);
            this.button42.Enabled = true;
            this.toolTip_0.SetToolTip((Control) this.button42, "Click to lock Spi status register");
            _Module.MessageBeep(0U);
            _Module.Beep(500U, 500U);
            _Module.MessageBeep(0U);
            _Module.Beep(750U, 500U);
            _Module.MessageBeep(0U);
            _Module.Beep(500U, 500U);
            return 1;
          }
        }
        return 0;
      }
    }

    private unsafe int method_322()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
      this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
      byte num2;
      this.method_235(ushort_0, byte_0, (byte) 114, (ushort) 1, &num2);
      if ((int) num2 == 140)
      {
        this.textBox6.AppendText("Spi Status: 0x8C.. Already locked !" + "\r\n");
        return 0;
      }
      else if ((int) num2 == 142)
      {
        this.textBox6.AppendText("Spi Status: 0x8E.. Already locked !" + "\r\n");
        return 0;
      }
      else
      {
        this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
        this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
        this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 1);
        this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) 140);
        this.method_236(ushort_0, byte_0, (byte) 114, (byte) 2, (byte) 0, (byte) 0, (byte) 0);
        _Module.Sleep(500U);
        this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
        this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
        this.method_235(ushort_0, byte_0, (byte) 114, (ushort) 1, &num2);
        if (((int) num2 & 128) == 0)
          return 0;
        this.textBox6.AppendText("Spi Status: 0x8C" + "\r\n");
        return 1;
      }
    }

    private unsafe int method_323()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
      this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
      byte num2;
      this.method_235(ushort_0, byte_0, (byte) 114, (ushort) 1, &num2);
      return (int) num2;
    }

    private unsafe int method_324()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
      this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 1);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) 0);
      this.method_236(ushort_0, byte_0, (byte) 114, (byte) 2, (byte) 0, (byte) 0, (byte) 0);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
      this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
      byte num2;
      this.method_235(ushort_0, byte_0, (byte) 114, (ushort) 1, &num2);
      if (((int) num2 & 128) == 0)
      {
        _Module.Sleep(500U);
        this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
        this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
        this.method_235(ushort_0, byte_0, (byte) 114, (ushort) 1, &num2);
        if ((int) num2 == 0)
          return 1;
      }
      return 0;
    }

    private unsafe int method_325()
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 5);
      this.method_244(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 1, (byte) 0);
      byte num2;
      this.method_243(ushort_0, byte_0, (byte) 114, (ushort) 1, &num2);
      return (int) num2;
    }

    private unsafe int method_326()
    {
      Struct63 struct63;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) 0;
      Struct76 struct76;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct76 = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 3) = (sbyte) 0;
      Struct32 struct32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct32, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), 262144U);
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      for (uint index1 = 0U; index1 < 4U; ++index1)
      {
        this.textBox6.AppendText("Writing Bank " + Convert.ToString(index1) + ": ");
        this.string_2 = "Writing Bank " + Convert.ToString(index1) + ": ";
        this.string_3 = "";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct76 + 1) = (sbyte) index1;
        for (uint index2 = 0U; index2 < 256U; ++index2)
        {
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            if ((int) (index2 % 16U) == 0)
            {
              this.textBox6.AppendText(".");
              this.string_3 = this.string_3 + ".";
              Application.DoEvents();
            }
            if ((int) ushort_0 == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct76 + 2) = (sbyte) index2;
              _Module.memcpy((void*) ((IntPtr) &struct76 + 4), (void*) ((IntPtr) &struct32 + ((int) index2 * 256 + (int) index1 * 65536)), 256U);
              if (this.method_270((byte) 114, (byte*) &struct76) == 0)
                return 1;
            }
            else
            {
              this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
              this.method_231(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
              if (this.method_232(ushort_0, byte_0, (byte) 114, (byte) 2) == 1)
                return 1;
              this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 2);
              this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) index1);
              this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34818, (byte) index2);
              this.method_228(ushort_0, byte_0, (byte) 114, (ushort) 34819, (byte) 0);
              for (uint index3 = 0U; index3 < 256U; ++index3)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_228(ushort_0, byte_0, (byte) 114, (ushort) (index3 + 34820U), ^(byte&) ((IntPtr) &struct32 + ((int) index3 + (int) index2 * 256 + (int) index1 * 65536)));
              }
              this.method_231(ushort_0, byte_0, (byte) 114, (byte) 4, (byte) 1, (byte) 0, (byte) 0);
              if (this.method_232(ushort_0, byte_0, (byte) 114, (byte) 0) == 1)
                return 1;
            }
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return 1;
          }
        }
        this.textBox6.AppendText("\r\n");
        this.string_2 = "Done! ";
        this.string_3 = "";
      }
      return 0;
    }

    private unsafe int method_327()
    {
      Struct63 struct63;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) 0;
      Struct76 struct76;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct76 = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 3) = (sbyte) 0;
      Struct32 struct32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct32, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), 262144U);
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      for (uint index1 = 0U; index1 < 4U; ++index1)
      {
        this.textBox6.AppendText("Writing Bank " + Convert.ToString(index1) + ": ");
        this.string_2 = "Writing Bank " + Convert.ToString(index1) + ": ";
        this.string_3 = "";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct76 + 1) = (sbyte) index1;
        for (uint index2 = 0U; index2 < 256U; ++index2)
        {
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            if ((int) (index2 % 16U) == 0)
            {
              this.textBox6.AppendText(".");
              this.string_3 = this.string_3 + ".";
              Application.DoEvents();
            }
            if ((int) ushort_0 == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct76 + 2) = (sbyte) index2;
              _Module.memcpy((void*) ((IntPtr) &struct76 + 4), (void*) ((IntPtr) &struct32 + ((int) index2 * 256 + (int) index1 * 65536)), 256U);
              if (this.method_278((byte) 114, (byte*) &struct76) == 0)
                return 1;
            }
            else
            {
              this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
              this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
              if (this.method_237(ushort_0, byte_0, (byte) 114, (byte) 2) == 1)
                return 1;
              this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 2);
              this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) index1);
              this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34818, (byte) index2);
              this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34819, (byte) 0);
              for (uint index3 = 0U; index3 < 256U; ++index3)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_234(ushort_0, byte_0, (byte) 114, (ushort) (index3 + 34820U), ^(byte&) ((IntPtr) &struct32 + ((int) index3 + (int) index2 * 256 + (int) index1 * 65536)));
              }
              this.method_236(ushort_0, byte_0, (byte) 114, (byte) 4, (byte) 1, (byte) 0, (byte) 0);
              if (this.method_237(ushort_0, byte_0, (byte) 114, (byte) 0) == 1)
                return 1;
            }
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return 1;
          }
        }
        this.textBox6.AppendText("\r\n");
        this.string_2 = "Done! ";
        this.string_3 = "";
      }
      return 0;
    }

    private unsafe int method_328()
    {
      Struct63 struct63;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) 0;
      Struct76 struct76;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct76 = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 3) = (sbyte) 0;
      Struct32 struct32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) &struct32, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), 262144U);
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      for (uint index1 = 0U; index1 < 4U; ++index1)
      {
        this.textBox6.AppendText("Writing Bank " + Convert.ToString(index1) + ": ");
        this.string_2 = "Writing Bank " + Convert.ToString(index1) + ": ";
        this.string_3 = "";
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct76 + 1) = (sbyte) index1;
        for (uint index2 = 0U; index2 < 256U; ++index2)
        {
          if ((int) _Module.GetAsyncKeyState(27) == 0)
          {
            if ((int) (index2 % 16U) == 0)
            {
              this.textBox6.AppendText(".");
              this.string_3 = this.string_3 + ".";
              Application.DoEvents();
            }
            if ((int) ushort_0 == 0)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct76 + 2) = (sbyte) index2;
              _Module.memcpy((void*) ((IntPtr) &struct76 + 4), (void*) ((IntPtr) &struct32 + ((int) index2 * 256 + (int) index1 * 65536)), 256U);
              if (this.method_284((byte) 114, (byte*) &struct76) == 0)
                return 1;
            }
            else
            {
              this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
              this.method_244(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
              if (this.method_245(ushort_0, byte_0, (byte) 114, (byte) 2) == 1)
                return 1;
              this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 2);
              this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) index1);
              this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34818, (byte) index2);
              this.method_242(ushort_0, byte_0, (byte) 114, (ushort) 34819, (byte) 0);
              for (uint index3 = 0U; index3 < 256U; ++index3)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_242(ushort_0, byte_0, (byte) 114, (ushort) (index3 + 34820U), ^(byte&) ((IntPtr) &struct32 + ((int) index3 + (int) index2 * 256 + (int) index1 * 65536)));
              }
              this.method_244(ushort_0, byte_0, (byte) 114, (byte) 4, (byte) 1, (byte) 0, (byte) 0);
              if (this.method_245(ushort_0, byte_0, (byte) 114, (byte) 0) == 1)
                return 1;
            }
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
            return 1;
          }
        }
        this.textBox6.AppendText("\r\n");
        this.string_2 = "Done! ";
        this.string_3 = "";
      }
      return 0;
    }

    private unsafe int method_329()
    {
      uint num = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num * 72);
      this.textBox6.AppendText("\r\n" + "Sending Sector Erase to Port " + this.label123.Text + "\r\n");
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
      this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
      if (this.method_237(ushort_0, byte_0, (byte) 114, (byte) 2) == 1)
        return 0;
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 32);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) 3);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34818, (byte) 224);
      this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34819, (byte) 0);
      this.method_236(ushort_0, byte_0, (byte) 114, (byte) 4, (byte) 0, (byte) 0, (byte) 0);
      if (this.method_237(ushort_0, byte_0, (byte) 114, (byte) 0) == 1)
        return 0;
      this.textBox6.AppendText("Erasing: 0x3E000");
      this.string_2 = string.Concat((object) "Erasing:  0x3E000");
      this.string_3 = "";
      this.textBox6.AppendText("\r\n");
      return 1;
    }

    private unsafe int method_330(byte* pByte_0)
    {
      Struct63 struct63;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) 0;
      Struct76 struct76;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct76 = (sbyte) 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 3) = (sbyte) 0;
      Struct33 struct33;
      _Module.memcpy((void*) &struct33, (void*) pByte_0, 4096U);
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      byte byte_0 = ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      this.textBox6.AppendText(string.Concat((object) "Writing: 0x3E000 "));
      this.string_2 = string.Concat((object) "Writing: 0x3E000 ");
      this.string_3 = "";
      uint num2 = 3U;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct76 + 1) = (sbyte) 3;
      for (uint index1 = 224U; index1 < 240U; ++index1)
      {
        if ((int) _Module.GetAsyncKeyState(27) == 0)
        {
          if ((int) ushort_0 == 0)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct76 + 2) = (sbyte) index1;
            _Module.memcpy((void*) ((IntPtr) &struct76 + 4), (void*) ((IntPtr) &struct33 + ((int) index1 - 224) * 256), 256U);
            if (this.method_278((byte) 114, (byte*) &struct76) == 0)
              return 0;
          }
          else
          {
            this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 6);
            this.method_236(ushort_0, byte_0, (byte) 114, (byte) 1, (byte) 0, (byte) 0, (byte) 0);
            if (this.method_237(ushort_0, byte_0, (byte) 114, (byte) 2) == 1)
              return 0;
            this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34816, (byte) 2);
            this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34817, (byte) num2);
            this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34818, (byte) index1);
            this.method_234(ushort_0, byte_0, (byte) 114, (ushort) 34819, (byte) 0);
            for (uint index2 = 0U; index2 < 256U; ++index2)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_234(ushort_0, byte_0, (byte) 114, (ushort) (index2 + 34820U), ^(byte&) ((IntPtr) &struct33 + ((int) index2 + ((int) index1 - 224) * 256)));
            }
            this.method_236(ushort_0, byte_0, (byte) 114, (byte) 4, (byte) 1, (byte) 0, (byte) 0);
            if (this.method_237(ushort_0, byte_0, (byte) 114, (byte) 0) == 1)
              return 0;
          }
        }
        else
        {
          this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
          return 0;
        }
      }
      this.textBox6.AppendText("\r\n");
      this.string_2 = "Done! ";
      this.string_3 = "";
      return 1;
    }

    private unsafe int method_331()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      if (!this.bool_2)
      {
        string str = "" + "You are about to send the mode-B command to your Hitachi Drive." + "\n" + "For Best results open drive tray now and power off the drive." + "\n" + "Then press OK to continue. When dots show, power on the drive." + "\n" + "Drive should respond to normal windows Inquiry and close." + "\n";
        if (this.radioButton17.Checked)
          str = str + "Wait 15 seconds for Windows to recognise drive.." + "\n";
        string text = str + "\n" + "When done, it's important to confirm Mode-B with double press to" + "\n" + "open and close drive tray." + "\n\n" + "Press Escape to cancel.";
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        uint num3 = (uint) MessageBox.Show(text, "Send Mode-B Command", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if ((int) num3 == 2)
          return 1;
      }
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 250U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) -112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) -112;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) -48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 1;
      while (_Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText(".");
        Application.DoEvents();
        _Module.Sleep(250U);
        if ((int) _Module.GetAsyncKeyState(27) != 0)
        {
          this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
          return 1;
        }
      }
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 0;
      Struct100 struct100;
      uint num4;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct100, &num4, 36U, (byte) 1, &gstruct3) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num3 = (int) MessageBox.Show("Inquiry command Failed !", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else
      {
        this.method_5((byte*) &struct100, 36U, 0U);
        this.textBox6.AppendText("\r\n" + "Drive, answers normal Windows Inquiry 12 0 0 0 24 0" + "\r\n");
        this.textBox6.AppendText(this.string_0 + "\r\n");
        this.textBox6.AppendText("Mode-B Done! " + "\r\n");
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ^(byte&) ((IntPtr) &struct100 + 34) == 53)
        {
          this.radioButton4.Checked = true;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if ((int) ^(byte&) ((IntPtr) &struct100 + 34) == 55)
          {
            this.radioButton5.Checked = true;
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((((int) ^(byte&) ((IntPtr) &struct100 + 34) == 52 ? 1 : 0) & ((int) ^(byte&) ((IntPtr) &struct100 + 35) != 48 ? 1 : 0)) != 0)
            {
              this.radioButton3.Checked = true;
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(byte&) ((IntPtr) &struct100 + 34) == 51 & (int) ^(byte&) ((IntPtr) &struct100 + 35) == 54)
                this.radioButton2.Checked = true;
              else
                this.radioButton1.Checked = true;
            }
          }
        }
        uint num3 = 0U;
        while (true)
        {
          _Module.memset((void*) &struct52, 0, 12U);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) @struct52 = (sbyte) 27;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 3;
          if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
          {
            _Module.Sleep(200U);
            if ((int) num3 != 10)
              ++num3;
            else
              break;
          }
          else
            goto label_27;
        }
        return 1;
label_27:
        if ((int) ushort_0 == 0 && this.checkBox15.CheckState == CheckState.Unchecked)
        {
          this.method_424((byte) 1);
          this.bool_9 = true;
          _Module.Sleep(10U);
          this.method_424((byte) 5);
          _Module.Sleep(25U);
          this.method_424((byte) 7);
          this.method_422();
        }
        return 0;
      }
    }

    private void button27_Click(object sender, EventArgs e)
    {
      if (!this.radioButton17.Checked)
        return;
      this.textBox6.AppendText("Scanning for hardware changes" + "\r\n");
      if (_Module.smethod_121() == 0)
        return;
      this.textBox6.AppendText("Scan returned an error!" + "\r\n");
    }

    private unsafe void method_332()
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        string text = this.comboBox16.Text;
        Struct84 struct84;
        _Module.sprintf((sbyte*) &struct84, (sbyte*) &_Module.struct18_9, __arglist (text));
        this.textBox6.AppendText("Attempting to remove " + text + "\r\n");
        if (_Module.smethod_122((byte*) &struct84) == 1)
          this.textBox6.AppendText("Removal of " + text + " Failed!" + "\r\n");
        else
          this.textBox6.AppendText("Done!" + "\r\n");
        this.method_360();
      }
    }

    private void method_333()
    {
      this.textBox6.AppendText("Enabling All CDROMS" + "\r\n");
      _Module.smethod_125();
      this.textBox6.AppendText("Done!" + "\r\n");
      this.method_360();
    }

    private unsafe void method_334()
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        string text = this.comboBox16.Text;
        Struct84 struct84;
        _Module.sprintf((sbyte*) &struct84, (sbyte*) &_Module.struct18_9, __arglist (text));
        this.textBox6.AppendText("Attempting to disable " + text + "\r\n");
        if (_Module.smethod_124((byte*) &struct84) == 1)
          this.textBox6.AppendText("Disabling of " + text + " Failed!" + "\r\n");
        else
          this.textBox6.AppendText("Done!" + "\r\n");
        this.method_360();
      }
    }

    private unsafe void method_335(string string_25)
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct84 struct84;
        _Module.sprintf((sbyte*) &struct84, (sbyte*) &_Module.struct18_9, __arglist (string_25.Substring(0, 1)));
        this.textBox6.AppendText("Attempting to disable " + string_25 + "\r\n");
        if (_Module.smethod_124((byte*) &struct84) == 1)
          this.textBox6.AppendText("Disabling of " + string_25 + " Failed!" + "\r\n");
        else
          this.textBox6.AppendText("Done!" + "\r\n");
        this.method_360();
      }
    }

    private void button11_Click(object sender, EventArgs e)
    {
      this.method_336();
    }

    private unsafe void method_336()
    {
      if (this.comboBox1.Items.Count == 0)
        return;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      uint num2 = (uint) this.comboBox1.Items.Count;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort num3 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      if (this.radioButton17.Checked && (int) num3 == 0 && (int) num2 != 0)
      {
        this.method_424((byte) 2);
        this.bool_9 = false;
        _Module.Sleep(10U);
      }
      if (this.method_331() != 0 || !this.radioButton17.Checked)
        return;
      if ((int) num3 == 0 && (int) num2 != 0)
      {
        this.method_424((byte) 1);
        this.bool_9 = true;
        _Module.Sleep(10U);
      }
      this.Cursor = Cursors.WaitCursor;
      _Module.Sleep(3000U);
      Application.DoEvents();
      this.method_361();
      this.Cursor = Cursors.Arrow;
    }

    private unsafe void button23_Click(object sender, EventArgs e)
    {
      string text = "" + "You are about to scan for your Hitachi Drive and send USmodeB." + "\n" + "You will need to use the JungleUSB driver for this to work." + "\n" + "Connect the USB-2-SATA to the USB port with the drive connected" + "\n" + "and powered on, wait 15 seconds, then press OK." + "\n\n" + "Press Escape to cancel.";
      // ISSUE: cast to a function pointer type
      _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
      int num = (int) MessageBox.Show(text, "USmodeB", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
      _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      if (num == 2 || this.method_361() == 0)
        return;
      this.method_362();
    }

    private unsafe void method_337()
    {
      if (this.comboBox1.Items.Count == 0)
        return;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      uint num2 = (uint) this.comboBox1.Items.Count;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num3 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      if (this.radioButton17.Checked && (int) ushort_0 == 0 && (int) num2 != 0)
      {
        this.method_424((byte) 2);
        this.bool_9 = false;
        _Module.Sleep(100U);
      }
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 2;
      if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num3, (byte) 1, &gstruct3) != 0)
      {
        _Module.Sleep(1500U);
        if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num3, (byte) 1, &gstruct3) != 0)
          this.textBox6.AppendText("Drive Aborted the command" + "\r\n");
        else
          this.textBox6.AppendText("Tray Opening" + "\r\n");
      }
      else
        this.textBox6.AppendText("Tray Opening" + "\r\n");
      if (!this.radioButton17.Checked || (int) ushort_0 != 0 || (int) num2 == 0)
        return;
      this.method_424((byte) 1);
      this.bool_9 = true;
    }

    private unsafe void method_338()
    {
      if (this.comboBox1.Items.Count == 0)
        return;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      uint num2 = (uint) this.comboBox1.Items.Count;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num3 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      if (this.radioButton17.Checked && (int) ushort_0 == 0 && (int) num2 != 0)
      {
        this.method_424((byte) 2);
        this.bool_9 = false;
        _Module.Sleep(100U);
      }
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 3;
      if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num3, (byte) 1, &gstruct3) != 0)
      {
        _Module.Sleep(1500U);
        if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num3, (byte) 1, &gstruct3) != 0)
          this.textBox6.AppendText("Drive Aborted the command" + "\r\n");
        else
          this.textBox6.AppendText("Tray Closing" + "\r\n");
      }
      else
        this.textBox6.AppendText("Tray Closing" + "\r\n");
      if (!this.radioButton17.Checked || (int) ushort_0 != 0 || (int) num2 == 0)
        return;
      this.method_424((byte) 1);
      this.bool_9 = true;
      _Module.Sleep(10U);
      this.method_424((byte) 5);
      _Module.Sleep(25U);
      this.method_424((byte) 7);
    }

    private unsafe int method_339()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 1000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
        return 1;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 18;
      Struct55 struct55;
      uint num3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      return _Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct55, &num3, 20U, (byte) 1, &gstruct3) != 0 || (((int) ^(byte&) ((IntPtr) &struct55 + 2) & 15) != 0 || (int) ^(byte&) ((IntPtr) &struct55 + 12) != 0 || (int) ^(byte&) ((IntPtr) &struct55 + 13) != 0) ? 1 : 0;
    }

    private unsafe void method_340()
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        _Module.memset((void*) gstruct97Ptr, 0, 62U);
        *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 27;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 2;
        *(short*) gstruct97Ptr = (short) 44;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
        *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
        *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
        uint num;
        if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0 || ((int) numPtr1[2] & 15) != 0)
          this.textBox6.AppendText("Tray Open Failed" + "\r\n");
        _Module.CloseHandle(fileA);
      }
    }

    private unsafe void method_341()
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        _Module.memset((void*) gstruct97Ptr, 0, 62U);
        *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 27;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 3;
        *(short*) gstruct97Ptr = (short) 44;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
        *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
        *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
        uint num;
        if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0 || ((int) numPtr1[2] & 15) != 0)
          this.textBox6.AppendText("Tray Close Failed" + "\r\n");
        _Module.CloseHandle(fileA);
      }
    }

    private unsafe void method_342()
    {
      Struct52 struct52_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_1 = (sbyte) -119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 1) = (sbyte) -119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 2) = (sbyte) -119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 3) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 4) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 5) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 6) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 7) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 8) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 9) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 10) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 11) = (sbyte) -122;
      Struct52 struct52_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_2 = (sbyte) -40;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 1) = (sbyte) -39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 2) = (sbyte) -38;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 3) = (sbyte) -35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 4) = (sbyte) -34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 5) = (sbyte) -33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 6) = (sbyte) -39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 7) = (sbyte) -38;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 8) = (sbyte) -37;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 9) = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 10) = (sbyte) -22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 11) = (sbyte) -21;
      Struct52 struct52_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_3 = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 1) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 2) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 3) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 4) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 5) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 6) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 7) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 8) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 9) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 10) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 11) = (sbyte) 32;
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        for (int index = 0; index < 12; ++index)
        {
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -15;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) ^(byte&) ((IntPtr) &struct52_1 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) ^(byte&) ((IntPtr) &struct52_2 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) ^(byte&) ((IntPtr) &struct52_3 + index);
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0 || ((int) numPtr1[2] & 15) != 0)
          {
            this.textBox6.AppendText("Command Failed" + "\r\n");
            return;
          }
        }
        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");
        _Module.CloseHandle(fileA);
      }
    }

    private unsafe void method_343()
    {
      Struct52 struct52_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_1 = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 1) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 2) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 3) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 4) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 5) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 6) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 7) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 8) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 9) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 10) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 11) = (sbyte) -122;
      Struct52 struct52_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_2 = (sbyte) -126;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 1) = (sbyte) -125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 2) = (sbyte) -124;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 3) = (sbyte) -35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 4) = (sbyte) -34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 5) = (sbyte) -33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 6) = (sbyte) -39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 7) = (sbyte) -38;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 8) = (sbyte) -37;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 9) = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 10) = (sbyte) -22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 11) = (sbyte) -21;
      Struct52 struct52_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_3 = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 1) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 2) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 3) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 4) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 5) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 6) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 7) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 8) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 9) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 10) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 11) = (sbyte) 32;
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        for (int index = 0; index < 12; ++index)
        {
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -15;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) ^(byte&) ((IntPtr) &struct52_1 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) ^(byte&) ((IntPtr) &struct52_2 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) ^(byte&) ((IntPtr) &struct52_3 + index);
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0 || ((int) numPtr1[2] & 15) != 0)
          {
            this.textBox6.AppendText("Command Failed" + "\r\n");
            return;
          }
        }
        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");
        _Module.CloseHandle(fileA);
      }
    }

    private unsafe void method_344()
    {
      Struct52 struct52_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_1 = (sbyte) -118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 1) = (sbyte) -118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 2) = (sbyte) -118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 3) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 4) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 5) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 6) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 7) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 8) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 9) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 10) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 11) = (sbyte) -114;
      Struct52 struct52_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_2 = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 1) = (sbyte) 91;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 2) = (sbyte) 92;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 3) = (sbyte) 94;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 4) = (sbyte) 95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 5) = (sbyte) 96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 6) = (sbyte) 90;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 7) = (sbyte) 91;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 8) = (sbyte) 92;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 9) = (sbyte) 114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 10) = (sbyte) 115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 11) = (sbyte) 116;
      Struct52 struct52_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_3 = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 1) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 2) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 3) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 4) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 5) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 6) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 7) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 8) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 9) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 10) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 11) = (sbyte) 32;
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        for (int index = 0; index < 12; ++index)
        {
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -33;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) -124;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 35) = (sbyte) ^(byte&) ((IntPtr) &struct52_1 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) ^(byte&) ((IntPtr) &struct52_2 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) ^(byte&) ((IntPtr) &struct52_3 + index);
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0 || ((int) numPtr1[2] & 15) != 0)
          {
            this.textBox6.AppendText("Command Failed" + "\r\n");
            return;
          }
        }
        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");
        _Module.CloseHandle(fileA);
      }
    }

    private unsafe void method_345()
    {
      Struct110 struct110_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct110_1 = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 1) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 2) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 3) = (sbyte) -115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 4) = (sbyte) -115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 5) = (sbyte) -115;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 6) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 7) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 8) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 9) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 10) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 11) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 12) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 13) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 14) = (sbyte) -120;
      Struct110 struct110_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct110_2 = (sbyte) 36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 1) = (sbyte) 37;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 2) = (sbyte) 38;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 3) = (sbyte) -94;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 4) = (sbyte) -93;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 5) = (sbyte) -92;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 6) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 7) = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 8) = (sbyte) 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 9) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 10) = (sbyte) 33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 11) = (sbyte) 34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 12) = (sbyte) 60;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 13) = (sbyte) 61;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 14) = (sbyte) 62;
      Struct110 struct110_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct110_3 = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 1) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 2) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 3) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 4) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 5) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 6) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 7) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 8) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 9) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 10) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 11) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 12) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 13) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 14) = (sbyte) 32;
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        for (int index = 0; index < 15; ++index)
        {
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -33;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) -124;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 35) = (sbyte) ^(byte&) ((IntPtr) &struct110_1 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) ^(byte&) ((IntPtr) &struct110_2 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) ^(byte&) ((IntPtr) &struct110_3 + index);
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0 || ((int) numPtr1[2] & 15) != 0)
          {
            this.textBox6.AppendText("Command Failed" + "\r\n");
            return;
          }
        }
        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");
        _Module.CloseHandle(fileA);
      }
    }

    private unsafe void method_346()
    {
      Struct52 struct52_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_1 = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 1) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 2) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 3) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 4) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 5) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 6) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 7) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 8) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 9) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 10) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 11) = (sbyte) -122;
      Struct52 struct52_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_2 = (sbyte) -126;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 1) = (sbyte) -125;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 2) = (sbyte) -124;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 3) = (sbyte) -35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 4) = (sbyte) -34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 5) = (sbyte) -33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 6) = (sbyte) -39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 7) = (sbyte) -38;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 8) = (sbyte) -37;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 9) = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 10) = (sbyte) -22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 11) = (sbyte) -21;
      Struct52 struct52_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_3 = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 1) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 2) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 3) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 4) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 5) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 6) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 7) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 8) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 9) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 10) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 11) = (sbyte) 32;
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        for (int index = 0; index < 12; ++index)
        {
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -15;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) ^(byte&) ((IntPtr) &struct52_1 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) ^(byte&) ((IntPtr) &struct52_2 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) ^(byte&) ((IntPtr) &struct52_3 + index);
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0 || ((int) numPtr1[2] & 15) != 0)
          {
            this.textBox6.AppendText("Command Failed" + "\r\n");
            return;
          }
        }
        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");
        _Module.CloseHandle(fileA);
      }
    }

    private unsafe void method_347()
    {
      Struct52 struct52_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_1 = (sbyte) -123;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 1) = (sbyte) -123;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 2) = (sbyte) -123;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 3) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 4) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 5) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 6) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 7) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 8) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 9) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 10) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 11) = (sbyte) -122;
      Struct52 struct52_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_2 = (sbyte) -34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 1) = (sbyte) -33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 2) = (sbyte) -32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 3) = (sbyte) -35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 4) = (sbyte) -34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 5) = (sbyte) -33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 6) = (sbyte) -39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 7) = (sbyte) -38;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 8) = (sbyte) -37;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 9) = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 10) = (sbyte) -22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 11) = (sbyte) -21;
      Struct52 struct52_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_3 = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 1) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 2) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 3) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 4) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 5) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 6) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 7) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 8) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 9) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 10) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 11) = (sbyte) 32;
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        for (int index = 0; index < 12; ++index)
        {
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -15;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) ^(byte&) ((IntPtr) &struct52_1 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) ^(byte&) ((IntPtr) &struct52_2 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) ^(byte&) ((IntPtr) &struct52_3 + index);
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0 || ((int) numPtr1[2] & 15) != 0)
          {
            this.textBox6.AppendText("Command Failed" + "\r\n");
            return;
          }
        }
        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");
        _Module.CloseHandle(fileA);
      }
    }

    private unsafe void method_348()
    {
      Struct52 struct52_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_1 = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 1) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 2) = (sbyte) -120;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 3) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 4) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 5) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 6) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 7) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 8) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 9) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 10) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 11) = (sbyte) -122;
      Struct52 struct52_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_2 = (sbyte) -96;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 1) = (sbyte) -95;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 2) = (sbyte) -94;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 3) = (sbyte) -35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 4) = (sbyte) -34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 5) = (sbyte) -33;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 6) = (sbyte) -39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 7) = (sbyte) -38;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 8) = (sbyte) -37;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 9) = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 10) = (sbyte) -22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 11) = (sbyte) -21;
      Struct52 struct52_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_3 = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 1) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 2) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 3) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 4) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 5) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 6) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 7) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 8) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 9) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 10) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 11) = (sbyte) 32;
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        for (int index = 0; index < 12; ++index)
        {
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -15;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) ^(byte&) ((IntPtr) &struct52_1 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) ^(byte&) ((IntPtr) &struct52_2 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) ^(byte&) ((IntPtr) &struct52_3 + index);
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0 || ((int) numPtr1[2] & 15) != 0)
          {
            this.textBox6.AppendText("Command Failed" + "\r\n");
            return;
          }
        }
        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");
        _Module.CloseHandle(fileA);
      }
    }

    private unsafe void method_349()
    {
      Struct52 struct52_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_1 = (sbyte) -118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 1) = (sbyte) -118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 2) = (sbyte) -118;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 3) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 4) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 5) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 6) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 7) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 8) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 9) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 10) = (sbyte) -122;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_1 + 11) = (sbyte) -122;
      Struct52 struct52_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_2 = (sbyte) 82;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 1) = (sbyte) 83;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 2) = (sbyte) 84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 3) = (sbyte) -36;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 4) = (sbyte) -35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 5) = (sbyte) -34;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 6) = (sbyte) -40;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 7) = (sbyte) -39;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 8) = (sbyte) -38;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 9) = (sbyte) -24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 10) = (sbyte) -23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 11) = (sbyte) -22;
      Struct52 struct52_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_3 = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 1) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 2) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 3) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 4) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 5) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 6) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 7) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 8) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 9) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 10) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_3 + 11) = (sbyte) 32;
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        for (int index = 0; index < 12; ++index)
        {
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -15;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) ^(byte&) ((IntPtr) &struct52_1 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) ^(byte&) ((IntPtr) &struct52_2 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) ^(byte&) ((IntPtr) &struct52_3 + index);
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0 || ((int) numPtr1[2] & 15) != 0)
          {
            this.textBox6.AppendText("Command Failed" + "\r\n");
            return;
          }
        }
        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");
        _Module.CloseHandle(fileA);
      }
    }

    private unsafe void method_350()
    {
      Struct110 struct110_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct110_1 = (sbyte) -121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 1) = (sbyte) -121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 2) = (sbyte) -121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 3) = (sbyte) -119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 4) = (sbyte) -119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 5) = (sbyte) -119;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 6) = (sbyte) -121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 7) = (sbyte) -121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 8) = (sbyte) -121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 9) = (sbyte) -121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 10) = (sbyte) -121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 11) = (sbyte) -121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 12) = (sbyte) -121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 13) = (sbyte) -121;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_1 + 14) = (sbyte) -121;
      Struct110 struct110_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct110_2 = (sbyte) 47;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 1) = (sbyte) 48;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 2) = (sbyte) 49;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 3) = (sbyte) -54;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 4) = (sbyte) -53;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 5) = (sbyte) -52;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 6) = (sbyte) 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 7) = (sbyte) 15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 8) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 9) = (sbyte) 43;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 10) = (sbyte) 44;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 11) = (sbyte) 45;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 12) = (sbyte) 71;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 13) = (sbyte) 72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_2 + 14) = (sbyte) 73;
      Struct110 struct110_3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct110_3 = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 1) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 2) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 3) = (sbyte) 35;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 4) = (sbyte) -114;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 5) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 6) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 7) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 8) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 9) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 10) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 11) = (sbyte) 32;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 12) = (sbyte) 68;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 13) = (sbyte) 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct110_3 + 14) = (sbyte) 32;
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        for (int index = 0; index < 15; ++index)
        {
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -15;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) ^(byte&) ((IntPtr) &struct110_1 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) ^(byte&) ((IntPtr) &struct110_2 + index);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) ^(byte&) ((IntPtr) &struct110_3 + index);
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0 || ((int) numPtr1[2] & 15) != 0)
          {
            this.textBox6.AppendText("Command Failed" + "\r\n");
            return;
          }
        }
        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");
        _Module.CloseHandle(fileA);
      }
    }

    private unsafe void method_351()
    {
      GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) &_Module.struct14_1, (sbyte*) &_Module.struct18_5);
      if (this.comboBox16.Text == new string((sbyte*) &_Module.struct19_0))
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        this.comboBox16.Text.Substring(0, 1);
        sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr < 65 | (int) *numPtr > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA != IntPtr(-1))
        {
          int num1 = 32768;
          while (num1 < 36864)
          {
            Struct111 struct111;
            _Module.memset((void*) &struct111, 48, 128U);
            _Module.memset((void*) gstruct97Ptr, 0, 62U);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -33;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) -123;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) -1;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 35) = (sbyte) ((num1 & 65280) >> 8);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) (num1 & (int) byte.MaxValue);
            *(short*) gstruct97Ptr = (short) 44;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
            *(int*) ((IntPtr) gstruct97Ptr + 12) = 128;
            *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
            *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct111;
            *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
            uint num2;
            if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num2, (GStruct95*) 0) != 0)
            {
              int num3 = (int) _Module.fwrite((void*) &struct111, 128U, 1U, pGstruct5_0);
              num1 += 128;
            }
            else
            {
              this.textBox6.AppendText("CDB failed" + "\r\n");
              return;
            }
          }
        }
        else
          this.textBox6.AppendText("Failed to open drive" + "\r\n");
        _Module.fclose(pGstruct5_0);
        _Module.CloseHandle(fileA);
      }
    }

    private unsafe void method_352()
    {
      GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) &_Module.struct14_2, (sbyte*) &_Module.struct18_5);
      if (this.comboBox16.Text == new string((sbyte*) &_Module.struct19_0))
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        this.comboBox16.Text.Substring(0, 1);
        sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr < 65 | (int) *numPtr > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA != IntPtr(-1))
        {
          for (int index = 32768; index < 36864; ++index)
          {
            Struct28 struct28;
            _Module.memset((void*) &struct28, 48, 16U);
            _Module.memset((void*) gstruct97Ptr, 0, 62U);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -15;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 2;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) ((index & 65280) >> 8);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) (index & (int) byte.MaxValue);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 34) = (sbyte) 1;
            *(short*) gstruct97Ptr = (short) 44;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
            *(int*) ((IntPtr) gstruct97Ptr + 12) = 4;
            *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
            *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct28;
            *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
            uint num1;
            if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num1, (GStruct95*) 0) != 0)
            {
              int num2 = (int) _Module.fwrite((void*) ((IntPtr) &struct28 + 3), 1U, 1U, pGstruct5_0);
            }
            else
            {
              this.textBox6.AppendText("CDB failed" + "\r\n");
              return;
            }
          }
        }
        else
          this.textBox6.AppendText("Failed to open drive" + "\r\n");
        _Module.fclose(pGstruct5_0);
        _Module.CloseHandle(fileA);
      }
    }

    private unsafe void method_353()
    {
      if (this.comboBox16.Text == new string((sbyte*) &_Module.struct19_0))
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        this.comboBox16.Text.Substring(0, 1);
        sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr < 65 | (int) *numPtr > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA != IntPtr(-1))
        {
          Struct112 struct112;
          _Module.memset((void*) &struct112, 48, 2052U);
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -83;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 34) = (sbyte) 1;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) 8;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) 4;
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
          *(int*) ((IntPtr) gstruct97Ptr + 12) = 2052;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct112;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) != 0)
          {
            this.method_5((byte*) &struct112, 2052U, 0U);
            this.textBox6.AppendText(this.string_0 + "\r\n");
          }
          else
            this.textBox6.AppendText("CDB failed" + "\r\n");
        }
        else
          this.textBox6.AppendText("Failed to open drive" + "\r\n");
      }
    }

    private unsafe void method_354()
    {
      if (this.comboBox16.Text == new string((sbyte*) &_Module.struct19_0))
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        this.comboBox16.Text.Substring(0, 1);
        sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr < 65 | (int) *numPtr > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA != IntPtr(-1))
        {
          Struct52 struct52;
          _Module.memset((void*) &struct52, 48, 12U);
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -83;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 35) = (sbyte) 32;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) 12;
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
          *(int*) ((IntPtr) gstruct97Ptr + 12) = 12;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct52;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) != 0)
          {
            this.method_5((byte*) &struct52, 12U, 0U);
            this.textBox6.AppendText(this.string_0 + "\r\n");
          }
          else
            this.textBox6.AppendText("CDB failed" + "\r\n");
        }
        else
          this.textBox6.AppendText("Failed to open drive" + "\r\n");
      }
    }

    private unsafe void method_355()
    {
      if (this.comboBox16.Text == new string((sbyte*) &_Module.struct19_0))
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        this.comboBox16.Text.Substring(0, 1);
        sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr < 65 | (int) *numPtr > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA != IntPtr(-1))
        {
          Struct5 struct5;
          _Module.memset((void*) &struct5, 48, 56U);
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 3;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 18;
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
          *(int*) ((IntPtr) gstruct97Ptr + 12) = 18;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct5;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) != 0)
          {
            this.method_5((byte*) &struct5, 18U, 0U);
            this.textBox6.AppendText(this.string_0 + "\r\n");
          }
          else
            this.textBox6.AppendText("Inquiry failed" + "\r\n");
        }
        else
          this.textBox6.AppendText("Failed to open drive " + "\r\n");
        _Module.CloseHandle(fileA);
      }
    }

    private void button19_Click(object sender, EventArgs e)
    {
      this.method_337();
    }

    private void button20_Click(object sender, EventArgs e)
    {
      this.method_338();
    }

    private void button3_Click(object sender, EventArgs e)
    {
      this.Cursor = Cursors.WaitCursor;
      this.method_361();
      this.Cursor = Cursors.Arrow;
    }

    private void button22_Click(object sender, EventArgs e)
    {
      this.method_363();
    }

    private void method_356()
    {
      this.method_358(0);
      this.textBox6.AppendText("Loading Hitachi Dump to Source Buffer" + "\r\n");
    }

    private void method_357()
    {
      this.method_358(1);
      this.textBox6.AppendText("Loading Hitachi Dump to Target Buffer " + "\r\n");
    }

    private unsafe void method_358(int int_16)
    {
      if (this.bool_2)
      {
        string str = this.string_10 + "\\Hit-OFW.bin";
        for (int index = 1; index < 10; ++index)
        {
          if (!File.Exists(str))
          {
            GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(str), (sbyte*) &_Module.struct18_5);
            if ((IntPtr) pGstruct5_0 != IntPtr.Zero)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              int num = (int) _Module.fwrite((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U, 1U, pGstruct5_0);
              _Module.fclose(pGstruct5_0);
              this.textBox6.AppendText("\r\n" + "Hitachi-On Dump file saved to " + str + "\r\n");
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_37(str, 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
              return;
            }
          }
          else
            str = this.string_10 + "\\Hit-OFW_" + Convert.ToString(index) + ".bin";
        }
      }
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
      saveFileDialog.DefaultExt = ".bin";
      saveFileDialog.FileName = "Hit-OFW.bin";
      saveFileDialog.RestoreDirectory = false;
      if (this.bool_2)
        saveFileDialog.InitialDirectory = this.string_10;
      if (saveFileDialog.ShowDialog() == DialogResult.OK)
      {
        string fullPath = Path.GetFullPath(saveFileDialog.FileName);
        string fileName = Path.GetFileName(saveFileDialog.FileName);
        GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) (void*) Marshal.StringToHGlobalAnsi(fullPath), (sbyte*) &_Module.struct18_5);
        if ((IntPtr) pGstruct5_0 == IntPtr.Zero)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num = (int) _Module.fwrite((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U, 1U, pGstruct5_0);
          _Module.fclose(pGstruct5_0);
          this.textBox6.AppendText("\r\n" + "Hitachi Dump file saved to " + fileName + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_37(fullPath, int_16, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
        }
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_37("", int_16, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
      }
    }

    private unsafe void method_359()
    {
      string str1 = (string) null;
      string str2 = (string) null;
      int num1 = 0;
      int num2 = 0;
      int num3 = 0;
      this.int_10 = 0;
      int num4 = 65;
      this.comboBox16.Items.Clear();
      this.comboBox16.Text = "";
      Struct108 struct108;
      GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
      uint logicalDrives = _Module.GetLogicalDrives();
      for (int index = 0; index <= 26; ++index)
      {
        if (((int) logicalDrives & 1) != 0)
        {
          Struct20 struct20;
          _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct25_11, __arglist (num4));
          ++num1;
          int num5 = (int) _Module.GetDriveTypeA((sbyte*) &struct20);
          str1 = str1 + " " + new string((sbyte*) &struct20);
          if (num5 == 5)
          {
            Struct109 struct109;
            _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist (num4));
            str2 = str2 + " " + new string((sbyte*) &struct20);
            void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
            if ((IntPtr) fileA != IntPtr(-1))
            {
              string str3 = "Inquiry failed to drive " + Convert.ToString(index);
              Struct5 struct5;
              _Module.memset((void*) &struct5, 48, 56U);
              _Module.memset((void*) gstruct97Ptr, 0, 62U);
              *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 18;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 56;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) -64;
              *(short*) gstruct97Ptr = (short) 44;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
              *(int*) ((IntPtr) gstruct97Ptr + 12) = 56;
              *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
              *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct5;
              *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
              try
              {
                uint num6;
                _Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num6, (GStruct95*) 0);
              }
              catch (Exception ex)
              {
                string message = ex.Message;
                _Module.CloseHandle(fileA);
                continue;
              }
              ++num2;
              this.method_5((byte*) &struct5, 56U, 0U);
              string str4 = this.method_176((byte*) ((IntPtr) &struct5 + 8), 28U);
              this.comboBox16.Items.Add((object) (new string((sbyte*) &struct20) + "\\ [" + str4 + "]"));
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(byte&) ((IntPtr) &struct5 + 24) == 71 && (int) ^(byte&) ((IntPtr) &struct5 + 25) == 68 && ((int) ^(byte&) ((IntPtr) &struct5 + 26) == 82 && (int) ^(byte&) ((IntPtr) &struct5 + 27) == 51) && ((int) ^(byte&) ((IntPtr) &struct5 + 28) == 49 && (int) ^(byte&) ((IntPtr) &struct5 + 29) == 50 && ((int) ^(byte&) ((IntPtr) &struct5 + 30) == 48 && (int) ^(byte&) ((IntPtr) &struct5 + 31) == 76)))
              {
                num3 = num2 - 1;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 53)
                {
                  this.radioButton4.Checked = true;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 55)
                  {
                    this.radioButton5.Checked = true;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((((int) ^(byte&) ((IntPtr) &struct5 + 34) == 52 ? 1 : 0) & ((int) ^(byte&) ((IntPtr) &struct5 + 35) != 48 ? 1 : 0)) != 0)
                    {
                      this.radioButton3.Checked = true;
                    }
                    else
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 51 & (int) ^(byte&) ((IntPtr) &struct5 + 35) == 54)
                        this.radioButton2.Checked = true;
                      else
                        this.radioButton1.Checked = true;
                    }
                  }
                }
              }
            }
            _Module.CloseHandle(fileA);
          }
        }
        logicalDrives >>= 1;
        ++num4;
        if ((int) logicalDrives == 0)
          break;
      }
      this.textBox6.AppendText("Found " + (object) Convert.ToString(num1) + " windows drives" + str1 + (string) __arglist ("\r\n"));
      this.textBox6.AppendText("Found " + (object) Convert.ToString(num2) + " CD/DVD drives" + str2 + (string) __arglist ("\r\n\r\n"));
      if (num2 > 0)
        this.comboBox16.SelectedIndex = num3;
      this.int_10 = num2;
    }

    private unsafe void method_360()
    {
      string str1 = (string) null;
      string str2 = (string) null;
      int num1 = 0;
      int num2 = 0;
      int num3 = 0;
      this.int_10 = 0;
      int num4 = 65;
      this.comboBox16.Items.Clear();
      this.comboBox16.Text = "";
      Struct108 struct108;
      GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
      uint logicalDrives = _Module.GetLogicalDrives();
      for (int index = 0; index <= 26; ++index)
      {
        if (((int) logicalDrives & 1) != 0)
        {
          Struct20 struct20;
          _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct25_11, __arglist (num4));
          ++num1;
          int num5 = (int) _Module.GetDriveTypeA((sbyte*) &struct20);
          str1 = str1 + " " + new string((sbyte*) &struct20);
          if (num5 == 5)
          {
            Struct109 struct109;
            _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist (num4));
            str2 = str2 + " " + new string((sbyte*) &struct20);
            void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
            if ((IntPtr) fileA != IntPtr(-1))
            {
              string str3 = "Inquiry failed to drive " + Convert.ToString(index);
              Struct5 struct5;
              _Module.memset((void*) &struct5, 48, 56U);
              _Module.memset((void*) gstruct97Ptr, 0, 62U);
              *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 18;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 56;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) -64;
              *(short*) gstruct97Ptr = (short) 44;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
              *(int*) ((IntPtr) gstruct97Ptr + 12) = 56;
              *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
              *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct5;
              *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
              try
              {
                uint num6;
                _Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num6, (GStruct95*) 0);
              }
              catch (Exception ex)
              {
                string message = ex.Message;
                _Module.CloseHandle(fileA);
                continue;
              }
              ++num2;
              this.method_5((byte*) &struct5, 56U, 0U);
              string str4 = this.method_176((byte*) ((IntPtr) &struct5 + 8), 28U);
              this.comboBox16.Items.Add((object) (new string((sbyte*) &struct20) + "\\ [" + str4 + "]"));
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(byte&) ((IntPtr) &struct5 + 24) == 71 && (int) ^(byte&) ((IntPtr) &struct5 + 25) == 68 && ((int) ^(byte&) ((IntPtr) &struct5 + 26) == 82 && (int) ^(byte&) ((IntPtr) &struct5 + 27) == 51) && ((int) ^(byte&) ((IntPtr) &struct5 + 28) == 49 && (int) ^(byte&) ((IntPtr) &struct5 + 29) == 50 && ((int) ^(byte&) ((IntPtr) &struct5 + 30) == 48 && (int) ^(byte&) ((IntPtr) &struct5 + 31) == 76)))
              {
                num3 = num2 - 1;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 53)
                {
                  this.radioButton4.Checked = true;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 55)
                  {
                    this.radioButton5.Checked = true;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((((int) ^(byte&) ((IntPtr) &struct5 + 34) == 52 ? 1 : 0) & ((int) ^(byte&) ((IntPtr) &struct5 + 35) != 48 ? 1 : 0)) != 0)
                    {
                      this.radioButton3.Checked = true;
                    }
                    else
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 51 & (int) ^(byte&) ((IntPtr) &struct5 + 35) == 54)
                        this.radioButton2.Checked = true;
                      else
                        this.radioButton1.Checked = true;
                    }
                  }
                }
              }
            }
            _Module.CloseHandle(fileA);
          }
        }
        logicalDrives >>= 1;
        ++num4;
        if ((int) logicalDrives == 0)
          break;
      }
      if (num2 > 0)
        this.comboBox16.SelectedIndex = num3;
      this.int_10 = num2;
    }

    private unsafe int method_361()
    {
      uint logicalDrives = _Module.GetLogicalDrives();
      int num1 = 65;
      int num2 = 0;
      int num3 = 0;
      int num4 = 0;
      bool flag = false;
      this.int_10 = 0;
      this.comboBox16.Items.Clear();
      this.comboBox16.Text = "";
      Struct108 struct108;
      GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
      for (int index = 0; index <= 26; ++index)
      {
        if (((int) logicalDrives & 1) != 0)
        {
          Struct20 struct20;
          _Module.sprintf((sbyte*) &struct20, (sbyte*) &_Module.struct25_11, __arglist (num1));
          this.textBox6.AppendText("Found drive " + new string((sbyte*) &struct20) + " - ");
          switch (_Module.GetDriveTypeA((sbyte*) &struct20))
          {
            case 0U:
              this.textBox6.AppendText("Unknown." + new string((sbyte*) &_Module.struct18_12));
              break;
            case 1U:
              this.textBox6.AppendText("Invalid." + new string((sbyte*) &_Module.struct18_12));
              break;
            case 2U:
              this.textBox6.AppendText("Removable." + new string((sbyte*) &_Module.struct18_12));
              break;
            case 3U:
              this.textBox6.AppendText("Hard Drive." + new string((sbyte*) &_Module.struct18_12));
              break;
            case 4U:
              this.textBox6.AppendText("Network." + new string((sbyte*) &_Module.struct18_12));
              break;
            case 5U:
              this.textBox6.AppendText("CD/DVD.");
              Struct109 struct109;
              _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist (num1));
              void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
              if ((IntPtr) fileA != IntPtr(-1))
              {
                ++num2;
                string str1 = "Inquiry failed to drive " + Convert.ToString(index);
                Struct5 struct5;
                _Module.memset((void*) &struct5, 48, 56U);
                _Module.memset((void*) gstruct97Ptr, 0, 62U);
                *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 18;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 56;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) -64;
                *(short*) gstruct97Ptr = (short) 44;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
                *(int*) ((IntPtr) gstruct97Ptr + 12) = 56;
                *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
                *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct5;
                *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
                try
                {
                  uint num5;
                  _Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0);
                }
                catch (Exception ex)
                {
                  string message = ex.Message;
                  _Module.CloseHandle(fileA);
                  continue;
                }
                ++num3;
                this.method_5((byte*) &struct5, 56U, 0U);
                string str2 = this.method_176((byte*) ((IntPtr) &struct5 + 8), 28U);
                this.comboBox16.Items.Add((object) (new string((sbyte*) &struct20) + "\\ [" + str2 + "]"));
                if (_Module.memcmp((void*) ((IntPtr) &struct5 + 24), (void*) &_Module.struct24_10, 8U) == 0)
                {
                  num4 = num3 - 1;
                  flag = true;
                  this.textBox6.AppendText(" <--- Hitachi found" + new string((sbyte*) &_Module.struct18_12));
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 53)
                  {
                    this.radioButton4.Checked = true;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 55)
                    {
                      this.radioButton5.Checked = true;
                    }
                    else
                    {
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      // ISSUE: cast to a reference type
                      // ISSUE: explicit reference operation
                      if ((((int) ^(byte&) ((IntPtr) &struct5 + 34) == 52 ? 1 : 0) & ((int) ^(byte&) ((IntPtr) &struct5 + 35) != 48 ? 1 : 0)) != 0)
                      {
                        this.radioButton3.Checked = true;
                      }
                      else
                      {
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        // ISSUE: cast to a reference type
                        // ISSUE: explicit reference operation
                        if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 51 & (int) ^(byte&) ((IntPtr) &struct5 + 35) == 54)
                          this.radioButton2.Checked = true;
                        else
                          this.radioButton1.Checked = true;
                      }
                    }
                  }
                }
                else
                  this.textBox6.AppendText(new string((sbyte*) &_Module.struct18_12));
              }
              _Module.CloseHandle(fileA);
              break;
            case 6U:
              this.textBox6.AppendText("Ramdisk." + new string((sbyte*) &_Module.struct18_12));
              break;
          }
        }
        logicalDrives >>= 1;
        ++num1;
        if ((int) logicalDrives == 0)
          break;
      }
      if (flag)
      {
        this.comboBox16.SelectedIndex = num4;
        this.int_10 = num3;
        return 1;
      }
      else
      {
        this.textBox6.AppendText("No Hitachi drives were found!" + "\r\n");
        if (num3 > 0)
          this.comboBox16.SelectedIndex = 0;
        this.int_10 = num3;
        return 0;
      }
    }

    private unsafe int method_362()
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr < 65 | (int) *numPtr > 122)
          return 1;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr));
        void* fileA;
        do
        {
          fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
          if ((IntPtr) fileA == IntPtr(-1))
          {
            this.textBox6.AppendText(".");
            Application.DoEvents();
            _Module.Sleep(250U);
          }
          else
            goto label_8;
        }
        while ((int) _Module.GetAsyncKeyState(27) == 0);
        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
        return 1;
label_8:
        _Module.memset((void*) gstruct97Ptr, 0, 62U);
        *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -25;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 72;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 30) = (sbyte) 73;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 84;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 48;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) -112;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 34) = (sbyte) -112;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 35) = (sbyte) -48;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) 1;
        *(short*) gstruct97Ptr = (short) 44;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
        *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
        *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
        uint num;
        if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0)
        {
          this.textBox6.AppendText("Send Mode-B Failed" + "\r\n");
          _Module.CloseHandle(fileA);
          return 1;
        }
        else
        {
          Struct5 struct5;
          _Module.memset((void*) &struct5, 48, 56U);
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 56;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) 0;
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
          *(int*) ((IntPtr) gstruct97Ptr + 12) = 56;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct5;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) != 0)
          {
            this.method_5((byte*) &struct5, 56U, 0U);
            this.textBox6.AppendText(this.comboBox16.Text + " returns with normal Windows Inquiry" + "\r\n");
            this.textBox6.AppendText(this.string_0);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) ((IntPtr) &struct5 + 24) == 71 && (int) ^(byte&) ((IntPtr) &struct5 + 25) == 68 && ((int) ^(byte&) ((IntPtr) &struct5 + 26) == 82 && (int) ^(byte&) ((IntPtr) &struct5 + 27) == 51) && ((int) ^(byte&) ((IntPtr) &struct5 + 28) == 49 && (int) ^(byte&) ((IntPtr) &struct5 + 29) == 50 && ((int) ^(byte&) ((IntPtr) &struct5 + 30) == 48 && (int) ^(byte&) ((IntPtr) &struct5 + 31) == 76)))
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 53)
              {
                this.radioButton4.Checked = true;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 55)
                {
                  this.radioButton5.Checked = true;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((((int) ^(byte&) ((IntPtr) &struct5 + 34) == 52 ? 1 : 0) & ((int) ^(byte&) ((IntPtr) &struct5 + 35) != 48 ? 1 : 0)) != 0)
                  {
                    this.radioButton3.Checked = true;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 51 & (int) ^(byte&) ((IntPtr) &struct5 + 35) == 54)
                      this.radioButton2.Checked = true;
                    else
                      this.radioButton1.Checked = true;
                  }
                }
              }
            }
          }
          else
            this.textBox6.AppendText("Inquiry failed" + "\r\n");
          _Module.CloseHandle(fileA);
          return 0;
        }
      }
    }

    private unsafe void method_363()
    {
      if (this.comboBox16.Text == new string((sbyte*) &_Module.struct19_0))
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        this.comboBox16.Text.Substring(0, 1);
        sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr < 65 | (int) *numPtr > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA != IntPtr(-1))
        {
          Struct5 struct5;
          _Module.memset((void*) &struct5, 48, 56U);
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 56;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) 0;
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
          *(int*) ((IntPtr) gstruct97Ptr + 12) = 56;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct5;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) != 0)
          {
            this.method_5((byte*) &struct5, 56U, 0U);
            this.textBox6.AppendText(this.comboBox16.Text + " returns Inquiry" + "\r\n");
            this.textBox6.AppendText(this.string_0 + "\r\n");
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) ((IntPtr) &struct5 + 24) == 71 && (int) ^(byte&) ((IntPtr) &struct5 + 25) == 68 && ((int) ^(byte&) ((IntPtr) &struct5 + 26) == 82 && (int) ^(byte&) ((IntPtr) &struct5 + 27) == 51) && ((int) ^(byte&) ((IntPtr) &struct5 + 28) == 49 && (int) ^(byte&) ((IntPtr) &struct5 + 29) == 50 && ((int) ^(byte&) ((IntPtr) &struct5 + 30) == 48 && (int) ^(byte&) ((IntPtr) &struct5 + 31) == 76)))
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 53)
              {
                this.radioButton4.Checked = true;
              }
              else
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 55)
                {
                  this.radioButton5.Checked = true;
                }
                else
                {
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  if ((((int) ^(byte&) ((IntPtr) &struct5 + 34) == 52 ? 1 : 0) & ((int) ^(byte&) ((IntPtr) &struct5 + 35) != 48 ? 1 : 0)) != 0)
                  {
                    this.radioButton3.Checked = true;
                  }
                  else
                  {
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    // ISSUE: cast to a reference type
                    // ISSUE: explicit reference operation
                    if ((int) ^(byte&) ((IntPtr) &struct5 + 34) == 51 & (int) ^(byte&) ((IntPtr) &struct5 + 35) == 54)
                      this.radioButton2.Checked = true;
                    else
                      this.radioButton1.Checked = true;
                  }
                }
              }
            }
          }
          else
            this.textBox6.AppendText("Inquiry failed" + "\r\n");
        }
        else
          this.textBox6.AppendText("Failed to open drive " + "\r\n");
        _Module.CloseHandle(fileA);
      }
    }

    private void menuItem_0_Click(object sender, EventArgs e)
    {
      this.method_340();
    }

    private void menuItem_1_Click(object sender, EventArgs e)
    {
      this.method_341();
    }

    private void menuItem_8_Click(object sender, EventArgs e)
    {
      this.method_332();
    }

    private void menuItem_9_Click(object sender, EventArgs e)
    {
      this.method_334();
    }

    private void menuItem_10_Click(object sender, EventArgs e)
    {
      this.method_333();
    }

    private void menuItem_39_Click(object sender, EventArgs e)
    {
      this.method_346();
    }

    private void menuItem_40_Click(object sender, EventArgs e)
    {
      this.method_342();
    }

    private void menuItem_41_Click(object sender, EventArgs e)
    {
      this.method_343();
    }

    private void menuItem_42_Click(object sender, EventArgs e)
    {
      this.method_344();
    }

    private void menuItem_44_Click(object sender, EventArgs e)
    {
      this.method_348();
    }

    private void menuItem_45_Click(object sender, EventArgs e)
    {
      this.method_349();
    }

    private void menuItem_46_Click(object sender, EventArgs e)
    {
      this.method_347();
    }

    private void menuItem_47_Click(object sender, EventArgs e)
    {
      this.method_350();
    }

    private void menuItem_49_Click(object sender, EventArgs e)
    {
      this.method_345();
    }

    private void menuItem_43_Click(object sender, EventArgs e)
    {
      this.method_351();
      this.method_352();
    }

    private void button26_Click(object sender, EventArgs e)
    {
      this.method_364();
    }

    private unsafe void method_364()
    {
      Struct113 struct113;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @struct113 = 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct113&) ((IntPtr) &struct113 + 4), 0, 252);
      this.method_376();
      this.textBox6.AppendText(this.string_21 + " Hitachi " + this.string_19 + " by ");
      this.textBox6.AppendText(this.string_20 + " " + this.string_22 + "\r\n");
      if (this.int_15 == 0)
        this.method_380();
      else if (this.int_15 == 1)
        this.method_381();
      uint uint_0;
      uint uint_1_1;
      uint uint_2;
      uint uint_3;
      if (this.checkBox7.CheckState == CheckState.Unchecked)
      {
        uint_0 = 296960U;
        uint_1_1 = 32U;
        uint_2 = 8192U;
        uint_3 = 1U;
      }
      else
      {
        uint_0 = 2375680U;
        uint_1_1 = 256U;
        uint_2 = 1024U;
        uint_3 = 8U;
      }
      int num1;
      if (((this.int_13 == 0 & this.int_14 == 0 ? 1 : 0) & (this.int_12 != 79 ? 1 : 0) & (this.int_15 == 0 ? 1 : 0)) != 0)
      {
        string text = "" + "If the drive is modified with a firmware that employs f/w stealth" + "\r\n" + "a Classic Dump will appear to be stock firmware. For a true dump" + "\r\n" + "use one of the other transfer methods." + "\r\n";
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        num1 = (int) MessageBox.Show(text, "Classic Dump", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        int num2 = _Module.clock();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (this.method_394(uint_0, uint_1_1, uint_2, uint_3) != 0 || this.method_367((uint) this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172))) != 0)
          return;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_368((uint) this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172)));
        this.textBox6.AppendText("\r\n" + (object) "Dumped in " + Convert.ToString(_Module.clock() - num2) + "mS" + (string) __arglist ("\r\n"));
        this.method_356();
      }
      else if (((this.int_13 == 0 & this.int_14 == 0 ? 1 : 0) & (this.int_12 != 79 ? 1 : 0) & (this.int_15 == 1 ? 1 : 0)) != 0)
      {
        string text = "" + "If the drive is modified with a firmware that employs f/w stealth" + "\r\n" + "a Classic Dump will appear to be stock firmware. For a true dump" + "\r\n" + "use one of the other transfer methods." + "\r\n\r\n" + "Also, classic mode works in mode-a over PortIO as there is no" + "\r\n" + "requirement for a windows drive letter and will return data." + "\r\n" + "A classic dump is no guarantee the drive is in mode-b." + "\r\n";
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        num1 = (int) MessageBox.Show(text, "Classic Dump", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        int num2 = _Module.clock();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (this.method_395(uint_0, uint_1_1, uint_2, uint_3) != 0 || this.method_367((uint) this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172))) != 0)
          return;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_368((uint) this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172)));
        this.textBox6.AppendText("\r\n" + (object) "Dumped in " + Convert.ToString(_Module.clock() - num2) + "mS" + (string) __arglist ("\r\n"));
        this.method_356();
      }
      else if (this.int_14 == 0)
      {
        if (this.method_382() != 0)
          return;
        int num2 = _Module.clock();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (this.method_393(uint_0, uint_1_1, uint_2, uint_3) != 0 || this.method_367((uint) this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172))) != 0)
          return;
        this.textBox6.AppendText("\r\n" + (object) "Dumped in " + Convert.ToString(_Module.clock() - num2) + "mS" + (string) __arglist ("\r\n"));
        this.method_356();
      }
      else if (this.int_14 == 1)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memset((void*) ^(int&) @_Module.struct123_0, 0, 2392U);
        this.method_40();
        if (this.method_382() != 0)
          return;
        this.textBox6.AppendText(string.Concat((object) "Dumping Flash:"));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (this.method_393(uint_0, uint_1_1, uint_2, uint_3) != 0 || this.method_367((uint) this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172))) != 0)
          return;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_37("", 1, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
        FreeKey freeKey = new FreeKey();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        freeKey.ushort_0 = *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        freeKey.ushort_1 = *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        freeKey.ushort_2 = *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        freeKey.ushort_3 = *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384);
        freeKey.textBox1.Text = this.textBox11.Text;
        if ((IntPtr) freeKey.pByte_0 != IntPtr.Zero)
          _Module.free((void*) freeKey.pByte_0);
        freeKey.pByte_0 = (byte*) _Module.malloc(16U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) freeKey.pByte_0, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), 16U);
        if ((IntPtr) freeKey.pByte_1 != IntPtr.Zero)
          _Module.free((void*) freeKey.pByte_1);
        freeKey.pByte_1 = (byte*) _Module.malloc(96U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) freeKey.pByte_1, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), 96U);
        if ((IntPtr) freeKey.pByte_2 != IntPtr.Zero)
          _Module.free((void*) freeKey.pByte_2);
        freeKey.pByte_2 = (byte*) _Module.malloc(180U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) freeKey.pByte_2, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780), 180U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) == 4)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_9((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 610), 20U);
          freeKey.textBox2.Text = this.string_0;
          if ((IntPtr) freeKey.pByte_4 != IntPtr.Zero)
            _Module.free((void*) freeKey.pByte_4);
          freeKey.pByte_4 = (byte*) _Module.malloc(20U);
          _Module.memset((void*) freeKey.pByte_4, 32, 20U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) freeKey.pByte_4, (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 610), 20U);
        }
        if (freeKey.ShowDialog((IWin32Window) this) != DialogResult.OK)
          return;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), (void*) freeKey.pByte_0, 16U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 568), (void*) freeKey.pByte_1, 96U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2316), (void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 576), 28U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 780), (void*) freeKey.pByte_2, 180U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) = (short) freeKey.ushort_2;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(short*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384) = (short) freeKey.ushort_3;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) ((IntPtr) &_Module.struct123_0 + 4) != (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2382) || (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2) != (int) *(ushort*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2384))
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2020) = 0;
        }
        this.bool_10 = true;
        this.method_47();
        this.method_41();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num2 = this.method_370((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), (int*) &struct113);
        if (num2 > 3)
        {
          this.textBox6.AppendText("Too many Sector Differences Found, Flash aborted !!" + "\r\n");
        }
        else
        {
          Struct32 struct32;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) &struct32, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258096), (void*) &_Module.struct34_1, 48U);
          Struct33 struct33;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) &struct33, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258048), 4096U);
          this.textBox6.AppendText("Flash Stability Test" + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416177152U, 4096U);
          this.textBox6.AppendText(string.Concat((object) "Dumping Sector 9003F000:"));
          if (this.method_393(2375932U, 4U, 1024U, 1U) != 0)
            return;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.memcmp((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct33, 4096U) != 0)
          {
            this.textBox6.AppendText("\r\n" + "Read back mis-compare, Restore Aborted" + "\r\n");
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Read back & compare, complete, Flashing Stable!" + "\r\n");
            this.textBox6.AppendText("Repairing Test Sector." + "\r\n");
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416177152U, 4096U);
            this.textBox6.AppendText("Done !" + "\r\n");
            if (!this.bool_2)
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num3 = (int) MessageBox.Show("Flashing stabilty test reports stable." + "\n\n" + "Do you wish to Continue ?", "Flash Keys", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              if (num3 == 7)
              {
                this.textBox6.AppendText("Flash Keys Aborted !" + "\r\n");
                return;
              }
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (^(int&) ((IntPtr) &struct113 + (num2 - 1) * 4) == -1878794240)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416173056U, 4096U);
              --num2;
            }
            for (int index = 0; index < num2; ++index)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), (uint) ^(int&) ((IntPtr) &struct113 + index * 4), 4096U);
              Application.DoEvents();
            }
            this.textBox6.AppendText("Done !" + "\r\n");
            this.textBox6.AppendText("Write verify test.." + "\r\n");
            this.textBox6.AppendText(string.Concat((object) "Dumping Flash:"));
            if (this.method_393(uint_0, uint_1_1, uint_2, uint_3) != 0)
              return;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (_Module.memcmp((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), 262144U) != 0)
            {
              this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash process has errors" + "\r\n");
            }
            else
            {
              this.textBox6.AppendText("\r\n" + "Read back & compare completed, Write Verified!" + "\r\n");
              this.textBox6.AppendText("Flash Complete !" + "\r\n");
            }
          }
        }
      }
      else if (this.int_14 == 2)
      {
        if (this.method_382() != 0)
          return;
        this.textBox6.AppendText(string.Concat((object) "Dumping Flash:"));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (this.method_393(uint_0, uint_1_1, uint_2, uint_3) != 0 || this.method_367((uint) this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172))) != 0)
          return;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_37("", 1, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 0)
          this.method_50(5);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) *(ushort*) ^(int&) @_Module.struct123_0 == 0)
          return;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        *(int*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2020) = 0;
        this.textBox6.AppendText(string.Concat((object) "Setting Master Checksum."));
        this.method_46();
        this.method_47();
        this.method_41();
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num2 = this.method_370((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), (int*) &struct113);
        if (num2 > 4)
        {
          this.textBox6.AppendText("Too many Sector Differences Found, Flash aborted !!" + "\r\n");
        }
        else
        {
          Struct32 struct32;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) &struct32, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258096), (void*) &_Module.struct34_1, 48U);
          Struct33 struct33;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) &struct33, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258048), 4096U);
          this.textBox6.AppendText("Flash Stability Test" + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416177152U, 4096U);
          this.textBox6.AppendText(string.Concat((object) "Dumping Sector 9003F000:"));
          if (this.method_393(2375932U, 4U, 1024U, 1U) != 0)
            return;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.memcmp((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct33, 4096U) != 0)
          {
            this.textBox6.AppendText("\r\n" + "Read back mis-compare, Restore Aborted" + "\r\n");
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Read back & compare, complete, Flashing Stable!" + "\r\n");
            this.textBox6.AppendText("Repairing Test Sector." + "\r\n");
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416177152U, 4096U);
            this.textBox6.AppendText("Done !" + "\r\n");
            if (!this.bool_2)
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num3 = (int) MessageBox.Show("Flashing stabilty test reports stable." + "\n\n" + "Do you wish to Continue ?", "Flash ID Strings", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              if (num3 == 7)
              {
                this.textBox6.AppendText("Flash ID Strings Aborted !" + "\r\n");
                return;
              }
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (^(int&) ((IntPtr) &struct113 + (num2 - 1) * 4) == -1878794240)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416173056U, 4096U);
              --num2;
            }
            for (int index = 0; index < num2; ++index)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), (uint) ^(int&) ((IntPtr) &struct113 + index * 4), 4096U);
              Application.DoEvents();
            }
            this.textBox6.AppendText("Done !" + "\r\n");
            this.textBox6.AppendText("Write verify test.." + "\r\n");
            this.textBox6.AppendText(string.Concat((object) "Dumping Flash:"));
            if (this.method_393(uint_0, uint_1_1, uint_2, uint_3) != 0)
              return;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (_Module.memcmp((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), 262144U) != 0)
            {
              this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash process has errors" + "\r\n");
            }
            else
            {
              this.textBox6.AppendText("\r\n" + "Read back & compare completed, Write Verified!" + "\r\n");
              this.textBox6.AppendText("Flash Complete !" + "\r\n");
            }
          }
        }
      }
      else if (this.int_14 == 3)
      {
        if (this.method_382() != 0)
          return;
        this.textBox6.AppendText(string.Concat((object) "Dumping Flash:"));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (this.method_393(uint_0, uint_1_1, uint_2, uint_3) != 0 || this.method_367((uint) this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172))) != 0)
          return;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_37("", 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        uint uint_1_2 = (uint) ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255999) << 24 | (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255998) << 16 | (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255997) << 8) | (uint) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255996);
        if ((int) uint_1_2 == 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num2 = (int) MessageBox.Show("Master Checksum is Set, this is normal for a modded drive." + "\n" + "Restore Drive to Stock first", "Flash iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          this.textBox6.AppendText("Flash Aborted" + "\r\n");
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (this.method_365((uint) this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172)), uint_1_2) != 0)
            return;
          this.method_377();
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = this.method_369((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), (int*) &struct113);
          if (num2 > 16)
          {
            this.textBox6.AppendText("Too many Sector Differences Found, Flash aborted !!" + "\r\n");
          }
          else
          {
            Struct32 struct32;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) &struct32, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258096), (void*) &_Module.struct34_1, 48U);
            Struct33 struct33;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) &struct33, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258048), 4096U);
            this.textBox6.AppendText("Flash Stability Test" + "\r\n");
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416177152U, 4096U);
            this.textBox6.AppendText(string.Concat((object) "Dumping Sector 9003F000:"));
            if (this.method_393(2375932U, 4U, 1024U, 1U) != 0)
              return;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (_Module.memcmp((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct33, 4096U) != 0)
            {
              this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash Aborted" + "\r\n");
            }
            else
            {
              this.textBox6.AppendText("\r\n" + "Read back & compare completed, Flashing Stable!" + "\r\n");
              this.textBox6.AppendText("Repairing Test Sector." + "\r\n");
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416177152U, 4096U);
              this.textBox6.AppendText("Done !" + "\r\n");
              if (!this.bool_2)
              {
                // ISSUE: cast to a function pointer type
                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num3 = (int) MessageBox.Show("Flashing stabilty test reports stable." + "\n\n" + "Do you wish to Continue ?", "Flash iXtreme", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                if (num3 == 7)
                {
                  this.textBox6.AppendText("Flash Aborted !" + "\r\n");
                  return;
                }
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if (^(int&) ((IntPtr) &struct113 + (num2 - 1) * 4) == -1878794240)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416173056U, 4096U);
                --num2;
              }
              for (int index = 0; index < num2; ++index)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), (uint) ^(int&) ((IntPtr) &struct113 + index * 4), 4096U);
                Application.DoEvents();
              }
              this.textBox6.AppendText("Done !" + "\r\n");
              this.textBox6.AppendText("Write verify test.." + "\r\n");
              this.textBox6.AppendText(string.Concat((object) "Dumping Flash:"));
              if (this.method_393(uint_0, uint_1_1, uint_2, uint_3) != 0)
                return;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if (_Module.memcmp((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), 262144U) != 0)
              {
                this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash process has errors" + "\r\n");
              }
              else
              {
                this.textBox6.AppendText("\r\n" + "Read back & compare completed, Write Verified!" + "\r\n");
                this.textBox6.AppendText("Flash Complete !" + "\r\n");
              }
            }
          }
        }
      }
      else if (this.int_14 == 4)
      {
        if (this.method_382() != 0)
          return;
        this.textBox6.AppendText(string.Concat((object) "Dumping Flash:"));
        if (this.method_393(uint_0, uint_1_1, uint_2, uint_3) != 0)
          return;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_37("", 0, (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (this.method_367((uint) this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172))) != 0)
          return;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if ((int) ((uint) ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255999) << 24 | (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255998) << 16 | (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255997) << 8) | (uint) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255996)) != 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num2 = (int) MessageBox.Show("Master Checksum is not Set, this is not normal for a modded drive." + "\n" + "Drive is not likely Hacked", "Flash Restore", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          this.textBox6.AppendText("Restore Aborted" + "\r\n");
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (this.method_366((uint) this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172))) != 0)
            return;
          this.method_377();
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          int num2 = this.method_371((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), (int*) &struct113);
          if (num2 > 16)
          {
            this.textBox6.AppendText("Too many Sector Differences Found, Flash aborted !!" + "\r\n");
          }
          else
          {
            Struct32 struct32;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) &struct32, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258096), (void*) &_Module.struct34_1, 48U);
            Struct33 struct33;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) &struct33, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258048), 4096U);
            this.textBox6.AppendText("Flash Stability Test" + "\r\n");
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416177152U, 4096U);
            this.textBox6.AppendText(string.Concat((object) "Dumping Sector 9003F000:"));
            if (this.method_393(2375932U, 4U, 1024U, 1U) != 0)
              return;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (_Module.memcmp((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct33, 4096U) != 0)
            {
              this.textBox6.AppendText("\r\n" + "Read back mis-compare, Restore Aborted" + "\r\n");
            }
            else
            {
              this.textBox6.AppendText("\r\n" + "Read back & compare completed, Flashing Stable!" + "\r\n");
              this.textBox6.AppendText("Repairing Test Sector." + "\r\n");
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416177152U, 4096U);
              this.textBox6.AppendText("Done !" + "\r\n");
              if (!this.bool_2)
              {
                // ISSUE: cast to a function pointer type
                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num3 = (int) MessageBox.Show("Flashing stabilty test reports stable." + "\n\n" + "Do you wish to Continue ?", "Restore Firmware", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                if (num3 == 7)
                {
                  this.textBox6.AppendText("Restore Aborted !" + "\r\n");
                  return;
                }
              }
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
              for (int index = 0; index < num2; ++index)
              {
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), (uint) ^(int&) ((IntPtr) &struct113 + index * 4), 4096U);
                Application.DoEvents();
              }
              this.textBox6.AppendText("Done !" + "\r\n");
              this.textBox6.AppendText("Write verify test.." + "\r\n");
              this.textBox6.AppendText(string.Concat((object) "Dumping Flash:"));
              if (this.method_393(uint_0, uint_1_1, uint_2, uint_3) != 0)
                return;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if (_Module.memcmp((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), 262144U) != 0)
              {
                this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash process has errors" + "\r\n");
              }
              else
              {
                this.textBox6.AppendText("\r\n" + "Read back & compare completed, Write Verified!" + "\r\n");
                this.textBox6.AppendText("Flash Complete !" + "\r\n");
                this.textBox6.AppendText("\r\n" + "Setting Checksum!" + "\r\n");
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                uint num3 = (uint) ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255999) << 24 | (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255998) << 16 | (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255997) << 8) | (uint) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255996);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                uint num4 = (uint) this.method_373((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255996) = (sbyte) ((int) num4 & (int) byte.MaxValue);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255997) = (sbyte) ((num4 & 65280U) >> 8);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255998) = (sbyte) ((num4 & 16711680U) >> 16);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255999) = (sbyte) ((num4 & 4278190080U) >> 24);
                if ((int) num3 == 0 && !this.bool_2)
                {
                  // ISSUE: cast to a function pointer type
                  _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                  int num5 = (int) MessageBox.Show("Master Checksum is still Set, this is normal for a modded drive." + "\n" + "However Checksum should be set for a full restore!", "Fix Checksum", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                  _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416173056U, 4096U);
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                _Module.memcpy((void*) &struct33, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 253952), 4096U);
                this.textBox6.AppendText(string.Concat((object) "Dumping Sector 9003E000:"));
                if (this.method_393(2375928U, 4U, 1024U, 1U) != 0)
                  return;
                // ISSUE: cast to a reference type
                // ISSUE: explicit reference operation
                if (_Module.memcmp((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct33, 4096U) != 0)
                {
                  this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash Spoof ID's Failed" + "\r\n");
                }
                else
                {
                  this.textBox6.AppendText("\r\n" + "Read back & compare completed, Write Verified!" + "\r\n");
                  this.textBox6.AppendText("Flash Checksum Complete !" + "\r\n");
                }
              }
            }
          }
        }
      }
      else if (this.int_14 == 5)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (this.method_382() != 0 || this.method_393(uint_0, uint_1_1, uint_2, uint_3) != 0 || this.method_367((uint) this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172))) != 0)
          return;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        uint num2 = (uint) ((int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255999) << 24 | (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255998) << 16 | (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255997) << 8) | (uint) *(byte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255996);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        uint num3 = (uint) this.method_373((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172));
        if ((int) num2 == 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num4 = (int) MessageBox.Show("Master Checksum is Set, this is normal for a modded drive." + "\n" + "Do you wish to Continue ?", "Fix Checksum", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          if (num4 == 7)
            return;
        }
        if ((int) num2 == (int) num3)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num4 = (int) MessageBox.Show("The Correct Checksum is already set !" + "\n" + "Continue and set Master Checksum ?", "Fix Checksum", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          if (num4 == 7)
            return;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255996) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255997) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255998) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255999) = (sbyte) 0;
        }
        if ((((int) num2 != (int) num3 ? 1 : 0) & ((int) num2 == 0 ? 1 : 0)) != 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num4 = (int) MessageBox.Show("The current Checksum is incorrect, but is set to Master Checksum!" + "\n\n" + "Continue and flash Checksum ?", "Fix Checksum", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          if (num4 == 7)
            return;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255996) = (sbyte) ((int) num3 & (int) byte.MaxValue);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255997) = (sbyte) ((num3 & 65280U) >> 8);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255998) = (sbyte) ((num3 & 16711680U) >> 16);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255999) = (sbyte) ((num3 & 4278190080U) >> 24);
        }
        if ((((int) num2 != (int) num3 ? 1 : 0) & ((int) num2 != 0 ? 1 : 0)) != 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num4 = (int) MessageBox.Show("The current Checksum is incorrect, AND is NOT set to Master Checksum!" + (object) "\n" + "Drive will not boot next time if not corrected !!" + "\n" + (string) __arglist ("Continue and flash Checksum ?"), "Fix Checksum", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          if (num4 == 7)
            return;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255996) = (sbyte) ((int) num3 & (int) byte.MaxValue);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255997) = (sbyte) ((num3 & 65280U) >> 8);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255998) = (sbyte) ((num3 & 16711680U) >> 16);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 255999) = (sbyte) ((num3 & 4278190080U) >> 24);
        }
        Struct32 struct32;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) &struct32, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258096), (void*) &_Module.struct34_1, 48U);
        Struct33 struct33;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) &struct33, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258048), 4096U);
        this.textBox6.AppendText("Flash Stability Test" + "\r\n");
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416177152U, 4096U);
        this.textBox6.AppendText(string.Concat((object) "Dumping Sector 9003F000:"));
        if (this.method_393(2375932U, 4U, 1024U, 1U) != 0)
          return;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.memcmp((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct33, 4096U) != 0)
        {
          this.textBox6.AppendText("\r\n" + "Read back mis-compare, Restore Aborted" + "\r\n");
        }
        else
        {
          this.textBox6.AppendText("\r\n" + "Read back & compare completed, Flashing Stable!" + "\r\n");
          this.textBox6.AppendText("Repairing Test Sector." + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416177152U, 4096U);
          this.textBox6.AppendText("Done !" + "\r\n");
          if (!this.bool_2)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num4 = (int) MessageBox.Show("Flashing stabilty test reports stable." + "\n\n" + "Do you wish to Continue ?", "Fix Checksum", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            if (num4 == 7)
            {
              this.textBox6.AppendText("Fix Checksum Aborted !" + "\r\n");
              return;
            }
          }
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416173056U, 4096U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) &struct33, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 253952), 4096U);
          this.textBox6.AppendText(string.Concat((object) "Dumping Sector 9003E000:"));
          if (this.method_393(2375928U, 4U, 1024U, 1U) != 0)
            return;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.memcmp((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct33, 4096U) != 0)
          {
            this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash Spoof ID's Failed" + "\r\n");
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Read back & compare completed, Write Verified!" + "\r\n");
            this.textBox6.AppendText("Flash Checksum Complete !" + "\r\n");
          }
        }
      }
      else if (!this.SaveTarget.Enabled)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num2 = (int) MessageBox.Show("No Firmware is loaded to Target buffer", "Free Flash", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        if (this.int_14 != 6 || this.method_382() != 0)
          return;
        this.textBox6.AppendText(string.Concat((object) "Dumping Flash:"));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (this.method_393(uint_0, uint_1_1, uint_2, uint_3) != 0 || this.method_367((uint) this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172))) != 0)
          return;
        this.textBox6.AppendText(string.Concat((object) "\r\n"));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172)) != this.method_374((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780)))
        {
          this.textBox6.AppendText("Rev of Attached Drive and Target buffer do Not Match!" + "\r\n");
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num2 = (int) MessageBox.Show("Rev of Attached Drive and Target buffer do Not Match!" + "\n\n" + "Are you absolutely sure you wish to Continue ?", "Free Flash Firmware", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          if (num2 == 7)
          {
            this.textBox6.AppendText("User Aborted !" + "\r\n");
            return;
          }
          else
            this.textBox6.AppendText("Rev of Attached Drive and Target buffer are a Match!" + "\r\n");
        }
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        int num3 = this.method_372((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), (int*) &struct113);
        string text = "Sector Compare detected " + Convert.ToString(num3) + " Differences!" + "\n\n" + "Are you sure you wish to Continue ?";
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num4 = (int) MessageBox.Show(text, "Free Flash Firmware", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        if (num4 == 7)
        {
          this.textBox6.AppendText("Free Flash Aborted by User !" + "\r\n");
        }
        else
        {
          Struct32 struct32;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) &struct32, (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), 262144U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258096), (void*) &_Module.struct34_1, 48U);
          Struct33 struct33;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) &struct33, (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 258048), 4096U);
          this.textBox6.AppendText("Flash Stability Test" + "\r\n");
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416177152U, 4096U);
          this.textBox6.AppendText(string.Concat((object) "Dumping Sector 9003F000:"));
          if (this.method_393(2375932U, 4U, 1024U, 1U) != 0)
            return;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.memcmp((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct33, 4096U) != 0)
          {
            this.textBox6.AppendText("\r\n" + "Read back mis-compare, Restore Aborted" + "\r\n");
          }
          else
          {
            this.textBox6.AppendText("\r\n" + "Read back & compare completed, Flashing Stable!" + "\r\n");
            this.textBox6.AppendText("Repairing Test Sector." + "\r\n");
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 2416177152U, 4096U);
            this.textBox6.AppendText("Done !" + "\r\n");
            if (!this.bool_2)
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num2 = (int) MessageBox.Show("Flashing stabilty test reports stable." + "\n\n" + "Do you wish to Continue ?", "Restore Firmware", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              if (num2 == 7)
              {
                this.textBox6.AppendText("Free Flash Aborted by User !" + "\r\n");
                return;
              }
            }
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            this.method_391((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), (byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), 262144);
            for (int index = 0; index < num3; ++index)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              this.method_403((byte*) ^(int&) ((IntPtr) &_Module.struct121_0 + 9564), (uint) ^(int&) ((IntPtr) &struct113 + index * 4), 4096U);
            }
            this.textBox6.AppendText("Done !" + "\r\n");
            this.textBox6.AppendText("Write verify test.." + "\r\n");
            this.textBox6.AppendText(string.Concat((object) "Dumping Flash:"));
            if (this.method_393(uint_0, uint_1_1, uint_2, uint_3) != 0)
              return;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 16384), (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 7172) + 16384), 4096U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (_Module.memcmp((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 4780), 262144U) != 0)
            {
              this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash process has errors" + "\r\n");
            }
            else
            {
              this.textBox6.AppendText("\r\n" + "Read back & compare completed, Write Verified!" + "\r\n");
              this.textBox6.AppendText("Flash Complete !" + "\r\n");
            }
          }
        }
      }
    }

    private unsafe int method_365(uint uint_0, uint uint_1)
    {
      string str1 = (string) null;
      string str2 = (string) null;
      string directoryName = Path.GetDirectoryName(Environment.GetCommandLineArgs()[0]);
      str1 = "";
      string str3;
      string strB;
      if ((int) uint_0 == 789421430 & (int) uint_1 == 209244429)
      {
        this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0032" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-32-2.0.bin";
        strB = "b0967f0c91d94983bdc491b584376164";
      }
      else if ((int) uint_0 == 529584510 & (int) uint_1 == 269849813)
      {
        this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0036" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-36-2.0.bin";
        strB = "a7417f533673b4378d5899aa2703f80e";
      }
      else if ((int) uint_0 == 1731285449 & (int) uint_1 == 564514654)
      {
        this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0040" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-40-2.0.bin";
        strB = "dbc02297fe8416c10d722e8febef3529";
      }
      else if ((int) uint_0 == -58457204 & (int) uint_1 == -548694804)
      {
        this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0046" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-46-2.0.bin";
        strB = "7b4277d66791adefca382dda7776c3fb";
      }
      else if ((int) uint_0 == 17588177 & (int) uint_1 == 862461110)
      {
        this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0047" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-47-2.0.bin";
        strB = "d0aa72da4a0663ba90dcd464ba70417f";
      }
      else if ((int) uint_0 == -1295082882 & (int) uint_1 == 2132095234)
      {
        this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0058" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-58-2.0.bin";
        strB = "3a5b12f9570dea10d5fcceab8f866777";
      }
      else if ((int) uint_0 == 253026502 & (int) uint_1 == 1729595577)
      {
        this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0059" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-59-2.0.bin";
        strB = "eddd064142a0fc770bc6077e49de9791";
      }
      else if ((int) uint_0 == 771127765 & (int) uint_1 == -629183318)
      {
        this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0078" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-78-4b00-3.0.bin";
        strB = "8def3de4f7b43c49d5e2c70bbd7ca02f";
      }
      else if ((int) uint_0 == -1614336446 & (int) uint_1 == 372531126)
      {
        this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0078" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-78-4c30-3.0.bin";
        strB = "234f01b84a4c1114082e94ebacf856d5";
      }
      else if ((int) uint_0 == -1063753684 & (int) uint_1 == 623629642)
      {
        this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0078" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-78-4d20-3.0.bin";
        strB = "56633315e7ad292781dde92b9502682c";
      }
      else if ((int) uint_0 == 1482142839 & (int) uint_1 == 1838511619)
      {
        this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0078" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-78-4e10-3.0.bin";
        strB = "5851cf7254417842aa99e8fbdf741a29";
      }
      else if ((int) uint_0 == -1603747834 & (int) uint_1 == 1702627297)
      {
        this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0079" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-79-4b00-3.0.bin";
        strB = "ca7d8743b2574f99121791ee3e09d3ed";
      }
      else if ((int) uint_0 == 811045522 & (int) uint_1 == 646507808)
      {
        this.textBox6.AppendText("\r\n" + "LTPlus is Stock, rev 0079" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-79-4c30-3.0.bin";
        strB = "ba28a150680f636fbde8e493def1a51c";
      }
      else if ((int) uint_0 == 1009034336 & (int) uint_1 == -1400962036)
      {
        this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0079" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-79-4d20-3.0.bin";
        strB = "a10b48a812341119e1b7b926151ce3d1";
      }
      else if ((int) uint_0 == -892732761 & (int) uint_1 == 55405718)
      {
        this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0079" + "\r\n");
        str3 = directoryName + "\\firmware\\LTPlus-79-4e10-3.0.bin";
        strB = "f746451ff81bbf8546449223f9e88a10";
      }
      else if ((((int) uint_0 == 789421430 ? 1 : 0) & ((int) uint_1 != 209244429 ? 1 : 0)) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0032 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else if ((((int) uint_0 == 529584510 ? 1 : 0) & ((int) uint_1 != 269849813 ? 1 : 0)) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0036 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else if ((((int) uint_0 == 1731285449 ? 1 : 0) & ((int) uint_1 != 564514654 ? 1 : 0)) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0036 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else if ((((int) uint_0 == -58457204 ? 1 : 0) & ((int) uint_1 != -548694804 ? 1 : 0)) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0040 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else if ((((int) uint_0 == 17588177 ? 1 : 0) & ((int) uint_1 != 862461110 ? 1 : 0)) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0047 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else if ((((int) uint_0 == -1295082882 ? 1 : 0) & ((int) uint_1 != 2132095234 ? 1 : 0)) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0058 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else if ((((int) uint_0 == 253026502 ? 1 : 0) & ((int) uint_1 != 1729595577 ? 1 : 0)) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0059 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else if ((((int) uint_0 == 771127765 ? 1 : 0) & ((int) uint_1 != -629183318 ? 1 : 0)) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0078 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else if ((((int) uint_0 == -1614336446 ? 1 : 0) & ((int) uint_1 != 372531126 ? 1 : 0)) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0078 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else if ((((int) uint_0 == -1063753684 ? 1 : 0) & ((int) uint_1 != 623629642 ? 1 : 0)) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0078 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else if ((((int) uint_0 == 1482142839 ? 1 : 0) & ((int) uint_1 != 1838511619 ? 1 : 0)) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0078 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else if ((((int) uint_0 == -1603747834 ? 1 : 0) & ((int) uint_1 != 1702627297 ? 1 : 0)) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0079 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else if ((((int) uint_0 == 811045522 ? 1 : 0) & ((int) uint_1 != 646507808 ? 1 : 0)) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0079 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else if ((((int) uint_0 == 1009034336 ? 1 : 0) & ((int) uint_1 != -1400962036 ? 1 : 0)) != 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0079 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else
      {
        if ((((int) uint_0 == -892732761 ? 1 : 0) & ((int) uint_1 != 55405718 ? 1 : 0)) == 0)
          return 1;
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Drive is Non-Stock rev 0079 But Master Checksum is not Set" + (object) "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + (string) __arglist ("Use Restore Firmware to Restore to Stock!"), "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(str3);
      if ((IntPtr) _Module.fopen(pSbyte_0, (sbyte*) &_Module.struct18_4) == IntPtr.Zero)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Can't open file" + " " + str3, "Auto-Load LT-Plus", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else
      {
        GStruct93 gstruct93;
        _Module.smethod_111(&gstruct93);
        GStruct19 gstruct19_1;
        int num1;
        // ISSUE: fault handler
        try
        {
          GStruct19 gstruct19_2;
          GStruct19* pGstruct19_1 = _Module.smethod_91(&gstruct19_2, pSbyte_0);
          _Module.smethod_114(&gstruct93, &gstruct19_1, pGstruct19_1);
          // ISSUE: fault handler
          try
          {
            str2 = "";
            if (string.Compare(new string(_Module.smethod_94(&gstruct19_1)), strB) != 0)
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num2 = (int) MessageBox.Show("LT-Plus file failed MD5 hash check!", "Flash LT-Plus", MessageBoxButtons.OK);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              num1 = 1;
            }
            else
              goto label_40;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
          _Module.smethod_92(&gstruct19_1);
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
        _Module.smethod_112(&gstruct93);
        return num1;
label_40:
        int num3;
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            this.textBox6.AppendText(string.Concat((object) "Auto-"));
            this.method_36(str3, 1);
            num3 = 0;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
          _Module.smethod_92(&gstruct19_1);
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
        _Module.smethod_112(&gstruct93);
        return num3;
      }
    }

    private unsafe int method_366(uint uint_0)
    {
      string str1 = (string) null;
      string str2 = (string) null;
      string directoryName = Path.GetDirectoryName(Environment.GetCommandLineArgs()[0]);
      str1 = "";
      string str3;
      string strB;
      if ((int) uint_0 == 789421430)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0032" + "\r\n");
        str3 = directoryName + "\\firmware\\orig32.bin";
        strB = "058074454a168a18129d44c4b504ae51";
      }
      else if ((int) uint_0 == 529584510)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0036" + "\r\n");
        str3 = directoryName + "\\firmware\\orig36.bin";
        strB = "0de3e5f4a183ccad27b88c484770511e";
      }
      else if ((int) uint_0 == 1731285449)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0040" + "\r\n");
        str3 = directoryName + "\\firmware\\orig40.bin";
        strB = "c7ed7f4594262037abfc1dafd2319e02";
      }
      else if ((int) uint_0 == -58457204)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0046" + "\r\n");
        str3 = directoryName + "\\firmware\\orig46.bin";
        strB = "8d6a1b95ca4ec5862be291446264aae7";
      }
      else if ((int) uint_0 == 17588177)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0047" + "\r\n");
        str3 = directoryName + "\\firmware\\orig47.bin";
        strB = "a784664c1e38cb928014c60aa0ddbf9e";
      }
      else if ((int) uint_0 == -1295082882)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0058" + "\r\n");
        str3 = directoryName + "\\firmware\\orig58.bin";
        strB = "6c4fb9606c3594e061b09cb90629c149";
      }
      else if ((int) uint_0 == 253026502)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0059" + "\r\n");
        str3 = directoryName + "\\firmware\\orig59.bin";
        strB = "8788995e164450f026f7bc0ac828e353";
      }
      else if ((int) uint_0 == 771127765)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4B00" + "\r\n");
        str3 = directoryName + "\\firmware\\orig78-4b00.bin";
        strB = "8b77fdc3478e8491da7b84a5225fd5d3";
      }
      else if ((int) uint_0 == -1614336446)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4C30" + "\r\n");
        str3 = directoryName + "\\firmware\\orig78-4c30.bin";
        strB = "35cf4723847cdcb3e0fec8ec983058b5";
      }
      else if ((int) uint_0 == -1063753684)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4D20" + "\r\n");
        str3 = directoryName + "\\firmware\\orig78-4d20.bin";
        strB = "ec14386c45bcb8f2915a122c0b84ca73";
      }
      else if ((int) uint_0 == 1482142839)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4E10" + "\r\n");
        str3 = directoryName + "\\firmware\\orig78-4e10.bin";
        strB = "7446249cfbd63642632e2481e0dc7b7d";
      }
      else if ((int) uint_0 == -1603747834)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4B00" + "\r\n");
        str3 = directoryName + "\\firmware\\orig79-4b00.bin";
        strB = "bb08e540dcabb44cb15551d10e6a4b03";
      }
      else if ((int) uint_0 == 811045522)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4C30" + "\r\n");
        str3 = directoryName + "\\firmware\\orig79-4c30.bin";
        strB = "53f8bb9c57b2e1f3d643adfe6fa3ff30";
      }
      else if ((int) uint_0 == 1009034336)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4D20" + "\r\n");
        str3 = directoryName + "\\firmware\\orig79-4d20.bin";
        strB = "df7bcaa6c29063e3da95800d7694d5d9";
      }
      else if ((int) uint_0 == -892732761)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4E10" + "\r\n");
        str3 = directoryName + "\\firmware\\orig79-4e10.bin";
        strB = "a61fa8b34dfe21531d1428346d68149d";
      }
      else
      {
        this.textBox6.AppendText("\r\n" + "Drive rev undetermined, Aborting!" + "\r\n");
        return 1;
      }
      sbyte* pSbyte_0 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(str3);
      if ((IntPtr) _Module.fopen(pSbyte_0, (sbyte*) &_Module.struct18_4) == IntPtr.Zero)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("Can't open file" + " " + str3, "Auto-Load Stock f/w", MessageBoxButtons.OK);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else
      {
        GStruct93 gstruct93;
        _Module.smethod_111(&gstruct93);
        GStruct19 gstruct19_1;
        int num1;
        // ISSUE: fault handler
        try
        {
          GStruct19 gstruct19_2;
          GStruct19* pGstruct19_1 = _Module.smethod_91(&gstruct19_2, pSbyte_0);
          _Module.smethod_114(&gstruct93, &gstruct19_1, pGstruct19_1);
          // ISSUE: fault handler
          try
          {
            str2 = "";
            if (string.Compare(new string(_Module.smethod_94(&gstruct19_1)), strB) != 0)
            {
              // ISSUE: cast to a function pointer type
              _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
              int num2 = (int) MessageBox.Show("Orig bin file failed MD5 hash check!", "Restore Firmware", MessageBoxButtons.OK);
              _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
              num1 = 1;
            }
            else
              goto label_40;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
          _Module.smethod_92(&gstruct19_1);
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
        _Module.smethod_112(&gstruct93);
        return num1;
label_40:
        int num3;
        // ISSUE: fault handler
        try
        {
          // ISSUE: fault handler
          try
          {
            this.textBox6.AppendText(string.Concat((object) "Auto-"));
            this.method_36(str3, 1);
            num3 = 0;
          }
          __fault
          {
            // ISSUE: cast to a function pointer type
            _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_14, (void*) &gstruct19_1);
          }
          _Module.smethod_92(&gstruct19_1);
        }
        __fault
        {
          // ISSUE: cast to a function pointer type
          _Module.__CxxCallUnwindDtor((__FnPtr<void (void*)>) (IntPtr) _Module.ppInt_13, (void*) &gstruct93);
        }
        _Module.smethod_112(&gstruct93);
        return num3;
      }
    }

    private int method_367(uint uint_0)
    {
      Path.GetDirectoryName(Environment.GetCommandLineArgs()[0]);
      if ((int) uint_0 == 789421430)
        this.textBox6.AppendText("\r\n" + "Drive is rev 0032" + "\r\n");
      else if ((int) uint_0 == 529584510)
        this.textBox6.AppendText("\r\n" + "Drive is rev 0036" + "\r\n");
      else if ((int) uint_0 == 1731285449)
        this.textBox6.AppendText("\r\n" + "Drive is rev 0040" + "\r\n");
      else if ((int) uint_0 == -58457204)
        this.textBox6.AppendText("\r\n" + "Drive is rev 0046" + "\r\n");
      else if ((int) uint_0 == 17588177)
        this.textBox6.AppendText("\r\n" + "Drive is rev 0047" + "\r\n");
      else if ((int) uint_0 == -1295082882)
        this.textBox6.AppendText("\r\n" + "Drive is rev 0058" + "\r\n");
      else if ((int) uint_0 == 253026502)
        this.textBox6.AppendText("\r\n" + "Drive is rev 0059" + "\r\n");
      else if ((int) uint_0 == 771127765)
        this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4B00" + "\r\n");
      else if ((int) uint_0 == -1614336446)
        this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4C30" + "\r\n");
      else if ((int) uint_0 == -1063753684)
        this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4D20" + "\r\n");
      else if ((int) uint_0 == 1482142839)
        this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4E10" + "\r\n");
      else if ((int) uint_0 == -1603747834)
        this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4B00" + "\r\n");
      else if ((int) uint_0 == 811045522)
        this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4C30" + "\r\n");
      else if ((int) uint_0 == 1009034336)
        this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4D20" + "\r\n");
      else if ((int) uint_0 == -892732761)
      {
        this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4E10" + "\r\n");
      }
      else
      {
        this.textBox6.AppendText("\r\n" + "Drive rev undetermined, Aborting!" + "\r\n");
        return 1;
      }
      return 0;
    }

    private void method_368(uint uint_0)
    {
      if ((int) uint_0 == 789421430 | (int) uint_0 == 1731285449)
        this.radioButton1.Checked = true;
      else if ((int) uint_0 == 529584510)
        this.radioButton2.Checked = true;
      else if ((int) uint_0 == -58457204 | (int) uint_0 == 17588177)
        this.radioButton3.Checked = true;
      else if ((int) uint_0 == -1295082882 | (int) uint_0 == 253026502)
      {
        this.radioButton4.Checked = true;
      }
      else
      {
        if (!((int) uint_0 == 771127765 | (int) uint_0 == -1614336446 | (int) uint_0 == -1063753684 | (int) uint_0 == 1482142839 | (int) uint_0 == -1603747834 | (int) uint_0 == 811045522 | (int) uint_0 == 1009034336 | (int) uint_0 == -892732761))
          return;
        this.radioButton5.Checked = true;
      }
    }

    private unsafe int method_369(byte* pByte_0, byte* pByte_1, int* pInt_0)
    {
      int index1 = 0;
      this.listBox5.Items.Clear();
      if (this.method_375(pByte_0, pByte_1, 253952U) != 0)
      {
        pInt_0[index1] = -1878794240;
        ++index1;
      }
      int num = 0;
      while (num < 262144)
      {
        if (!(num == 16384 | num == 253952) && this.method_375(pByte_0, pByte_1, (uint) num) != 0)
        {
          pInt_0[index1] = num - 1879048192;
          ++index1;
        }
        num += 4096;
      }
      this.textBox6.AppendText(Convert.ToString(index1) + " Sector Differences Found" + "\r\n");
      for (int index2 = 0; index2 < index1; ++index2)
      {
        Struct63 struct63;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) (pInt_0[index2] & (int) byte.MaxValue);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) ((pInt_0[index2] & 65280) >> 8);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) ((pInt_0[index2] & 16711680) >> 16);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct63 = (sbyte) ((uint) (pInt_0[index2] & -16777216) >> 24);
        this.listBox5.Items.Add((object) this.method_171((byte*) &struct63, 4U, 0U));
      }
      Application.DoEvents();
      return index1;
    }

    private unsafe int method_370(byte* pByte_0, byte* pByte_1, int* pInt_0)
    {
      int index1 = 0;
      this.listBox5.Items.Clear();
      int num = 0;
      while (num < 262144)
      {
        if (this.method_375(pByte_0, pByte_1, (uint) num) != 0)
        {
          pInt_0[index1] = num - 1879048192;
          ++index1;
        }
        num += 4096;
      }
      this.textBox6.AppendText(Convert.ToString(index1) + " Sector Differences Found" + "\r\n");
      for (int index2 = 0; index2 < index1; ++index2)
      {
        Struct63 struct63;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) (pInt_0[index2] & (int) byte.MaxValue);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) ((pInt_0[index2] & 65280) >> 8);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) ((pInt_0[index2] & 16711680) >> 16);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct63 = (sbyte) ((uint) (pInt_0[index2] & -16777216) >> 24);
        this.listBox5.Items.Add((object) this.method_171((byte*) &struct63, 4U, 0U));
      }
      Application.DoEvents();
      return index1;
    }

    private unsafe int method_371(byte* pByte_0, byte* pByte_1, int* pInt_0)
    {
      int index1 = 0;
      this.listBox5.Items.Clear();
      int num = 24576;
      while (num < 262144)
      {
        if (!(num == 118784 | num == 147456 | num == 151552 | num == 258048) && this.method_375(pByte_0, pByte_1, (uint) num) != 0)
        {
          pInt_0[index1] = num - 1879048192;
          ++index1;
        }
        num += 4096;
      }
      if (this.method_375(pByte_0, pByte_1, 12288U) != 0)
      {
        pInt_0[index1] = -1879035904;
        ++index1;
      }
      if (this.method_375(pByte_0, pByte_1, 118784U) != 0)
      {
        pInt_0[index1] = -1878929408;
        ++index1;
      }
      if (this.method_375(pByte_0, pByte_1, 147456U) != 0)
      {
        pInt_0[index1] = -1878900736;
        ++index1;
      }
      if (this.method_375(pByte_0, pByte_1, 151552U) != 0)
      {
        pInt_0[index1] = -1878896640;
        ++index1;
      }
      if (this.method_375(pByte_0, pByte_1, 258048U) != 0)
      {
        pInt_0[index1] = -1878790144;
        ++index1;
      }
      if (this.method_375(pByte_0, pByte_1, 20480U) != 0)
      {
        pInt_0[index1] = -1879027712;
        ++index1;
      }
      this.textBox6.AppendText(Convert.ToString(index1) + " Sector Differences Found" + "\r\n");
      for (int index2 = 0; index2 < index1; ++index2)
      {
        Struct63 struct63;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) (pInt_0[index2] & (int) byte.MaxValue);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) ((pInt_0[index2] & 65280) >> 8);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) ((pInt_0[index2] & 16711680) >> 16);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct63 = (sbyte) ((uint) (pInt_0[index2] & -16777216) >> 24);
        this.listBox5.Items.Add((object) this.method_171((byte*) &struct63, 4U, 0U));
      }
      Application.DoEvents();
      return index1;
    }

    private unsafe int method_372(byte* pByte_0, byte* pByte_1, int* pInt_0)
    {
      int index1 = 0;
      this.listBox5.Items.Clear();
      int num1 = 0;
      while (num1 < 262144)
      {
        if (num1 == 16384)
        {
          if (this.method_375(pByte_0, pByte_1, (uint) num1) != 0)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num2 = (int) MessageBox.Show(new string((sbyte*) &_Module.struct114_0), "Free Flash Firmware", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            if (num2 == 6)
            {
              pInt_0[index1] = num1 - 1879048192;
              ++index1;
            }
          }
        }
        else if (this.method_375(pByte_0, pByte_1, (uint) num1) != 0)
        {
          pInt_0[index1] = num1 - 1879048192;
          ++index1;
        }
        num1 += 4096;
      }
      this.textBox6.AppendText(Convert.ToString(index1) + " Sector Differences Found" + "\r\n");
      for (int index2 = 0; index2 < index1; ++index2)
      {
        Struct63 struct63;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) (pInt_0[index2] & (int) byte.MaxValue);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) ((pInt_0[index2] & 65280) >> 8);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) ((pInt_0[index2] & 16711680) >> 16);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct63 = (sbyte) ((uint) (pInt_0[index2] & -16777216) >> 24);
        this.listBox5.Items.Add((object) this.method_171((byte*) &struct63, 4U, 0U));
      }
      Application.DoEvents();
      return index1;
    }

    private unsafe int method_373(byte* pByte_0)
    {
      uint num1 = 0U;
      uint num2 = 0U;
      uint num3 = 24576U;
      while (num3 < 256000U)
      {
        num2 += num1;
        num1 = (uint) ((int) pByte_0[(int) num3 + 3] << 24 | (int) pByte_0[(int) num3 + 2] << 16 | (int) pByte_0[(int) num3 + 1] << 8) | (uint) pByte_0[(int) num3];
        num3 += 4U;
      }
      uint num4 = (uint) -(int) num2;
      Struct63 struct63;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) ((int) num4 & (int) byte.MaxValue);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) ((num4 & 65280U) >> 8);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) ((num4 & 16711680U) >> 16);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) ((num4 & 4278190080U) >> 24);
      this.textBox6.AppendText("\r\n" + "Calculated Checksum " + this.method_171((byte*) &struct63, 4U, 0U) + "\r\n");
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) pByte_0[255996];
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) pByte_0[255997];
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) pByte_0[255998];
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) pByte_0[255999];
      this.textBox6.AppendText("Actual Checksum     " + this.method_171((byte*) &struct63, 4U, 0U) + "\r\n");
      return (int) num4;
    }

    private unsafe int method_374(byte* pByte_0)
    {
      uint num1 = 0U;
      uint num2 = 0U;
      uint num3 = 45056U;
      while (num3 < 110592U)
      {
        num2 += num1;
        num1 = (uint) ((int) pByte_0[(int) num3 + 3] << 24 | (int) pByte_0[(int) num3 + 2] << 16 | (int) pByte_0[(int) num3 + 1] << 8) | (uint) pByte_0[(int) num3];
        num3 += 4U;
      }
      return -(int) num2;
    }

    private unsafe int method_375(byte* pByte_0, byte* pByte_1, uint uint_0)
    {
      byte* numPtr1 = pByte_0 + (int) uint_0;
      byte* numPtr2 = pByte_1 + (int) uint_0;
      for (int index = 0; index < 4096; ++index)
      {
        if ((int) numPtr1[index] != (int) numPtr2[index])
          return 1;
      }
      return 0;
    }

    private void method_376()
    {
      if (this.radioButton1.Checked)
      {
        this.int_12 = 32;
        this.string_19 = "0032/0040";
      }
      else if (this.radioButton2.Checked)
      {
        this.int_12 = 36;
        this.string_19 = "0036";
      }
      else if (this.radioButton3.Checked)
      {
        this.int_12 = 47;
        this.string_19 = "0046/0047";
      }
      else if (this.radioButton4.Checked)
      {
        this.int_12 = 59;
        this.string_19 = "0058/0059";
      }
      else if (this.radioButton5.Checked)
      {
        this.int_12 = 79;
        this.string_19 = "0078/0079";
      }
      if (this.radioButton15.Checked)
      {
        this.int_13 = 0;
        this.string_20 = "Classic Ram Peek";
      }
      else if (this.radioButton14.Checked)
      {
        this.int_13 = 1;
        this.string_20 = "Ram Upload";
      }
      else if (this.radioButton13.Checked)
      {
        this.int_13 = 2;
        this.string_20 = "Mode Select";
      }
      else if (this.radioButton12.Checked)
      {
        this.int_13 = 3;
        this.string_20 = "Ram Poke";
      }
      if (this.radioButton11.Checked)
      {
        this.int_14 = 0;
        this.string_21 = "Dumping f/w of";
      }
      else if (this.radioButton6.Checked)
      {
        this.int_14 = 1;
        this.string_21 = "Flashing Keys to";
      }
      else if (this.radioButton7.Checked)
      {
        this.int_14 = 2;
        this.string_21 = "Flashing Spoof ID's to";
      }
      else if (this.radioButton8.Checked)
      {
        this.int_14 = 3;
        this.string_21 = "Flashing Hacked f/w to";
      }
      else if (this.radioButton9.Checked)
      {
        this.int_14 = 4;
        this.string_21 = "Restoring Stock f/w to";
      }
      else if (this.radioButton10.Checked)
      {
        this.int_14 = 5;
        this.string_21 = "Fixing Checksum of";
      }
      else if (this.radioButton16.Checked)
      {
        this.int_14 = 6;
        this.string_21 = "Free flashing to";
      }
      if (((this.int_13 == 0 & this.int_14 == 0 ? 1 : 0) & (this.int_12 != 79 ? 1 : 0)) != 0)
        this.string_19 = "Pre 78";
      if (this.radioButton17.Checked)
      {
        this.int_15 = 0;
        this.string_22 = "Method via WIN32 API";
      }
      else
      {
        if (!this.radioButton18.Checked)
          return;
        this.int_15 = 1;
        this.string_22 = "Method over Port IO";
      }
    }

    private unsafe void method_377()
    {
      Struct68 struct68;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct68 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct68&) ((IntPtr) &struct68 + 1), 0, 259);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 4780) + 16384), (void*) (^(int&) ((IntPtr) &_Module.struct121_0 + 2388) + 16384), 4096U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280), (void*) (^(int&) @_Module.struct123_0 + 280), 16U);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), (void*) (^(int&) @_Module.struct123_0 + 2028), 20U);
      string str = "";
      _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct19_0, __arglist ());
      for (int index = 0; index < 16; ++index)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.sprintf((sbyte*) &struct68, (sbyte*) &_Module.struct10_20, __arglist (out struct68, (int) *(byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 280 + index)));
      }
      this.textBox11.Text = str + new string((sbyte*) &struct68);
      this.textBox1.Text = this.textBox11.Text;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.method_5((byte*) (^(int&) ((IntPtr) &_Module.struct123_0 + 4) + 2028), 20U, 0U);
      this.textBox13.Text = this.string_0;
    }

    private void radioButton11_CheckedChanged(object sender, EventArgs e)
    {
      this.button26.Text = "Read to Source";
      this.listBox5.Items.Clear();
      this.button26.Enabled = true;
      this.method_378();
    }

    private unsafe void radioButton18_CheckedChanged(object sender, EventArgs e)
    {
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      uint num2 = (uint) this.comboBox1.Items.Count;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (this.bool_1 && (int) ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72) == 0 && (int) num2 != 0)
      {
        if (this.radioButton18.Checked)
        {
          this.method_424((byte) 2);
          this.bool_9 = false;
          _Module.Sleep(10U);
        }
        else if (this.bool_5 && !this.bool_9)
        {
          this.method_424((byte) 1);
          this.bool_9 = true;
          _Module.Sleep(10U);
          this.method_424((byte) 5);
          _Module.Sleep(25U);
          this.method_424((byte) 7);
        }
      }
      _Module.Sleep(200U);
      this.method_378();
    }

    private void radioButton6_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.radioButton6.Checked)
        return;
      this.button26.Text = "Manual Spoof";
      this.listBox5.Items.Clear();
      this.listBox5.Items.Add((object) "Calculated at");
      this.listBox5.Items.Add((object) "Run time.....");
      this.button26.Enabled = true;
    }

    private void radioButton7_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.radioButton7.Checked)
        return;
      this.button26.Text = "Auto Spoof";
      this.listBox5.Items.Clear();
      this.listBox5.Items.Add((object) "Calculated at");
      this.listBox5.Items.Add((object) "Run time.....");
      this.button26.Enabled = true;
    }

    private void radioButton8_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.radioButton8.Checked)
        return;
      this.button26.Text = "Flash LT-Plus";
      this.listBox5.Items.Clear();
      this.listBox5.Items.Add((object) "Calculated at");
      this.listBox5.Items.Add((object) "Run time.....");
      this.button26.Enabled = true;
    }

    private void radioButton9_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.radioButton9.Checked)
        return;
      this.button26.Text = "Restore to Stock";
      this.listBox5.Items.Clear();
      this.listBox5.Items.Add((object) "Calculated at");
      this.listBox5.Items.Add((object) "Run time.....");
      this.button26.Enabled = true;
    }

    private void radioButton10_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.radioButton10.Checked)
        return;
      this.button26.Text = "Fix Checksum";
      this.listBox5.Items.Clear();
      this.listBox5.Items.Add((object) "0x9003E000");
      this.button26.Enabled = true;
    }

    private void radioButton16_CheckedChanged(object sender, EventArgs e)
    {
      if (!this.radioButton16.Checked)
        return;
      this.button26.Text = "Free Flash";
      this.listBox5.Items.Clear();
      this.listBox5.Items.Add((object) "Calculated at");
      this.listBox5.Items.Add((object) "Run time.....");
      this.button26.Enabled = true;
    }

    private void radioButton5_CheckedChanged(object sender, EventArgs e)
    {
      this.method_378();
    }

    private void method_378()
    {
      if (this.radioButton5.Checked)
      {
        this.radioButton15.Enabled = false;
        this.radioButton14.Checked = true;
        this.radioButton13.Enabled = false;
        this.radioButton12.Enabled = false;
      }
      else if (!this.radioButton5.Checked & this.radioButton17.Checked)
      {
        if (this.radioButton11.Checked)
        {
          this.radioButton15.Enabled = true;
          if (!this.radioButton14.Checked)
            this.radioButton15.Checked = true;
          this.radioButton13.Enabled = true;
          if (!this.radioButton16.Enabled)
            return;
          this.radioButton12.Enabled = true;
        }
        else
        {
          this.radioButton15.Enabled = false;
          this.radioButton14.Checked = true;
          this.radioButton13.Enabled = true;
          if (!this.radioButton16.Enabled)
            return;
          this.radioButton12.Enabled = true;
        }
      }
      else
      {
        if (!(!this.radioButton5.Checked & this.radioButton18.Checked))
          return;
        if (this.radioButton11.Checked)
        {
          this.radioButton15.Enabled = true;
          this.radioButton14.Checked = true;
          this.radioButton13.Enabled = false;
          this.radioButton12.Enabled = false;
        }
        else
        {
          this.radioButton15.Enabled = false;
          this.radioButton14.Checked = true;
          this.radioButton13.Enabled = false;
          this.radioButton12.Enabled = false;
        }
      }
    }

    private void checkBox1_CheckedChanged(object sender, EventArgs e)
    {
      if (this.checkBox1.CheckState == CheckState.Checked)
      {
        this.button24.Enabled = false;
        this.button12.Text = "79 Unlock";
        this.textBox6.AppendText("79 Unlock set to Automatic." + "\r\n");
      }
      else
      {
        this.button24.Enabled = true;
        this.button12.Text = "Execute";
        this.textBox6.AppendText("79 Unlock set to manual mode." + "\r\n");
      }
    }

    private void button12_Click(object sender, EventArgs e)
    {
      this.method_379();
    }

    private void method_379()
    {
      if (this.checkBox1.CheckState == CheckState.Unchecked)
      {
        if (this.radioButton18.Checked)
          this.method_388();
        else if (this.radioButton17.Checked)
          this.method_387();
      }
      if (this.checkBox1.CheckState != CheckState.Checked)
        return;
      if (this.radioButton18.Checked)
      {
        this.method_390();
      }
      else
      {
        if (!this.radioButton17.Checked)
          return;
        this.method_389();
      }
    }

    private void button24_Click(object sender, EventArgs e)
    {
      if (this.radioButton18.Checked)
      {
        this.method_386();
      }
      else
      {
        if (!this.radioButton17.Checked)
          return;
        this.method_385();
      }
    }

    private unsafe void method_380()
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        _Module.memset((void*) gstruct97Ptr, 0, 62U);
        *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 27;
        *(short*) gstruct97Ptr = (short) 44;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
        *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
        *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
        uint num;
        if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) != 0 && ((int) numPtr1[2] & 15) == 0)
        {
          this.textBox6.AppendText("Stopping the Disk - No disk is required, remove next time..." + "\r\n");
          _Module.Sleep(7000U);
        }
        _Module.CloseHandle(fileA);
      }
    }

    private unsafe void method_381()
    {
      if (this.comboBox1.Items.Count == 0)
        return;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 0;
      _Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3);
      _Module.memset((void*) &struct52, 0, 12U);
      Struct41 struct41;
      _Module.memset((void*) &struct41, 0, 18U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 18;
      uint num3;
      if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct41, &num3, 18U, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("Error Grabbing Sence Data..." + "\r\n");
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (((int) ^(byte&) ((IntPtr) &struct41 + 2) & 15) == 2 && (int) ^(byte&) ((IntPtr) &struct41 + 12) == 58 && (int) ^(byte&) ((IntPtr) &struct41 + 13) == 0)
        {
          this.textBox6.AppendText("No Disc in Drive, proceeding." + "\r\n");
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (((int) ^(byte&) ((IntPtr) &struct41 + 2) & 15) == 2 && (int) ^(byte&) ((IntPtr) &struct41 + 12) == 4 && (int) ^(byte&) ((IntPtr) &struct41 + 13) == 1)
          {
            this.textBox6.AppendText("Disc in Tray - No disc is required, Ejecting, remove next time..." + "\r\n");
          }
          else
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if (((int) ^(byte&) ((IntPtr) &struct41 + 2) & 15) == 0 && (int) ^(byte&) ((IntPtr) &struct41 + 12) == 0 && (int) ^(byte&) ((IntPtr) &struct41 + 13) == 0)
            {
              this.textBox6.AppendText("Disc in Tray - No disc is required, Ejecting, remove next time..." + "\r\n");
            }
            else
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              if (((int) ^(byte&) ((IntPtr) &struct41 + 2) & 15) != 6 || (int) ^(byte&) ((IntPtr) &struct41 + 12) != 40 || (int) ^(byte&) ((IntPtr) &struct41 + 13) != 0)
                return;
              this.textBox6.AppendText("Unit Not ready... Ejecting" + "\r\n");
            }
          }
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) @struct52 = (sbyte) 27;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 2;
          if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
            this.textBox6.AppendText("Error Sending Stop Unit Command..." + "\r\n");
          else
            _Module.Sleep(2000U);
        }
      }
    }

    private int method_382()
    {
      return this.int_15 == 0 && this.method_383() != 0 || this.int_15 == 1 && this.method_384() != 0 ? 1 : 0;
    }

    private unsafe int method_383()
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else
      {
        Struct52 struct52;
        if (this.int_12 == 47)
        {
          _Module.memcpy((void*) &struct52, (void*) &_Module.struct52_0, 12U);
        }
        else
        {
          if (this.int_12 != 59)
            return 0;
          _Module.memcpy((void*) &struct52, (void*) &_Module.struct52_1, 12U);
        }
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        this.comboBox16.Text.Substring(0, 1);
        sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr < 65 | (int) *numPtr > 122)
          return 1;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return 1;
        uint num;
        for (uint index = 0U; index < 12U; ++index)
        {
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -25;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 72;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 30) = (sbyte) 73;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 84;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) -52;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) ^(byte&) ((IntPtr) &struct52 + (int) index);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) ((uint) ((int) index + int.MinValue & -16777216) >> 24);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) ((uint) ((int) index + int.MinValue & 16711680) >> 16);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 38) = (sbyte) ((uint) ((int) index + int.MinValue & 65280) >> 8);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) ((int) index + int.MinValue & (int) byte.MaxValue);
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0)
          {
            this.textBox6.AppendText("Ram Poke Failed" + "\r\n");
            _Module.CloseHandle(fileA);
            return 1;
          }
        }
        _Module.memset((void*) gstruct97Ptr, 0, 62U);
        *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 16;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) 8;
        Struct103 struct103;
        _Module.memset((void*) &struct103, 0, 8U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct103 + 1) = (sbyte) 6;
        *(short*) gstruct97Ptr = (short) 44;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 0;
        *(int*) ((IntPtr) gstruct97Ptr + 12) = 8;
        *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
        *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct103;
        *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
        if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0 && _Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0 && _Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0)
        {
          this.textBox6.AppendText("Enable Execute Failed" + "\r\n");
          _Module.CloseHandle(fileA);
          return 1;
        }
        else
        {
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 16;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 72;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 76;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 34) = (sbyte) 1;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) 1;
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0)
          {
            this.textBox6.AppendText("UnLock Failed" + "\r\n");
            _Module.CloseHandle(fileA);
            return 1;
          }
          else
          {
            this.textBox6.AppendText("UnLocked!" + "\r\n");
            _Module.CloseHandle(fileA);
            return 0;
          }
        }
      }
    }

    private unsafe int method_384()
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52_1;
      if (this.int_12 == 47)
      {
        _Module.memcpy((void*) &struct52_1, (void*) &_Module.struct52_0, 12U);
      }
      else
      {
        if (this.int_12 != 59)
          return 0;
        _Module.memcpy((void*) &struct52_1, (void*) &_Module.struct52_1, 12U);
      }
      Struct52 struct52_2;
      for (uint index = 0U; index < 12U; ++index)
      {
        _Module.memset((void*) &struct52_2, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52_2 = (sbyte) -25;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 1) = (sbyte) 72;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 2) = (sbyte) 73;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 3) = (sbyte) 84;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 4) = (sbyte) -52;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 5) = (sbyte) ^(byte&) ((IntPtr) &struct52_1 + (int) index);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 8) = (sbyte) ((uint) ((int) index + int.MinValue & -16777216) >> 24);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 9) = (sbyte) ((uint) ((int) index + int.MinValue & 16711680) >> 16);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 10) = (sbyte) ((uint) ((int) index + int.MinValue & 65280) >> 8);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 11) = (sbyte) ((int) index + int.MinValue & (int) byte.MaxValue);
        if (_Module.smethod_15((byte*) &struct52_2, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("Ram Poke Failed" + "\r\n");
          this.Cursor = Cursors.Arrow;
          return 1;
        }
      }
      _Module.Sleep(100U);
      _Module.memset((void*) &struct52_2, 0, 12U);
      Struct103 struct103;
      _Module.memset((void*) &struct103, 0, 8U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52_2 = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 1) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52_2 + 8) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 1) = (sbyte) 6;
      uint num3;
      if (_Module.smethod_17((byte*) &struct52_2, 12U, (byte) num2, (ushort) 512, (void*) &struct103, &num3, 8U, (byte) 1, &gstruct3) != 0 && _Module.smethod_17((byte*) &struct52_2, 12U, (byte) num2, (ushort) 512, (void*) &struct103, &num3, 8U, (byte) 1, &gstruct3) != 0 && _Module.smethod_17((byte*) &struct52_2, 12U, (byte) num2, (ushort) 512, (void*) &struct103, &num3, 8U, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("Enable Execute Failed" + "\r\n");
        this.Cursor = Cursors.Arrow;
        return 1;
      }
      else
      {
        _Module.Sleep(100U);
        _Module.memset((void*) &struct52_2, 0, 12U);
        _Module.memset((void*) &struct103, 0, 8U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52_2 = (sbyte) 85;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 1) = (sbyte) 16;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 3) = (sbyte) 72;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 4) = (sbyte) 76;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52_2 + 8) = (sbyte) 8;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct103 + 1) = (sbyte) 6;
        _Module.smethod_17((byte*) &struct52_2, 12U, (byte) num2, (ushort) 512, (void*) &struct103, &num3, 8U, (byte) 1, &gstruct3);
        this.textBox6.AppendText("UnLocked!" + "\r\n");
        _Module.memset((void*) &struct52_2, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52_2 = (sbyte) 85;
        if (_Module.smethod_15((byte*) &struct52_2, 12U, (byte) num2, (byte) 1, &gstruct3) != 0 && _Module.smethod_15((byte*) &struct52_2, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
          this.Cursor = Cursors.Arrow;
          return 1;
        }
        else
        {
          this.Cursor = Cursors.Arrow;
          return 0;
        }
      }
    }

    private unsafe void method_385()
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        uint num1;
        if (string.Compare(this.button24.Text, "Play") == 0)
        {
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -91;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) 1;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) 43;
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 3;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num1, (GStruct95*) 0) != 0 && ((int) numPtr1[2] & 15) == 0)
          {
            this.textBox6.AppendText("Played 79Unlock Audio CD" + "\r\n");
            this.button24.Text = "Pause";
            _Module.CloseHandle(fileA);
            _Module.Sleep(200U);
          }
          else
          {
            this.textBox6.AppendText("Failed to Play 79Unlock Audio CD" + "\r\n");
            _Module.CloseHandle(fileA);
          }
        }
        else
        {
          if (string.Compare(this.button24.Text, "Pause") != 0)
            return;
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 75;
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 3;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num1, (GStruct95*) 0) != 0 && ((int) numPtr1[2] & 15) == 0)
          {
            this.button24.Text = "Play";
            this.textBox6.AppendText("Paused 79Unlock Audio CD" + "\r\n");
            string text = "" + "Now! You Need to Physically eject the 79Unlock CD, then, click the" + "/n" + "'Unlock' button to execute the unlock code in Ram." + "/n/n" + "Select the IO Port the 79 is on, click 'Open' button in Port Properties" + "/n";
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num2 = (int) MessageBox.Show(text, "79 Unlock", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            _Module.CloseHandle(fileA);
          }
          else
          {
            this.textBox6.AppendText("Failed to Pause 79Unlock Audio CD" + "\r\n");
            _Module.CloseHandle(fileA);
          }
        }
      }
    }

    private unsafe void method_386()
    {
      if (this.comboBox1.Items.Count == 0)
        return;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      if (string.Compare(this.button24.Text, "Play") == 0)
      {
        Struct52 struct52;
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) -91;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 1;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) 43;
        if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("Failed to Play 79Unlock Audio CD" + "\r\n");
        }
        else
        {
          this.textBox6.AppendText("Played 79Unlock Audio CD" + "\r\n");
          this.button24.Text = "Pause";
          _Module.Sleep(200U);
        }
      }
      else
      {
        if (string.Compare(this.button24.Text, "Pause") != 0)
          return;
        Struct52 struct52;
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) 75;
        if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("Failed to Pause 79Unlock Audio CD" + "\r\n");
        }
        else
        {
          this.button24.Text = "Play";
          this.textBox6.AppendText("Paused 79Unlock Audio CD" + "\r\n");
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num3 = (int) MessageBox.Show("Now! You Need to Physically eject the 79Unlock CD, then, click the" + (object) "\n" + "'Unlock' button to execute the unlock code in Ram." + "\n\n" + (string) __arglist ("Select the IO Port the 79 is on, click 'Open' button in Port Properties."), "79 Unlock", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }
      }
    }

    private unsafe void method_387()
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        this.textBox6.AppendText("\r\n" + "Sending 79 Unlock Command!" + "\r\n");
        _Module.memset((void*) gstruct97Ptr, 0, 62U);
        *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 16;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) 8;
        Struct103 struct103;
        _Module.memset((void*) &struct103, 0, 8U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct103 + 1) = (sbyte) 6;
        *(short*) gstruct97Ptr = (short) 44;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 0;
        *(int*) ((IntPtr) gstruct97Ptr + 12) = 8;
        *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
        *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct103;
        *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
        uint num;
        if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) == 0)
        {
          this.textBox6.AppendText("Setting bit 3 of 0x5B6 failed" + "\r\n");
          _Module.CloseHandle(fileA);
        }
        else
        {
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -25;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 72;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 30) = (sbyte) 73;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 84;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 59;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) 7;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) 1;
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 3;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num, (GStruct95*) 0) != 0 && ((int) numPtr1[2] & 15) == 0)
          {
            this.textBox6.AppendText("Done!" + "\r\n");
            this.Cursor = Cursors.Arrow;
            _Module.CloseHandle(fileA);
          }
          else
          {
            this.textBox6.AppendText("Ram Execucte command failed" + "\r\n");
            _Module.CloseHandle(fileA);
          }
        }
      }
    }

    private unsafe void method_388()
    {
      if (this.comboBox1.Items.Count == 0)
        return;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      Struct103 struct103;
      _Module.memset((void*) &struct103, 0, 8U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 85;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct103 + 1) = (sbyte) 6;
      uint num3;
      if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct103, &num3, 8U, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("UnLock Failed" + "\r\n");
        this.Cursor = Cursors.Arrow;
      }
      else
      {
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) -25;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 72;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 73;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 84;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 59;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 7;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 1;
        if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("UnLock Failed.." + "\r\n");
        }
        else
        {
          this.textBox6.AppendText("UnLocked!" + "\r\n");
          this.Cursor = Cursors.Arrow;
        }
      }
    }

    private unsafe void method_389()
    {
      string str = (string) null;
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
        if (subKey.GetValue("Delay79") != null)
          str = subKey.GetValue("Delay79").ToString();
        else if (subKey.GetValue("Delay79") == null)
        {
          subKey.SetValue("Delay79", (object) "500");
          str = "500";
        }
        subKey.Close();
        int num1 = Convert.ToInt32(str);
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return;
        this.textBox6.AppendText("Playing 79Unlock Audio CD" + "\r\n");
        _Module.memset((void*) gstruct97Ptr, 0, 62U);
        *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -91;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) 1;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) 43;
        *(short*) gstruct97Ptr = (short) 44;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
        *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
        *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
        *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
        uint num2;
        if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num2, (GStruct95*) 0) != 0 && ((int) numPtr1[2] & 15) == 0)
        {
          _Module.Sleep((uint) num1);
          this.textBox6.AppendText("Pausing 79Unlock Audio CD, after " + Convert.ToString(num1) + "mS" + "\r\n");
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 75;
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num2, (GStruct95*) 0) != 0 && ((int) numPtr1[2] & 15) == 0)
          {
            this.textBox6.AppendText("Ejecting 79Unlock Audio CD" + "\r\n");
            _Module.memset((void*) gstruct97Ptr, 0, 62U);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 27;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 2;
            *(short*) gstruct97Ptr = (short) 44;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
            *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
            *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
            if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num2, (GStruct95*) 0) != 0 && ((int) numPtr1[2] & 15) == 0)
            {
              _Module.Sleep(2000U);
              this.textBox6.AppendText("Setting bit 3 @ 0x5BD" + "\r\n");
              _Module.memset((void*) gstruct97Ptr, 0, 62U);
              *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 16;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) 8;
              Struct103 struct103;
              _Module.memset((void*) &struct103, 0, 8U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct103 + 1) = (sbyte) 6;
              *(short*) gstruct97Ptr = (short) 44;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 0;
              *(int*) ((IntPtr) gstruct97Ptr + 12) = 8;
              *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
              *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct103;
              *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
              if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num2, (GStruct95*) 0) == 0)
              {
                this.textBox6.AppendText("Failed to set bit 3 @ 0x5B6 failed" + "\r\n");
                _Module.CloseHandle(fileA);
              }
              else
              {
                this.textBox6.AppendText("Executing code in Ram" + "\r\n");
                _Module.memset((void*) gstruct97Ptr, 0, 62U);
                *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -25;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 72;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 30) = (sbyte) 73;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 84;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 59;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) 7;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) 1;
                *(short*) gstruct97Ptr = (short) 44;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
                *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
                *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
                if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num2, (GStruct95*) 0) != 0 && ((int) numPtr1[2] & 15) == 0)
                {
                  this.textBox6.AppendText("Done!" + "\r\n");
                  this.Cursor = Cursors.Arrow;
                  _Module.CloseHandle(fileA);
                }
                else
                {
                  this.textBox6.AppendText("Ram Execute command failed" + "\r\n");
                  _Module.CloseHandle(fileA);
                }
              }
            }
            else
            {
              this.textBox6.AppendText("Failed to Eject 79Unlock Audio CD" + "\r\n");
              _Module.CloseHandle(fileA);
            }
          }
          else
          {
            this.textBox6.AppendText("Failed to Pause 79Unlock Audio CD" + "\r\n");
            _Module.CloseHandle(fileA);
          }
        }
        else
        {
          this.textBox6.AppendText("Failed to Play 79Unlock Audio CD" + "\r\n");
          _Module.CloseHandle(fileA);
        }
      }
    }

    private unsafe void method_390()
    {
      string str = (string) null;
      if (this.comboBox1.Items.Count == 0)
        return;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
      if (subKey.GetValue("Delay79") != null)
        str = subKey.GetValue("Delay79").ToString();
      else if (subKey.GetValue("Delay79") == null)
      {
        subKey.SetValue("Delay79", (object) "500");
        str = "500";
      }
      subKey.Close();
      int num3 = Convert.ToInt32(str);
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      this.textBox6.AppendText("Playing 79Unlock Audio CD" + "\r\n");
      uint num4 = 0U;
      Struct52 struct52;
      while (true)
      {
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) -91;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 1;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) 43;
        if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
        {
          if (num4 < 5U)
            ++num4;
          else
            break;
        }
        else
          goto label_11;
      }
      this.textBox6.AppendText("Failed to Play 79Unlock Audio CD" + "\r\n");
      return;
label_11:
      _Module.Sleep((uint) num3);
      this.textBox6.AppendText("Pausing 79Unlock Audio CD, after " + Convert.ToString(num3) + "mS" + "\r\n");
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 75;
      if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("Failed to Pause 79Unlock Audio CD" + "\r\n");
      }
      else
      {
        this.textBox6.AppendText("Ejecting 79Unlock Audio CD" + "\r\n");
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) 27;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 2;
        if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("Failed to Eject 79Unlock Audio CD" + "\r\n");
        }
        else
        {
          _Module.Sleep(2000U);
          _Module.memset((void*) &struct52, 0, 12U);
          Struct103 struct103;
          _Module.memset((void*) &struct103, 0, 8U);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) @struct52 = (sbyte) 85;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 16;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 8;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct103 + 1) = (sbyte) 6;
          uint num5;
          if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct103, &num5, 8U, (byte) 1, &gstruct3) != 0)
          {
            this.textBox6.AppendText("Failed to set bit 3 @ 0x5B6 failed" + "\r\n");
            this.Cursor = Cursors.Arrow;
          }
          else
          {
            _Module.memset((void*) &struct52, 0, 12U);
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) @struct52 = (sbyte) -25;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 72;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 73;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 84;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 59;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 7;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 1;
            if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
            {
              this.textBox6.AppendText("Ram Execute command failed" + "\r\n");
            }
            else
            {
              this.textBox6.AppendText("Done!" + "\r\n");
              this.Cursor = Cursors.Arrow;
            }
          }
        }
      }
    }

    private unsafe void method_391(byte* pByte_0, byte* pByte_1, int int_16)
    {
      Struct115 struct115;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @struct115 = 22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 4) = 27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 8) = 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 12) = 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 16) = 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 20) = 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 24) = 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 28) = 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 32) = 26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 36) = 7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 40) = 15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 44) = 21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 48) = 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 52) = 19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 56) = 29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 60) = 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 64) = 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 68) = 11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 72) = 24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 76) = 20;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 80) = 13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 84) = 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 88) = 4;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 92) = 30;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 96) = 9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 100) = 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 104) = 23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 108) = 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 112) = 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 116) = 31;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 120) = 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 124) = 25;
      int index = 0;
      while (index < int_16)
      {
        uint num = this.method_32(((uint) ((int) pByte_0[index] << 24 | (int) pByte_0[index + 1] << 16 | (int) pByte_0[index + 2] << 8) | (uint) pByte_0[index + 3]) ^ 2341178251U, (int*) &struct115);
        pByte_1[index] = (byte) (num >> 24);
        pByte_1[index + 1] = (byte) (num >> 16);
        pByte_1[index + 2] = (byte) (num >> 8);
        pByte_1[index + 3] = (byte) num;
        index += 4;
      }
    }

    private unsafe void method_392(byte* pByte_0, byte* pByte_1, int int_16)
    {
      Struct115 struct115;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) @struct115 = 2;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 4) = 8;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 8) = 17;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 12) = 24;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 16) = 30;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 20) = 23;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 24) = 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 28) = 13;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 32) = 5;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 36) = 31;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 40) = 20;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 44) = 12;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 48) = 18;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 52) = 10;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 56) = 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 60) = 26;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 64) = 21;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 68) = 27;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 72) = 11;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 76) = 16;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 80) = 14;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 84) = 28;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 88) = 7;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 92) = 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 96) = 22;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 100) = 3;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 104) = 19;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 108) = 9;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 112) = 29;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 116) = 15;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 120) = 25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &struct115 + 124) = 4;
      int index = 0;
      while (index < int_16)
      {
        uint num = this.method_32((uint) ((int) pByte_0[index] << 24 | (int) pByte_0[index + 1] << 16 | (int) pByte_0[index + 2] << 8) | (uint) pByte_0[index + 3], (int*) &struct115) ^ 2341178251U;
        pByte_1[index] = (byte) (num >> 24);
        pByte_1[index + 1] = (byte) (num >> 16);
        pByte_1[index + 2] = (byte) (num >> 8);
        pByte_1[index + 3] = (byte) num;
        index += 4;
      }
    }

    private int method_393(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
    {
      if (this.int_13 == 1 && this.int_15 == 0)
      {
        if (this.method_396(uint_0, uint_1, uint_2, uint_3) != 0)
          return 1;
      }
      else if (this.int_13 == 2 && this.int_15 == 0)
      {
        if (this.method_401(uint_0, uint_1, uint_2, uint_3) != 0)
          return 1;
      }
      else if (this.int_13 == 3 && this.int_15 == 0)
      {
        if (this.method_399(uint_0, uint_1, uint_2, uint_3) != 0)
          return 1;
      }
      else if (this.int_13 == 1 && this.int_15 == 1)
      {
        if (this.method_398(uint_0, uint_1, uint_2, uint_3) != 0)
          return 1;
      }
      else if (this.int_13 == 2 && this.int_15 == 1)
      {
        if (this.method_402(uint_0, uint_1, uint_2, uint_3) != 0)
          return 1;
      }
      else if (this.int_13 != 3 || this.int_15 != 1 || this.method_400(uint_0, uint_1, uint_2, uint_3) != 0)
        return 1;
      return 0;
    }

    private unsafe int method_394(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else
      {
        uint num1 = 0U;
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr < 65 | (int) *numPtr > 122)
          return 1;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return 1;
        this.Cursor = Cursors.WaitCursor;
        Struct32 struct32;
        for (uint index = uint_0; index < uint_0 + uint_1; ++index)
        {
          Struct116 struct116;
          _Module.memset((void*) &struct116, 48, 32768U);
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -25;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 72;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 30) = (sbyte) 73;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 84;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 1;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 34) = (sbyte) ((uint) ((int) index * (int) uint_2 & -16777216) >> 24);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 35) = (sbyte) ((uint) ((int) index * (int) uint_2 & 16711680) >> 16);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) ((uint) ((int) index * (int) uint_2 & 65280) >> 8);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) ((int) index * (int) uint_2 & (int) byte.MaxValue);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 38) = (sbyte) ((uint_2 & 65280U) >> 8);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) ((int) uint_2 & (int) byte.MaxValue);
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
          *(int*) ((IntPtr) gstruct97Ptr + 12) = (int) uint_2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct116;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num2;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num2, (GStruct95*) 0) != 0)
          {
            _Module.memcpy((void*) ((IntPtr) &struct32 + (int) num1 * (int) uint_2), (void*) &struct116, uint_2);
            ++num1;
            if ((int) (index % uint_3) == 0)
            {
              this.textBox6.AppendText(".");
              Application.DoEvents();
            }
          }
          else
          {
            this.textBox6.AppendText("Classic Dump Failed" + "\r\n");
            this.Cursor = Cursors.Arrow;
            _Module.CloseHandle(fileA);
            return 1;
          }
        }
        this.Cursor = Cursors.Arrow;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
        _Module.CloseHandle(fileA);
        return 0;
      }
    }

    private unsafe int method_395(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      uint num3 = 0U;
      this.Cursor = Cursors.WaitCursor;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct32 struct32;
      for (uint index = uint_0; index < uint_0 + uint_1; ++index)
      {
        Struct116 struct116;
        _Module.memset((void*) &struct116, 0, 32768U);
        Struct52 struct52;
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) -25;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 72;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 73;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 84;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 1;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) ((uint) ((int) index * (int) uint_2 & -16777216) >> 24);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) ((uint) ((int) index * (int) uint_2 & 16711680) >> 16);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) ((uint) ((int) index * (int) uint_2 & 65280) >> 8);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) ((int) index * (int) uint_2 & (int) byte.MaxValue);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) ((uint_2 & 65280U) >> 8);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) ((int) uint_2 & (int) byte.MaxValue);
        uint num4;
        if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct116, &num4, uint_2, (byte) 1, &gstruct3) == 0)
        {
          _Module.memcpy((void*) ((IntPtr) &struct32 + (int) num3 * (int) uint_2), (void*) &struct116, uint_2);
          ++num3;
          if ((int) (index % uint_3) == 0)
          {
            this.textBox6.AppendText(".");
            Application.DoEvents();
          }
        }
        else
        {
          this.textBox6.AppendText("Classic Dump Failed" + "\r\n");
          this.Cursor = Cursors.Arrow;
          return 1;
        }
      }
      this.Cursor = Cursors.Arrow;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
      return 0;
    }

    private unsafe int method_396(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else
      {
        Struct45 struct45;
        if (this.int_12 == 79)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_0, 384U);
        else if (this.int_12 == 59)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_2, 384U);
        else if (this.int_12 == 47)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_4, 384U);
        else if (this.int_12 == 36)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_1, 384U);
        else if (this.int_12 == 32)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_3, 384U);
        uint num1 = 0U;
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        string str = this.comboBox16.Text.Substring(0, 1);
        sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr < 65 | (int) *numPtr > 122)
          return 1;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
        {
          this.textBox6.AppendText("Failed to open drive " + str + "\r\n");
          return 1;
        }
        else
        {
          this.Cursor = Cursors.WaitCursor;
          uint num2 = 384U;
          Struct32 struct32;
          for (uint index1 = uint_0; index1 < uint_0 + uint_1; ++index1)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &struct45 + 2) = (int) uint_2;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &struct45 + 11) = (int) index1 * (int) uint_2;
            uint num3 = 0U;
            for (uint index2 = 0U; index2 < num2 - 2U; ++index2)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              num3 += (uint) ^(byte&) ((IntPtr) &struct45 + (int) index2);
            }
            uint num4 = (uint) (65536 - ((int) num3 & (int) ushort.MaxValue));
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct45 + ((int) num2 - 2)) = (sbyte) ((int) num4 & (int) byte.MaxValue);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct45 + ((int) num2 - 1)) = (sbyte) ((num4 & 65280U) >> 8);
            _Module.memset((void*) gstruct97Ptr, 0, 62U);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -25;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 72;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 30) = (sbyte) 73;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 84;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 59;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) 6;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 38) = (sbyte) ((num2 & 65280U) >> 8);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) ((int) num2 & (int) byte.MaxValue);
            *(short*) gstruct97Ptr = (short) 44;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 0;
            *(int*) ((IntPtr) gstruct97Ptr + 12) = (int) num2;
            *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
            *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct45;
            *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
            uint num5;
            if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) != 0)
            {
              Struct116 struct116;
              _Module.memset((void*) &struct116, 48, 32768U);
              _Module.memset((void*) gstruct97Ptr, 0, 62U);
              *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -25;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 72;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 30) = (sbyte) 73;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 84;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 59;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) 7;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) 1;
              *(short*) gstruct97Ptr = (short) 44;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
              *(int*) ((IntPtr) gstruct97Ptr + 12) = (int) uint_2;
              *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
              *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct116;
              *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
              if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) != 0)
              {
                num2 = 20U;
                _Module.memcpy((void*) ((IntPtr) &struct32 + (int) num1 * (int) uint_2), (void*) &struct116, uint_2);
                ++num1;
                if ((int) (index1 % uint_3) == 0)
                {
                  this.textBox6.AppendText(".");
                  Application.DoEvents();
                }
              }
              else
              {
                this.textBox6.AppendText("Ram Upload - Execute Failed" + "\r\n");
                _Module.CloseHandle(fileA);
                return 1;
              }
            }
            else
            {
              this.textBox6.AppendText("Ram Upload - Upload Failed" + "\r\n");
              _Module.CloseHandle(fileA);
              return 1;
            }
          }
          this.Cursor = Cursors.Arrow;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
          _Module.CloseHandle(fileA);
          return 0;
        }
      }
    }

    private unsafe int method_397(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else
      {
        Struct45 struct45;
        if (this.int_12 == 79)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_0, 384U);
        else if (this.int_12 == 59)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_2, 384U);
        else if (this.int_12 == 47)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_4, 384U);
        else if (this.int_12 == 36)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_1, 384U);
        else if (this.int_12 == 32)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_3, 384U);
        uint num1 = 0U;
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        string str = this.comboBox16.Text.Substring(0, 1);
        sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr < 65 | (int) *numPtr > 122)
          return 1;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
        {
          this.textBox6.AppendText("Failed to open drive " + str + "\r\n");
          return 1;
        }
        else
        {
          this.Cursor = Cursors.WaitCursor;
          uint num2 = 384U;
          Struct32 struct32;
          for (uint index1 = uint_0; index1 < uint_0 + uint_1; ++index1)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &struct45 + 2) = (int) uint_2;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &struct45 + 11) = (int) uint_0 * (int) uint_2;
            uint num3 = 0U;
            for (uint index2 = 0U; index2 < num2 - 2U; ++index2)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              num3 += (uint) ^(byte&) ((IntPtr) &struct45 + (int) index2);
            }
            uint num4 = (uint) (65536 - ((int) num3 & (int) ushort.MaxValue));
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct45 + ((int) num2 - 2)) = (sbyte) ((int) num4 & (int) byte.MaxValue);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct45 + ((int) num2 - 1)) = (sbyte) ((num4 & 65280U) >> 8);
            _Module.memset((void*) gstruct97Ptr, 0, 62U);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -25;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 72;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 30) = (sbyte) 73;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 84;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 59;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) 6;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 38) = (sbyte) ((num2 & 65280U) >> 8);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) ((int) num2 & (int) byte.MaxValue);
            *(short*) gstruct97Ptr = (short) 44;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 0;
            *(int*) ((IntPtr) gstruct97Ptr + 12) = (int) num2;
            *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
            *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct45;
            *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
            uint num5;
            if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) != 0)
            {
              Struct116 struct116;
              _Module.memset((void*) &struct116, 48, 32768U);
              _Module.memset((void*) gstruct97Ptr, 0, 62U);
              *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -25;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 72;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 30) = (sbyte) 73;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 84;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 59;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) 7;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) 1;
              *(short*) gstruct97Ptr = (short) 44;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
              *(int*) ((IntPtr) gstruct97Ptr + 12) = (int) uint_2;
              *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
              *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct116;
              *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
              if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) != 0)
              {
                num2 = 20U;
                _Module.memcpy((void*) ((IntPtr) &struct32 + (int) num1 * (int) uint_2), (void*) &struct116, uint_2);
                ++num1;
                if ((int) (index1 % uint_3) == 0)
                {
                  this.textBox6.AppendText(".");
                  Application.DoEvents();
                }
              }
              else
              {
                this.textBox6.AppendText("Ram Upload - Execute Failed" + "\r\n");
                _Module.CloseHandle(fileA);
                return 1;
              }
            }
            else
            {
              this.textBox6.AppendText("Ram Upload - Upload Failed" + "\r\n");
              _Module.CloseHandle(fileA);
              return 1;
            }
          }
          this.Cursor = Cursors.Arrow;
          GStruct5* pGstruct5_0 = _Module.fopen((sbyte*) &_Module.struct74_5, (sbyte*) &_Module.struct18_5);
          int num6 = (int) _Module.fwrite((void*) &struct32, uint_2 * uint_1, 1U, pGstruct5_0);
          _Module.fclose(pGstruct5_0);
          _Module.CloseHandle(fileA);
          return 0;
        }
      }
    }

    private unsafe int method_398(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      Struct45 struct45;
      if (this.int_12 == 79)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_0, 384U);
      else if (this.int_12 == 59)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_2, 384U);
      else if (this.int_12 == 47)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_4, 384U);
      else if (this.int_12 == 36)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_1, 384U);
      else if (this.int_12 == 32)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_3, 384U);
      uint num3 = 0U;
      this.Cursor = Cursors.WaitCursor;
      uint uint_3_1 = 384U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct32 struct32;
      for (uint index1 = uint_0; index1 < uint_0 + uint_1; ++index1)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &struct45 + 2) = (int) uint_2;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &struct45 + 11) = (int) index1 * (int) uint_2;
        uint num4 = 0U;
        for (uint index2 = 0U; index2 < uint_3_1 - 2U; ++index2)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          num4 += (uint) ^(byte&) ((IntPtr) &struct45 + (int) index2);
        }
        uint num5 = (uint) (65536 - ((int) num4 & (int) ushort.MaxValue));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct45 + ((int) uint_3_1 - 2)) = (sbyte) ((int) num5 & (int) byte.MaxValue);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct45 + ((int) uint_3_1 - 1)) = (sbyte) ((num5 & 65280U) >> 8);
        Struct52 struct52;
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) -25;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 72;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 73;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 84;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 59;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 6;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) ((uint_3_1 & 65280U) >> 8);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) ((int) uint_3_1 & (int) byte.MaxValue);
        uint num6;
        if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct45, &num6, uint_3_1, (byte) 1, &gstruct3) == 0)
        {
          _Module.memset((void*) &struct52, 0, 12U);
          Struct116 struct116;
          _Module.memset((void*) &struct116, 0, 32768U);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) @struct52 = (sbyte) -25;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 72;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 73;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 84;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 59;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 7;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 1;
          if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct116, &num6, uint_2, (byte) 1, &gstruct3) == 0)
          {
            uint_3_1 = 20U;
            _Module.memcpy((void*) ((IntPtr) &struct32 + (int) num3 * (int) uint_2), (void*) &struct116, uint_2);
            ++num3;
            if ((int) (index1 % uint_3) == 0)
            {
              this.textBox6.AppendText(".");
              Application.DoEvents();
            }
          }
          else
          {
            this.textBox6.AppendText("Ram Upload - Execute Failed" + "\r\n");
            this.Cursor = Cursors.Arrow;
            return 1;
          }
        }
        else
        {
          this.textBox6.AppendText("Ram Upload - Upload Failed" + "\r\n");
          this.Cursor = Cursors.Arrow;
          return 1;
        }
      }
      this.Cursor = Cursors.Arrow;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
      return 0;
    }

    private unsafe int method_399(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else
      {
        Struct45 struct45;
        if (this.int_12 == 79)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_0, 384U);
        else if (this.int_12 == 59)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_2, 384U);
        else if (this.int_12 == 47)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_4, 384U);
        else if (this.int_12 == 36)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_1, 384U);
        else if (this.int_12 == 32)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_3, 384U);
        uint num1 = 0U;
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        sbyte* numPtr = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr < 65 | (int) *numPtr > 122)
          return 1;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return 1;
        this.Cursor = Cursors.WaitCursor;
        uint num2 = 384U;
        Struct32 struct32;
        for (uint index1 = uint_0; index1 < uint_0 + uint_1; ++index1)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ((IntPtr) &struct45 + 2) = (int) uint_2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ((IntPtr) &struct45 + 11) = (int) index1 * (int) uint_2;
          uint num3 = 0U;
          for (uint index2 = 0U; index2 < 382U; ++index2)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            num3 += (uint) ^(byte&) ((IntPtr) &struct45 + (int) index2);
          }
          uint num4 = (uint) (65536 - ((int) num3 & (int) ushort.MaxValue));
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct45 + 382) = (sbyte) ((int) num4 & (int) byte.MaxValue);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct45 + 383) = (sbyte) ((num4 & 65280U) >> 8);
          uint num5;
          for (uint index2 = 0U; index2 < num2; ++index2)
          {
            _Module.memset((void*) gstruct97Ptr, 0, 62U);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -25;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 72;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 30) = (sbyte) 73;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 84;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) -52;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) ^(byte&) ((IntPtr) &struct45 + (int) index2);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) ((uint) ((int) index2 + int.MinValue & -16777216) >> 24);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) ((uint) ((int) index2 + int.MinValue & 16711680) >> 16);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 38) = (sbyte) ((uint) ((int) index2 + int.MinValue & 65280) >> 8);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) ((int) index2 + int.MinValue & (int) byte.MaxValue);
            *(short*) gstruct97Ptr = (short) 44;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
            *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
            *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
            if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) == 0)
            {
              this.textBox6.AppendText("Ram Poke Failed" + "\r\n");
              _Module.CloseHandle(fileA);
              return 1;
            }
          }
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 16;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) 8;
          Struct103 struct103;
          _Module.memset((void*) &struct103, 0, 8U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct103 + 1) = (sbyte) 6;
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 0;
          *(int*) ((IntPtr) gstruct97Ptr + 12) = 8;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct103;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) != 0 || _Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) != 0 || _Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) != 0)
          {
            Struct116 struct116;
            _Module.memset((void*) &struct116, 48, uint_2);
            _Module.memset((void*) gstruct97Ptr, 0, 62U);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 16;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 72;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 76;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 34) = (sbyte) 1;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) 1;
            *(short*) gstruct97Ptr = (short) 44;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
            *(int*) ((IntPtr) gstruct97Ptr + 12) = (int) uint_2;
            *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
            *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct116;
            *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
            if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) != 0)
            {
              _Module.memcpy((void*) ((IntPtr) &struct32 + (int) num1 * (int) uint_2), (void*) &struct116, uint_2);
              ++num1;
              if ((int) (index1 % uint_3) == 0)
              {
                this.textBox6.AppendText(".");
                Application.DoEvents();
              }
              _Module.memset((void*) gstruct97Ptr, 0, 62U);
              *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
              *(short*) gstruct97Ptr = (short) 44;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
              *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
              *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
              if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) != 0 || _Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) != 0)
              {
                num2 = 16U;
              }
              else
              {
                this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
                this.Cursor = Cursors.Arrow;
                _Module.CloseHandle(fileA);
                return 1;
              }
            }
            else
            {
              this.textBox6.AppendText("Ram Poke Dump Failed" + "\r\n");
              _Module.CloseHandle(fileA);
              return 1;
            }
          }
          else
          {
            this.textBox6.AppendText("Set (59E) bit 3 via Mode Select(10) failed" + "\r\n");
            _Module.CloseHandle(fileA);
            return 1;
          }
        }
        this.Cursor = Cursors.Arrow;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
        _Module.CloseHandle(fileA);
        return 0;
      }
    }

    private unsafe int method_400(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
    {
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      Struct45 struct45;
      if (this.int_12 == 79)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_0, 384U);
      else if (this.int_12 == 59)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_2, 384U);
      else if (this.int_12 == 47)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_4, 384U);
      else if (this.int_12 == 36)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_1, 384U);
      else if (this.int_12 == 32)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_3, 384U);
      uint num3 = 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      this.Cursor = Cursors.WaitCursor;
      uint num4 = 384U;
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 85;
      if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0 && _Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
        this.Cursor = Cursors.Arrow;
        return 1;
      }
      else
      {
        Struct32 struct32;
        for (uint index1 = uint_0; index1 < uint_0 + uint_1; ++index1)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ((IntPtr) &struct45 + 2) = (int) uint_2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ((IntPtr) &struct45 + 11) = (int) index1 * (int) uint_2;
          uint num5 = 0U;
          for (uint index2 = 0U; index2 < 382U; ++index2)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            num5 += (uint) ^(byte&) ((IntPtr) &struct45 + (int) index2);
          }
          uint num6 = (uint) (65536 - ((int) num5 & (int) ushort.MaxValue));
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct45 + 382) = (sbyte) ((int) num6 & (int) byte.MaxValue);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct45 + 383) = (sbyte) ((num6 & 65280U) >> 8);
          for (uint index2 = 0U; index2 < num4; ++index2)
          {
            _Module.memset((void*) &struct52, 0, 12U);
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) @struct52 = (sbyte) -25;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 72;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 73;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 84;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) -52;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) ^(byte&) ((IntPtr) &struct45 + (int) index2);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) ((uint) ((int) index2 + int.MinValue & -16777216) >> 24);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) ((uint) ((int) index2 + int.MinValue & 16711680) >> 16);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) ((uint) ((int) index2 + int.MinValue & 65280) >> 8);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) ((int) index2 + int.MinValue & (int) byte.MaxValue);
            if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) != 0)
            {
              this.textBox6.AppendText("Ram Poke Failed" + "\r\n");
              this.Cursor = Cursors.Arrow;
              return 1;
            }
          }
          _Module.memset((void*) &struct52, 0, 12U);
          Struct103 struct103;
          _Module.memset((void*) &struct103, 0, 8U);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) @struct52 = (sbyte) 85;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 16;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 8;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct103 + 1) = (sbyte) 6;
          uint num7;
          if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct103, &num7, 8U, (byte) 1, &gstruct3) == 0)
          {
            _Module.memset((void*) &struct52, 0, 12U);
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) @struct52 = (sbyte) 85;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 16;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 72;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 76;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 1;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 1;
            Struct116 struct116;
            if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct116, &num7, uint_2, (byte) 1, &gstruct3) == 0)
            {
              _Module.memcpy((void*) ((IntPtr) &struct32 + (int) num3 * (int) uint_2), (void*) &struct116, uint_2);
              ++num3;
              if ((int) (index1 % uint_3) == 0)
              {
                this.textBox6.AppendText(".");
                Application.DoEvents();
              }
              _Module.memset((void*) &struct52, 0, 12U);
              _Module.memset((void*) &struct103, 0, 8U);
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) @struct52 = (sbyte) 85;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 16;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 8;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct103 + 1) = (sbyte) 6;
              if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct103, &num7, 8U, (byte) 1, &gstruct3) == 0)
              {
                num4 = 16U;
              }
              else
              {
                this.textBox6.AppendText("Execute Disable Failed" + "\r\n");
                this.Cursor = Cursors.Arrow;
                return 1;
              }
            }
            else
            {
              this.textBox6.AppendText("Execute Failed" + "\r\n");
              this.Cursor = Cursors.Arrow;
              return 1;
            }
          }
          else
          {
            this.textBox6.AppendText("Execute Enable Failed" + "\r\n");
            this.Cursor = Cursors.Arrow;
            return 1;
          }
        }
        this.Cursor = Cursors.Arrow;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
        return 0;
      }
    }

    private unsafe int method_401(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
    {
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else
      {
        Struct45 struct45;
        if (this.int_12 == 79)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_0, 384U);
        else if (this.int_12 == 59)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_2, 384U);
        else if (this.int_12 == 47)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_4, 384U);
        else if (this.int_12 == 36)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_1, 384U);
        else if (this.int_12 == 32)
          _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_3, 384U);
        uint num1 = 0U;
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return 1;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
          return 1;
        this.Cursor = Cursors.WaitCursor;
        Struct32 struct32;
        for (uint index1 = uint_0; index1 < uint_0 + uint_1; ++index1)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ((IntPtr) &struct45 + 2) = (int) uint_2;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ((IntPtr) &struct45 + 11) = (int) index1 * (int) uint_2;
          uint num2 = 0U;
          for (uint index2 = 0U; index2 < 382U; ++index2)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            num2 += (uint) ^(byte&) ((IntPtr) &struct45 + (int) index2);
          }
          uint num3 = (uint) (65536 - ((int) num2 & (int) ushort.MaxValue));
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct45 + 382) = (sbyte) ((int) num3 & (int) byte.MaxValue);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct45 + 383) = (sbyte) ((num3 & 65280U) >> 8);
          _Module.memset((void*) gstruct97Ptr, 0, 62U);
          *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
          *(short*) gstruct97Ptr = (short) 44;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
          *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
          *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
          *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
          uint num4;
          if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num4, (GStruct95*) 0) != 0 || _Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num4, (GStruct95*) 0) != 0)
          {
            _Module.memset((void*) gstruct97Ptr, 0, 62U);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 16;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) 16;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) 1;
            Struct28 struct28;
            _Module.memset((void*) &struct28, 0, 16U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct28 + 9) = (sbyte) 6;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct28 + 10) = (sbyte) 72;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct28 + 11) = (sbyte) 76;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct28 + 12) = (sbyte) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct28 + 13) = (sbyte) 0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct28 + 14) = (sbyte) 1;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct28 + 15) = sbyte.MinValue;
            *(short*) gstruct97Ptr = (short) 44;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 0;
            *(int*) ((IntPtr) gstruct97Ptr + 12) = 16;
            *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
            *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct28;
            *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
            if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num4, (GStruct95*) 0) != 0 && ((int) numPtr1[2] & 15) == 0)
            {
              _Module.memset((void*) gstruct97Ptr, 0, 62U);
              _Module.memset((void*) &_Module.struct119_1, 0, 392U);
              *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 16;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 35) = (sbyte) 1;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) -120;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) 1;
              _Module.memset((void*) &_Module.struct119_1, 0, 392U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct119_1 + 4) = (sbyte) 72;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct119_1 + 5) = (sbyte) 76;
              _Module.memcpy((void*) ((IntPtr) &_Module.struct119_1 + 8), (void*) &struct45, 384U);
              *(short*) gstruct97Ptr = (short) 44;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 0;
              *(int*) ((IntPtr) gstruct97Ptr + 12) = 392;
              *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
              *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &_Module.struct119_1;
              *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
              if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num4, (GStruct95*) 0) != 0 && ((int) numPtr1[2] & 15) == 0)
              {
                Struct116 struct116;
                _Module.memset((void*) &struct116, 0, 32768U);
                _Module.memset((void*) gstruct97Ptr, 0, 62U);
                *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 16;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 72;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 76;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 34) = (sbyte) 1;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) 1;
                *(short*) gstruct97Ptr = (short) 44;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 1;
                *(int*) ((IntPtr) gstruct97Ptr + 12) = (int) uint_2;
                *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
                *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct116;
                *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
                if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num4, (GStruct95*) 0) != 0)
                {
                  _Module.memcpy((void*) ((IntPtr) &struct32 + (int) num1 * (int) uint_2), (void*) &struct116, uint_2);
                  ++num1;
                  if ((int) (index1 % uint_3) == 0)
                  {
                    this.textBox6.AppendText(".");
                    Application.DoEvents();
                  }
                }
                else
                {
                  this.textBox6.AppendText("Ram Execute Failed" + "\r\n");
                  this.Cursor = Cursors.Arrow;
                  _Module.CloseHandle(fileA);
                  return 1;
                }
              }
              else
              {
                this.textBox6.AppendText("Upload buffer failed" + "\r\n");
                _Module.CloseHandle(fileA);
                this.Cursor = Cursors.Arrow;
                return 1;
              }
            }
            else
            {
              this.textBox6.AppendText("Configure Upload Failed" + "\r\n");
              this.Cursor = Cursors.Arrow;
              _Module.CloseHandle(fileA);
              return 1;
            }
          }
          else
          {
            this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
            this.Cursor = Cursors.Arrow;
            _Module.CloseHandle(fileA);
            return 1;
          }
        }
        this.Cursor = Cursors.Arrow;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, 262144U);
        _Module.CloseHandle(fileA);
        return 0;
      }
    }

    private unsafe int method_402(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
    {
      uint uint_2_1 = uint_2 * uint_1;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num1 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num2 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num1 * 72 + 4) != 160 ? 16U : 0U;
      Struct45 struct45;
      if (this.int_12 == 79)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_0, 384U);
      else if (this.int_12 == 59)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_2, 384U);
      else if (this.int_12 == 47)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_4, 384U);
      else if (this.int_12 == 36)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_1, 384U);
      else if (this.int_12 == 32)
        _Module.memcpy((void*) &struct45, (void*) &_Module.struct45_3, 384U);
      uint num3 = 0U;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      this.Cursor = Cursors.WaitCursor;
      Struct32 struct32;
      for (uint index1 = uint_0; index1 < uint_0 + uint_1; ++index1)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &struct45 + 2) = (int) uint_2;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) ((IntPtr) &struct45 + 11) = (int) index1 * (int) uint_2;
        uint num4 = 0U;
        for (uint index2 = 0U; index2 < 382U; ++index2)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          num4 += (uint) ^(byte&) ((IntPtr) &struct45 + (int) index2);
        }
        uint num5 = (uint) (65536 - ((int) num4 & (int) ushort.MaxValue));
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct45 + 382) = (sbyte) ((int) num5 & (int) byte.MaxValue);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct45 + 383) = (sbyte) ((num5 & 65280U) >> 8);
        Struct52 struct52;
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) 85;
        if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) == 0 || _Module.smethod_15((byte*) &struct52, 12U, (byte) num2, (byte) 1, &gstruct3) == 0)
        {
          _Module.memset((void*) &struct52, 0, 12U);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) @struct52 = (sbyte) 85;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 16;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 16;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 1;
          Struct117 struct117;
          _Module.memset((void*) &struct117, 0, 22U);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct117 + 9) = (sbyte) 6;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct117 + 10) = (sbyte) 72;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct117 + 11) = (sbyte) 76;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct117 + 12) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct117 + 13) = (sbyte) 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct117 + 14) = (sbyte) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct117 + 15) = sbyte.MinValue;
          uint num6;
          if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct117, &num6, 16U, (byte) 1, &gstruct3) == 0)
          {
            _Module.memset((void*) &struct52, 0, 12U);
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) @struct52 = (sbyte) 85;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 16;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) 1;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) -120;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 1;
            _Module.memset((void*) &_Module.struct119_0, 0, 392U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &_Module.struct119_0 + 4) = (sbyte) 72;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &_Module.struct119_0 + 5) = (sbyte) 76;
            _Module.memcpy((void*) ((IntPtr) &_Module.struct119_0 + 8), (void*) &struct45, 384U);
            if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &_Module.struct119_0, &num6, 392U, (byte) 1, &gstruct3) == 0)
            {
              _Module.memset((void*) &struct52, 0, 12U);
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) @struct52 = (sbyte) 85;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 16;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 72;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 76;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 1;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 1;
              Struct116 struct116;
              if (_Module.smethod_16((byte*) &struct52, 12U, (byte) num2, (ushort) 512, (void*) &struct116, &num6, uint_2, (byte) 1, &gstruct3) == 0)
              {
                _Module.memcpy((void*) ((IntPtr) &struct32 + (int) num3 * (int) uint_2), (void*) &struct116, uint_2);
                ++num3;
                if ((int) (index1 % uint_3) == 0)
                {
                  this.textBox6.AppendText(".");
                  Application.DoEvents();
                }
              }
              else
              {
                this.textBox6.AppendText("Execute Failed" + "\r\n");
                this.Cursor = Cursors.Arrow;
                return 1;
              }
            }
            else
            {
              this.textBox6.AppendText("Upload buffer failed" + "\r\n");
              this.Cursor = Cursors.Arrow;
              return 1;
            }
          }
          else
          {
            this.textBox6.AppendText("Configure Upload Failed" + "\r\n");
            this.Cursor = Cursors.Arrow;
            return 1;
          }
        }
        else
        {
          this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
          this.Cursor = Cursors.Arrow;
          return 1;
        }
      }
      this.Cursor = Cursors.Arrow;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      _Module.memcpy((void*) ^(int&) ((IntPtr) &_Module.struct121_0 + 7172), (void*) &struct32, uint_2_1);
      return 0;
    }

    private unsafe int method_403(byte* pByte_0, uint uint_0, uint uint_1)
    {
      if (this.int_13 == 1 && this.int_15 == 0)
      {
        if (this.method_404(pByte_0, uint_0, uint_1) != 0)
          return 1;
      }
      else if (this.int_13 == 2 && this.int_15 == 0)
      {
        if (this.method_406(pByte_0, uint_0, uint_1) != 0)
          return 1;
      }
      else if (this.int_13 == 3 && this.int_15 == 0)
      {
        if (this.method_408(pByte_0, uint_0, uint_1) != 0)
          return 1;
      }
      else if (this.int_13 == 1 && this.int_15 == 1)
      {
        if (this.method_405(pByte_0, uint_0, uint_1) != 0)
          return 1;
      }
      else if (this.int_13 == 2 && this.int_15 == 1)
      {
        if (this.method_407(pByte_0, uint_0, uint_1) != 0)
          return 1;
      }
      else if (this.int_13 != 3 || this.int_15 != 1 || this.method_409(pByte_0, uint_0, uint_1) != 0)
        return 1;
      return 0;
    }

    private unsafe int method_404(byte* pByte_0, uint uint_0, uint uint_1)
    {
      ushort num1 = (ushort) byte.MaxValue;
      if (this.comboBox16.Items.Count == 0)
      {
        int num2 = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        string str = this.comboBox16.Text.Substring(0, 1);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return 1;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
        {
          this.textBox6.AppendText("Failed to open drive " + str + "\r\n");
          return 1;
        }
        else
        {
          Struct63 struct63;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) ((int) uint_0 & (int) byte.MaxValue);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) ((uint_0 & 65280U) >> 8);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) ((uint_0 & 16711680U) >> 16);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) @struct63 = (sbyte) ((uint_0 & 4278190080U) >> 24);
          this.method_6((byte*) &struct63, 4U, 0U);
          this.textBox6.AppendText("Flashing Sector" + " " + this.string_0 + "\r\n");
          uint uint_2 = uint_1 + 2184U;
          if (((int) uint_2 & 3) != 0)
            uint_2 += (uint) (4 - ((int) uint_2 & 3));
          byte* numPtr3 = (byte*) _Module.malloc(uint_2);
          if ((IntPtr) numPtr3 == IntPtr.Zero)
          {
            _Module.CloseHandle(fileA);
            return 1;
          }
          else
          {
            _Module.memset((void*) numPtr3, 0, uint_2);
            uint num2;
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) @num1 == 0)
            {
              num2 = uint_0;
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) @uint_0 = (sbyte) ^(byte&) ((IntPtr) &num2 + 3);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &uint_0 + 1) = (sbyte) ^(byte&) ((IntPtr) &num2 + 2);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &uint_0 + 2) = (sbyte) ^(byte&) ((IntPtr) &num2 + 1);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &uint_0 + 3) = (sbyte) ^(byte&) @num2;
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) @num2 = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 3);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &num2 + 1) = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 2);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &num2 + 2) = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 1);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &num2 + 3) = (sbyte) ^(byte&) @uint_1;
            }
            else
              num2 = uint_1;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &_Module.struct54_0 + 8) = (int) uint_0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &_Module.struct54_0 + 30) = (int) uint_0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &_Module.struct54_0 + 48) = (int) num2;
            if (this.int_12 == 79)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -15;
            }
            else if (this.int_12 == 59)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -35;
            }
            else if (this.int_12 == 47)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -39;
            }
            else if (this.int_12 == 36)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -47;
            }
            else if (this.int_12 == 32)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -43;
            }
            _Module.memcpy((void*) numPtr3, (void*) &_Module.struct54_0, 74U);
            _Module.memcpy((void*) (numPtr3 + 74), (void*) &_Module.struct44_0, 1136U);
            _Module.memcpy((void*) (numPtr3 + 1210), (void*) &_Module.struct57_0, 972U);
            _Module.memcpy((void*) (numPtr3 + 2182), (void*) (pByte_0 + ((int) uint_0 - -1879048192)), uint_1);
            uint num3 = 0U;
            for (num2 = 0U; num2 < uint_2 - 2U; ++num2)
              num3 += (uint) numPtr3[(int) num2];
            uint num4 = (uint) (65536 - ((int) num3 & (int) ushort.MaxValue));
            numPtr3[(int) uint_2 - 2] = (byte) ((int) num4 & (int) byte.MaxValue);
            numPtr3[(int) uint_2 - 1] = (byte) ((num4 & 65280U) >> 8);
            _Module.memset((void*) gstruct97Ptr, 0, 62U);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -25;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 72;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 30) = (sbyte) 73;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 84;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 59;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) 6;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 38) = (sbyte) ((uint_2 & 65280U) >> 8);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) ((int) uint_2 & (int) byte.MaxValue);
            *(short*) gstruct97Ptr = (short) 44;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 0;
            *(int*) ((IntPtr) gstruct97Ptr + 12) = (int) uint_2;
            *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
            *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) numPtr3;
            *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
            uint num5;
            if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) == 0)
            {
              this.textBox6.AppendText("\r\n" + "Sector Upload Failed" + "\r\n");
              _Module.CloseHandle(fileA);
              return 1;
            }
            else
            {
              _Module.memset((void*) gstruct97Ptr, 0, 62U);
              *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -25;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 72;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 30) = (sbyte) 73;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 84;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 59;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) 7;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) 1;
              *(short*) gstruct97Ptr = (short) 44;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
              *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
              *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
              if (_Module.DeviceIoControl(fileA, 315396U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) != 0 && ((int) numPtr1[2] & 15) == 0)
              {
                _Module.CloseHandle(fileA);
                _Module.free((void*) numPtr3);
                return 0;
              }
              else
              {
                this.textBox6.AppendText("Flash Code Execute Failed!" + "\r\n");
                _Module.CloseHandle(fileA);
                return 1;
              }
            }
          }
        }
      }
    }

    private unsafe int method_405(byte* pByte_0, uint uint_0, uint uint_1)
    {
      ushort num1 = (ushort) byte.MaxValue;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num2 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num2 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num3 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num2 * 72 + 4) != 160 ? 16U : 0U;
      Struct63 struct63;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) ((int) uint_0 & (int) byte.MaxValue);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) ((uint_0 & 65280U) >> 8);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) ((uint_0 & 16711680U) >> 16);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) ((uint_0 & 4278190080U) >> 24);
      this.method_6((byte*) &struct63, 4U, 0U);
      this.textBox6.AppendText("Flashing Sector" + " " + this.string_0 + "\r\n");
      uint num4 = uint_1 + 2184U;
      if (((int) num4 & 3) != 0)
        num4 += (uint) (4 - ((int) num4 & 3));
      byte* numPtr = (byte*) _Module.malloc(num4);
      if ((IntPtr) numPtr == IntPtr.Zero)
        return 1;
      _Module.memset((void*) numPtr, 0, num4);
      uint num5;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) @num1 == 0)
      {
        num5 = uint_0;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @uint_0 = (sbyte) ^(byte&) ((IntPtr) &num5 + 3);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &uint_0 + 1) = (sbyte) ^(byte&) ((IntPtr) &num5 + 2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &uint_0 + 2) = (sbyte) ^(byte&) ((IntPtr) &num5 + 1);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &uint_0 + 3) = (sbyte) ^(byte&) @num5;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @num5 = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 3);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &num5 + 1) = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &num5 + 2) = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 1);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &num5 + 3) = (sbyte) ^(byte&) @uint_1;
      }
      else
        num5 = uint_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &_Module.struct54_0 + 8) = (int) uint_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &_Module.struct54_0 + 30) = (int) uint_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &_Module.struct54_0 + 48) = (int) num5;
      if (this.int_12 == 79)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -15;
      }
      else if (this.int_12 == 59)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -35;
      }
      else if (this.int_12 == 47)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -39;
      }
      else if (this.int_12 == 36)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -47;
      }
      else if (this.int_12 == 32)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -43;
      }
      _Module.memcpy((void*) numPtr, (void*) &_Module.struct54_0, 74U);
      _Module.memcpy((void*) (numPtr + 74), (void*) &_Module.struct44_0, 1136U);
      _Module.memcpy((void*) (numPtr + 1210), (void*) &_Module.struct57_0, 972U);
      _Module.memcpy((void*) (numPtr + 2182), (void*) (pByte_0 + ((int) uint_0 - -1879048192)), uint_1);
      uint num6 = 0U;
      for (num5 = 0U; num5 < num4 - 2U; ++num5)
        num6 += (uint) numPtr[(int) num5];
      uint num7 = (uint) (65536 - ((int) num6 & (int) ushort.MaxValue));
      numPtr[(int) num4 - 2] = (byte) ((int) num7 & (int) byte.MaxValue);
      numPtr[(int) num4 - 1] = (byte) ((num7 & 65280U) >> 8);
      this.Cursor = Cursors.WaitCursor;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) -25;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 72;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 73;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 84;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 59;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 6;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) ((num4 & 65280U) >> 8);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) ((int) num4 & (int) byte.MaxValue);
      uint num8;
      if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num3, (ushort) 512, (void*) numPtr, &num8, num4, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("Ram Upload Dump Failed" + "\r\n");
        this.Cursor = Cursors.Arrow;
        return 1;
      }
      else
      {
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) -25;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 72;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 73;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 84;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 59;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) 7;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 1;
        if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num3, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("Flash Code Execute Failed!" + "\r\n");
          this.Cursor = Cursors.Arrow;
          _Module.free((void*) numPtr);
          return 1;
        }
        else
        {
          this.Cursor = Cursors.Arrow;
          _Module.free((void*) numPtr);
          return 0;
        }
      }
    }

    private unsafe int method_406(byte* pByte_0, uint uint_0, uint uint_1)
    {
      ushort num1 = (ushort) byte.MaxValue;
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num2 = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        string str = this.comboBox16.Text.Substring(0, 1);
        sbyte* numPtr1 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr1 < 65 | (int) *numPtr1 > 122)
          return 1;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr1));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
        {
          this.textBox6.AppendText("Failed to open drive " + str + "\r\n");
          return 1;
        }
        else
        {
          this.Cursor = Cursors.WaitCursor;
          Struct63 struct63;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) ((int) uint_0 & (int) byte.MaxValue);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) ((uint_0 & 65280U) >> 8);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) ((uint_0 & 16711680U) >> 16);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) @struct63 = (sbyte) ((uint_0 & 4278190080U) >> 24);
          this.method_6((byte*) &struct63, 4U, 0U);
          this.textBox6.AppendText("Flashing Sector" + " " + this.string_0 + "\r\n");
          uint uint_2 = uint_1 + 2184U;
          if (((int) uint_2 & 3) != 0)
            uint_2 += (uint) (4 - ((int) uint_2 & 3));
          byte* numPtr2 = (byte*) _Module.malloc(uint_2);
          if ((IntPtr) numPtr2 == IntPtr.Zero)
          {
            this.textBox6.AppendText("Malloc failed!" + "\r\n");
            _Module.CloseHandle(fileA);
            this.Cursor = Cursors.Arrow;
            return 1;
          }
          else
          {
            _Module.memset((void*) numPtr2, 0, uint_2);
            uint num2;
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) @num1 == 0)
            {
              num2 = uint_0;
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) @uint_0 = (sbyte) ^(byte&) ((IntPtr) &num2 + 3);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &uint_0 + 1) = (sbyte) ^(byte&) ((IntPtr) &num2 + 2);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &uint_0 + 2) = (sbyte) ^(byte&) ((IntPtr) &num2 + 1);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &uint_0 + 3) = (sbyte) ^(byte&) @num2;
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) @num2 = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 3);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &num2 + 1) = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 2);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &num2 + 2) = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 1);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &num2 + 3) = (sbyte) ^(byte&) @uint_1;
            }
            else
              num2 = uint_1;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &_Module.struct54_0 + 8) = (int) uint_0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &_Module.struct54_0 + 30) = (int) uint_0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &_Module.struct54_0 + 48) = (int) num2;
            if (this.int_12 == 79)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -15;
            }
            else if (this.int_12 == 59)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -35;
            }
            else if (this.int_12 == 47)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -39;
            }
            else if (this.int_12 == 36)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -47;
            }
            else if (this.int_12 == 32)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -43;
            }
            _Module.memcpy((void*) numPtr2, (void*) &_Module.struct54_0, 74U);
            _Module.memcpy((void*) (numPtr2 + 74), (void*) &_Module.struct44_0, 1136U);
            _Module.memcpy((void*) (numPtr2 + 1210), (void*) &_Module.struct57_0, 972U);
            _Module.memcpy((void*) (numPtr2 + 2182), (void*) (pByte_0 + ((int) uint_0 - -1879048192)), uint_1);
            uint num3 = 0U;
            for (num2 = 0U; num2 < uint_2 - 2U; ++num2)
              num3 += (uint) numPtr2[(int) num2];
            uint num4 = (uint) (65536 - ((int) num3 & (int) ushort.MaxValue));
            numPtr2[(int) uint_2 - 2] = (byte) ((int) num4 & (int) byte.MaxValue);
            numPtr2[(int) uint_2 - 1] = (byte) ((num4 & 65280U) >> 8);
            uint num5;
            for (uint index = 0U; index < uint_2; ++index)
            {
              _Module.memset((void*) gstruct97Ptr, 0, 62U);
              *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) -25;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 72;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 30) = (sbyte) 73;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 84;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) -52;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 33) = (sbyte) numPtr2[(int) index];
              *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) ((uint) ((int) index + int.MinValue & -16777216) >> 24);
              *(sbyte*) ((IntPtr) gstruct97Ptr + 37) = (sbyte) ((uint) ((int) index + int.MinValue & 16711680) >> 16);
              *(sbyte*) ((IntPtr) gstruct97Ptr + 38) = (sbyte) ((uint) ((int) index + int.MinValue & 65280) >> 8);
              *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) ((int) index + int.MinValue & (int) byte.MaxValue);
              *(short*) gstruct97Ptr = (short) 44;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
              *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
              *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
              if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) != 0)
              {
                if ((int) (index % 256U) == 0)
                {
                  this.textBox6.AppendText(".");
                  Application.DoEvents();
                }
              }
              else
              {
                this.textBox6.AppendText("Ram Poke Upload Failed" + "\r\n");
                _Module.CloseHandle(fileA);
                this.Cursor = Cursors.Arrow;
                _Module.free((void*) numPtr2);
                return 1;
              }
            }
            _Module.memset((void*) gstruct97Ptr, 0, 62U);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 16;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) 8;
            Struct103 struct103;
            _Module.memset((void*) &struct103, 0, 8U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct103 + 1) = (sbyte) 6;
            *(short*) gstruct97Ptr = (short) 44;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 0;
            *(int*) ((IntPtr) gstruct97Ptr + 12) = 8;
            *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
            *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct103;
            *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
            if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) == 0)
            {
              this.textBox6.AppendText("Set (59E) bit 3 via Mode Select(10) failed" + "\r\n");
              _Module.CloseHandle(fileA);
              this.Cursor = Cursors.Arrow;
              _Module.free((void*) numPtr2);
              return 1;
            }
            else
            {
              _Module.memset((void*) gstruct97Ptr, 0, 62U);
              *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 16;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 72;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 76;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 34) = (sbyte) 1;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) 1;
              *(short*) gstruct97Ptr = (short) 44;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
              *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
              *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
              if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) == 0)
              {
                this.textBox6.AppendText("Flash Code Execute Failed!" + "\r\n");
                _Module.CloseHandle(fileA);
                this.Cursor = Cursors.Arrow;
                _Module.free((void*) numPtr2);
                return 1;
              }
              else
              {
                _Module.CloseHandle(fileA);
                this.Cursor = Cursors.Arrow;
                _Module.free((void*) numPtr2);
                return 0;
              }
            }
          }
        }
      }
    }

    private unsafe int method_407(byte* pByte_0, uint uint_0, uint uint_1)
    {
      ushort num1 = (ushort) byte.MaxValue;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num2 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num2 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num3 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num2 * 72 + 4) != 160 ? 16U : 0U;
      Struct63 struct63;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) ((int) uint_0 & (int) byte.MaxValue);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) ((uint_0 & 65280U) >> 8);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) ((uint_0 & 16711680U) >> 16);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) ((uint_0 & 4278190080U) >> 24);
      this.method_6((byte*) &struct63, 4U, 0U);
      this.textBox6.AppendText("Flashing Sector" + " " + this.string_0 + "\r\n");
      uint uint_2 = uint_1 + 2184U;
      if (((int) uint_2 & 3) != 0)
        uint_2 += (uint) (4 - ((int) uint_2 & 3));
      byte* numPtr = (byte*) _Module.malloc(uint_2);
      if ((IntPtr) numPtr == IntPtr.Zero)
        return 1;
      _Module.memset((void*) numPtr, 0, uint_2);
      uint num4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) @num1 == 0)
      {
        num4 = uint_0;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @uint_0 = (sbyte) ^(byte&) ((IntPtr) &num4 + 3);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &uint_0 + 1) = (sbyte) ^(byte&) ((IntPtr) &num4 + 2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &uint_0 + 2) = (sbyte) ^(byte&) ((IntPtr) &num4 + 1);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &uint_0 + 3) = (sbyte) ^(byte&) @num4;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @num4 = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 3);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &num4 + 1) = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &num4 + 2) = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 1);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &num4 + 3) = (sbyte) ^(byte&) @uint_1;
      }
      else
        num4 = uint_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &_Module.struct54_0 + 8) = (int) uint_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &_Module.struct54_0 + 30) = (int) uint_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &_Module.struct54_0 + 48) = (int) num4;
      if (this.int_12 == 79)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -15;
      }
      else if (this.int_12 == 59)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -35;
      }
      else if (this.int_12 == 47)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -39;
      }
      else if (this.int_12 == 36)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -47;
      }
      else if (this.int_12 == 32)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -43;
      }
      _Module.memcpy((void*) numPtr, (void*) &_Module.struct54_0, 74U);
      _Module.memcpy((void*) (numPtr + 74), (void*) &_Module.struct44_0, 1136U);
      _Module.memcpy((void*) (numPtr + 1210), (void*) &_Module.struct57_0, 972U);
      _Module.memcpy((void*) (numPtr + 2182), (void*) (pByte_0 + ((int) uint_0 - -1879048192)), uint_1);
      uint num5 = 0U;
      for (num4 = 0U; num4 < uint_2 - 2U; ++num4)
        num5 += (uint) numPtr[(int) num4];
      uint num6 = (uint) (65536 - ((int) num5 & (int) ushort.MaxValue));
      numPtr[(int) uint_2 - 2] = (byte) ((int) num6 & (int) byte.MaxValue);
      numPtr[(int) uint_2 - 1] = (byte) ((num6 & 65280U) >> 8);
      this.Cursor = Cursors.WaitCursor;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 85;
      if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num3, (byte) 1, &gstruct3) != 0 && _Module.smethod_15((byte*) &struct52, 12U, (byte) num3, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
        this.Cursor = Cursors.Arrow;
        return 1;
      }
      else
      {
        for (uint index = 0U; index < uint_2; ++index)
        {
          _Module.memset((void*) &struct52, 0, 12U);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) @struct52 = (sbyte) -25;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 72;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 2) = (sbyte) 73;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 84;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) -52;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 5) = (sbyte) numPtr[(int) index];
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) ((uint) ((int) index + int.MinValue & -16777216) >> 24);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 9) = (sbyte) ((uint) ((int) index + int.MinValue & 16711680) >> 16);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 10) = (sbyte) ((uint) ((int) index + int.MinValue & 65280) >> 8);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) ((int) index + int.MinValue & (int) byte.MaxValue);
          if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num3, (byte) 1, &gstruct3) == 0)
          {
            if ((int) (index % 256U) == 0)
            {
              this.textBox6.AppendText(".");
              Application.DoEvents();
            }
          }
          else
          {
            this.textBox6.AppendText("Ram Poke Failed" + "\r\n");
            this.Cursor = Cursors.Arrow;
            return 1;
          }
        }
        _Module.memset((void*) &struct52, 0, 12U);
        Struct103 struct103;
        _Module.memset((void*) &struct103, 0, 8U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) 85;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 16;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 8;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct103 + 1) = (sbyte) 6;
        uint num7;
        if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num3, (ushort) 512, (void*) &struct103, &num7, 8U, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("Execute Enable Failed" + "\r\n");
          this.Cursor = Cursors.Arrow;
          return 1;
        }
        else
        {
          _Module.memset((void*) &struct52, 0, 12U);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) @struct52 = (sbyte) 85;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 16;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 72;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 76;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 1;
          if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num3, (byte) 1, &gstruct3) != 0)
          {
            this.textBox6.AppendText("Execute Failed.." + "\r\n");
            this.Cursor = Cursors.Arrow;
            return 1;
          }
          else
          {
            _Module.free((void*) numPtr);
            this.Cursor = Cursors.Arrow;
            return 0;
          }
        }
      }
    }

    private unsafe int method_408(byte* pByte_0, uint uint_0, uint uint_1)
    {
      ushort num1 = (ushort) byte.MaxValue;
      if (this.comboBox16.Items.Count == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num2 = (int) MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 1;
      }
      else
      {
        Struct108 struct108;
        GStruct97* gstruct97Ptr = (GStruct97*) &struct108;
        byte* numPtr1 = (byte*) ((IntPtr) &struct108 + 44);
        string str = this.comboBox16.Text.Substring(0, 1);
        sbyte* numPtr2 = (sbyte*) (void*) Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
        if ((int) *numPtr2 < 65 | (int) *numPtr2 > 122)
          return 1;
        Struct109 struct109;
        _Module.sprintf((sbyte*) &struct109, (sbyte*) &_Module.struct22_5, __arglist ((int) *numPtr2));
        void* fileA = _Module.CreateFileA((sbyte*) &struct109, 3221225472U, 3U, (GStruct100*) 0, 3U, 128U, (void*) 0);
        if ((IntPtr) fileA == IntPtr(-1))
        {
          this.textBox6.AppendText("Failed to open drive " + str + "\r\n");
          return 1;
        }
        else
        {
          this.Cursor = Cursors.WaitCursor;
          Struct63 struct63;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) ((int) uint_0 & (int) byte.MaxValue);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) ((uint_0 & 65280U) >> 8);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) ((uint_0 & 16711680U) >> 16);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) @struct63 = (sbyte) ((uint_0 & 4278190080U) >> 24);
          this.method_6((byte*) &struct63, 4U, 0U);
          this.textBox6.AppendText("Flashing Sector" + " " + this.string_0 + "\r\n");
          uint uint_2 = uint_1 + 2184U;
          if (((int) uint_2 & 3) != 0)
            uint_2 += (uint) (4 - ((int) uint_2 & 3));
          byte* numPtr3 = (byte*) _Module.malloc(uint_2);
          if ((IntPtr) numPtr3 == IntPtr.Zero)
          {
            _Module.CloseHandle(fileA);
            return 1;
          }
          else
          {
            _Module.memset((void*) numPtr3, 0, uint_2);
            uint num2;
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) @num1 == 0)
            {
              num2 = uint_0;
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) @uint_0 = (sbyte) ^(byte&) ((IntPtr) &num2 + 3);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &uint_0 + 1) = (sbyte) ^(byte&) ((IntPtr) &num2 + 2);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &uint_0 + 2) = (sbyte) ^(byte&) ((IntPtr) &num2 + 1);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &uint_0 + 3) = (sbyte) ^(byte&) @num2;
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) @num2 = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 3);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &num2 + 1) = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 2);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &num2 + 2) = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 1);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              // ISSUE: explicit reference operation
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &num2 + 3) = (sbyte) ^(byte&) @uint_1;
            }
            else
              num2 = uint_1;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &_Module.struct54_0 + 8) = (int) uint_0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &_Module.struct54_0 + 30) = (int) uint_0;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &_Module.struct54_0 + 48) = (int) num2;
            if (this.int_12 == 79)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -15;
            }
            else if (this.int_12 == 59)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -35;
            }
            else if (this.int_12 == 47)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -39;
            }
            else if (this.int_12 == 36)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -47;
            }
            else if (this.int_12 == 32)
            {
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -43;
            }
            _Module.memcpy((void*) numPtr3, (void*) &_Module.struct54_0, 74U);
            _Module.memcpy((void*) (numPtr3 + 74), (void*) &_Module.struct44_0, 1136U);
            _Module.memcpy((void*) (numPtr3 + 1210), (void*) &_Module.struct57_0, 972U);
            _Module.memcpy((void*) (numPtr3 + 2182), (void*) (pByte_0 + ((int) uint_0 - -1879048192)), uint_1);
            uint num3 = 0U;
            for (num2 = 0U; num2 < uint_2 - 2U; ++num2)
              num3 += (uint) numPtr3[(int) num2];
            uint num4 = (uint) (65536 - ((int) num3 & (int) ushort.MaxValue));
            numPtr3[(int) uint_2 - 2] = (byte) ((int) num4 & (int) byte.MaxValue);
            numPtr3[(int) uint_2 - 1] = (byte) ((num4 & 65280U) >> 8);
            _Module.memset((void*) gstruct97Ptr, 0, 62U);
            *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
            *(short*) gstruct97Ptr = (short) 44;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
            *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
            *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
            *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
            uint num5;
            if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) == 0 && _Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) == 0)
            {
              this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
              this.Cursor = Cursors.Arrow;
              _Module.CloseHandle(fileA);
              _Module.free((void*) numPtr3);
              return 1;
            }
            else
            {
              _Module.memset((void*) gstruct97Ptr, 0, 62U);
              *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 16;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) 16;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) 1;
              Struct28 struct28;
              _Module.memset((void*) &struct28, 0, 16U);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct28 + 9) = (sbyte) 6;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct28 + 10) = (sbyte) 72;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct28 + 11) = (sbyte) 76;
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct28 + 12) = (sbyte) ((uint_2 & 4278190080U) >> 24);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct28 + 13) = (sbyte) ((uint_2 & 16711680U) >> 16);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct28 + 14) = (sbyte) ((uint_2 & 65280U) >> 8);
              // ISSUE: cast to a reference type
              // ISSUE: explicit reference operation
              ^(sbyte&) ((IntPtr) &struct28 + 15) = (sbyte) ((int) uint_2 & (int) byte.MaxValue);
              *(short*) gstruct97Ptr = (short) 44;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
              *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 0;
              *(int*) ((IntPtr) gstruct97Ptr + 12) = 16;
              *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
              *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &struct28;
              *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
              if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) != 0 && ((int) numPtr1[2] & 15) == 0)
              {
                uint num6 = uint_2 / 2040U;
                if ((int) (uint_2 % 2040U) != 0)
                  ++num6;
                for (num2 = 0U; num2 < num6; ++num2)
                {
                  uint num7 = (int) num2 == (int) num6 - 1 ? uint_2 % 2040U + 8U : 2048U;
                  _Module.memset((void*) gstruct97Ptr, 0, 62U);
                  *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
                  *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 16;
                  *(sbyte*) ((IntPtr) gstruct97Ptr + 35) = (sbyte) ((num7 & 65280U) >> 8);
                  *(sbyte*) ((IntPtr) gstruct97Ptr + 36) = (sbyte) ((int) num7 & (int) byte.MaxValue);
                  *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) 1;
                  _Module.memset((void*) &_Module.struct120_0, 0, 2048U);
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  ^(sbyte&) ((IntPtr) &_Module.struct120_0 + 4) = (sbyte) 72;
                  // ISSUE: cast to a reference type
                  // ISSUE: explicit reference operation
                  ^(sbyte&) ((IntPtr) &_Module.struct120_0 + 5) = (sbyte) 76;
                  _Module.memcpy((void*) ((IntPtr) &_Module.struct120_0 + 8), (void*) (numPtr3 + (int) num2 * 2040), num7 - 8U);
                  *(short*) gstruct97Ptr = (short) 44;
                  *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
                  *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
                  *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 0;
                  *(int*) ((IntPtr) gstruct97Ptr + 12) = (int) num7;
                  *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
                  *(int*) ((IntPtr) gstruct97Ptr + 20) = (int) &_Module.struct120_0;
                  *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
                  if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) == 0 || ((int) numPtr1[2] & 15) != 0)
                  {
                    this.textBox6.AppendText("Upload buffer failed" + "\r\n");
                    _Module.CloseHandle(fileA);
                    this.Cursor = Cursors.Arrow;
                    _Module.free((void*) numPtr3);
                    return 1;
                  }
                }
                _Module.memset((void*) gstruct97Ptr, 0, 62U);
                *(sbyte*) ((IntPtr) gstruct97Ptr + 28) = (sbyte) 85;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 29) = (sbyte) 16;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 31) = (sbyte) 72;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 32) = (sbyte) 76;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 34) = (sbyte) 1;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 39) = (sbyte) 1;
                *(short*) gstruct97Ptr = (short) 44;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 6) = (sbyte) 12;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 7) = (sbyte) 18;
                *(sbyte*) ((IntPtr) gstruct97Ptr + 8) = (sbyte) 2;
                *(int*) ((IntPtr) gstruct97Ptr + 16) = 15;
                *(int*) ((IntPtr) gstruct97Ptr + 24) = 44;
                if (_Module.DeviceIoControl(fileA, 315412U, (void*) gstruct97Ptr, 62U, (void*) gstruct97Ptr, 62U, &num5, (GStruct95*) 0) == 0)
                {
                  this.textBox6.AppendText("Ram Execute Failed" + "\r\n");
                  this.Cursor = Cursors.Arrow;
                  _Module.CloseHandle(fileA);
                  _Module.free((void*) numPtr3);
                  return 1;
                }
                else
                {
                  this.Cursor = Cursors.Arrow;
                  _Module.CloseHandle(fileA);
                  _Module.free((void*) numPtr3);
                  return 0;
                }
              }
              else
              {
                this.textBox6.AppendText("Configure Upload Failed" + "\r\n");
                this.Cursor = Cursors.Arrow;
                _Module.CloseHandle(fileA);
                _Module.free((void*) numPtr3);
                return 1;
              }
            }
          }
        }
      }
    }

    private unsafe int method_409(byte* pByte_0, uint uint_0, uint uint_1)
    {
      ushort num1 = (ushort) byte.MaxValue;
      if (this.comboBox1.Items.Count == 0)
        return 0;
      uint num2 = (uint) this.comboBox1.SelectedIndex;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ushort ushort_0 = ^(ushort&) ((IntPtr) &_Module.struct38_0 + (int) num2 * 72);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      uint num3 = (int) ^(byte&) ((IntPtr) &_Module.struct38_0 + (int) num2 * 72 + 4) != 160 ? 16U : 0U;
      Struct63 struct63;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 3) = (sbyte) ((int) uint_0 & (int) byte.MaxValue);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 2) = (sbyte) ((uint_0 & 65280U) >> 8);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct63 + 1) = (sbyte) ((uint_0 & 16711680U) >> 16);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct63 = (sbyte) ((uint_0 & 4278190080U) >> 24);
      this.method_6((byte*) &struct63, 4U, 0U);
      this.textBox6.AppendText("Flashing Sector" + " " + this.string_0 + "\r\n");
      uint uint_2 = uint_1 + 2184U;
      if (((int) uint_2 & 3) != 0)
        uint_2 += (uint) (4 - ((int) uint_2 & 3));
      byte* numPtr = (byte*) _Module.malloc(uint_2);
      if ((IntPtr) numPtr == IntPtr.Zero)
        return 1;
      _Module.memset((void*) numPtr, 0, uint_2);
      uint num4;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) @num1 == 0)
      {
        num4 = uint_0;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @uint_0 = (sbyte) ^(byte&) ((IntPtr) &num4 + 3);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &uint_0 + 1) = (sbyte) ^(byte&) ((IntPtr) &num4 + 2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &uint_0 + 2) = (sbyte) ^(byte&) ((IntPtr) &num4 + 1);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &uint_0 + 3) = (sbyte) ^(byte&) @num4;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @num4 = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 3);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &num4 + 1) = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 2);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &num4 + 2) = (sbyte) ^(byte&) ((IntPtr) &uint_1 + 1);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &num4 + 3) = (sbyte) ^(byte&) @uint_1;
      }
      else
        num4 = uint_1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &_Module.struct54_0 + 8) = (int) uint_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &_Module.struct54_0 + 30) = (int) uint_0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &_Module.struct54_0 + 48) = (int) num4;
      if (this.int_12 == 79)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -15;
      }
      else if (this.int_12 == 59)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -35;
      }
      else if (this.int_12 == 47)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -39;
      }
      else if (this.int_12 == 36)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -47;
      }
      else if (this.int_12 == 32)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &_Module.struct54_0 + 64) = (sbyte) -43;
      }
      _Module.memcpy((void*) numPtr, (void*) &_Module.struct54_0, 74U);
      _Module.memcpy((void*) (numPtr + 74), (void*) &_Module.struct44_0, 1136U);
      _Module.memcpy((void*) (numPtr + 1210), (void*) &_Module.struct57_0, 972U);
      _Module.memcpy((void*) (numPtr + 2182), (void*) (pByte_0 + ((int) uint_0 - -1879048192)), uint_1);
      uint num5 = 0U;
      for (num4 = 0U; num4 < uint_2 - 2U; ++num4)
        num5 += (uint) numPtr[(int) num4];
      uint num6 = (uint) (65536 - ((int) num5 & (int) ushort.MaxValue));
      numPtr[(int) uint_2 - 2] = (byte) ((int) num6 & (int) byte.MaxValue);
      numPtr[(int) uint_2 - 1] = (byte) ((num6 & 65280U) >> 8);
      this.Cursor = Cursors.WaitCursor;
      GStruct3 gstruct3;
      _Module.smethod_21(&gstruct3, ushort_0, (ushort) 0, (byte) 1, 10000U);
      Struct52 struct52;
      _Module.memset((void*) &struct52, 0, 12U);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct52 = (sbyte) 85;
      if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num3, (byte) 1, &gstruct3) != 0 && _Module.smethod_15((byte*) &struct52, 12U, (byte) num3, (byte) 1, &gstruct3) != 0)
      {
        this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
        this.Cursor = Cursors.Arrow;
        return 1;
      }
      else
      {
        _Module.memset((void*) &struct52, 0, 12U);
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct52 = (sbyte) 85;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 16;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) 16;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 1;
        Struct28 struct28;
        _Module.memset((void*) &struct28, 0, 16U);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28 + 9) = (sbyte) 6;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28 + 10) = (sbyte) 72;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28 + 11) = (sbyte) 76;
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28 + 12) = (sbyte) ((uint_2 & 4278190080U) >> 24);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28 + 13) = (sbyte) ((uint_2 & 16711680U) >> 16);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28 + 14) = (sbyte) ((uint_2 & 65280U) >> 8);
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) ((IntPtr) &struct28 + 15) = (sbyte) ((int) uint_2 & (int) byte.MaxValue);
        uint num7;
        if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num3, (ushort) 512, (void*) &struct28, &num7, 16U, (byte) 1, &gstruct3) != 0)
        {
          this.textBox6.AppendText("Configure Upload Failed" + "\r\n");
          this.Cursor = Cursors.Arrow;
          _Module.free((void*) numPtr);
          return 1;
        }
        else
        {
          uint num8 = uint_2 / 2040U;
          if ((int) (uint_2 % 2040U) != 0)
            ++num8;
          for (num4 = 0U; num4 < num8; ++num4)
          {
            uint uint_3 = (int) num4 == (int) num8 - 1 ? uint_2 % 2040U + 8U : 2048U;
            _Module.memset((void*) &struct52, 0, 12U);
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) @struct52 = (sbyte) 85;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 16;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 7) = (sbyte) ((uint_3 & 65280U) >> 8);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 8) = (sbyte) ((int) uint_3 & (int) byte.MaxValue);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 1;
            _Module.memset((void*) &_Module.struct120_1, 0, 2048U);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &_Module.struct120_1 + 4) = (sbyte) 72;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &_Module.struct120_1 + 5) = (sbyte) 76;
            _Module.memcpy((void*) ((IntPtr) &_Module.struct120_1 + 8), (void*) (numPtr + (int) num4 * 2040), uint_3 - 8U);
            if (_Module.smethod_17((byte*) &struct52, 12U, (byte) num3, (ushort) 512, (void*) &_Module.struct120_1, &num7, uint_3, (byte) 1, &gstruct3) != 0)
            {
              this.textBox6.AppendText("Upload buffer failed" + "\r\n");
              this.Cursor = Cursors.Arrow;
              _Module.free((void*) numPtr);
              return 1;
            }
          }
          _Module.memset((void*) &struct52, 0, 12U);
          _Module.memset((void*) &struct28, 0, 16U);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) @struct52 = (sbyte) 85;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 1) = (sbyte) 16;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 3) = (sbyte) 72;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 4) = (sbyte) 76;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 6) = (sbyte) 1;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(sbyte&) ((IntPtr) &struct52 + 11) = (sbyte) 1;
          if (_Module.smethod_15((byte*) &struct52, 12U, (byte) num3, (byte) 1, &gstruct3) != 0)
          {
            this.textBox6.AppendText("Mode Select Execute Failed!" + "\r\n");
            this.Cursor = Cursors.Arrow;
            _Module.free((void*) numPtr);
            return 1;
          }
          else
          {
            this.Cursor = Cursors.Arrow;
            _Module.free((void*) numPtr);
            return 0;
          }
        }
      }
    }

    private unsafe int method_410()
    {
      _Module.usb_init();
      _Module.usb_find_busses();
      _Module.usb_find_devices();
      GStruct8* busses = _Module.usb_get_busses();
      _Module.usb_set_debug(4);
      for (GStruct8* gstruct8Ptr = busses; (IntPtr) gstruct8Ptr != IntPtr.Zero; gstruct8Ptr = (GStruct8*) *(int*) gstruct8Ptr)
      {
        for (GStruct9* gstruct9Ptr = (GStruct9*) *(int*) ((IntPtr) gstruct8Ptr + 520); (IntPtr) gstruct9Ptr != IntPtr.Zero; gstruct9Ptr = (GStruct9*) *(int*) gstruct9Ptr)
        {
          if ((int) *(ushort*) ((IntPtr) gstruct9Ptr + 532) == 4564 && (int) *(ushort*) ((IntPtr) gstruct9Ptr + 534) == 33587)
          {
            this.bool_5 = true;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &_Module.gstruct10_0 + 12) = (sbyte) 1;
            this.pictureBox8.Visible = true;
            this.pictureBox9.Visible = true;
            this.pictureBox10.Visible = false;
            this.pictureBox11.Visible = false;
            return 1;
          }
        }
      }
      this.bool_5 = false;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &_Module.gstruct10_0 + 12) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &_Module.gstruct10_0 + 4) = 0;
      this.pictureBox8.Visible = false;
      this.pictureBox9.Visible = false;
      this.pictureBox10.Visible = true;
      this.pictureBox11.Visible = true;
      return 0;
    }

    private unsafe int method_411()
    {
      _Module.usb_init();
      _Module.usb_find_busses();
      _Module.usb_find_devices();
      GStruct8* busses = _Module.usb_get_busses();
      _Module.usb_set_debug(4);
      for (GStruct8* gstruct8Ptr = busses; (IntPtr) gstruct8Ptr != IntPtr.Zero; gstruct8Ptr = (GStruct8*) *(int*) gstruct8Ptr)
      {
        for (GStruct9* gstruct9Ptr = (GStruct9*) *(int*) ((IntPtr) gstruct8Ptr + 520); (IntPtr) gstruct9Ptr != IntPtr.Zero; gstruct9Ptr = (GStruct9*) *(int*) gstruct9Ptr)
        {
          if ((int) *(ushort*) ((IntPtr) gstruct9Ptr + 532) == 4564 && (int) *(ushort*) ((IntPtr) gstruct9Ptr + 534) == 33591)
          {
            this.bool_7 = true;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(sbyte&) ((IntPtr) &_Module.gstruct10_0 + 13) = (sbyte) 1;
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            if ((int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 12) == 0)
            {
              this.pictureBox8.Visible = true;
              this.pictureBox9.Visible = true;
              this.pictureBox10.Visible = false;
              this.pictureBox11.Visible = false;
            }
            return 1;
          }
        }
      }
      this.bool_7 = false;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &_Module.gstruct10_0 + 13) = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8) = 0;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 12) == 0)
      {
        this.pictureBox8.Visible = false;
        this.pictureBox9.Visible = false;
        this.pictureBox10.Visible = true;
        this.pictureBox11.Visible = true;
      }
      return 0;
    }

    private unsafe void method_412()
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      if (this.method_416((sbyte*) &struct3_1, 1, (sbyte*) &struct3_2, 4) != 1)
        return;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.textBox6.AppendText("Version " + Convert.ToString((int) ^(sbyte&) ((IntPtr) &struct3_2 + 2)) + ".");
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.textBox6.AppendText(Convert.ToString((int) ^(sbyte&) ((IntPtr) &struct3_2 + 3)) + "\r\n");
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.string_23 = Convert.ToString((int) ^(sbyte&) ((IntPtr) &struct3_2 + 2)) + "." + Convert.ToString((int) ^(sbyte&) ((IntPtr) &struct3_2 + 3));
    }

    private unsafe void method_413()
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      if (this.method_417((sbyte*) &struct3_1, 1, (sbyte*) &struct3_2, 4) != 1)
        return;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.textBox6.AppendText("Version " + Convert.ToString((int) ^(sbyte&) ((IntPtr) &struct3_2 + 2)) + ".");
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.textBox6.AppendText(Convert.ToString((int) ^(sbyte&) ((IntPtr) &struct3_2 + 3)) + "\r\n");
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.string_24 = Convert.ToString((int) ^(sbyte&) ((IntPtr) &struct3_2 + 2)) + "." + Convert.ToString((int) ^(sbyte&) ((IntPtr) &struct3_2 + 3));
    }

    private unsafe void method_414()
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      if (this.method_416((sbyte*) &struct3_1, 1, (sbyte*) &struct3_2, 4) != 1)
        return;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.string_23 = Convert.ToString((int) ^(sbyte&) ((IntPtr) &struct3_2 + 2)) + "." + Convert.ToString((int) ^(sbyte&) ((IntPtr) &struct3_2 + 3));
    }

    private unsafe void method_415()
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      if (this.method_417((sbyte*) &struct3_1, 1, (sbyte*) &struct3_2, 4) != 1)
        return;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      this.string_24 = Convert.ToString((int) ^(sbyte&) ((IntPtr) &struct3_2 + 2)) + "." + Convert.ToString((int) ^(sbyte&) ((IntPtr) &struct3_2 + 3));
    }

    private unsafe int method_416(sbyte* pSbyte_0, int int_16, sbyte* pSbyte_1, int int_17)
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 14) == 0)
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 4) == 0)
        {
          this.method_420();
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) @_Module.gstruct10_0 = ^(int&) ((IntPtr) &_Module.gstruct10_0 + 4);
        }
      }
      else
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) @_Module.gstruct10_0 == 0)
        {
          this.method_421();
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) @_Module.gstruct10_0 = ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8);
        }
      }
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      return _Module.usb_bulk_write((void**) ^(int&) @_Module.gstruct10_0, 1, pSbyte_0, int_16, 10000) == int_16 && (int_17 == 0 || _Module.usb_bulk_read((void**) ^(int&) @_Module.gstruct10_0, 129, pSbyte_1, int_17, 5000) == int_17) ? 1 : 0;
    }

    private unsafe int method_417(sbyte* pSbyte_0, int int_16, sbyte* pSbyte_1, int int_17)
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 8) == 0)
        this.method_421();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      return _Module.usb_bulk_write((void**) ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8), 1, pSbyte_0, int_16, 10000) == int_16 && (int_17 == 0 || _Module.usb_bulk_read((void**) ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8), 129, pSbyte_1, int_17, 5000) == int_17) ? 1 : 0;
    }

    private unsafe int method_418(sbyte sbyte_0, ushort ushort_0)
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      int num = 1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) ((int) sbyte_0 + 16);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 2) = (sbyte) (((int) ushort_0 & 65280) >> 8);
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) ((IntPtr) &struct3_1 + 1) = (sbyte) ((int) ushort_0 & (int) byte.MaxValue);
      if (this.method_416((sbyte*) &struct3_1, 3, (sbyte*) &struct3_2, 1) == 1)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (num == 1 && (int) ^(sbyte&) @struct3_2 == (int) sbyte_0 + 16)
          return 1;
        _Module.printf((sbyte*) &_Module.struct98_1, __arglist ());
        return 0;
      }
      else
      {
        _Module.printf((sbyte*) &_Module.struct65_10, __arglist ());
        return 0;
      }
    }

    private unsafe void method_419(sbyte sbyte_0, byte* pByte_0)
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      int num = 3;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) ((int) sbyte_0 + 32);
      if (this.method_416((sbyte*) &struct3_1, 1, (sbyte*) &struct3_2, 3) == 1)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (num == 3 && (int) ^(sbyte&) @struct3_2 == (int) sbyte_0 + 32)
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          *pByte_0 = (byte) ^(sbyte&) ((IntPtr) &struct3_2 + 1);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          pByte_0[1] = (byte) ^(sbyte&) ((IntPtr) &struct3_2 + 2);
        }
        else
          _Module.printf((sbyte*) &_Module.struct65_11, __arglist ());
      }
      else
        _Module.printf((sbyte*) &_Module.struct67_3, __arglist ());
    }

    private unsafe int method_420()
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 12) == 0)
        return 0;
      _Module.usb_init();
      _Module.usb_find_busses();
      _Module.usb_find_devices();
      GStruct8* busses = _Module.usb_get_busses();
      _Module.usb_set_debug(4);
      for (GStruct8* gstruct8Ptr = busses; (IntPtr) gstruct8Ptr != IntPtr.Zero; gstruct8Ptr = (GStruct8*) *(int*) gstruct8Ptr)
      {
        for (GStruct9* pGstruct9_0 = (GStruct9*) *(int*) ((IntPtr) gstruct8Ptr + 520); (IntPtr) pGstruct9_0 != IntPtr.Zero; pGstruct9_0 = (GStruct9*) *(int*) pGstruct9_0)
        {
          if ((int) *(ushort*) ((IntPtr) pGstruct9_0 + 532) == 4564 && (int) *(ushort*) ((IntPtr) pGstruct9_0 + 534) == 33587)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &_Module.gstruct10_0 + 4) = (int) _Module.usb_open(pGstruct9_0);
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) @_Module.gstruct10_0 = ^(int&) ((IntPtr) &_Module.gstruct10_0 + 4);
          }
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 4) == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("error: device not found!", "LibUSB", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 0;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_set_configuration((void**) ^(int&) ((IntPtr) &_Module.gstruct10_0 + 4), 1) < 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show("error: setting config failed", "LibUSB", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.usb_close((void**) ^(int&) @_Module.gstruct10_0);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ((IntPtr) &_Module.gstruct10_0 + 4) = 0;
          return 0;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_claim_interface((void**) ^(int&) ((IntPtr) &_Module.gstruct10_0 + 4), 0) < 0)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num = (int) MessageBox.Show("error: claiming interface failed", "LibUSB", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.usb_close((void**) ^(int&) ((IntPtr) &_Module.gstruct10_0 + 4));
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &_Module.gstruct10_0 + 4) = 0;
            return 0;
          }
          else
          {
            this.method_414();
            this.method_424((byte) 2);
            this.bool_9 = false;
            return 1;
          }
        }
      }
    }

    private unsafe int method_421()
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 13) == 0)
        return 0;
      _Module.usb_init();
      _Module.usb_find_busses();
      _Module.usb_find_devices();
      GStruct8* busses = _Module.usb_get_busses();
      _Module.usb_set_debug(4);
      for (GStruct8* gstruct8Ptr = busses; (IntPtr) gstruct8Ptr != IntPtr.Zero; gstruct8Ptr = (GStruct8*) *(int*) gstruct8Ptr)
      {
        for (GStruct9* pGstruct9_0 = (GStruct9*) *(int*) ((IntPtr) gstruct8Ptr + 520); (IntPtr) pGstruct9_0 != IntPtr.Zero; pGstruct9_0 = (GStruct9*) *(int*) pGstruct9_0)
        {
          if ((int) *(ushort*) ((IntPtr) pGstruct9_0 + 532) == 4564 && (int) *(ushort*) ((IntPtr) pGstruct9_0 + 534) == 33591)
          {
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8) = (int) _Module.usb_open(pGstruct9_0);
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) @_Module.gstruct10_0 = ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8);
          }
        }
      }
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 8) == 0)
      {
        // ISSUE: cast to a function pointer type
        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
        int num = (int) MessageBox.Show("error: device not found!", "LibUSB", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        return 0;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (_Module.usb_set_configuration((void**) ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8), 1) < 0)
        {
          // ISSUE: cast to a function pointer type
          _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
          int num = (int) MessageBox.Show("error: setting config failed", "LibUSB", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
          _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          _Module.usb_close((void**) ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8));
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8) = 0;
          return 0;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_claim_interface((void**) ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8), 0) < 0)
          {
            // ISSUE: cast to a function pointer type
            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, (__FnPtr<int (int, uint, int)>) (IntPtr) _Module.ppInt_12, (GStruct81*) _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num = (int) MessageBox.Show("error: claiming interface failed", "LibUSB", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            _Module.usb_close((void**) ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8));
            // ISSUE: cast to a reference type
            // ISSUE: explicit reference operation
            ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8) = 0;
            return 0;
          }
          else
          {
            this.method_415();
            return 1;
          }
        }
      }
    }

    private unsafe int method_422()
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 12) == 0)
        return 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 4) == 0)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) @_Module.gstruct10_0 = 0;
        return 1;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 4) == 0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) @_Module.gstruct10_0 = 0;
          return 1;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_release_interface((void**) ^(int&) ((IntPtr) &_Module.gstruct10_0 + 4), 0) < 0 || _Module.usb_close((void**) ^(int&) ((IntPtr) &_Module.gstruct10_0 + 4)) < 0)
            return 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ((IntPtr) &_Module.gstruct10_0 + 4) = 0;
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) @_Module.gstruct10_0 = 0;
          return 1;
        }
      }
    }

    private unsafe int method_423()
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if ((int) ^(byte&) ((IntPtr) &_Module.gstruct10_0 + 13) == 0)
        return 1;
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 8) == 0)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(int&) @_Module.gstruct10_0 = 0;
        return 1;
      }
      else
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        if (^(int&) ((IntPtr) &_Module.gstruct10_0 + 8) == 0)
        {
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) @_Module.gstruct10_0 = 0;
          return 1;
        }
        else
        {
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          if (_Module.usb_release_interface((void**) ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8), 0) < 0 || _Module.usb_close((void**) ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8)) < 0)
            return 0;
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) ((IntPtr) &_Module.gstruct10_0 + 8) = 0;
          // ISSUE: explicit reference operation
          // ISSUE: cast to a reference type
          // ISSUE: explicit reference operation
          ^(int&) @_Module.gstruct10_0 = 0;
          return 1;
        }
      }
    }

    private unsafe int method_424(byte byte_0)
    {
      Struct3 struct3_1;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_1 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_1 + 1), 0, 63);
      Struct3 struct3_2;
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(sbyte&) @struct3_2 = (sbyte) 0;
      // ISSUE: cast to a reference type
      // ISSUE: initblk instruction
      __memset((Struct3&) ((IntPtr) &struct3_2 + 1), 0, 63);
      int int_16 = 1;
      int int_17 = 1;
      if ((int) byte_0 == 1)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct3_1 = (sbyte) 1;
      }
      else if ((int) byte_0 == 2)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct3_1 = (sbyte) 2;
      }
      else if ((int) byte_0 == 5)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct3_1 = (sbyte) 5;
      }
      else if ((int) byte_0 == 6)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct3_1 = (sbyte) 6;
      }
      else if ((int) byte_0 == 7)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct3_1 = (sbyte) 7;
      }
      else if ((int) byte_0 == 8)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct3_1 = (sbyte) 8;
      }
      else if ((int) byte_0 == 88)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct3_1 = (sbyte) 9;
      }
      else if ((int) byte_0 == 9)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct3_1 = (sbyte) -88;
      }
      else if ((int) byte_0 == 10)
      {
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct3_1 = (sbyte) -3;
      }
      else
      {
        if ((int) byte_0 != 11)
          return 0;
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        ^(sbyte&) @struct3_1 = (sbyte) -2;
      }
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: explicit reference operation
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      return this.method_416((sbyte*) &struct3_1, int_16, (sbyte*) &struct3_2, int_17) == 1 && (int_17 == 1 && (int) ^(sbyte&) @struct3_2 == (int) ^(sbyte&) @struct3_1) ? 1 : 0;
    }
  }
}
