using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.Threading;
using System.Windows.Forms;
using AxSHDocVw;
using Microsoft.Win32;

namespace ns0
{
    // Token: 0x020000A9 RID: 169
    public class Form1_DnSpy : Form
    {
        // Token: 0x060001B2 RID: 434 RVA: 0x000F70E4 File Offset: 0x000F70E4
        public Form1_DnSpy()
        {
            this.Cursor = Cursors.AppStarting;
            AppDomain.CurrentDomain.AssemblyResolve += this.method_0;
            this.InitializeComponent();
        }

        // Token: 0x060001B3 RID: 435 RVA: 0x0034E155 File Offset: 0x00296155
        protected override void Dispose([MarshalAs(UnmanagedType.U1)] bool disposing)
        {
            if (disposing && this.icontainer_0 != null)
            {
                this.icontainer_0.Dispose();
            }
            base.Dispose(disposing);
        }

        // Token: 0x060001B4 RID: 436 RVA: 0x003BE554 File Offset: 0x00306554
        [PermissionSet(SecurityAction.Demand, XML = "<PermissionSet class=\"System.Security.PermissionSet\"\r\n               version=\"1\"\r\n               Unrestricted=\"true\"/>\r\n")]
        protected override void WndProc(ref Message message_0)
        {
            if (message_0.Msg == 537)
            {
                if (this.bool_5)
                {
                    this.bool_6 = true;
                }
                else
                {
                    this.bool_6 = false;
                }
                this.method_410();
                if (this.bool_6 != this.bool_5)
                {
                    if (this.bool_5)
                    {
                        this.textBox6.AppendText("XECUTER X360USB PRO attached." + "\r\n\r\n");
                        this.method_170();
                    }
                    else
                    {
                        this.textBox6.AppendText("XECUTER X360USB PRO removed." + "\r\n\r\n");
                        this.method_422();
                        this.method_170();
                    }
                }
                if (this.bool_7)
                {
                    this.bool_8 = true;
                }
                else
                {
                    this.bool_8 = false;
                }
                this.method_411();
                if (this.bool_8 != this.bool_7)
                {
                    if (this.bool_7)
                    {
                        this.textBox6.AppendText("XECUTER X360USB BAD ASS attached." + "\r\n\r\n");
                        this.method_170();
                    }
                    else
                    {
                        this.textBox6.AppendText("XECUTER X360USB BAD ASS removed." + "\r\n\r\n");
                        this.method_423();
                        this.method_170();
                    }
                }
                IntPtr value = 0;
                value = new IntPtr(32768);
                IntPtr wparam = message_0.WParam;
                IntPtr value2 = wparam;
                if (value2 == value)
                {
                    IntPtr lparam = message_0.LParam;
                    IntPtr ptr = lparam;
                    int num = Marshal.ReadInt32(ptr, 4);
                    if (num == 2)
                    {
                        this.int_11 = this.int_10;
                        this.method_360();
                        if (this.int_11 < this.int_10)
                        {
                            this.textBox6.AppendText("New CD/DVD detected." + "\r\n");
                            this.method_361();
                        }
                    }
                }
                IntPtr value3 = 0;
                value3 = new IntPtr(32772);
                IntPtr wparam2 = message_0.WParam;
                IntPtr value4 = wparam2;
                if (value4 == value3)
                {
                    IntPtr lparam2 = message_0.LParam;
                    IntPtr ptr2 = lparam2;
                    int num = Marshal.ReadInt32(ptr2, 4);
                    if (num == 2)
                    {
                        this.method_360();
                        this.int_11 = this.int_10;
                    }
                }
            }
            base.WndProc(ref message_0);
        }

        // Token: 0x060001B5 RID: 437 RVA: 0x000F734C File Offset: 0x000F734C
        private void InitializeComponent()
        {
            this.icontainer_0 = new Container();
            ResourceManager resourceManager = new ResourceManager(typeof(Form1_DnSpy));
            this.tabControl1 = new TabControl();
            this.tabPage9 = new TabPage();
            this.contextMenu_2 = new ContextMenu();
            this.menuItem_5 = new MenuItem();
            this.menuItem_6 = new MenuItem();
            this.menuItem_7 = new MenuItem();
            this.menuItem_12 = new MenuItem();
            this.menuItem_13 = new MenuItem();
            this.menuItem_19 = new MenuItem();
            this.menuItem_33 = new MenuItem();
            this.label40 = new Label();
            this.label44 = new Label();
            this.label43 = new Label();
            this.label41 = new Label();
            this.label37 = new Label();
            this.textBox15 = new TextBox();
            this.textBox14 = new TextBox();
            this.label19 = new Label();
            this.textBox9 = new TextBox();
            this.label15 = new Label();
            this.label7 = new Label();
            this.label6 = new Label();
            this.label5 = new Label();
            this.label4 = new Label();
            this.label3 = new Label();
            this.label16 = new Label();
            this.label8 = new Label();
            this.label101 = new Label();
            this.axWebBrowser_0 = new AxWebBrowser();
            this.axWebBrowser_1 = new AxWebBrowser();
            this.textBox19 = new TextBox();
            this.tabControl2 = new TabControl();
            this.tabPage10 = new TabPage();
            this.contextMenu_1 = new ContextMenu();
            this.menuItem_2 = new MenuItem();
            this.menuItem_3 = new MenuItem();
            this.menuItem_4 = new MenuItem();
            this.menuItem_11 = new MenuItem();
            this.menuItem_20 = new MenuItem();
            this.menuItem_32 = new MenuItem();
            this.menuItem_37 = new MenuItem();
            this.label71 = new Label();
            this.label50 = new Label();
            this.textBox11 = new TextBox();
            this.label55 = new Label();
            this.label48 = new Label();
            this.label47 = new Label();
            this.textBox17 = new TextBox();
            this.label17 = new Label();
            this.label18 = new Label();
            this.label9 = new Label();
            this.label10 = new Label();
            this.label11 = new Label();
            this.label12 = new Label();
            this.label13 = new Label();
            this.label14 = new Label();
            this.label20 = new Label();
            this.label49 = new Label();
            this.textBox5 = new TextBox();
            this.OpenSource = new Button();
            this.DumpDrive = new Button();
            this.SaveTarget = new Button();
            this.OpeniXtreme = new Button();
            this.button6 = new Button();
            this.tabControl3 = new TabControl();
            this.tabPage3 = new TabPage();
            this.label45 = new Label();
            this.label128 = new Label();
            this.label39 = new Label();
            this.label46 = new Label();
            this.label42 = new Label();
            this.label38 = new Label();
            this.textBox3 = new TextBox();
            this.label21 = new Label();
            this.label22 = new Label();
            this.label23 = new Label();
            this.label24 = new Label();
            this.label25 = new Label();
            this.label26 = new Label();
            this.label27 = new Label();
            this.label28 = new Label();
            this.label29 = new Label();
            this.textBox16 = new TextBox();
            this.textBox8 = new TextBox();
            this.tabPage7 = new TabPage();
            this.textBox7 = new TextBox();
            this.tabPage11 = new TabPage();
            this.textBox10 = new TextBox();
            this.tabPage12 = new TabPage();
            this.textBox12 = new TextBox();
            this.tabControl4 = new TabControl();
            this.tabPage1 = new TabPage();
            this.label129 = new Label();
            this.label54 = new Label();
            this.textBox1 = new TextBox();
            this.label56 = new Label();
            this.label53 = new Label();
            this.label52 = new Label();
            this.label51 = new Label();
            this.textBox18 = new TextBox();
            this.label1 = new Label();
            this.label2 = new Label();
            this.label30 = new Label();
            this.label31 = new Label();
            this.label32 = new Label();
            this.label33 = new Label();
            this.label34 = new Label();
            this.label35 = new Label();
            this.label36 = new Label();
            this.tabPage2 = new TabPage();
            this.textBox2 = new TextBox();
            this.tabPage4 = new TabPage();
            this.textBox4 = new TextBox();
            this.tabPage13 = new TabPage();
            this.textBox13 = new TextBox();
            this.checkBox3 = new CheckBox();
            this.button2 = new Button();
            this.tabControl5 = new TabControl();
            this.Firmtools = new TabPage();
            this.button41 = new Button();
            this.linkLabel1 = new LinkLabel();
            this.button29 = new Button();
            this.pictureBox1 = new PictureBox();
            this.linkLabel4 = new LinkLabel();
            this.DVDKey32 = new TabPage();
            this.button39 = new Button();
            this.button38 = new Button();
            this.checkBox15 = new CheckBox();
            this.button32 = new Button();
            this.button10 = new Button();
            this.button8 = new Button();
            this.button4 = new Button();
            this.button1 = new Button();
            this.checkBox9 = new CheckBox();
            this.checkBox8 = new CheckBox();
            this.button28 = new Button();
            this.checkBox4 = new CheckBox();
            this.checkBox2 = new CheckBox();
            this.button5 = new Button();
            this.contextMenu_3 = new ContextMenu();
            this.menuItem_14 = new MenuItem();
            this.menuItem_15 = new MenuItem();
            this.menuItem_16 = new MenuItem();
            this.menuItem_17 = new MenuItem();
            this.menuItem_18 = new MenuItem();
            this.groupBox16 = new GroupBox();
            this.contextMenu_4 = new ContextMenu();
            this.menuItem_21 = new MenuItem();
            this.menuItem_22 = new MenuItem();
            this.menuItem_23 = new MenuItem();
            this.menuItem_24 = new MenuItem();
            this.pictureBox5 = new PictureBox();
            this.pictureBox7 = new PictureBox();
            this.label131 = new Label();
            this.label130 = new Label();
            this.label92 = new Label();
            this.label93 = new Label();
            this.label94 = new Label();
            this.label106 = new Label();
            this.label107 = new Label();
            this.label108 = new Label();
            this.label109 = new Label();
            this.label110 = new Label();
            this.comboBox1 = new ComboBox();
            this.label111 = new Label();
            this.groupBox17 = new GroupBox();
            this.pictureBox10 = new PictureBox();
            this.pictureBox8 = new PictureBox();
            this.label112 = new Label();
            this.label113 = new Label();
            this.label115 = new Label();
            this.label116 = new Label();
            this.label117 = new Label();
            this.label123 = new Label();
            this.label124 = new Label();
            this.label125 = new Label();
            this.label126 = new Label();
            this.label127 = new Label();
            this.comboBox10 = new ComboBox();
            this.label57 = new Label();
            this.groupBox2 = new GroupBox();
            this.contextMenu_5 = new ContextMenu();
            this.menuItem_25 = new MenuItem();
            this.menuItem_26 = new MenuItem();
            this.menuItem_27 = new MenuItem();
            this.menuItem_29 = new MenuItem();
            this.menuItem_28 = new MenuItem();
            this.menuItem_30 = new MenuItem();
            this.menuItem_31 = new MenuItem();
            this.label103 = new Label();
            this.label63 = new Label();
            this.label105 = new Label();
            this.label104 = new Label();
            this.label102 = new Label();
            this.label64 = new Label();
            this.label65 = new Label();
            this.label66 = new Label();
            this.groupBox4 = new GroupBox();
            this.label88 = new Label();
            this.label87 = new Label();
            this.label69 = new Label();
            this.label70 = new Label();
            this.Benq = new TabPage();
            this.checkBox16 = new CheckBox();
            this.checkBox10 = new CheckBox();
            this.checkBox11 = new CheckBox();
            this.linkLabel2 = new LinkLabel();
            this.groupBox9 = new GroupBox();
            this.radioButton21 = new RadioButton();
            this.button42 = new Button();
            this.radioButton20 = new RadioButton();
            this.radioButton19 = new RadioButton();
            this.button14 = new Button();
            this.button13 = new Button();
            this.button15 = new Button();
            this.button17 = new Button();
            this.button16 = new Button();
            this.groupBox7 = new GroupBox();
            this.button40 = new Button();
            this.button18 = new Button();
            this.button7 = new Button();
            this.button21 = new Button();
            this.groupBox1 = new GroupBox();
            this.pictureBox2 = new PictureBox();
            this.pictureBox6 = new PictureBox();
            this.label133 = new Label();
            this.label132 = new Label();
            this.label72 = new Label();
            this.label58 = new Label();
            this.label59 = new Label();
            this.label60 = new Label();
            this.label61 = new Label();
            this.label62 = new Label();
            this.label67 = new Label();
            this.label68 = new Label();
            this.comboBox7 = new ComboBox();
            this.label73 = new Label();
            this.groupBox3 = new GroupBox();
            this.pictureBox11 = new PictureBox();
            this.pictureBox9 = new PictureBox();
            this.label74 = new Label();
            this.label75 = new Label();
            this.label76 = new Label();
            this.label81 = new Label();
            this.label83 = new Label();
            this.label84 = new Label();
            this.label85 = new Label();
            this.label86 = new Label();
            this.label95 = new Label();
            this.label96 = new Label();
            this.groupBox6 = new GroupBox();
            this.label118 = new Label();
            this.label122 = new Label();
            this.label121 = new Label();
            this.label120 = new Label();
            this.label119 = new Label();
            this.label114 = new Label();
            this.label77 = new Label();
            this.label78 = new Label();
            this.label79 = new Label();
            this.label80 = new Label();
            this.checkBox5 = new CheckBox();
            this.button9 = new Button();
            this.Hitachi = new TabPage();
            this.radioButton18 = new RadioButton();
            this.radioButton17 = new RadioButton();
            this.groupBox8 = new GroupBox();
            this.radioButton5 = new RadioButton();
            this.radioButton4 = new RadioButton();
            this.radioButton3 = new RadioButton();
            this.radioButton2 = new RadioButton();
            this.radioButton1 = new RadioButton();
            this.groupBox15 = new GroupBox();
            this.button22 = new Button();
            this.button3 = new Button();
            this.comboBox16 = new ComboBox();
            this.contextMenu_0 = new ContextMenu();
            this.menuItem_0 = new MenuItem();
            this.menuItem_1 = new MenuItem();
            this.menuItem_8 = new MenuItem();
            this.menuItem_9 = new MenuItem();
            this.menuItem_10 = new MenuItem();
            this.menuItem_38 = new MenuItem();
            this.menuItem_39 = new MenuItem();
            this.menuItem_40 = new MenuItem();
            this.menuItem_41 = new MenuItem();
            this.menuItem_42 = new MenuItem();
            this.menuItem_49 = new MenuItem();
            this.menuItem_48 = new MenuItem();
            this.menuItem_44 = new MenuItem();
            this.menuItem_46 = new MenuItem();
            this.menuItem_50 = new MenuItem();
            this.menuItem_45 = new MenuItem();
            this.menuItem_51 = new MenuItem();
            this.menuItem_47 = new MenuItem();
            this.menuItem_52 = new MenuItem();
            this.menuItem_43 = new MenuItem();
            this.button27 = new Button();
            this.button23 = new Button();
            this.groupBox14 = new GroupBox();
            this.button24 = new Button();
            this.button12 = new Button();
            this.checkBox1 = new CheckBox();
            this.linkLabel3 = new LinkLabel();
            this.groupBox12 = new GroupBox();
            this.listBox5 = new ListBox();
            this.groupBox13 = new GroupBox();
            this.button25 = new Button();
            this.label99 = new Label();
            this.label97 = new Label();
            this.label98 = new Label();
            this.label100 = new Label();
            this.button11 = new Button();
            this.label82 = new Label();
            this.label89 = new Label();
            this.label91 = new Label();
            this.comboBox13 = new ComboBox();
            this.button20 = new Button();
            this.button19 = new Button();
            this.label90 = new Label();
            this.groupBox11 = new GroupBox();
            this.radioButton16 = new RadioButton();
            this.radioButton11 = new RadioButton();
            this.radioButton10 = new RadioButton();
            this.radioButton9 = new RadioButton();
            this.radioButton8 = new RadioButton();
            this.radioButton7 = new RadioButton();
            this.radioButton6 = new RadioButton();
            this.button26 = new Button();
            this.groupBox5 = new GroupBox();
            this.radioButton12 = new RadioButton();
            this.radioButton13 = new RadioButton();
            this.radioButton14 = new RadioButton();
            this.radioButton15 = new RadioButton();
            this.tabPage5 = new TabPage();
            this.pictureBox4 = new PictureBox();
            this.button31 = new Button();
            this.button30 = new Button();
            this.checkBox7 = new CheckBox();
            this.checkBox6 = new CheckBox();
            this.textBox6 = new TextBox();
            this.toolTip_0 = new ToolTip(this.icontainer_0);
            this.pictureBox3 = new PictureBox();
            this.button48 = new Button();
            this.button47 = new Button();
            this.button46 = new Button();
            this.button45 = new Button();
            this.button44 = new Button();
            this.button43 = new Button();
            this.textBox20 = new TextBox();
            this.label135 = new Label();
            this.groupBox18 = new GroupBox();
            this.contextMenu_6 = new ContextMenu();
            this.menuItem_34 = new MenuItem();
            this.menuItem_35 = new MenuItem();
            this.menuItem_36 = new MenuItem();
            this.tabControl1.SuspendLayout();
            this.tabPage9.SuspendLayout();
            ((ISupportInitialize)this.axWebBrowser_0).BeginInit();
            ((ISupportInitialize)this.axWebBrowser_1).BeginInit();
            this.tabControl2.SuspendLayout();
            this.tabPage10.SuspendLayout();
            this.tabControl3.SuspendLayout();
            this.tabPage3.SuspendLayout();
            this.tabPage7.SuspendLayout();
            this.tabPage11.SuspendLayout();
            this.tabPage12.SuspendLayout();
            this.tabControl4.SuspendLayout();
            this.tabPage1.SuspendLayout();
            this.tabPage2.SuspendLayout();
            this.tabPage4.SuspendLayout();
            this.tabPage13.SuspendLayout();
            this.tabControl5.SuspendLayout();
            this.Firmtools.SuspendLayout();
            this.DVDKey32.SuspendLayout();
            this.groupBox16.SuspendLayout();
            this.groupBox17.SuspendLayout();
            this.groupBox2.SuspendLayout();
            this.groupBox4.SuspendLayout();
            this.Benq.SuspendLayout();
            this.groupBox9.SuspendLayout();
            this.groupBox7.SuspendLayout();
            this.groupBox1.SuspendLayout();
            this.groupBox3.SuspendLayout();
            this.groupBox6.SuspendLayout();
            this.Hitachi.SuspendLayout();
            this.groupBox8.SuspendLayout();
            this.groupBox15.SuspendLayout();
            this.groupBox14.SuspendLayout();
            this.groupBox12.SuspendLayout();
            this.groupBox13.SuspendLayout();
            this.groupBox11.SuspendLayout();
            this.groupBox5.SuspendLayout();
            this.tabPage5.SuspendLayout();
            this.groupBox18.SuspendLayout();
            base.SuspendLayout();
            this.tabControl1.AllowDrop = true;
            this.tabControl1.Controls.Add(this.tabPage9);
            Point location = default(Point);
            location = new Point(8, 16);
            this.tabControl1.Location = location;
            this.tabControl1.Name = "tabControl1";
            this.tabControl1.SelectedIndex = 0;
            Size size = default(Size);
            size = new Size(552, 144);
            this.tabControl1.Size = size;
            this.tabControl1.TabIndex = 0;
            this.tabPage9.AllowDrop = true;
            this.tabPage9.ContextMenu = this.contextMenu_2;
            this.tabPage9.Controls.Add(this.label40);
            this.tabPage9.Controls.Add(this.label44);
            this.tabPage9.Controls.Add(this.label43);
            this.tabPage9.Controls.Add(this.label41);
            this.tabPage9.Controls.Add(this.label37);
            this.tabPage9.Controls.Add(this.textBox15);
            this.tabPage9.Controls.Add(this.textBox14);
            this.tabPage9.Controls.Add(this.label19);
            this.tabPage9.Controls.Add(this.textBox9);
            this.tabPage9.Controls.Add(this.label15);
            this.tabPage9.Controls.Add(this.label7);
            this.tabPage9.Controls.Add(this.label6);
            this.tabPage9.Controls.Add(this.label5);
            this.tabPage9.Controls.Add(this.label4);
            this.tabPage9.Controls.Add(this.label3);
            this.tabPage9.Controls.Add(this.label16);
            this.tabPage9.Controls.Add(this.label8);
            this.tabPage9.Controls.Add(this.label101);
            Point location2 = default(Point);
            location2 = new Point(4, 22);
            this.tabPage9.Location = location2;
            this.tabPage9.Name = "tabPage9";
            Size size2 = default(Size);
            size2 = new Size(544, 118);
            this.tabPage9.Size = size2;
            this.tabPage9.TabIndex = 4;
            this.tabPage9.Text = "Source";
            this.tabPage9.DragEnter += this.tabPage12_DragEnter;
            this.tabPage9.DragDrop += this.tabPage12_DragDrop;
            MenuItem[] items = new MenuItem[]
            {
                this.menuItem_5,
                this.menuItem_6,
                this.menuItem_7,
                this.menuItem_12,
                this.menuItem_13,
                this.menuItem_19,
                this.menuItem_33
            };
            this.contextMenu_2.MenuItems.AddRange(items);
            this.menuItem_5.Index = 0;
            this.menuItem_5.Text = "Load f/w";
            this.menuItem_5.Click += this.menuItem_5_Click;
            this.menuItem_6.Enabled = false;
            this.menuItem_6.Index = 1;
            this.menuItem_6.Text = "Clear Source";
            this.menuItem_6.Click += this.menuItem_6_Click;
            this.menuItem_7.Enabled = false;
            this.menuItem_7.Index = 2;
            this.menuItem_7.Text = "Update d/b";
            this.menuItem_7.Click += this.menuItem_7_Click;
            this.menuItem_12.Index = 3;
            this.menuItem_12.Text = "Open Key d/b";
            this.menuItem_12.Click += this.menuItem_12_Click;
            this.menuItem_13.Enabled = false;
            this.menuItem_13.Index = 4;
            this.menuItem_13.Text = "History";
            this.menuItem_13.Click += this.menuItem_13_Click;
            this.menuItem_19.Enabled = false;
            this.menuItem_19.Index = 5;
            this.menuItem_19.Text = "Verify Key";
            this.menuItem_19.Click += this.menuItem_19_Click;
            this.menuItem_33.Enabled = false;
            this.menuItem_33.Index = 6;
            this.menuItem_33.Text = "Auto LT-Plus";
            this.menuItem_33.Click += this.menuItem_33_Click;
            this.label40.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            Point location3 = default(Point);
            location3 = new Point(320, 96);
            this.label40.Location = location3;
            this.label40.Name = "label40";
            Size size3 = default(Size);
            size3 = new Size(216, 16);
            this.label40.Size = size3;
            this.label40.TabIndex = 29;
            this.label44.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location4 = default(Point);
            location4 = new Point(48, 96);
            this.label44.Location = location4;
            this.label44.Name = "label44";
            Size size4 = default(Size);
            size4 = new Size(208, 16);
            this.label44.Size = size4;
            this.label44.TabIndex = 32;
            Point location5 = default(Point);
            location5 = new Point(16, 96);
            this.label43.Location = location5;
            this.label43.Name = "label43";
            Size size5 = default(Size);
            size5 = new Size(40, 16);
            this.label43.Size = size5;
            this.label43.TabIndex = 31;
            this.label43.Text = "OSIG:";
            Point location6 = default(Point);
            location6 = new Point(256, 96);
            this.label41.Location = location6;
            this.label41.Name = "label41";
            Size size6 = default(Size);
            size6 = new Size(72, 16);
            this.label41.Size = size6;
            this.label41.TabIndex = 30;
            this.label41.Text = "Spoofed As:";
            this.label41.Visible = false;
            Point location7 = default(Point);
            location7 = new Point(376, 48);
            this.label37.Location = location7;
            this.label37.Name = "label37";
            Size size7 = default(Size);
            size7 = new Size(48, 16);
            this.label37.Size = size7;
            this.label37.TabIndex = 26;
            Color window = SystemColors.Window;
            Color color = window;
            Color backColor = color;
            this.textBox15.BackColor = backColor;
            Point location8 = default(Point);
            location8 = new Point(16, 16);
            this.textBox15.Location = location8;
            this.textBox15.Name = "textBox15";
            this.textBox15.ReadOnly = true;
            Size size8 = default(Size);
            size8 = new Size(512, 20);
            this.textBox15.Size = size8;
            this.textBox15.TabIndex = 25;
            this.textBox15.Text = "";
            Color window2 = SystemColors.Window;
            Color color2 = window2;
            Color backColor2 = color2;
            this.textBox14.BackColor = backColor2;
            Point location9 = default(Point);
            location9 = new Point(88, 130);
            this.textBox14.Location = location9;
            this.textBox14.Name = "textBox14";
            this.textBox14.ReadOnly = true;
            Size size9 = default(Size);
            size9 = new Size(440, 20);
            this.textBox14.Size = size9;
            this.textBox14.TabIndex = 24;
            this.textBox14.Text = "";
            this.textBox14.Visible = false;
            Point location10 = default(Point);
            location10 = new Point(304, 48);
            this.label19.Location = location10;
            this.label19.Name = "label19";
            Size size10 = default(Size);
            size10 = new Size(72, 16);
            this.label19.Size = size10;
            this.label19.TabIndex = 12;
            this.label19.Text = "DVD Key @";
            Color window3 = SystemColors.Window;
            Color color3 = window3;
            Color backColor3 = color3;
            this.textBox9.BackColor = backColor3;
            Point location11 = default(Point);
            location11 = new Point(296, 64);
            this.textBox9.Location = location11;
            this.textBox9.Name = "textBox9";
            this.textBox9.ReadOnly = true;
            Size size11 = default(Size);
            size11 = new Size(232, 20);
            this.textBox9.Size = size11;
            this.textBox9.TabIndex = 11;
            this.textBox9.Text = "";
            Point location12 = default(Point);
            location12 = new Point(184, 48);
            this.label15.Location = location12;
            this.label15.Name = "label15";
            Size size12 = default(Size);
            size12 = new Size(120, 16);
            this.label15.Size = size12;
            this.label15.TabIndex = 9;
            this.label15.Text = "Firmware Type";
            Point location13 = default(Point);
            location13 = new Point(64, 68);
            this.label7.Location = location13;
            this.label7.Name = "label7";
            Size size13 = default(Size);
            size13 = new Size(64, 16);
            this.label7.Size = size13;
            this.label7.TabIndex = 5;
            Point location14 = default(Point);
            location14 = new Point(16, 68);
            this.label6.Location = location14;
            this.label6.Name = "label6";
            Size size14 = default(Size);
            size14 = new Size(48, 16);
            this.label6.Size = size14;
            this.label6.TabIndex = 4;
            Point location15 = default(Point);
            location15 = new Point(128, 48);
            this.label5.Location = location15;
            this.label5.Name = "label5";
            Size size15 = default(Size);
            size15 = new Size(64, 16);
            this.label5.Size = size15;
            this.label5.TabIndex = 3;
            this.label5.Text = "Rev";
            Point location16 = default(Point);
            location16 = new Point(64, 48);
            this.label4.Location = location16;
            this.label4.Name = "label4";
            Size size16 = default(Size);
            size16 = new Size(64, 16);
            this.label4.Size = size16;
            this.label4.TabIndex = 2;
            this.label4.Text = "Model ";
            Point location17 = default(Point);
            location17 = new Point(16, 48);
            this.label3.Location = location17;
            this.label3.Name = "label3";
            Size size17 = default(Size);
            size17 = new Size(72, 16);
            this.label3.Size = size17;
            this.label3.TabIndex = 1;
            this.label3.Text = "Vendor";
            Point location18 = default(Point);
            location18 = new Point(184, 68);
            this.label16.Location = location18;
            this.label16.Name = "label16";
            Size size18 = default(Size);
            size18 = new Size(120, 24);
            this.label16.Size = size18;
            this.label16.TabIndex = 10;
            Point location19 = default(Point);
            location19 = new Point(128, 68);
            this.label8.Location = location19;
            this.label8.Name = "label8";
            Size size19 = default(Size);
            size19 = new Size(64, 16);
            this.label8.Size = size19;
            this.label8.TabIndex = 6;
            Point location20 = default(Point);
            location20 = new Point(432, 48);
            this.label101.Location = location20;
            this.label101.Name = "label101";
            Size size20 = default(Size);
            size20 = new Size(90, 16);
            this.label101.Size = size20;
            this.label101.TabIndex = 36;
            this.axWebBrowser_0.Enabled = true;
            Point location21 = default(Point);
            location21 = new Point(678, 6);
            this.axWebBrowser_0.Location = location21;
            this.axWebBrowser_0.OcxState = (AxHost.State)resourceManager.GetObject("axWebBrowser1.OcxState");
            Size size21 = default(Size);
            size21 = new Size(564, 164);
            this.axWebBrowser_0.Size = size21;
            this.axWebBrowser_0.TabIndex = 74;
            this.axWebBrowser_0.NewWindow3 += new DWebBrowserEvents2_NewWindow3EventHandler(this.axWebBrowser_0_NewWindow3);
            this.axWebBrowser_0.NavigateError += new DWebBrowserEvents2_NavigateErrorEventHandler(this.axWebBrowser_0_NavigateError);
            this.axWebBrowser_0.NavigateComplete2 += new DWebBrowserEvents2_NavigateComplete2EventHandler(this.axWebBrowser_0_NavigateComplete2);
            this.axWebBrowser_1.ContainingControl = this;
            this.axWebBrowser_1.Enabled = true;
            Point location22 = default(Point);
            location22 = new Point(8, 8);
            this.axWebBrowser_1.Location = location22;
            this.axWebBrowser_1.OcxState = (AxHost.State)resourceManager.GetObject("axWebBrowser2.OcxState");
            Size size22 = default(Size);
            size22 = new Size(640, 328);
            this.axWebBrowser_1.Size = size22;
            this.axWebBrowser_1.TabIndex = 74;
            this.axWebBrowser_1.NewWindow3 += new DWebBrowserEvents2_NewWindow3EventHandler(this.axWebBrowser_1_NewWindow3);
            this.axWebBrowser_1.NavigateError += new DWebBrowserEvents2_NavigateErrorEventHandler(this.axWebBrowser_1_NavigateError);
            Color window4 = SystemColors.Window;
            Color color4 = window4;
            Color backColor4 = color4;
            this.textBox19.BackColor = backColor4;
            Point location23 = default(Point);
            location23 = new Point(368, 432);
            this.textBox19.Location = location23;
            this.textBox19.Name = "textBox19";
            Size size23 = default(Size);
            size23 = new Size(112, 20);
            this.textBox19.Size = size23;
            this.textBox19.TabIndex = 29;
            this.textBox19.Text = "EasyToFindSource";
            this.textBox19.TextChanged += this.textBox19_TextChanged;
            this.tabControl2.Controls.Add(this.tabPage10);
            Point location24 = default(Point);
            location24 = new Point(8, 208);
            this.tabControl2.Location = location24;
            this.tabControl2.Name = "tabControl2";
            this.tabControl2.SelectedIndex = 0;
            Size size24 = default(Size);
            size24 = new Size(552, 144);
            this.tabControl2.Size = size24;
            this.tabControl2.TabIndex = 3;
            this.tabPage10.AllowDrop = true;
            this.tabPage10.ContextMenu = this.contextMenu_1;
            this.tabPage10.Controls.Add(this.label71);
            this.tabPage10.Controls.Add(this.label50);
            this.tabPage10.Controls.Add(this.textBox11);
            this.tabPage10.Controls.Add(this.label55);
            this.tabPage10.Controls.Add(this.label48);
            this.tabPage10.Controls.Add(this.label47);
            this.tabPage10.Controls.Add(this.textBox17);
            this.tabPage10.Controls.Add(this.label17);
            this.tabPage10.Controls.Add(this.label18);
            this.tabPage10.Controls.Add(this.label9);
            this.tabPage10.Controls.Add(this.label10);
            this.tabPage10.Controls.Add(this.label11);
            this.tabPage10.Controls.Add(this.label12);
            this.tabPage10.Controls.Add(this.label13);
            this.tabPage10.Controls.Add(this.label14);
            this.tabPage10.Controls.Add(this.label20);
            this.tabPage10.Controls.Add(this.label49);
            Point location25 = default(Point);
            location25 = new Point(4, 22);
            this.tabPage10.Location = location25;
            this.tabPage10.Name = "tabPage10";
            Size size25 = default(Size);
            size25 = new Size(544, 118);
            this.tabPage10.Size = size25;
            this.tabPage10.TabIndex = 4;
            this.tabPage10.Text = "Target";
            this.tabPage10.DragEnter += this.tabPage13_DragEnter;
            this.tabPage10.DragDrop += this.tabPage13_DragDrop;
            MenuItem[] items2 = new MenuItem[]
            {
                this.menuItem_2,
                this.menuItem_3,
                this.menuItem_4,
                this.menuItem_11,
                this.menuItem_20,
                this.menuItem_32,
                this.menuItem_37
            };
            this.contextMenu_1.MenuItems.AddRange(items2);
            this.menuItem_2.Index = 0;
            this.menuItem_2.Text = "Load f/w";
            this.menuItem_2.Click += this.menuItem_2_Click;
            this.menuItem_3.Index = 1;
            this.menuItem_3.Text = "Load iXtreme";
            this.menuItem_3.Click += this.menuItem_3_Click;
            this.menuItem_4.Enabled = false;
            this.menuItem_4.Index = 2;
            this.menuItem_4.Text = "Clear Target";
            this.menuItem_4.Click += this.menuItem_4_Click;
            this.menuItem_11.Enabled = false;
            this.menuItem_11.Index = 3;
            this.menuItem_11.Text = "Save Dummy";
            this.menuItem_11.Click += this.menuItem_11_Click;
            this.menuItem_20.Enabled = false;
            this.menuItem_20.Index = 4;
            this.menuItem_20.Text = "Verify Key";
            this.menuItem_20.Click += this.menuItem_20_Click;
            this.menuItem_32.Enabled = false;
            this.menuItem_32.Index = 5;
            this.menuItem_32.Text = "Write Key";
            this.menuItem_32.Visible = false;
            this.menuItem_32.Click += this.menuItem_32_Click;
            this.menuItem_37.Enabled = false;
            this.menuItem_37.Index = 6;
            this.menuItem_37.Text = "Key C/R";
            this.menuItem_37.Visible = false;
            this.menuItem_37.Click += this.menuItem_37_Click;
            Point location26 = default(Point);
            location26 = new Point(432, 48);
            this.label71.Location = location26;
            this.label71.Name = "label71";
            Size size26 = default(Size);
            size26 = new Size(90, 16);
            this.label71.Size = size26;
            this.label71.TabIndex = 35;
            this.label50.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            Point location27 = default(Point);
            location27 = new Point(320, 96);
            this.label50.Location = location27;
            this.label50.Name = "label50";
            Size size27 = default(Size);
            size27 = new Size(216, 16);
            this.label50.Size = size27;
            this.label50.TabIndex = 33;
            Color window5 = SystemColors.Window;
            Color color5 = window5;
            Color backColor5 = color5;
            this.textBox11.BackColor = backColor5;
            Point location28 = default(Point);
            location28 = new Point(296, 64);
            this.textBox11.Location = location28;
            this.textBox11.Name = "textBox11";
            this.textBox11.ReadOnly = true;
            Size size28 = default(Size);
            size28 = new Size(232, 20);
            this.textBox11.Size = size28;
            this.textBox11.TabIndex = 21;
            this.textBox11.Text = "";
            this.textBox11.TextChanged += this.textBox11_TextChanged;
            Point location29 = default(Point);
            location29 = new Point(376, 48);
            this.label55.Location = location29;
            this.label55.Name = "label55";
            Size size29 = default(Size);
            size29 = new Size(48, 16);
            this.label55.Size = size29;
            this.label55.TabIndex = 34;
            this.label48.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location30 = default(Point);
            location30 = new Point(48, 96);
            this.label48.Location = location30;
            this.label48.Name = "label48";
            Size size30 = default(Size);
            size30 = new Size(208, 16);
            this.label48.Size = size30;
            this.label48.TabIndex = 33;
            Point location31 = default(Point);
            location31 = new Point(16, 96);
            this.label47.Location = location31;
            this.label47.Name = "label47";
            Size size31 = default(Size);
            size31 = new Size(40, 16);
            this.label47.Size = size31;
            this.label47.TabIndex = 32;
            this.label47.Text = "OSIG:";
            Color window6 = SystemColors.Window;
            Color color6 = window6;
            Color backColor6 = color6;
            this.textBox17.BackColor = backColor6;
            Point location32 = default(Point);
            location32 = new Point(16, 16);
            this.textBox17.Location = location32;
            this.textBox17.Name = "textBox17";
            this.textBox17.ReadOnly = true;
            Size size32 = default(Size);
            size32 = new Size(512, 20);
            this.textBox17.Size = size32;
            this.textBox17.TabIndex = 26;
            this.textBox17.Text = "";
            Point location33 = default(Point);
            location33 = new Point(184, 68);
            this.label17.Location = location33;
            this.label17.Name = "label17";
            Size size33 = default(Size);
            size33 = new Size(128, 24);
            this.label17.Size = size33;
            this.label17.TabIndex = 18;
            Point location34 = default(Point);
            location34 = new Point(184, 48);
            this.label18.Location = location34;
            this.label18.Name = "label18";
            Size size34 = default(Size);
            size34 = new Size(120, 16);
            this.label18.Size = size34;
            this.label18.TabIndex = 17;
            this.label18.Text = "Firmware Type";
            Point location35 = default(Point);
            location35 = new Point(128, 68);
            this.label9.Location = location35;
            this.label9.Name = "label9";
            Size size35 = default(Size);
            size35 = new Size(64, 16);
            this.label9.Size = size35;
            this.label9.TabIndex = 14;
            Point location36 = default(Point);
            location36 = new Point(64, 68);
            this.label10.Location = location36;
            this.label10.Name = "label10";
            Size size36 = default(Size);
            size36 = new Size(72, 16);
            this.label10.Size = size36;
            this.label10.TabIndex = 13;
            Point location37 = default(Point);
            location37 = new Point(16, 68);
            this.label11.Location = location37;
            this.label11.Name = "label11";
            Size size37 = default(Size);
            size37 = new Size(72, 16);
            this.label11.Size = size37;
            this.label11.TabIndex = 12;
            Point location38 = default(Point);
            location38 = new Point(128, 48);
            this.label12.Location = location38;
            this.label12.Name = "label12";
            Size size38 = default(Size);
            size38 = new Size(64, 16);
            this.label12.Size = size38;
            this.label12.TabIndex = 11;
            this.label12.Text = "Rev";
            Point location39 = default(Point);
            location39 = new Point(64, 48);
            this.label13.Location = location39;
            this.label13.Name = "label13";
            Size size39 = default(Size);
            size39 = new Size(64, 16);
            this.label13.Size = size39;
            this.label13.TabIndex = 10;
            this.label13.Text = "Model ";
            Point location40 = default(Point);
            location40 = new Point(16, 48);
            this.label14.Location = location40;
            this.label14.Name = "label14";
            Size size40 = default(Size);
            size40 = new Size(48, 16);
            this.label14.Size = size40;
            this.label14.TabIndex = 9;
            this.label14.Text = "Vendor";
            Point location41 = default(Point);
            location41 = new Point(304, 48);
            this.label20.Location = location41;
            this.label20.Name = "label20";
            Size size41 = default(Size);
            size41 = new Size(72, 16);
            this.label20.Size = size41;
            this.label20.TabIndex = 22;
            this.label20.Text = "DVD Key @";
            Point location42 = default(Point);
            location42 = new Point(256, 96);
            this.label49.Location = location42;
            this.label49.Name = "label49";
            Size size42 = default(Size);
            size42 = new Size(72, 16);
            this.label49.Size = size42;
            this.label49.TabIndex = 33;
            this.label49.Text = "Spoofed As:";
            this.label49.Visible = false;
            Color window7 = SystemColors.Window;
            Color color7 = window7;
            Color backColor7 = color7;
            this.textBox5.BackColor = backColor7;
            Point location43 = default(Point);
            location43 = new Point(504, 432);
            this.textBox5.Location = location43;
            this.textBox5.Name = "textBox5";
            Size size43 = default(Size);
            size43 = new Size(112, 20);
            this.textBox5.Size = size43;
            this.textBox5.TabIndex = 28;
            this.textBox5.Text = "EasyToFindTarget";
            this.textBox5.TextChanged += this.textBox5_TextChanged;
            this.OpenSource.FlatStyle = FlatStyle.System;
            Point location44 = default(Point);
            location44 = new Point(568, 120);
            this.OpenSource.Location = location44;
            this.OpenSource.Name = "OpenSource";
            Size size44 = default(Size);
            size44 = new Size(80, 40);
            this.OpenSource.Size = size44;
            this.OpenSource.TabIndex = 7;
            this.OpenSource.Text = "Open Source Firmware";
            this.OpenSource.Click += this.OpenSource_Click;
            this.DumpDrive.Enabled = false;
            this.DumpDrive.FlatStyle = FlatStyle.System;
            Point location45 = default(Point);
            location45 = new Point(568, 64);
            this.DumpDrive.Location = location45;
            this.DumpDrive.Name = "DumpDrive";
            Size size45 = default(Size);
            size45 = new Size(80, 40);
            this.DumpDrive.Size = size45;
            this.DumpDrive.TabIndex = 8;
            this.DumpDrive.Text = " Save Drive  Key ";
            this.DumpDrive.Click += this.DumpDrive_Click;
            this.SaveTarget.Enabled = false;
            this.SaveTarget.FlatStyle = FlatStyle.System;
            Point location46 = default(Point);
            location46 = new Point(568, 312);
            this.SaveTarget.Location = location46;
            this.SaveTarget.Name = "SaveTarget";
            Size size46 = default(Size);
            size46 = new Size(80, 40);
            this.SaveTarget.Size = size46;
            this.SaveTarget.TabIndex = 15;
            this.SaveTarget.Text = "Save to File";
            this.SaveTarget.Click += this.SaveTarget_Click;
            this.OpeniXtreme.FlatStyle = FlatStyle.System;
            Point location47 = default(Point);
            location47 = new Point(568, 200);
            this.OpeniXtreme.Location = location47;
            this.OpeniXtreme.Name = "OpeniXtreme";
            Size size47 = default(Size);
            size47 = new Size(80, 40);
            this.OpeniXtreme.Size = size47;
            this.OpeniXtreme.TabIndex = 19;
            this.OpeniXtreme.Text = "Open Target Firmware";
            this.OpeniXtreme.Click += this.OpeniXtreme_Click;
            this.button6.Enabled = false;
            this.button6.FlatStyle = FlatStyle.System;
            Point location48 = default(Point);
            location48 = new Point(136, 176);
            this.button6.Location = location48;
            this.button6.Name = "button6";
            Size size48 = default(Size);
            size48 = new Size(288, 24);
            this.button6.Size = size48;
            this.button6.TabIndex = 20;
            this.button6.Text = "Spoof Source to Target";
            this.toolTip_0.SetToolTip(this.button6, "Copy Key, Inquiry, Identify and serial from Source to Target");
            this.button6.Click += this.button6_Click;
            this.tabControl3.Controls.Add(this.tabPage3);
            this.tabControl3.Controls.Add(this.tabPage7);
            this.tabControl3.Controls.Add(this.tabPage11);
            this.tabControl3.Controls.Add(this.tabPage12);
            Point location49 = default(Point);
            location49 = new Point(8, 16);
            this.tabControl3.Location = location49;
            this.tabControl3.Name = "tabControl3";
            this.tabControl3.SelectedIndex = 0;
            Size size49 = default(Size);
            size49 = new Size(552, 144);
            this.tabControl3.Size = size49;
            this.tabControl3.TabIndex = 21;
            this.tabControl3.Visible = false;
            this.tabPage3.AllowDrop = true;
            this.tabPage3.ContextMenu = this.contextMenu_2;
            this.tabPage3.Controls.Add(this.label45);
            this.tabPage3.Controls.Add(this.label128);
            this.tabPage3.Controls.Add(this.label39);
            this.tabPage3.Controls.Add(this.label46);
            this.tabPage3.Controls.Add(this.label42);
            this.tabPage3.Controls.Add(this.label38);
            this.tabPage3.Controls.Add(this.textBox3);
            this.tabPage3.Controls.Add(this.label21);
            this.tabPage3.Controls.Add(this.label22);
            this.tabPage3.Controls.Add(this.label23);
            this.tabPage3.Controls.Add(this.label24);
            this.tabPage3.Controls.Add(this.label25);
            this.tabPage3.Controls.Add(this.label26);
            this.tabPage3.Controls.Add(this.label27);
            this.tabPage3.Controls.Add(this.label28);
            this.tabPage3.Controls.Add(this.label29);
            this.tabPage3.Controls.Add(this.textBox16);
            this.tabPage3.Controls.Add(this.textBox8);
            Point location50 = default(Point);
            location50 = new Point(4, 22);
            this.tabPage3.Location = location50;
            this.tabPage3.Name = "tabPage3";
            Size size50 = default(Size);
            size50 = new Size(544, 118);
            this.tabPage3.Size = size50;
            this.tabPage3.TabIndex = 4;
            this.tabPage3.Text = "Source";
            this.tabPage3.DragEnter += this.tabPage12_DragEnter;
            this.tabPage3.DragDrop += this.tabPage12_DragDrop;
            this.label45.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location51 = default(Point);
            location51 = new Point(48, 96);
            this.label45.Location = location51;
            this.label45.Name = "label45";
            Size size51 = default(Size);
            size51 = new Size(208, 16);
            this.label45.Size = size51;
            this.label45.TabIndex = 33;
            Point location52 = default(Point);
            location52 = new Point(432, 48);
            this.label128.Location = location52;
            this.label128.Name = "label128";
            Size size52 = default(Size);
            size52 = new Size(90, 16);
            this.label128.Size = size52;
            this.label128.TabIndex = 37;
            this.label39.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            Point location53 = default(Point);
            location53 = new Point(320, 96);
            this.label39.Location = location53;
            this.label39.Name = "label39";
            Size size53 = default(Size);
            size53 = new Size(216, 16);
            this.label39.Size = size53;
            this.label39.TabIndex = 28;
            Point location54 = default(Point);
            location54 = new Point(16, 96);
            this.label46.Location = location54;
            this.label46.Name = "label46";
            Size size54 = default(Size);
            size54 = new Size(40, 16);
            this.label46.Size = size54;
            this.label46.TabIndex = 34;
            this.label46.Text = "OSIG:";
            Point location55 = default(Point);
            location55 = new Point(256, 96);
            this.label42.Location = location55;
            this.label42.Name = "label42";
            Size size55 = default(Size);
            size55 = new Size(72, 16);
            this.label42.Size = size55;
            this.label42.TabIndex = 29;
            this.label42.Text = "Spoofed As:";
            this.label42.Visible = false;
            Point location56 = default(Point);
            location56 = new Point(376, 48);
            this.label38.Location = location56;
            this.label38.Name = "label38";
            Size size56 = default(Size);
            size56 = new Size(48, 16);
            this.label38.Size = size56;
            this.label38.TabIndex = 27;
            Color window8 = SystemColors.Window;
            Color color8 = window8;
            Color backColor8 = color8;
            this.textBox3.BackColor = backColor8;
            Point location57 = default(Point);
            location57 = new Point(296, 64);
            this.textBox3.Location = location57;
            this.textBox3.Name = "textBox3";
            this.textBox3.ReadOnly = true;
            Size size57 = default(Size);
            size57 = new Size(232, 20);
            this.textBox3.Size = size57;
            this.textBox3.TabIndex = 11;
            this.textBox3.Text = "";
            Point location58 = default(Point);
            location58 = new Point(304, 48);
            this.label21.Location = location58;
            this.label21.Name = "label21";
            Size size58 = default(Size);
            size58 = new Size(72, 16);
            this.label21.Size = size58;
            this.label21.TabIndex = 12;
            this.label21.Text = "DVD Key @";
            Point location59 = default(Point);
            location59 = new Point(184, 68);
            this.label22.Location = location59;
            this.label22.Name = "label22";
            Size size59 = default(Size);
            size59 = new Size(128, 24);
            this.label22.Size = size59;
            this.label22.TabIndex = 10;
            Point location60 = default(Point);
            location60 = new Point(184, 48);
            this.label23.Location = location60;
            this.label23.Name = "label23";
            Size size60 = default(Size);
            size60 = new Size(80, 24);
            this.label23.Size = size60;
            this.label23.TabIndex = 9;
            this.label23.Text = "Firmware Type";
            Point location61 = default(Point);
            location61 = new Point(128, 68);
            this.label24.Location = location61;
            this.label24.Name = "label24";
            Size size61 = default(Size);
            size61 = new Size(64, 16);
            this.label24.Size = size61;
            this.label24.TabIndex = 6;
            Point location62 = default(Point);
            location62 = new Point(64, 68);
            this.label25.Location = location62;
            this.label25.Name = "label25";
            Size size62 = default(Size);
            size62 = new Size(72, 16);
            this.label25.Size = size62;
            this.label25.TabIndex = 5;
            Point location63 = default(Point);
            location63 = new Point(16, 68);
            this.label26.Location = location63;
            this.label26.Name = "label26";
            Size size63 = default(Size);
            size63 = new Size(72, 16);
            this.label26.Size = size63;
            this.label26.TabIndex = 4;
            Point location64 = default(Point);
            location64 = new Point(128, 48);
            this.label27.Location = location64;
            this.label27.Name = "label27";
            Size size64 = default(Size);
            size64 = new Size(64, 16);
            this.label27.Size = size64;
            this.label27.TabIndex = 3;
            this.label27.Text = "Rev";
            Point location65 = default(Point);
            location65 = new Point(64, 48);
            this.label28.Location = location65;
            this.label28.Name = "label28";
            Size size65 = default(Size);
            size65 = new Size(64, 16);
            this.label28.Size = size65;
            this.label28.TabIndex = 2;
            this.label28.Text = "Model ";
            Point location66 = default(Point);
            location66 = new Point(16, 48);
            this.label29.Location = location66;
            this.label29.Name = "label29";
            Size size66 = default(Size);
            size66 = new Size(72, 24);
            this.label29.Size = size66;
            this.label29.TabIndex = 1;
            this.label29.Text = "Vendor";
            Color window9 = SystemColors.Window;
            Color color9 = window9;
            Color backColor9 = color9;
            this.textBox16.BackColor = backColor9;
            Point location67 = default(Point);
            location67 = new Point(16, 16);
            this.textBox16.Location = location67;
            this.textBox16.Name = "textBox16";
            this.textBox16.ReadOnly = true;
            Size size67 = default(Size);
            size67 = new Size(512, 20);
            this.textBox16.Size = size67;
            this.textBox16.TabIndex = 26;
            this.textBox16.Text = "";
            Color window10 = SystemColors.Window;
            Color color10 = window10;
            Color backColor10 = color10;
            this.textBox8.BackColor = backColor10;
            Point location68 = default(Point);
            location68 = new Point(88, 130);
            this.textBox8.Location = location68;
            this.textBox8.Name = "textBox8";
            this.textBox8.ReadOnly = true;
            Size size68 = default(Size);
            size68 = new Size(440, 20);
            this.textBox8.Size = size68;
            this.textBox8.TabIndex = 23;
            this.textBox8.Text = "";
            this.textBox8.Visible = false;
            this.tabPage7.AllowDrop = true;
            this.tabPage7.Controls.Add(this.textBox7);
            Point location69 = default(Point);
            location69 = new Point(4, 22);
            this.tabPage7.Location = location69;
            this.tabPage7.Name = "tabPage7";
            Size size69 = default(Size);
            size69 = new Size(544, 118);
            this.tabPage7.Size = size69;
            this.tabPage7.TabIndex = 0;
            this.tabPage7.Text = "Inquiry";
            this.tabPage7.Visible = false;
            this.tabPage7.DragEnter += this.tabPage12_DragEnter;
            this.tabPage7.DragDrop += this.tabPage12_DragDrop;
            Color window11 = SystemColors.Window;
            Color color11 = window11;
            Color backColor11 = color11;
            this.textBox7.BackColor = backColor11;
            this.textBox7.Font = new Font("Courier New", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location70 = default(Point);
            location70 = new Point(8, 8);
            this.textBox7.Location = location70;
            this.textBox7.Multiline = true;
            this.textBox7.Name = "textBox7";
            this.textBox7.ReadOnly = true;
            this.textBox7.ScrollBars = ScrollBars.Vertical;
            Size size70 = default(Size);
            size70 = new Size(528, 96);
            this.textBox7.Size = size70;
            this.textBox7.TabIndex = 1;
            this.textBox7.Text = "";
            this.tabPage11.AllowDrop = true;
            this.tabPage11.Controls.Add(this.textBox10);
            Point location71 = default(Point);
            location71 = new Point(4, 22);
            this.tabPage11.Location = location71;
            this.tabPage11.Name = "tabPage11";
            Size size71 = default(Size);
            size71 = new Size(544, 118);
            this.tabPage11.Size = size71;
            this.tabPage11.TabIndex = 1;
            this.tabPage11.Text = "Identify";
            this.tabPage11.Visible = false;
            this.tabPage11.DragEnter += this.tabPage12_DragEnter;
            this.tabPage11.DragDrop += this.tabPage12_DragDrop;
            Color window12 = SystemColors.Window;
            Color color12 = window12;
            Color backColor12 = color12;
            this.textBox10.BackColor = backColor12;
            this.textBox10.Font = new Font("Courier New", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location72 = default(Point);
            location72 = new Point(8, 8);
            this.textBox10.Location = location72;
            this.textBox10.Multiline = true;
            this.textBox10.Name = "textBox10";
            this.textBox10.ReadOnly = true;
            this.textBox10.ScrollBars = ScrollBars.Vertical;
            Size size72 = default(Size);
            size72 = new Size(528, 96);
            this.textBox10.Size = size72;
            this.textBox10.TabIndex = 2;
            this.textBox10.Text = "";
            this.tabPage12.AllowDrop = true;
            this.tabPage12.Controls.Add(this.textBox12);
            Point location73 = default(Point);
            location73 = new Point(4, 22);
            this.tabPage12.Location = location73;
            this.tabPage12.Name = "tabPage12";
            Size size73 = default(Size);
            size73 = new Size(544, 118);
            this.tabPage12.Size = size73;
            this.tabPage12.TabIndex = 3;
            this.tabPage12.Text = "Drive Serial";
            this.tabPage12.Visible = false;
            this.tabPage12.DragEnter += this.tabPage12_DragEnter;
            this.tabPage12.DragDrop += this.tabPage12_DragDrop;
            Color window13 = SystemColors.Window;
            Color color13 = window13;
            Color backColor13 = color13;
            this.textBox12.BackColor = backColor13;
            this.textBox12.Font = new Font("Courier New", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location74 = default(Point);
            location74 = new Point(8, 8);
            this.textBox12.Location = location74;
            this.textBox12.Multiline = true;
            this.textBox12.Name = "textBox12";
            this.textBox12.ReadOnly = true;
            this.textBox12.ScrollBars = ScrollBars.Vertical;
            Size size74 = default(Size);
            size74 = new Size(528, 96);
            this.textBox12.Size = size74;
            this.textBox12.TabIndex = 4;
            this.textBox12.Text = "";
            this.toolTip_0.SetToolTip(this.textBox12, "For Dummy.bin double click to edit");
            this.textBox12.DoubleClick += this.textBox12_DoubleClick;
            this.tabControl4.Controls.Add(this.tabPage1);
            this.tabControl4.Controls.Add(this.tabPage2);
            this.tabControl4.Controls.Add(this.tabPage4);
            this.tabControl4.Controls.Add(this.tabPage13);
            Point location75 = default(Point);
            location75 = new Point(8, 208);
            this.tabControl4.Location = location75;
            this.tabControl4.Name = "tabControl4";
            this.tabControl4.SelectedIndex = 0;
            Size size75 = default(Size);
            size75 = new Size(552, 144);
            this.tabControl4.Size = size75;
            this.tabControl4.TabIndex = 22;
            this.tabPage1.AllowDrop = true;
            this.tabPage1.ContextMenu = this.contextMenu_1;
            this.tabPage1.Controls.Add(this.label129);
            this.tabPage1.Controls.Add(this.label54);
            this.tabPage1.Controls.Add(this.textBox1);
            this.tabPage1.Controls.Add(this.label56);
            this.tabPage1.Controls.Add(this.label53);
            this.tabPage1.Controls.Add(this.label52);
            this.tabPage1.Controls.Add(this.label51);
            this.tabPage1.Controls.Add(this.textBox18);
            this.tabPage1.Controls.Add(this.label1);
            this.tabPage1.Controls.Add(this.label2);
            this.tabPage1.Controls.Add(this.label30);
            this.tabPage1.Controls.Add(this.label31);
            this.tabPage1.Controls.Add(this.label32);
            this.tabPage1.Controls.Add(this.label33);
            this.tabPage1.Controls.Add(this.label34);
            this.tabPage1.Controls.Add(this.label35);
            this.tabPage1.Controls.Add(this.label36);
            Point location76 = default(Point);
            location76 = new Point(4, 22);
            this.tabPage1.Location = location76;
            this.tabPage1.Name = "tabPage1";
            Size size76 = default(Size);
            size76 = new Size(544, 118);
            this.tabPage1.Size = size76;
            this.tabPage1.TabIndex = 4;
            this.tabPage1.Text = "Target";
            this.tabPage1.DragEnter += this.tabPage13_DragEnter;
            this.tabPage1.DragDrop += this.tabPage13_DragDrop;
            Point location77 = default(Point);
            location77 = new Point(432, 48);
            this.label129.Location = location77;
            this.label129.Name = "label129";
            Size size77 = default(Size);
            size77 = new Size(90, 16);
            this.label129.Size = size77;
            this.label129.TabIndex = 37;
            this.label54.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            Point location78 = default(Point);
            location78 = new Point(320, 96);
            this.label54.Location = location78;
            this.label54.Name = "label54";
            Size size78 = default(Size);
            size78 = new Size(216, 16);
            this.label54.Size = size78;
            this.label54.TabIndex = 35;
            Color window14 = SystemColors.Window;
            Color color14 = window14;
            Color backColor14 = color14;
            this.textBox1.BackColor = backColor14;
            Point location79 = default(Point);
            location79 = new Point(296, 64);
            this.textBox1.Location = location79;
            this.textBox1.Name = "textBox1";
            this.textBox1.ReadOnly = true;
            Size size79 = default(Size);
            size79 = new Size(232, 20);
            this.textBox1.Size = size79;
            this.textBox1.TabIndex = 21;
            this.textBox1.Text = "";
            Point location80 = default(Point);
            location80 = new Point(376, 48);
            this.label56.Location = location80;
            this.label56.Name = "label56";
            Size size80 = default(Size);
            size80 = new Size(48, 16);
            this.label56.Size = size80;
            this.label56.TabIndex = 36;
            this.label53.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location81 = default(Point);
            location81 = new Point(48, 96);
            this.label53.Location = location81;
            this.label53.Name = "label53";
            Size size81 = default(Size);
            size81 = new Size(208, 16);
            this.label53.Size = size81;
            this.label53.TabIndex = 34;
            Point location82 = default(Point);
            location82 = new Point(256, 96);
            this.label52.Location = location82;
            this.label52.Name = "label52";
            Size size82 = default(Size);
            size82 = new Size(72, 16);
            this.label52.Size = size82;
            this.label52.TabIndex = 33;
            this.label52.Text = "Spoofed As:";
            this.label52.Visible = false;
            Point location83 = default(Point);
            location83 = new Point(16, 96);
            this.label51.Location = location83;
            this.label51.Name = "label51";
            Size size83 = default(Size);
            size83 = new Size(40, 16);
            this.label51.Size = size83;
            this.label51.TabIndex = 32;
            this.label51.Text = "OSIG:";
            Color window15 = SystemColors.Window;
            Color color15 = window15;
            Color backColor15 = color15;
            this.textBox18.BackColor = backColor15;
            Point location84 = default(Point);
            location84 = new Point(16, 16);
            this.textBox18.Location = location84;
            this.textBox18.Name = "textBox18";
            this.textBox18.ReadOnly = true;
            Size size84 = default(Size);
            size84 = new Size(512, 20);
            this.textBox18.Size = size84;
            this.textBox18.TabIndex = 27;
            this.textBox18.Text = "";
            Point location85 = default(Point);
            location85 = new Point(184, 68);
            this.label1.Location = location85;
            this.label1.Name = "label1";
            Size size85 = default(Size);
            size85 = new Size(128, 24);
            this.label1.Size = size85;
            this.label1.TabIndex = 18;
            Point location86 = default(Point);
            location86 = new Point(184, 48);
            this.label2.Location = location86;
            this.label2.Name = "label2";
            Size size86 = default(Size);
            size86 = new Size(80, 16);
            this.label2.Size = size86;
            this.label2.TabIndex = 17;
            this.label2.Text = "Firmware Type";
            Point location87 = default(Point);
            location87 = new Point(128, 68);
            this.label30.Location = location87;
            this.label30.Name = "label30";
            Size size87 = default(Size);
            size87 = new Size(64, 16);
            this.label30.Size = size87;
            this.label30.TabIndex = 14;
            Point location88 = default(Point);
            location88 = new Point(64, 68);
            this.label31.Location = location88;
            this.label31.Name = "label31";
            Size size88 = default(Size);
            size88 = new Size(72, 16);
            this.label31.Size = size88;
            this.label31.TabIndex = 13;
            Point location89 = default(Point);
            location89 = new Point(16, 68);
            this.label32.Location = location89;
            this.label32.Name = "label32";
            Size size89 = default(Size);
            size89 = new Size(72, 16);
            this.label32.Size = size89;
            this.label32.TabIndex = 12;
            Point location90 = default(Point);
            location90 = new Point(128, 48);
            this.label33.Location = location90;
            this.label33.Name = "label33";
            Size size90 = default(Size);
            size90 = new Size(64, 16);
            this.label33.Size = size90;
            this.label33.TabIndex = 11;
            this.label33.Text = "Rev";
            Point location91 = default(Point);
            location91 = new Point(64, 48);
            this.label34.Location = location91;
            this.label34.Name = "label34";
            Size size91 = default(Size);
            size91 = new Size(64, 16);
            this.label34.Size = size91;
            this.label34.TabIndex = 10;
            this.label34.Text = "Model ";
            Point location92 = default(Point);
            location92 = new Point(16, 48);
            this.label35.Location = location92;
            this.label35.Name = "label35";
            Size size92 = default(Size);
            size92 = new Size(48, 16);
            this.label35.Size = size92;
            this.label35.TabIndex = 9;
            this.label35.Text = "Vendor";
            Point location93 = default(Point);
            location93 = new Point(304, 48);
            this.label36.Location = location93;
            this.label36.Name = "label36";
            Size size93 = default(Size);
            size93 = new Size(72, 16);
            this.label36.Size = size93;
            this.label36.TabIndex = 22;
            this.label36.Text = "DVD Key @";
            this.tabPage2.AllowDrop = true;
            this.tabPage2.Controls.Add(this.textBox2);
            Point location94 = default(Point);
            location94 = new Point(4, 22);
            this.tabPage2.Location = location94;
            this.tabPage2.Name = "tabPage2";
            Size size94 = default(Size);
            size94 = new Size(544, 118);
            this.tabPage2.Size = size94;
            this.tabPage2.TabIndex = 0;
            this.tabPage2.Text = "Inquiry";
            this.tabPage2.Visible = false;
            this.tabPage2.DragEnter += this.tabPage13_DragEnter;
            this.tabPage2.DragDrop += this.tabPage13_DragDrop;
            Color window16 = SystemColors.Window;
            Color color16 = window16;
            Color backColor16 = color16;
            this.textBox2.BackColor = backColor16;
            this.textBox2.Font = new Font("Courier New", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location95 = default(Point);
            location95 = new Point(8, 8);
            this.textBox2.Location = location95;
            this.textBox2.Multiline = true;
            this.textBox2.Name = "textBox2";
            this.textBox2.ReadOnly = true;
            this.textBox2.ScrollBars = ScrollBars.Vertical;
            Size size95 = default(Size);
            size95 = new Size(528, 96);
            this.textBox2.Size = size95;
            this.textBox2.TabIndex = 1;
            this.textBox2.Text = "";
            this.tabPage4.AllowDrop = true;
            this.tabPage4.Controls.Add(this.textBox4);
            Point location96 = default(Point);
            location96 = new Point(4, 22);
            this.tabPage4.Location = location96;
            this.tabPage4.Name = "tabPage4";
            Size size96 = default(Size);
            size96 = new Size(544, 118);
            this.tabPage4.Size = size96;
            this.tabPage4.TabIndex = 1;
            this.tabPage4.Text = "Identify";
            this.tabPage4.Visible = false;
            this.tabPage4.DragEnter += this.tabPage13_DragEnter;
            this.tabPage4.DragDrop += this.tabPage13_DragDrop;
            Color window17 = SystemColors.Window;
            Color color17 = window17;
            Color backColor17 = color17;
            this.textBox4.BackColor = backColor17;
            this.textBox4.Font = new Font("Courier New", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location97 = default(Point);
            location97 = new Point(8, 8);
            this.textBox4.Location = location97;
            this.textBox4.Multiline = true;
            this.textBox4.Name = "textBox4";
            this.textBox4.ReadOnly = true;
            this.textBox4.ScrollBars = ScrollBars.Vertical;
            Size size97 = default(Size);
            size97 = new Size(528, 96);
            this.textBox4.Size = size97;
            this.textBox4.TabIndex = 2;
            this.textBox4.Text = "";
            this.tabPage13.AllowDrop = true;
            this.tabPage13.Controls.Add(this.textBox13);
            Point location98 = default(Point);
            location98 = new Point(4, 22);
            this.tabPage13.Location = location98;
            this.tabPage13.Name = "tabPage13";
            Size size98 = default(Size);
            size98 = new Size(544, 118);
            this.tabPage13.Size = size98;
            this.tabPage13.TabIndex = 3;
            this.tabPage13.Text = "Drive Serial";
            this.tabPage13.Visible = false;
            this.tabPage13.DragEnter += this.tabPage13_DragEnter;
            this.tabPage13.DragDrop += this.tabPage13_DragDrop;
            Color window18 = SystemColors.Window;
            Color color18 = window18;
            Color backColor18 = color18;
            this.textBox13.BackColor = backColor18;
            this.textBox13.Font = new Font("Courier New", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location99 = default(Point);
            location99 = new Point(8, 8);
            this.textBox13.Location = location99;
            this.textBox13.Multiline = true;
            this.textBox13.Name = "textBox13";
            this.textBox13.ReadOnly = true;
            this.textBox13.ScrollBars = ScrollBars.Vertical;
            Size size99 = default(Size);
            size99 = new Size(528, 96);
            this.textBox13.Size = size99;
            this.textBox13.TabIndex = 4;
            this.textBox13.Text = "";
            this.checkBox3.FlatStyle = FlatStyle.System;
            Point location100 = default(Point);
            location100 = new Point(16, 168);
            this.checkBox3.Location = location100;
            this.checkBox3.Name = "checkBox3";
            Size size100 = default(Size);
            size100 = new Size(104, 32);
            this.checkBox3.Size = size100;
            this.checkBox3.TabIndex = 24;
            this.checkBox3.Text = "Advanced View";
            this.checkBox3.CheckedChanged += this.checkBox3_CheckedChanged;
            this.button2.FlatStyle = FlatStyle.System;
            Point location101 = default(Point);
            location101 = new Point(440, 304);
            this.button2.Location = location101;
            this.button2.Name = "button2";
            Size size101 = default(Size);
            size101 = new Size(88, 24);
            this.button2.Size = size101;
            this.button2.TabIndex = 25;
            this.button2.Text = "DummyGen";
            this.toolTip_0.SetToolTip(this.button2, "Build Dummy.bin from Inquiry.bin + Identify.bin + Key.bin");
            this.button2.Click += this.button2_Click;
            this.tabControl5.Controls.Add(this.Firmtools);
            this.tabControl5.Controls.Add(this.DVDKey32);
            this.tabControl5.Controls.Add(this.Benq);
            this.tabControl5.Controls.Add(this.Hitachi);
            this.tabControl5.Controls.Add(this.tabPage5);
            Point location102 = default(Point);
            location102 = new Point(8, 8);
            this.tabControl5.Location = location102;
            this.tabControl5.Multiline = true;
            this.tabControl5.Name = "tabControl5";
            this.tabControl5.SelectedIndex = 0;
            Size size102 = default(Size);
            size102 = new Size(664, 400);
            this.tabControl5.Size = size102;
            this.tabControl5.TabIndex = 26;
            this.tabControl5.TabIndexChanged += this.tabControl5_SelectedIndexChanged;
            this.tabControl5.SelectedIndexChanged += this.tabControl5_SelectedIndexChanged;
            this.Firmtools.Controls.Add(this.button41);
            this.Firmtools.Controls.Add(this.linkLabel1);
            this.Firmtools.Controls.Add(this.button29);
            this.Firmtools.Controls.Add(this.OpenSource);
            this.Firmtools.Controls.Add(this.OpeniXtreme);
            this.Firmtools.Controls.Add(this.button6);
            this.Firmtools.Controls.Add(this.checkBox3);
            this.Firmtools.Controls.Add(this.SaveTarget);
            this.Firmtools.Controls.Add(this.DumpDrive);
            this.Firmtools.Controls.Add(this.pictureBox1);
            this.Firmtools.Controls.Add(this.tabControl1);
            this.Firmtools.Controls.Add(this.tabControl3);
            this.Firmtools.Controls.Add(this.tabControl2);
            this.Firmtools.Controls.Add(this.tabControl4);
            this.Firmtools.Controls.Add(this.linkLabel4);
            Point location103 = default(Point);
            location103 = new Point(4, 22);
            this.Firmtools.Location = location103;
            this.Firmtools.Name = "Firmtools";
            Size size103 = default(Size);
            size103 = new Size(656, 374);
            this.Firmtools.Size = size103;
            this.Firmtools.TabIndex = 0;
            this.Firmtools.Text = "  FirmwareTool 32  ";
            this.button41.FlatStyle = FlatStyle.System;
            Point location104 = default(Point);
            location104 = new Point(568, 8);
            this.button41.Location = location104;
            this.button41.Name = "button41";
            Size size104 = default(Size);
            size104 = new Size(80, 40);
            this.button41.Size = size104;
            this.button41.TabIndex = 32;
            this.button41.Text = "Open  KeyDb";
            this.button41.Click += this.button41_Click;
            this.linkLabel1.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location105 = default(Point);
            location105 = new Point(576, 168);
            this.linkLabel1.Location = location105;
            this.linkLabel1.Name = "linkLabel1";
            Size size105 = default(Size);
            size105 = new Size(64, 24);
            this.linkLabel1.Size = size105;
            this.linkLabel1.TabIndex = 29;
            this.linkLabel1.TabStop = true;
            this.linkLabel1.Text = "User Guide";
            this.linkLabel1.TextAlign = ContentAlignment.MiddleCenter;
            this.toolTip_0.SetToolTip(this.linkLabel1, "Click to download JungleFlasher.pdf");
            this.linkLabel1.LinkClicked += this.linkLabel1_LinkClicked;
            this.button29.Enabled = false;
            this.button29.FlatStyle = FlatStyle.System;
            Point location106 = default(Point);
            location106 = new Point(568, 256);
            this.button29.Location = location106;
            this.button29.Name = "button29";
            Size size106 = default(Size);
            size106 = new Size(80, 40);
            this.button29.Size = size106;
            this.button29.TabIndex = 27;
            this.button29.Text = "Manual Spoofing";
            this.button29.Click += this.button29_Click;
            this.pictureBox1.Image = (Image)resourceManager.GetObject("pictureBox1.Image");
            Point location107 = default(Point);
            location107 = new Point(448, 176);
            this.pictureBox1.Location = location107;
            this.pictureBox1.Name = "pictureBox1";
            Size size107 = default(Size);
            size107 = new Size(92, 26);
            this.pictureBox1.Size = size107;
            this.pictureBox1.TabIndex = 31;
            this.pictureBox1.TabStop = false;
            this.toolTip_0.SetToolTip(this.pictureBox1, "Help Support JungleFlasher Development!");
            this.pictureBox1.Visible = false;
            this.pictureBox1.Click += this.pictureBox4_Click;
            this.pictureBox1.MouseEnter += this.pictureBox3_MouseEnter;
            this.pictureBox1.MouseLeave += this.pictureBox3_MouseLeave;
            this.linkLabel4.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location108 = default(Point);
            location108 = new Point(576, 72);
            this.linkLabel4.Location = location108;
            this.linkLabel4.Name = "linkLabel4";
            Size size108 = default(Size);
            size108 = new Size(64, 24);
            this.linkLabel4.Size = size108;
            this.linkLabel4.TabIndex = 30;
            this.linkLabel4.TabStop = true;
            this.linkLabel4.Text = "Donate";
            this.linkLabel4.TextAlign = ContentAlignment.MiddleCenter;
            this.linkLabel4.Visible = false;
            this.linkLabel4.LinkClicked += this.linkLabel4_LinkClicked;
            this.DVDKey32.Controls.Add(this.button39);
            this.DVDKey32.Controls.Add(this.button38);
            this.DVDKey32.Controls.Add(this.checkBox15);
            this.DVDKey32.Controls.Add(this.button32);
            this.DVDKey32.Controls.Add(this.button10);
            this.DVDKey32.Controls.Add(this.button8);
            this.DVDKey32.Controls.Add(this.button4);
            this.DVDKey32.Controls.Add(this.button1);
            this.DVDKey32.Controls.Add(this.checkBox9);
            this.DVDKey32.Controls.Add(this.checkBox8);
            this.DVDKey32.Controls.Add(this.button28);
            this.DVDKey32.Controls.Add(this.checkBox4);
            this.DVDKey32.Controls.Add(this.checkBox2);
            this.DVDKey32.Controls.Add(this.button5);
            this.DVDKey32.Controls.Add(this.groupBox16);
            this.DVDKey32.Controls.Add(this.comboBox1);
            this.DVDKey32.Controls.Add(this.label111);
            this.DVDKey32.Controls.Add(this.groupBox17);
            this.DVDKey32.Controls.Add(this.comboBox10);
            this.DVDKey32.Controls.Add(this.label57);
            this.DVDKey32.Controls.Add(this.groupBox2);
            this.DVDKey32.Controls.Add(this.groupBox4);
            this.DVDKey32.Controls.Add(this.button2);
            Point location109 = default(Point);
            location109 = new Point(4, 22);
            this.DVDKey32.Location = location109;
            this.DVDKey32.Name = "DVDKey32";
            Size size109 = default(Size);
            size109 = new Size(656, 374);
            this.DVDKey32.Size = size109;
            this.DVDKey32.TabIndex = 2;
            this.DVDKey32.Text = "  DVDKey 32  ";
            this.button39.FlatStyle = FlatStyle.System;
            Point location110 = default(Point);
            location110 = new Point(440, 272);
            this.button39.Location = location110;
            this.button39.Name = "button39";
            Size size110 = default(Size);
            size110 = new Size(88, 24);
            this.button39.Size = size110;
            this.button39.TabIndex = 104;
            this.button39.Text = "SlimKey";
            this.toolTip_0.SetToolTip(this.button39, "Slim LiteOn -  extract Key, build dummy and open.");
            this.button39.Click += this.button39_Click;
            this.button38.FlatStyle = FlatStyle.System;
            Point location111 = default(Point);
            location111 = new Point(344, 272);
            this.button38.Location = location111;
            this.button38.Name = "button38";
            Size size111 = default(Size);
            size111 = new Size(88, 24);
            this.button38.Size = size111;
            this.button38.TabIndex = 103;
            this.button38.Text = "PhatKey";
            this.toolTip_0.SetToolTip(this.button38, "Phat LiteOn - use Pógó mo Thóin to extract Key, build dummy and open.");
            this.button38.Click += this.button38_Click;
            this.checkBox15.FlatStyle = FlatStyle.System;
            Point location112 = default(Point);
            location112 = new Point(136, 24);
            this.checkBox15.Location = location112;
            this.checkBox15.Name = "checkBox15";
            this.checkBox15.RightToLeft = RightToLeft.Yes;
            Size size112 = default(Size);
            size112 = new Size(72, 24);
            this.checkBox15.Size = size112;
            this.checkBox15.TabIndex = 102;
            this.checkBox15.Text = "USB Only";
            this.toolTip_0.SetToolTip(this.checkBox15, "List only Via ports, may help if Mobo has unfriendly chipset");
            this.checkBox15.CheckedChanged += this.checkBox15_CheckedChanged;
            this.button32.FlatStyle = FlatStyle.System;
            Point location113 = default(Point);
            location113 = new Point(344, 336);
            this.button32.Location = location113;
            this.button32.Name = "button32";
            Size size113 = default(Size);
            size113 = new Size(136, 24);
            this.button32.Size = size113;
            this.button32.TabIndex = 101;
            this.button32.Text = "Dummy from KeyDB";
            this.toolTip_0.SetToolTip(this.button32, "Rebuild Dummy.bin from Lite-On with Key in KeyDB");
            this.button32.Click += this.button32_Click;
            this.button10.FlatStyle = FlatStyle.System;
            Point location114 = default(Point);
            location114 = new Point(128, 48);
            this.button10.Location = location114;
            this.button10.Name = "button10";
            Size size114 = default(Size);
            size114 = new Size(24, 21);
            this.button10.Size = size114;
            this.button10.TabIndex = 100;
            this.button10.Text = "...";
            this.toolTip_0.SetToolTip(this.button10, "Refresh Drive Properties");
            this.button10.Click += this.button10_Click;
            this.button8.FlatStyle = FlatStyle.System;
            Point location115 = default(Point);
            location115 = new Point(456, 48);
            this.button8.Location = location115;
            this.button8.Name = "button8";
            Size size115 = default(Size);
            size115 = new Size(24, 21);
            this.button8.Size = size115;
            this.button8.TabIndex = 99;
            this.button8.Text = "...";
            this.toolTip_0.SetToolTip(this.button8, "Refresh Com Ports");
            this.button8.Click += this.button8_Click;
            this.button4.FlatStyle = FlatStyle.System;
            Point location116 = default(Point);
            location116 = new Point(536, 304);
            this.button4.Location = location116;
            this.button4.Name = "button4";
            Size size116 = default(Size);
            size116 = new Size(88, 24);
            this.button4.Size = size116;
            this.button4.TabIndex = 98;
            this.button4.Text = "83 .key file";
            this.toolTip_0.SetToolTip(this.button4, "Import [barcode].bin.key , create dummy.bin, save and open.");
            this.button4.Click += this.button4_Click;
            this.button1.FlatStyle = FlatStyle.System;
            Point location117 = default(Point);
            location117 = new Point(536, 272);
            this.button1.Location = location117;
            this.button1.Name = "button1";
            Size size117 = default(Size);
            size117 = new Size(88, 24);
            this.button1.Size = size117;
            this.button1.TabIndex = 97;
            this.button1.Text = "LO83info";
            this.toolTip_0.SetToolTip(this.button1, "83850c - use LO83info to extract Key, build dummy and open.");
            this.button1.Click += this.button1_Click;
            this.checkBox9.Checked = true;
            this.checkBox9.CheckState = CheckState.Checked;
            this.checkBox9.FlatStyle = FlatStyle.System;
            Point location118 = default(Point);
            location118 = new Point(504, 24);
            this.checkBox9.Location = location118;
            this.checkBox9.Name = "checkBox9";
            this.checkBox9.RightToLeft = RightToLeft.Yes;
            Size size118 = default(Size);
            size118 = new Size(120, 24);
            this.checkBox9.Size = size118;
            this.checkBox9.TabIndex = 96;
            this.checkBox9.Text = "Additional functions";
            this.toolTip_0.SetToolTip(this.checkBox9, "Tick to Enable Addition Kit Functions");
            this.checkBox9.EnabledChanged += this.checkBox9_EnabledChanged;
            this.checkBox9.CheckedChanged += this.checkBox9_CheckedChanged;
            this.checkBox8.FlatStyle = FlatStyle.System;
            Point location119 = default(Point);
            location119 = new Point(504, 48);
            this.checkBox8.Location = location119;
            this.checkBox8.Name = "checkBox8";
            this.checkBox8.RightToLeft = RightToLeft.Yes;
            Size size119 = default(Size);
            size119 = new Size(120, 24);
            this.checkBox8.Size = size119;
            this.checkBox8.TabIndex = 95;
            this.checkBox8.Text = "Dummy.bin Only";
            this.toolTip_0.SetToolTip(this.checkBox8, "Tick to save dummy.bin only.");
            this.button28.FlatStyle = FlatStyle.System;
            Point location120 = default(Point);
            location120 = new Point(488, 336);
            this.button28.Location = location120;
            this.button28.Name = "button28";
            Size size120 = default(Size);
            size120 = new Size(136, 24);
            this.button28.Size = size120;
            this.button28.TabIndex = 94;
            this.button28.Text = "Dummy from iXtreme";
            this.toolTip_0.SetToolTip(this.button28, "Extract Key from ix1.5 flashed Lite-On");
            this.button28.Click += this.button28_Click;
            this.checkBox4.FlatStyle = FlatStyle.System;
            Point location121 = default(Point);
            location121 = new Point(216, 24);
            this.checkBox4.Location = location121;
            this.checkBox4.Name = "checkBox4";
            this.checkBox4.RightToLeft = RightToLeft.Yes;
            Size size121 = default(Size);
            size121 = new Size(88, 24);
            this.checkBox4.Size = size121;
            this.checkBox4.TabIndex = 93;
            this.checkBox4.Text = "VIA ports Only";
            this.toolTip_0.SetToolTip(this.checkBox4, "List only Via ports, may help if Mobo has unfriendly chipset");
            this.checkBox4.CheckedChanged += this.checkBox4_CheckedChanged;
            this.checkBox2.FlatStyle = FlatStyle.System;
            Point location122 = default(Point);
            location122 = new Point(176, 48);
            this.checkBox2.Location = location122;
            this.checkBox2.Name = "checkBox2";
            this.checkBox2.RightToLeft = RightToLeft.Yes;
            Size size122 = default(Size);
            size122 = new Size(128, 24);
            this.checkBox2.Size = size122;
            this.checkBox2.TabIndex = 92;
            this.checkBox2.Text = "Include non-IDE Ports";
            this.toolTip_0.SetToolTip(this.checkBox2, " IO ports in the SCSIAdapter Device Class");
            this.checkBox2.Visible = false;
            this.checkBox2.CheckedChanged += this.checkBox2_CheckedChanged;
            this.button5.ContextMenu = this.contextMenu_3;
            this.button5.FlatStyle = FlatStyle.System;
            Point location123 = default(Point);
            location123 = new Point(344, 304);
            this.button5.Location = location123;
            this.button5.Name = "button5";
            Size size123 = default(Size);
            size123 = new Size(88, 24);
            this.button5.Size = size123;
            this.button5.TabIndex = 91;
            this.button5.Text = "DVDKey32";
            this.toolTip_0.SetToolTip(this.button5, "74850c - use DVDKey32 to extract Key, build dummy and open.");
            this.button5.Click += this.button5_Click;
            MenuItem[] items3 = new MenuItem[]
            {
                this.menuItem_14,
                this.menuItem_15,
                this.menuItem_16,
                this.menuItem_17,
                this.menuItem_18
            };
            this.contextMenu_3.MenuItems.AddRange(items3);
            this.menuItem_14.Index = 0;
            this.menuItem_14.Text = "No Delay";
            this.menuItem_14.Click += this.menuItem_14_Click;
            this.menuItem_15.Index = 1;
            this.menuItem_15.Text = "5 Secs";
            this.menuItem_15.Click += this.menuItem_15_Click;
            this.menuItem_16.Index = 2;
            this.menuItem_16.Text = "10 Secs";
            this.menuItem_16.Click += this.menuItem_16_Click;
            this.menuItem_17.Index = 3;
            this.menuItem_17.Text = "15 Secs";
            this.menuItem_17.Click += this.menuItem_17_Click;
            this.menuItem_18.Index = 4;
            this.menuItem_18.Text = "20 Secs";
            this.menuItem_18.Click += this.menuItem_18_Click;
            this.groupBox16.ContextMenu = this.contextMenu_4;
            this.groupBox16.Controls.Add(this.pictureBox5);
            this.groupBox16.Controls.Add(this.pictureBox7);
            this.groupBox16.Controls.Add(this.label131);
            this.groupBox16.Controls.Add(this.label130);
            this.groupBox16.Controls.Add(this.label92);
            this.groupBox16.Controls.Add(this.label93);
            this.groupBox16.Controls.Add(this.label94);
            this.groupBox16.Controls.Add(this.label106);
            this.groupBox16.Controls.Add(this.label107);
            this.groupBox16.Controls.Add(this.label108);
            this.groupBox16.Controls.Add(this.label109);
            this.groupBox16.Controls.Add(this.label110);
            this.groupBox16.FlatStyle = FlatStyle.System;
            Point location124 = default(Point);
            location124 = new Point(32, 240);
            this.groupBox16.Location = location124;
            this.groupBox16.Name = "groupBox16";
            Size size124 = default(Size);
            size124 = new Size(280, 128);
            this.groupBox16.Size = size124;
            this.groupBox16.TabIndex = 90;
            this.groupBox16.TabStop = false;
            this.groupBox16.Text = "Drive Properties";
            this.toolTip_0.SetToolTip(this.groupBox16, "Properties of Drive on IO port selected");
            MenuItem[] items4 = new MenuItem[]
            {
                this.menuItem_21,
                this.menuItem_22,
                this.menuItem_23,
                this.menuItem_24
            };
            this.contextMenu_4.MenuItems.AddRange(items4);
            this.menuItem_21.Enabled = false;
            this.menuItem_21.Index = 0;
            this.menuItem_21.Text = "Load Last File";
            this.menuItem_21.Click += this.menuItem_21_Click;
            this.menuItem_22.Enabled = false;
            this.menuItem_22.Index = 1;
            this.menuItem_22.Text = "Open Job Folder";
            this.menuItem_22.Click += this.menuItem_22_Click;
            this.menuItem_23.Enabled = false;
            this.menuItem_23.Index = 2;
            this.menuItem_23.Text = "Job History";
            this.menuItem_23.Click += this.menuItem_23_Click;
            this.menuItem_24.Enabled = false;
            this.menuItem_24.Index = 3;
            this.menuItem_24.Text = "Open KeyDB";
            this.menuItem_24.Click += this.menuItem_24_Click;
            this.pictureBox5.Image = (Image)resourceManager.GetObject("pictureBox5.Image");
            Point location125 = default(Point);
            location125 = new Point(160, 104);
            this.pictureBox5.Location = location125;
            this.pictureBox5.Name = "pictureBox5";
            Size size125 = default(Size);
            size125 = new Size(19, 19);
            this.pictureBox5.Size = size125;
            this.pictureBox5.TabIndex = 37;
            this.pictureBox5.TabStop = false;
            this.pictureBox5.Visible = false;
            this.pictureBox7.Image = (Image)resourceManager.GetObject("pictureBox7.Image");
            Point location126 = default(Point);
            location126 = new Point(160, 104);
            this.pictureBox7.Location = location126;
            this.pictureBox7.Name = "pictureBox7";
            Size size126 = default(Size);
            size126 = new Size(19, 19);
            this.pictureBox7.Size = size126;
            this.pictureBox7.TabIndex = 36;
            this.pictureBox7.TabStop = false;
            this.pictureBox7.Visible = false;
            Point location127 = default(Point);
            location127 = new Point(88, 104);
            this.label131.Location = location127;
            this.label131.Name = "label131";
            Size size127 = default(Size);
            size127 = new Size(112, 16);
            this.label131.Size = size127;
            this.label131.TabIndex = 35;
            Point location128 = default(Point);
            location128 = new Point(16, 104);
            this.label130.Location = location128;
            this.label130.Name = "label130";
            Size size128 = default(Size);
            size128 = new Size(56, 16);
            this.label130.Size = size128;
            this.label130.TabIndex = 34;
            this.label130.Text = "DVD Key:";
            Point location129 = default(Point);
            location129 = new Point(88, 82);
            this.label92.Location = location129;
            this.label92.Name = "label92";
            Size size129 = default(Size);
            size129 = new Size(176, 16);
            this.label92.Size = size129;
            this.label92.TabIndex = 13;
            Point location130 = default(Point);
            location130 = new Point(16, 82);
            this.label93.Location = location130;
            this.label93.Name = "label93";
            Size size130 = default(Size);
            size130 = new Size(72, 16);
            this.label93.Size = size130;
            this.label93.TabIndex = 12;
            this.label93.Text = "Reserved:";
            Point location131 = default(Point);
            location131 = new Point(16, 16);
            this.label94.Location = location131;
            this.label94.Name = "label94";
            Size size131 = default(Size);
            size131 = new Size(72, 16);
            this.label94.Size = size131;
            this.label94.TabIndex = 11;
            this.label94.Text = "Vendor:";
            Point location132 = default(Point);
            location132 = new Point(88, 60);
            this.label106.Location = location132;
            this.label106.Name = "label106";
            Size size132 = default(Size);
            size132 = new Size(176, 16);
            this.label106.Size = size132;
            this.label106.TabIndex = 10;
            Point location133 = default(Point);
            location133 = new Point(16, 38);
            this.label107.Location = location133;
            this.label107.Name = "label107";
            Size size133 = default(Size);
            size133 = new Size(56, 16);
            this.label107.Size = size133;
            this.label107.TabIndex = 9;
            this.label107.Text = "Name:";
            Point location134 = default(Point);
            location134 = new Point(16, 60);
            this.label108.Location = location134;
            this.label108.Name = "label108";
            Size size134 = default(Size);
            size134 = new Size(64, 16);
            this.label108.Size = size134;
            this.label108.TabIndex = 8;
            this.label108.Text = "F/W Rev:";
            Point location135 = default(Point);
            location135 = new Point(88, 38);
            this.label109.Location = location135;
            this.label109.Name = "label109";
            Size size135 = default(Size);
            size135 = new Size(176, 16);
            this.label109.Size = size135;
            this.label109.TabIndex = 7;
            Point location136 = default(Point);
            location136 = new Point(88, 16);
            this.label110.Location = location136;
            this.label110.Name = "label110";
            Size size136 = default(Size);
            size136 = new Size(176, 16);
            this.label110.Size = size136;
            this.label110.TabIndex = 6;
            this.comboBox1.Cursor = Cursors.Default;
            this.comboBox1.ItemHeight = 13;
            Point location137 = default(Point);
            location137 = new Point(40, 48);
            this.comboBox1.Location = location137;
            this.comboBox1.Name = "comboBox1";
            Size size137 = default(Size);
            size137 = new Size(80, 21);
            this.comboBox1.Size = size137;
            this.comboBox1.TabIndex = 89;
            this.comboBox1.SelectedIndexChanged += this.comboBox1_SelectedIndexChanged;
            Point location138 = default(Point);
            location138 = new Point(40, 24);
            this.label111.Location = location138;
            this.label111.Name = "label111";
            Size size138 = default(Size);
            size138 = new Size(56, 16);
            this.label111.Size = size138;
            this.label111.TabIndex = 88;
            this.label111.Text = "I/O Port";
            this.groupBox17.Controls.Add(this.pictureBox10);
            this.groupBox17.Controls.Add(this.pictureBox8);
            this.groupBox17.Controls.Add(this.label112);
            this.groupBox17.Controls.Add(this.label113);
            this.groupBox17.Controls.Add(this.label115);
            this.groupBox17.Controls.Add(this.label116);
            this.groupBox17.Controls.Add(this.label117);
            this.groupBox17.Controls.Add(this.label123);
            this.groupBox17.Controls.Add(this.label124);
            this.groupBox17.Controls.Add(this.label125);
            this.groupBox17.Controls.Add(this.label126);
            this.groupBox17.Controls.Add(this.label127);
            this.groupBox17.FlatStyle = FlatStyle.System;
            Point location139 = default(Point);
            location139 = new Point(32, 80);
            this.groupBox17.Location = location139;
            this.groupBox17.Name = "groupBox17";
            Size size139 = default(Size);
            size139 = new Size(280, 152);
            this.groupBox17.Size = size139;
            this.groupBox17.TabIndex = 87;
            this.groupBox17.TabStop = false;
            this.groupBox17.Text = "Port Properties";
            this.toolTip_0.SetToolTip(this.groupBox17, "Properites of IO port selected");
            this.pictureBox10.Image = (Image)resourceManager.GetObject("pictureBox10.Image");
            Point location140 = default(Point);
            location140 = new Point(232, 16);
            this.pictureBox10.Location = location140;
            this.pictureBox10.Name = "pictureBox10";
            Size size140 = default(Size);
            size140 = new Size(35, 29);
            this.pictureBox10.Size = size140;
            this.pictureBox10.TabIndex = 39;
            this.pictureBox10.TabStop = false;
            this.pictureBox8.Image = (Image)resourceManager.GetObject("pictureBox8.Image");
            Point location141 = default(Point);
            location141 = new Point(232, 16);
            this.pictureBox8.Location = location141;
            this.pictureBox8.Name = "pictureBox8";
            Size size141 = default(Size);
            size141 = new Size(35, 29);
            this.pictureBox8.Size = size141;
            this.pictureBox8.TabIndex = 38;
            this.pictureBox8.TabStop = false;
            this.pictureBox8.Visible = false;
            Point location142 = default(Point);
            location142 = new Point(16, 112);
            this.label112.Location = location142;
            this.label112.Name = "label112";
            Size size142 = default(Size);
            size142 = new Size(72, 16);
            this.label112.Size = size142;
            this.label112.TabIndex = 12;
            this.label112.Text = "Device:";
            Point location143 = default(Point);
            location143 = new Point(88, 112);
            this.label113.Location = location143;
            this.label113.Name = "label113";
            Size size143 = default(Size);
            size143 = new Size(176, 32);
            this.label113.Size = size143;
            this.label113.TabIndex = 11;
            Point location144 = default(Point);
            location144 = new Point(88, 88);
            this.label115.Location = location144;
            this.label115.Name = "label115";
            Size size144 = default(Size);
            size144 = new Size(176, 16);
            this.label115.Size = size144;
            this.label115.TabIndex = 10;
            Point location145 = default(Point);
            location145 = new Point(88, 64);
            this.label116.Location = location145;
            this.label116.Name = "label116";
            Size size145 = default(Size);
            size145 = new Size(176, 16);
            this.label116.Size = size145;
            this.label116.TabIndex = 9;
            Point location146 = default(Point);
            location146 = new Point(88, 40);
            this.label117.Location = location146;
            this.label117.Name = "label117";
            Size size146 = default(Size);
            size146 = new Size(176, 16);
            this.label117.Size = size146;
            this.label117.TabIndex = 8;
            Point location147 = default(Point);
            location147 = new Point(88, 16);
            this.label123.Location = location147;
            this.label123.Name = "label123";
            Size size147 = default(Size);
            size147 = new Size(176, 16);
            this.label123.Size = size147;
            this.label123.TabIndex = 7;
            Point location148 = default(Point);
            location148 = new Point(16, 16);
            this.label124.Location = location148;
            this.label124.Name = "label124";
            Size size148 = default(Size);
            size148 = new Size(88, 16);
            this.label124.Size = size148;
            this.label124.TabIndex = 6;
            this.label124.Text = "I/O Address:";
            Point location149 = default(Point);
            location149 = new Point(16, 40);
            this.label125.Location = location149;
            this.label125.Name = "label125";
            Size size149 = default(Size);
            size149 = new Size(72, 16);
            this.label125.Size = size149;
            this.label125.TabIndex = 5;
            this.label125.Text = "Type:";
            Point location150 = default(Point);
            location150 = new Point(16, 64);
            this.label126.Location = location150;
            this.label126.Name = "label126";
            Size size150 = default(Size);
            size150 = new Size(72, 16);
            this.label126.Size = size150;
            this.label126.TabIndex = 4;
            this.label126.Text = "Channel:";
            Point location151 = default(Point);
            location151 = new Point(16, 88);
            this.label127.Location = location151;
            this.label127.Name = "label127";
            Size size151 = default(Size);
            size151 = new Size(72, 16);
            this.label127.Size = size151;
            this.label127.TabIndex = 3;
            this.label127.Text = "Postion:";
            this.comboBox10.Cursor = Cursors.Default;
            Point location152 = default(Point);
            location152 = new Point(352, 48);
            this.comboBox10.Location = location152;
            this.comboBox10.Name = "comboBox10";
            Size size152 = default(Size);
            size152 = new Size(96, 21);
            this.comboBox10.Size = size152;
            this.comboBox10.TabIndex = 27;
            this.comboBox10.SelectedIndexChanged += this.comboBox10_SelectedIndexChanged;
            Point location153 = default(Point);
            location153 = new Point(352, 24);
            this.label57.Location = location153;
            this.label57.Name = "label57";
            Size size153 = default(Size);
            size153 = new Size(96, 16);
            this.label57.Size = size153;
            this.label57.TabIndex = 19;
            this.label57.Text = "Com Port";
            this.groupBox2.ContextMenu = this.contextMenu_5;
            this.groupBox2.Controls.Add(this.label103);
            this.groupBox2.Controls.Add(this.label63);
            this.groupBox2.Controls.Add(this.label105);
            this.groupBox2.Controls.Add(this.label104);
            this.groupBox2.Controls.Add(this.label102);
            this.groupBox2.Controls.Add(this.label64);
            this.groupBox2.Controls.Add(this.label65);
            this.groupBox2.Controls.Add(this.label66);
            this.groupBox2.FlatStyle = FlatStyle.System;
            Point location154 = default(Point);
            location154 = new Point(344, 80);
            this.groupBox2.Location = location154;
            this.groupBox2.Name = "groupBox2";
            Size size154 = default(Size);
            size154 = new Size(280, 112);
            this.groupBox2.Size = size154;
            this.groupBox2.TabIndex = 21;
            this.groupBox2.TabStop = false;
            this.groupBox2.Text = "Com Port Properties";
            this.toolTip_0.SetToolTip(this.groupBox2, "Properites of COM port selected");
            MenuItem[] items5 = new MenuItem[]
            {
                this.menuItem_25,
                this.menuItem_26,
                this.menuItem_27,
                this.menuItem_29,
                this.menuItem_28,
                this.menuItem_30,
                this.menuItem_31
            };
            this.contextMenu_5.MenuItems.AddRange(items5);
            this.menuItem_25.Index = 0;
            this.menuItem_25.Text = "Open Tray";
            this.menuItem_25.Click += this.menuItem_25_Click;
            this.menuItem_26.Index = 1;
            this.menuItem_26.Text = "Close Tray";
            this.menuItem_26.Click += this.menuItem_26_Click;
            this.menuItem_27.Index = 2;
            this.menuItem_27.Text = "Half Tray";
            this.menuItem_27.Click += this.menuItem_27_Click;
            this.menuItem_29.Index = 3;
            this.menuItem_29.Text = "-";
            this.menuItem_28.Index = 4;
            this.menuItem_28.Text = "Power On";
            this.menuItem_28.Click += this.menuItem_28_Click;
            this.menuItem_30.Index = 5;
            this.menuItem_30.Text = "Power Off";
            this.menuItem_30.Click += this.menuItem_30_Click;
            this.menuItem_31.Index = 6;
            this.menuItem_31.Text = "Power Cycle";
            this.menuItem_31.Click += this.menuItem_31_Click;
            Point location155 = default(Point);
            location155 = new Point(64, 88);
            this.label103.Location = location155;
            this.label103.Name = "label103";
            Size size155 = default(Size);
            size155 = new Size(208, 16);
            this.label103.Size = size155;
            this.label103.TabIndex = 16;
            Point location156 = default(Point);
            location156 = new Point(16, 88);
            this.label63.Location = location156;
            this.label63.Name = "label63";
            Size size156 = default(Size);
            size156 = new Size(40, 16);
            this.label63.Size = size156;
            this.label63.TabIndex = 15;
            this.label63.Text = "Status:";
            Point location157 = default(Point);
            location157 = new Point(64, 64);
            this.label105.Location = location157;
            this.label105.Name = "label105";
            Size size157 = default(Size);
            size157 = new Size(208, 16);
            this.label105.Size = size157;
            this.label105.TabIndex = 14;
            Point location158 = default(Point);
            location158 = new Point(64, 40);
            this.label104.Location = location158;
            this.label104.Name = "label104";
            Size size158 = default(Size);
            size158 = new Size(208, 16);
            this.label104.Size = size158;
            this.label104.TabIndex = 13;
            Point location159 = default(Point);
            location159 = new Point(64, 16);
            this.label102.Location = location159;
            this.label102.Name = "label102";
            Size size159 = default(Size);
            size159 = new Size(200, 16);
            this.label102.Size = size159;
            this.label102.TabIndex = 11;
            Point location160 = default(Point);
            location160 = new Point(16, 40);
            this.label64.Location = location160;
            this.label64.Name = "label64";
            Size size160 = default(Size);
            size160 = new Size(40, 16);
            this.label64.Size = size160;
            this.label64.TabIndex = 9;
            this.label64.Text = "Type:";
            Point location161 = default(Point);
            location161 = new Point(16, 64);
            this.label65.Location = location161;
            this.label65.Name = "label65";
            Size size161 = default(Size);
            size161 = new Size(40, 16);
            this.label65.Size = size161;
            this.label65.TabIndex = 8;
            this.label65.Text = "Name:";
            Point location162 = default(Point);
            location162 = new Point(16, 16);
            this.label66.Location = location162;
            this.label66.Name = "label66";
            Size size162 = default(Size);
            size162 = new Size(40, 16);
            this.label66.Size = size162;
            this.label66.TabIndex = 7;
            this.label66.Text = "Port:";
            this.groupBox4.Controls.Add(this.label88);
            this.groupBox4.Controls.Add(this.label87);
            this.groupBox4.Controls.Add(this.label69);
            this.groupBox4.Controls.Add(this.label70);
            this.groupBox4.FlatStyle = FlatStyle.System;
            Point location163 = default(Point);
            location163 = new Point(344, 200);
            this.groupBox4.Location = location163;
            this.groupBox4.Name = "groupBox4";
            Size size163 = default(Size);
            size163 = new Size(280, 64);
            this.groupBox4.Size = size163;
            this.groupBox4.TabIndex = 23;
            this.groupBox4.TabStop = false;
            this.groupBox4.Text = "Drive Key";
            this.toolTip_0.SetToolTip(this.groupBox4, "Key from Lite-On Drive");
            Point location164 = default(Point);
            location164 = new Point(72, 40);
            this.label88.Location = location164;
            this.label88.Name = "label88";
            Size size164 = default(Size);
            size164 = new Size(128, 16);
            this.label88.Size = size164;
            this.label88.TabIndex = 15;
            Point location165 = default(Point);
            location165 = new Point(46, 16);
            this.label87.Location = location165;
            this.label87.Name = "label87";
            Size size165 = default(Size);
            size165 = new Size(230, 16);
            this.label87.Size = size165;
            this.label87.TabIndex = 14;
            Point location166 = default(Point);
            location166 = new Point(8, 16);
            this.label69.Location = location166;
            this.label69.Name = "label69";
            Size size166 = default(Size);
            size166 = new Size(48, 16);
            this.label69.Size = size166;
            this.label69.TabIndex = 8;
            this.label69.Text = "Key:";
            Point location167 = default(Point);
            location167 = new Point(8, 40);
            this.label70.Location = location167;
            this.label70.Name = "label70";
            Size size167 = default(Size);
            size167 = new Size(48, 16);
            this.label70.Size = size167;
            this.label70.TabIndex = 11;
            this.label70.Text = "Status:";
            this.Benq.Controls.Add(this.checkBox16);
            this.Benq.Controls.Add(this.checkBox10);
            this.Benq.Controls.Add(this.checkBox11);
            this.Benq.Controls.Add(this.linkLabel2);
            this.Benq.Controls.Add(this.groupBox9);
            this.Benq.Controls.Add(this.groupBox7);
            this.Benq.Controls.Add(this.groupBox1);
            this.Benq.Controls.Add(this.comboBox7);
            this.Benq.Controls.Add(this.label73);
            this.Benq.Controls.Add(this.groupBox3);
            this.Benq.Controls.Add(this.groupBox6);
            this.Benq.Controls.Add(this.checkBox5);
            this.Benq.Controls.Add(this.button9);
            Point location168 = default(Point);
            location168 = new Point(4, 22);
            this.Benq.Location = location168;
            this.Benq.Name = "Benq";
            Size size168 = default(Size);
            size168 = new Size(656, 374);
            this.Benq.Size = size168;
            this.Benq.TabIndex = 3;
            this.Benq.Text = "  MTK Flash 32  ";
            this.checkBox16.FlatStyle = FlatStyle.System;
            Point location169 = default(Point);
            location169 = new Point(136, 24);
            this.checkBox16.Location = location169;
            this.checkBox16.Name = "checkBox16";
            this.checkBox16.RightToLeft = RightToLeft.Yes;
            Size size169 = default(Size);
            size169 = new Size(72, 24);
            this.checkBox16.Size = size169;
            this.checkBox16.TabIndex = 103;
            this.checkBox16.Text = "USB Only";
            this.toolTip_0.SetToolTip(this.checkBox16, "List only Via ports, may help if Mobo has unfriendly chipset");
            this.checkBox16.CheckedChanged += this.checkBox16_CheckedChanged;
            this.checkBox10.FlatStyle = FlatStyle.System;
            Point location170 = default(Point);
            location170 = new Point(216, 24);
            this.checkBox10.Location = location170;
            this.checkBox10.Name = "checkBox10";
            this.checkBox10.RightToLeft = RightToLeft.Yes;
            Size size170 = default(Size);
            size170 = new Size(88, 24);
            this.checkBox10.Size = size170;
            this.checkBox10.TabIndex = 100;
            this.checkBox10.Text = "VIA ports Only";
            this.toolTip_0.SetToolTip(this.checkBox10, "List only Via ports, may help if Mobo has unfriendly chipset");
            this.checkBox10.CheckedChanged += this.checkBox10_CheckedChanged;
            this.checkBox11.FlatStyle = FlatStyle.System;
            Point location171 = default(Point);
            location171 = new Point(160, 48);
            this.checkBox11.Location = location171;
            this.checkBox11.Name = "checkBox11";
            this.checkBox11.RightToLeft = RightToLeft.Yes;
            Size size171 = default(Size);
            size171 = new Size(144, 24);
            this.checkBox11.Size = size171;
            this.checkBox11.TabIndex = 99;
            this.checkBox11.Text = "Include non-IDE Ports";
            this.toolTip_0.SetToolTip(this.checkBox11, " IO ports in the SCSIAdapter Device Class");
            this.checkBox11.Visible = false;
            this.checkBox11.CheckedChanged += this.checkBox11_CheckedChanged;
            this.linkLabel2.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location172 = default(Point);
            location172 = new Point(544, 8);
            this.linkLabel2.Location = location172;
            this.linkLabel2.Name = "linkLabel2";
            Size size172 = default(Size);
            size172 = new Size(80, 16);
            this.linkLabel2.Size = size172;
            this.linkLabel2.TabIndex = 98;
            this.linkLabel2.TabStop = true;
            this.linkLabel2.Text = "activate.iso";
            this.linkLabel2.TextAlign = ContentAlignment.MiddleCenter;
            this.toolTip_0.SetToolTip(this.linkLabel2, "Burn to DL-DVD, then Insert to Unlock iXtreme Sammy.");
            this.linkLabel2.LinkClicked += this.linkLabel2_LinkClicked;
            this.groupBox9.Controls.Add(this.radioButton21);
            this.groupBox9.Controls.Add(this.button42);
            this.groupBox9.Controls.Add(this.radioButton20);
            this.groupBox9.Controls.Add(this.radioButton19);
            this.groupBox9.Controls.Add(this.button14);
            this.groupBox9.Controls.Add(this.button13);
            this.groupBox9.Controls.Add(this.button15);
            this.groupBox9.Controls.Add(this.button17);
            this.groupBox9.Controls.Add(this.button16);
            this.groupBox9.FlatStyle = FlatStyle.System;
            Point location173 = default(Point);
            location173 = new Point(344, 256);
            this.groupBox9.Location = location173;
            this.groupBox9.Name = "groupBox9";
            Size size173 = default(Size);
            size173 = new Size(280, 112);
            this.groupBox9.Size = size173;
            this.groupBox9.TabIndex = 97;
            this.groupBox9.TabStop = false;
            this.groupBox9.Text = "Flashing Tasks";
            Point location174 = default(Point);
            location174 = new Point(136, 88);
            this.radioButton21.Location = location174;
            this.radioButton21.Name = "radioButton21";
            this.radioButton21.RightToLeft = RightToLeft.Yes;
            Size size174 = default(Size);
            size174 = new Size(56, 16);
            this.radioButton21.Size = size174;
            this.radioButton21.TabIndex = 63;
            this.radioButton21.Text = "Slim2";
            this.toolTip_0.SetToolTip(this.radioButton21, "Select Newer Slim MTK Vendor Commands");
            this.radioButton21.Visible = false;
            this.button42.FlatStyle = FlatStyle.System;
            Point location175 = default(Point);
            location175 = new Point(208, 80);
            this.button42.Location = location175;
            this.button42.Name = "button42";
            Size size175 = default(Size);
            size175 = new Size(56, 24);
            this.button42.Size = size175;
            this.button42.TabIndex = 62;
            this.button42.Text = "Lock Spi";
            this.toolTip_0.SetToolTip(this.button42, "Lock/UnLock external Spi on 0225 replacement PCB");
            this.button42.Click += this.button42_Click;
            this.radioButton20.Checked = true;
            Point location176 = default(Point);
            location176 = new Point(16, 88);
            this.radioButton20.Location = location176;
            this.radioButton20.Name = "radioButton20";
            this.radioButton20.RightToLeft = RightToLeft.Yes;
            Size size176 = default(Size);
            size176 = new Size(48, 16);
            this.radioButton20.Size = size176;
            this.radioButton20.TabIndex = 61;
            this.radioButton20.TabStop = true;
            this.radioButton20.Text = "Phat";
            this.toolTip_0.SetToolTip(this.radioButton20, "Select Legacy MTK Vendor Commands");
            Point location177 = default(Point);
            location177 = new Point(80, 88);
            this.radioButton19.Location = location177;
            this.radioButton19.Name = "radioButton19";
            this.radioButton19.RightToLeft = RightToLeft.Yes;
            Size size177 = default(Size);
            size177 = new Size(48, 16);
            this.radioButton19.Size = size177;
            this.radioButton19.TabIndex = 60;
            this.radioButton19.Text = "Slim";
            this.toolTip_0.SetToolTip(this.radioButton19, "Select Newer Slim MTK Vendor Commands");
            this.radioButton19.CheckedChanged += this.radioButton19_CheckedChanged;
            this.button14.FlatStyle = FlatStyle.System;
            Point location178 = default(Point);
            location178 = new Point(104, 48);
            this.button14.Location = location178;
            this.button14.Name = "button14";
            Size size178 = default(Size);
            size178 = new Size(72, 24);
            this.button14.Size = size178;
            this.button14.TabIndex = 58;
            this.button14.Text = "Erase";
            this.toolTip_0.SetToolTip(this.button14, "Erase Flash Device");
            this.button14.Click += this.button14_Click;
            this.button13.FlatStyle = FlatStyle.System;
            Point location179 = default(Point);
            location179 = new Point(192, 48);
            this.button13.Location = location179;
            this.button13.Name = "button13";
            Size size179 = default(Size);
            size179 = new Size(72, 24);
            this.button13.Size = size179;
            this.button13.TabIndex = 59;
            this.button13.Text = "Write";
            this.toolTip_0.SetToolTip(this.button13, "Erase and Write Target Buffer to Flash Device");
            this.button13.Click += this.button13_Click;
            this.button15.FlatStyle = FlatStyle.System;
            Point location180 = default(Point);
            location180 = new Point(16, 48);
            this.button15.Location = location180;
            this.button15.Name = "button15";
            Size size180 = default(Size);
            size180 = new Size(72, 24);
            this.button15.Size = size180;
            this.button15.TabIndex = 57;
            this.button15.Text = "Read";
            this.toolTip_0.SetToolTip(this.button15, "Read Flash to Source Buffer");
            this.button15.Click += this.button15_Click;
            this.button17.FlatStyle = FlatStyle.System;
            Point location181 = default(Point);
            location181 = new Point(16, 16);
            this.button17.Location = location181;
            this.button17.Name = "button17";
            Size size181 = default(Size);
            size181 = new Size(116, 24);
            this.button17.Size = size181;
            this.button17.TabIndex = 56;
            this.button17.Text = " Intro / Device ID";
            this.toolTip_0.SetToolTip(this.button17, "Introduce Vendor Mode and get flash Device Info");
            this.button17.Click += this.button17_Click;
            this.button16.FlatStyle = FlatStyle.System;
            Point location182 = default(Point);
            location182 = new Point(148, 16);
            this.button16.Location = location182;
            this.button16.Name = "button16";
            Size size182 = default(Size);
            size182 = new Size(116, 24);
            this.button16.Size = size182;
            this.button16.TabIndex = 57;
            this.button16.Text = "Outro / ATA Reset";
            this.toolTip_0.SetToolTip(this.button16, "Leave Vendor Mode and reset then inquire drive");
            this.button16.Click += this.button16_Click;
            this.groupBox7.Controls.Add(this.button40);
            this.groupBox7.Controls.Add(this.button18);
            this.groupBox7.Controls.Add(this.button7);
            this.groupBox7.Controls.Add(this.button21);
            this.groupBox7.FlatStyle = FlatStyle.System;
            Point location183 = default(Point);
            location183 = new Point(344, 24);
            this.groupBox7.Location = location183;
            this.groupBox7.Name = "groupBox7";
            Size size183 = default(Size);
            size183 = new Size(280, 72);
            this.groupBox7.Size = size183;
            this.groupBox7.TabIndex = 96;
            this.groupBox7.TabStop = false;
            this.groupBox7.Text = "360 Tools";
            this.button40.FlatStyle = FlatStyle.System;
            Point location184 = default(Point);
            location184 = new Point(208, 20);
            this.button40.Location = location184;
            this.button40.Name = "button40";
            Size size184 = default(Size);
            size184 = new Size(56, 40);
            this.button40.Size = size184;
            this.button40.TabIndex = 96;
            this.button40.Text = "Slim UnLock";
            this.toolTip_0.SetToolTip(this.button40, "Send Unique Password to unlock Spi!");
            this.button40.Click += this.button40_Click;
            this.button18.FlatStyle = FlatStyle.System;
            Point location185 = default(Point);
            location185 = new Point(16, 20);
            this.button18.Location = location185;
            this.button18.Name = "button18";
            Size size185 = default(Size);
            size185 = new Size(56, 40);
            this.button18.Size = size185;
            this.button18.TabIndex = 60;
            this.button18.Text = "Benq   UnLock";
            this.toolTip_0.SetToolTip(this.button18, "Send 49 Magic Keys to Unlock all VAD6038, Stock, pre ix1.5 to LT");
            this.button18.Click += this.button18_Click;
            this.button7.FlatStyle = FlatStyle.System;
            Point location186 = default(Point);
            location186 = new Point(144, 20);
            this.button7.Location = location186;
            this.button7.Name = "button7";
            Size size186 = default(Size);
            size186 = new Size(56, 40);
            this.button7.Size = size186;
            this.button7.TabIndex = 95;
            this.button7.Text = "Lite-On Erase";
            this.toolTip_0.SetToolTip(this.button7, "Erases Lite-on via Intro-of-Death... make sure you have your Keys!");
            this.button7.Click += this.button7_Click;
            this.button21.FlatStyle = FlatStyle.System;
            Point location187 = default(Point);
            location187 = new Point(80, 20);
            this.button21.Location = location187;
            this.button21.Name = "button21";
            Size size187 = default(Size);
            size187 = new Size(56, 40);
            this.button21.Size = size187;
            this.button21.TabIndex = 67;
            this.button21.Text = "Sammy UnLock";
            this.toolTip_0.SetToolTip(this.button21, "UnLocks Stock MS28s, for pre ix1.5 use activate.iso");
            this.button21.Click += this.button21_Click;
            this.groupBox1.ContextMenu = this.contextMenu_4;
            this.groupBox1.Controls.Add(this.pictureBox2);
            this.groupBox1.Controls.Add(this.pictureBox6);
            this.groupBox1.Controls.Add(this.label133);
            this.groupBox1.Controls.Add(this.label132);
            this.groupBox1.Controls.Add(this.label72);
            this.groupBox1.Controls.Add(this.label58);
            this.groupBox1.Controls.Add(this.label59);
            this.groupBox1.Controls.Add(this.label60);
            this.groupBox1.Controls.Add(this.label61);
            this.groupBox1.Controls.Add(this.label62);
            this.groupBox1.Controls.Add(this.label67);
            this.groupBox1.Controls.Add(this.label68);
            this.groupBox1.FlatStyle = FlatStyle.System;
            Point location188 = default(Point);
            location188 = new Point(32, 240);
            this.groupBox1.Location = location188;
            this.groupBox1.Name = "groupBox1";
            Size size188 = default(Size);
            size188 = new Size(280, 128);
            this.groupBox1.Size = size188;
            this.groupBox1.TabIndex = 94;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Drive Properties";
            this.toolTip_0.SetToolTip(this.groupBox1, "Properites of Drive on IO port selected");
            this.pictureBox2.Image = (Image)resourceManager.GetObject("pictureBox2.Image");
            Point location189 = default(Point);
            location189 = new Point(160, 104);
            this.pictureBox2.Location = location189;
            this.pictureBox2.Name = "pictureBox2";
            Size size189 = default(Size);
            size189 = new Size(19, 19);
            this.pictureBox2.Size = size189;
            this.pictureBox2.TabIndex = 32;
            this.pictureBox2.TabStop = false;
            this.pictureBox2.Visible = false;
            this.pictureBox6.Image = (Image)resourceManager.GetObject("pictureBox6.Image");
            Point location190 = default(Point);
            location190 = new Point(160, 104);
            this.pictureBox6.Location = location190;
            this.pictureBox6.Name = "pictureBox6";
            Size size190 = default(Size);
            size190 = new Size(19, 19);
            this.pictureBox6.Size = size190;
            this.pictureBox6.TabIndex = 35;
            this.pictureBox6.TabStop = false;
            this.pictureBox6.Visible = false;
            Point location191 = default(Point);
            location191 = new Point(88, 104);
            this.label133.Location = location191;
            this.label133.Name = "label133";
            Size size191 = default(Size);
            size191 = new Size(112, 16);
            this.label133.Size = size191;
            this.label133.TabIndex = 34;
            Point location192 = default(Point);
            location192 = new Point(16, 104);
            this.label132.Location = location192;
            this.label132.Name = "label132";
            Size size192 = default(Size);
            size192 = new Size(72, 16);
            this.label132.Size = size192;
            this.label132.TabIndex = 33;
            this.label132.Text = "DVD Key:";
            Point location193 = default(Point);
            location193 = new Point(88, 16);
            this.label72.Location = location193;
            this.label72.Name = "label72";
            Size size193 = default(Size);
            size193 = new Size(176, 16);
            this.label72.Size = size193;
            this.label72.TabIndex = 6;
            Point location194 = default(Point);
            location194 = new Point(88, 82);
            this.label58.Location = location194;
            this.label58.Name = "label58";
            Size size194 = default(Size);
            size194 = new Size(176, 16);
            this.label58.Size = size194;
            this.label58.TabIndex = 13;
            Point location195 = default(Point);
            location195 = new Point(16, 82);
            this.label59.Location = location195;
            this.label59.Name = "label59";
            Size size195 = default(Size);
            size195 = new Size(72, 16);
            this.label59.Size = size195;
            this.label59.TabIndex = 12;
            this.label59.Text = "Reserved:";
            Point location196 = default(Point);
            location196 = new Point(16, 16);
            this.label60.Location = location196;
            this.label60.Name = "label60";
            Size size196 = default(Size);
            size196 = new Size(72, 16);
            this.label60.Size = size196;
            this.label60.TabIndex = 11;
            this.label60.Text = "Vendor:";
            Point location197 = default(Point);
            location197 = new Point(88, 60);
            this.label61.Location = location197;
            this.label61.Name = "label61";
            Size size197 = default(Size);
            size197 = new Size(176, 16);
            this.label61.Size = size197;
            this.label61.TabIndex = 10;
            Point location198 = default(Point);
            location198 = new Point(16, 38);
            this.label62.Location = location198;
            this.label62.Name = "label62";
            Size size198 = default(Size);
            size198 = new Size(56, 16);
            this.label62.Size = size198;
            this.label62.TabIndex = 9;
            this.label62.Text = "Name:";
            Point location199 = default(Point);
            location199 = new Point(16, 60);
            this.label67.Location = location199;
            this.label67.Name = "label67";
            Size size199 = default(Size);
            size199 = new Size(64, 16);
            this.label67.Size = size199;
            this.label67.TabIndex = 8;
            this.label67.Text = "F/W Rev:";
            Point location200 = default(Point);
            location200 = new Point(88, 38);
            this.label68.Location = location200;
            this.label68.Name = "label68";
            Size size200 = default(Size);
            size200 = new Size(176, 16);
            this.label68.Size = size200;
            this.label68.TabIndex = 7;
            this.comboBox7.Cursor = Cursors.Default;
            this.comboBox7.ItemHeight = 13;
            Point location201 = default(Point);
            location201 = new Point(40, 48);
            this.comboBox7.Location = location201;
            this.comboBox7.Name = "comboBox7";
            Size size201 = default(Size);
            size201 = new Size(80, 21);
            this.comboBox7.Size = size201;
            this.comboBox7.TabIndex = 93;
            this.comboBox7.SelectedIndexChanged += this.comboBox7_SelectedIndexChanged;
            Point location202 = default(Point);
            location202 = new Point(40, 24);
            this.label73.Location = location202;
            this.label73.Name = "label73";
            Size size202 = default(Size);
            size202 = new Size(56, 16);
            this.label73.Size = size202;
            this.label73.TabIndex = 92;
            this.label73.Text = "I/O Port";
            this.groupBox3.Controls.Add(this.pictureBox11);
            this.groupBox3.Controls.Add(this.pictureBox9);
            this.groupBox3.Controls.Add(this.label74);
            this.groupBox3.Controls.Add(this.label75);
            this.groupBox3.Controls.Add(this.label76);
            this.groupBox3.Controls.Add(this.label81);
            this.groupBox3.Controls.Add(this.label83);
            this.groupBox3.Controls.Add(this.label84);
            this.groupBox3.Controls.Add(this.label85);
            this.groupBox3.Controls.Add(this.label86);
            this.groupBox3.Controls.Add(this.label95);
            this.groupBox3.Controls.Add(this.label96);
            this.groupBox3.FlatStyle = FlatStyle.System;
            Point location203 = default(Point);
            location203 = new Point(32, 80);
            this.groupBox3.Location = location203;
            this.groupBox3.Name = "groupBox3";
            Size size203 = default(Size);
            size203 = new Size(280, 152);
            this.groupBox3.Size = size203;
            this.groupBox3.TabIndex = 91;
            this.groupBox3.TabStop = false;
            this.groupBox3.Text = "Port Properties";
            this.toolTip_0.SetToolTip(this.groupBox3, "Properites of IO port selected");
            this.pictureBox11.Image = (Image)resourceManager.GetObject("pictureBox11.Image");
            Point location204 = default(Point);
            location204 = new Point(232, 16);
            this.pictureBox11.Location = location204;
            this.pictureBox11.Name = "pictureBox11";
            Size size204 = default(Size);
            size204 = new Size(35, 29);
            this.pictureBox11.Size = size204;
            this.pictureBox11.TabIndex = 40;
            this.pictureBox11.TabStop = false;
            this.pictureBox9.Image = (Image)resourceManager.GetObject("pictureBox9.Image");
            Point location205 = default(Point);
            location205 = new Point(232, 16);
            this.pictureBox9.Location = location205;
            this.pictureBox9.Name = "pictureBox9";
            Size size205 = default(Size);
            size205 = new Size(35, 29);
            this.pictureBox9.Size = size205;
            this.pictureBox9.TabIndex = 39;
            this.pictureBox9.TabStop = false;
            this.pictureBox9.Visible = false;
            Point location206 = default(Point);
            location206 = new Point(16, 112);
            this.label74.Location = location206;
            this.label74.Name = "label74";
            Size size206 = default(Size);
            size206 = new Size(72, 16);
            this.label74.Size = size206;
            this.label74.TabIndex = 12;
            this.label74.Text = "Device:";
            Point location207 = default(Point);
            location207 = new Point(88, 112);
            this.label75.Location = location207;
            this.label75.Name = "label75";
            Size size207 = default(Size);
            size207 = new Size(176, 32);
            this.label75.Size = size207;
            this.label75.TabIndex = 11;
            Point location208 = default(Point);
            location208 = new Point(88, 88);
            this.label76.Location = location208;
            this.label76.Name = "label76";
            Size size208 = default(Size);
            size208 = new Size(176, 16);
            this.label76.Size = size208;
            this.label76.TabIndex = 10;
            Point location209 = default(Point);
            location209 = new Point(88, 64);
            this.label81.Location = location209;
            this.label81.Name = "label81";
            Size size209 = default(Size);
            size209 = new Size(176, 16);
            this.label81.Size = size209;
            this.label81.TabIndex = 9;
            Point location210 = default(Point);
            location210 = new Point(88, 40);
            this.label83.Location = location210;
            this.label83.Name = "label83";
            Size size210 = default(Size);
            size210 = new Size(176, 16);
            this.label83.Size = size210;
            this.label83.TabIndex = 8;
            Point location211 = default(Point);
            location211 = new Point(88, 16);
            this.label84.Location = location211;
            this.label84.Name = "label84";
            Size size211 = default(Size);
            size211 = new Size(176, 16);
            this.label84.Size = size211;
            this.label84.TabIndex = 7;
            Point location212 = default(Point);
            location212 = new Point(16, 16);
            this.label85.Location = location212;
            this.label85.Name = "label85";
            Size size212 = default(Size);
            size212 = new Size(88, 16);
            this.label85.Size = size212;
            this.label85.TabIndex = 6;
            this.label85.Text = "I/O Address:";
            Point location213 = default(Point);
            location213 = new Point(16, 40);
            this.label86.Location = location213;
            this.label86.Name = "label86";
            Size size213 = default(Size);
            size213 = new Size(72, 16);
            this.label86.Size = size213;
            this.label86.TabIndex = 5;
            this.label86.Text = "Type:";
            Point location214 = default(Point);
            location214 = new Point(16, 64);
            this.label95.Location = location214;
            this.label95.Name = "label95";
            Size size214 = default(Size);
            size214 = new Size(72, 16);
            this.label95.Size = size214;
            this.label95.TabIndex = 4;
            this.label95.Text = "Channel:";
            Point location215 = default(Point);
            location215 = new Point(16, 88);
            this.label96.Location = location215;
            this.label96.Name = "label96";
            Size size215 = default(Size);
            size215 = new Size(72, 16);
            this.label96.Size = size215;
            this.label96.TabIndex = 3;
            this.label96.Text = "Postion:";
            this.groupBox6.Controls.Add(this.label118);
            this.groupBox6.Controls.Add(this.label122);
            this.groupBox6.Controls.Add(this.label121);
            this.groupBox6.Controls.Add(this.label120);
            this.groupBox6.Controls.Add(this.label119);
            this.groupBox6.Controls.Add(this.label114);
            this.groupBox6.Controls.Add(this.label77);
            this.groupBox6.Controls.Add(this.label78);
            this.groupBox6.Controls.Add(this.label79);
            this.groupBox6.Controls.Add(this.label80);
            this.groupBox6.FlatStyle = FlatStyle.System;
            Point location216 = default(Point);
            location216 = new Point(344, 104);
            this.groupBox6.Location = location216;
            this.groupBox6.Name = "groupBox6";
            Size size216 = default(Size);
            size216 = new Size(280, 144);
            this.groupBox6.Size = size216;
            this.groupBox6.TabIndex = 50;
            this.groupBox6.TabStop = false;
            this.groupBox6.Text = "Flash Chip Properties";
            this.toolTip_0.SetToolTip(this.groupBox6, "Properites of Flash device in Drive on IO port selected");
            Point location217 = default(Point);
            location217 = new Point(80, 24);
            this.label118.Location = location217;
            this.label118.Name = "label118";
            Size size217 = default(Size);
            size217 = new Size(192, 16);
            this.label118.Size = size217;
            this.label118.TabIndex = 13;
            Point location218 = default(Point);
            location218 = new Point(80, 120);
            this.label122.Location = location218;
            this.label122.Name = "label122";
            Size size218 = default(Size);
            size218 = new Size(192, 16);
            this.label122.Size = size218;
            this.label122.TabIndex = 17;
            Point location219 = default(Point);
            location219 = new Point(80, 96);
            this.label121.Location = location219;
            this.label121.Name = "label121";
            Size size219 = default(Size);
            size219 = new Size(192, 16);
            this.label121.Size = size219;
            this.label121.TabIndex = 16;
            Point location220 = default(Point);
            location220 = new Point(80, 72);
            this.label120.Location = location220;
            this.label120.Name = "label120";
            Size size220 = default(Size);
            size220 = new Size(192, 16);
            this.label120.Size = size220;
            this.label120.TabIndex = 15;
            Point location221 = default(Point);
            location221 = new Point(80, 48);
            this.label119.Location = location221;
            this.label119.Name = "label119";
            Size size221 = default(Size);
            size221 = new Size(192, 16);
            this.label119.Size = size221;
            this.label119.TabIndex = 14;
            Point location222 = default(Point);
            location222 = new Point(16, 48);
            this.label114.Location = location222;
            this.label114.Name = "label114";
            Size size222 = default(Size);
            size222 = new Size(56, 16);
            this.label114.Size = size222;
            this.label114.TabIndex = 12;
            this.label114.Text = "Device ID:";
            Point location223 = default(Point);
            location223 = new Point(16, 72);
            this.label77.Location = location223;
            this.label77.Name = "label77";
            Size size223 = default(Size);
            size223 = new Size(56, 16);
            this.label77.Size = size223;
            this.label77.TabIndex = 9;
            this.label77.Text = "Name:";
            Point location224 = default(Point);
            location224 = new Point(16, 96);
            this.label78.Location = location224;
            this.label78.Name = "label78";
            Size size224 = default(Size);
            size224 = new Size(56, 16);
            this.label78.Size = size224;
            this.label78.TabIndex = 8;
            this.label78.Text = "Size:";
            Point location225 = default(Point);
            location225 = new Point(16, 24);
            this.label79.Location = location225;
            this.label79.Name = "label79";
            Size size225 = default(Size);
            size225 = new Size(64, 16);
            this.label79.Size = size225;
            this.label79.TabIndex = 7;
            this.label79.Text = "Vendor ID:";
            Point location226 = default(Point);
            location226 = new Point(16, 120);
            this.label80.Location = location226;
            this.label80.Name = "label80";
            Size size226 = default(Size);
            size226 = new Size(56, 16);
            this.label80.Size = size226;
            this.label80.TabIndex = 11;
            this.label80.Text = "Type:";
            this.checkBox5.FlatStyle = FlatStyle.System;
            Point location227 = default(Point);
            location227 = new Point(344, 8);
            this.checkBox5.Location = location227;
            this.checkBox5.Name = "checkBox5";
            this.checkBox5.RightToLeft = RightToLeft.Yes;
            this.checkBox5.TabIndex = 94;
            this.checkBox5.Text = "Do Device ID";
            this.checkBox5.Visible = false;
            this.button9.FlatStyle = FlatStyle.System;
            Point location228 = default(Point);
            location228 = new Point(128, 48);
            this.button9.Location = location228;
            this.button9.Name = "button9";
            Size size227 = default(Size);
            size227 = new Size(24, 21);
            this.button9.Size = size227;
            this.button9.TabIndex = 60;
            this.button9.Text = "...";
            this.toolTip_0.SetToolTip(this.button9, "Refresh Drive Properties");
            this.button9.Click += this.button9_Click;
            this.Hitachi.Controls.Add(this.radioButton18);
            this.Hitachi.Controls.Add(this.radioButton17);
            this.Hitachi.Controls.Add(this.groupBox8);
            this.Hitachi.Controls.Add(this.groupBox15);
            this.Hitachi.Controls.Add(this.groupBox14);
            this.Hitachi.Controls.Add(this.groupBox12);
            this.Hitachi.Controls.Add(this.groupBox13);
            this.Hitachi.Controls.Add(this.groupBox11);
            this.Hitachi.Controls.Add(this.groupBox5);
            Point location229 = default(Point);
            location229 = new Point(4, 22);
            this.Hitachi.Location = location229;
            this.Hitachi.Name = "Hitachi";
            Size size228 = default(Size);
            size228 = new Size(656, 374);
            this.Hitachi.Size = size228;
            this.Hitachi.TabIndex = 6;
            this.Hitachi.Text = "  Hitachi GDR3120  ";
            this.radioButton18.FlatStyle = FlatStyle.System;
            Point location230 = default(Point);
            location230 = new Point(216, 40);
            this.radioButton18.Location = location230;
            this.radioButton18.Name = "radioButton18";
            this.radioButton18.RightToLeft = RightToLeft.Yes;
            Size size229 = default(Size);
            size229 = new Size(88, 24);
            this.radioButton18.Size = size229;
            this.radioButton18.TabIndex = 72;
            this.radioButton18.Text = "Use Port IO";
            this.toolTip_0.SetToolTip(this.radioButton18, "Communicate with drive via Port IO");
            this.radioButton18.CheckedChanged += this.radioButton18_CheckedChanged;
            this.radioButton17.FlatStyle = FlatStyle.System;
            Point location231 = default(Point);
            location231 = new Point(200, 12);
            this.radioButton17.Location = location231;
            this.radioButton17.Name = "radioButton17";
            this.radioButton17.RightToLeft = RightToLeft.Yes;
            this.radioButton17.TabIndex = 71;
            this.radioButton17.Text = "Use Win API";
            this.toolTip_0.SetToolTip(this.radioButton17, "Communicate with drive via windows Drive letter");
            this.groupBox8.Controls.Add(this.radioButton5);
            this.groupBox8.Controls.Add(this.radioButton4);
            this.groupBox8.Controls.Add(this.radioButton3);
            this.groupBox8.Controls.Add(this.radioButton2);
            this.groupBox8.Controls.Add(this.radioButton1);
            this.groupBox8.FlatStyle = FlatStyle.System;
            Point location232 = default(Point);
            location232 = new Point(208, 72);
            this.groupBox8.Location = location232;
            this.groupBox8.Name = "groupBox8";
            Size size230 = default(Size);
            size230 = new Size(112, 160);
            this.groupBox8.Size = size230;
            this.groupBox8.TabIndex = 61;
            this.groupBox8.TabStop = false;
            this.groupBox8.Text = "Drive Revision";
            this.radioButton5.FlatStyle = FlatStyle.System;
            Point location233 = default(Point);
            location233 = new Point(32, 128);
            this.radioButton5.Location = location233;
            this.radioButton5.Name = "radioButton5";
            this.radioButton5.RightToLeft = RightToLeft.Yes;
            Size size231 = default(Size);
            size231 = new Size(64, 24);
            this.radioButton5.Size = size231;
            this.radioButton5.TabIndex = 4;
            this.radioButton5.Text = "79 / 78";
            this.radioButton5.CheckedChanged += this.radioButton5_CheckedChanged;
            this.radioButton4.FlatStyle = FlatStyle.System;
            Point location234 = default(Point);
            location234 = new Point(32, 100);
            this.radioButton4.Location = location234;
            this.radioButton4.Name = "radioButton4";
            this.radioButton4.RightToLeft = RightToLeft.Yes;
            Size size232 = default(Size);
            size232 = new Size(64, 24);
            this.radioButton4.Size = size232;
            this.radioButton4.TabIndex = 3;
            this.radioButton4.Text = "59 / 58";
            this.radioButton3.FlatStyle = FlatStyle.System;
            Point location235 = default(Point);
            location235 = new Point(32, 72);
            this.radioButton3.Location = location235;
            this.radioButton3.Name = "radioButton3";
            this.radioButton3.RightToLeft = RightToLeft.Yes;
            Size size233 = default(Size);
            size233 = new Size(64, 24);
            this.radioButton3.Size = size233;
            this.radioButton3.TabIndex = 2;
            this.radioButton3.Text = "47 / 46";
            this.radioButton2.FlatStyle = FlatStyle.System;
            Point location236 = default(Point);
            location236 = new Point(32, 44);
            this.radioButton2.Location = location236;
            this.radioButton2.Name = "radioButton2";
            this.radioButton2.RightToLeft = RightToLeft.Yes;
            Size size234 = default(Size);
            size234 = new Size(64, 24);
            this.radioButton2.Size = size234;
            this.radioButton2.TabIndex = 1;
            this.radioButton2.Text = "36";
            this.radioButton1.FlatStyle = FlatStyle.System;
            Point location237 = default(Point);
            location237 = new Point(32, 16);
            this.radioButton1.Location = location237;
            this.radioButton1.Name = "radioButton1";
            this.radioButton1.RightToLeft = RightToLeft.Yes;
            Size size235 = default(Size);
            size235 = new Size(64, 24);
            this.radioButton1.Size = size235;
            this.radioButton1.TabIndex = 0;
            this.radioButton1.Text = "40 / 32";
            this.groupBox15.Controls.Add(this.button22);
            this.groupBox15.Controls.Add(this.button3);
            this.groupBox15.Controls.Add(this.comboBox16);
            this.groupBox15.Controls.Add(this.button27);
            this.groupBox15.Controls.Add(this.button23);
            this.groupBox15.FlatStyle = FlatStyle.System;
            Point location238 = default(Point);
            location238 = new Point(336, 8);
            this.groupBox15.Location = location238;
            this.groupBox15.Name = "groupBox15";
            Size size236 = default(Size);
            size236 = new Size(312, 96);
            this.groupBox15.Size = size236;
            this.groupBox15.TabIndex = 70;
            this.groupBox15.TabStop = false;
            this.groupBox15.Text = "Drive";
            this.button22.FlatStyle = FlatStyle.System;
            Point location239 = default(Point);
            location239 = new Point(160, 56);
            this.button22.Location = location239;
            this.button22.Name = "button22";
            Size size237 = default(Size);
            size237 = new Size(64, 24);
            this.button22.Size = size237;
            this.button22.TabIndex = 64;
            this.button22.Text = "Query";
            this.toolTip_0.SetToolTip(this.button22, "Inquire drive letter.");
            this.button22.Click += this.button22_Click;
            this.button3.FlatStyle = FlatStyle.System;
            Point location240 = default(Point);
            location240 = new Point(16, 56);
            this.button3.Location = location240;
            this.button3.Name = "button3";
            Size size238 = default(Size);
            size238 = new Size(64, 24);
            this.button3.Size = size238;
            this.button3.TabIndex = 63;
            this.button3.Text = "Refresh";
            this.toolTip_0.SetToolTip(this.button3, "Refresh Windows Drive list");
            this.button3.Click += this.button3_Click;
            this.comboBox16.ContextMenu = this.contextMenu_0;
            Point location241 = default(Point);
            location241 = new Point(16, 24);
            this.comboBox16.Location = location241;
            this.comboBox16.Name = "comboBox16";
            Size size239 = default(Size);
            size239 = new Size(280, 21);
            this.comboBox16.Size = size239;
            this.comboBox16.TabIndex = 5;
            MenuItem[] items6 = new MenuItem[]
            {
                this.menuItem_0,
                this.menuItem_1,
                this.menuItem_8,
                this.menuItem_9,
                this.menuItem_10,
                this.menuItem_38
            };
            this.contextMenu_0.MenuItems.AddRange(items6);
            this.menuItem_0.Index = 0;
            this.menuItem_0.Text = "Open";
            this.menuItem_0.Click += this.menuItem_0_Click;
            this.menuItem_1.Index = 1;
            this.menuItem_1.Text = "Close";
            this.menuItem_1.Click += this.menuItem_1_Click;
            this.menuItem_8.Index = 2;
            this.menuItem_8.Text = "Remove";
            this.menuItem_8.Click += this.menuItem_8_Click;
            this.menuItem_9.Index = 3;
            this.menuItem_9.Text = "Disable";
            this.menuItem_9.Click += this.menuItem_9_Click;
            this.menuItem_10.Index = 4;
            this.menuItem_10.Text = "Enable All";
            this.menuItem_10.Click += this.menuItem_10_Click;
            this.menuItem_38.Index = 5;
            MenuItem[] items7 = new MenuItem[]
            {
                this.menuItem_39,
                this.menuItem_40,
                this.menuItem_41,
                this.menuItem_42,
                this.menuItem_49,
                this.menuItem_48,
                this.menuItem_44,
                this.menuItem_46,
                this.menuItem_50,
                this.menuItem_45,
                this.menuItem_51,
                this.menuItem_47,
                this.menuItem_52,
                this.menuItem_43
            };
            this.menuItem_38.MenuItems.AddRange(items7);
            this.menuItem_38.Text = "BurnMax";
            this.menuItem_38.Visible = false;
            this.menuItem_39.Index = 0;
            this.menuItem_39.Text = "iHAS A";
            this.menuItem_39.Click += this.menuItem_39_Click;
            this.menuItem_40.Index = 1;
            this.menuItem_40.Text = "iHAS B";
            this.menuItem_40.Click += this.menuItem_40_Click;
            this.menuItem_41.Index = 2;
            this.menuItem_41.Text = "iHAS C/D";
            this.menuItem_41.Click += this.menuItem_41_Click;
            this.menuItem_42.Index = 3;
            this.menuItem_42.Text = "iHAS W";
            this.menuItem_42.Click += this.menuItem_42_Click;
            this.menuItem_49.Index = 4;
            this.menuItem_49.Text = "eTAU108";
            this.menuItem_49.Click += this.menuItem_49_Click;
            this.menuItem_48.Index = 5;
            this.menuItem_48.Text = "-";
            this.menuItem_44.Index = 6;
            this.menuItem_44.Text = "DVR-220L";
            this.menuItem_44.Click += this.menuItem_44_Click;
            this.menuItem_46.Index = 7;
            this.menuItem_46.Text = "DVR-218L";
            this.menuItem_46.Click += this.menuItem_46_Click;
            this.menuItem_50.Index = 8;
            this.menuItem_50.Text = "-";
            this.menuItem_45.Index = 9;
            this.menuItem_45.Text = "TSST SE-208AB";
            this.menuItem_45.Click += this.menuItem_45_Click;
            this.menuItem_51.Index = 10;
            this.menuItem_51.Text = "-";
            this.menuItem_47.Index = 11;
            this.menuItem_47.Text = "DRW-24B1LT";
            this.menuItem_47.Click += this.menuItem_47_Click;
            this.menuItem_52.Index = 12;
            this.menuItem_52.Text = "-";
            this.menuItem_43.Index = 13;
            this.menuItem_43.Text = "Scan";
            this.menuItem_43.Click += this.menuItem_43_Click;
            this.button27.FlatStyle = FlatStyle.System;
            Point location242 = default(Point);
            location242 = new Point(88, 56);
            this.button27.Location = location242;
            this.button27.Name = "button27";
            Size size240 = default(Size);
            size240 = new Size(64, 24);
            this.button27.Size = size240;
            this.button27.TabIndex = 94;
            this.button27.Text = "Scan";
            this.toolTip_0.SetToolTip(this.button27, "Scan for Hardware Changes");
            this.button27.Click += this.button27_Click;
            this.button23.FlatStyle = FlatStyle.System;
            Point location243 = default(Point);
            location243 = new Point(232, 56);
            this.button23.Location = location243;
            this.button23.Name = "button23";
            Size size241 = default(Size);
            size241 = new Size(64, 24);
            this.button23.Size = size241;
            this.button23.TabIndex = 65;
            this.button23.Text = "USmodeB";
            this.button23.Click += this.button23_Click;
            this.groupBox14.Controls.Add(this.button24);
            this.groupBox14.Controls.Add(this.button12);
            this.groupBox14.Controls.Add(this.checkBox1);
            this.groupBox14.Controls.Add(this.linkLabel3);
            this.groupBox14.FlatStyle = FlatStyle.System;
            Point location244 = default(Point);
            location244 = new Point(8, 272);
            this.groupBox14.Location = location244;
            this.groupBox14.Name = "groupBox14";
            Size size242 = default(Size);
            size242 = new Size(184, 96);
            this.groupBox14.Size = size242;
            this.groupBox14.TabIndex = 69;
            this.groupBox14.TabStop = false;
            this.groupBox14.Text = "79 Unlock";
            this.button24.Enabled = false;
            this.button24.FlatStyle = FlatStyle.System;
            Point location245 = default(Point);
            location245 = new Point(16, 56);
            this.button24.Location = location245;
            this.button24.Name = "button24";
            Size size243 = default(Size);
            size243 = new Size(72, 24);
            this.button24.Size = size243;
            this.button24.TabIndex = 60;
            this.button24.Text = "Play";
            this.button24.Click += this.button24_Click;
            this.button12.FlatStyle = FlatStyle.System;
            Point location246 = default(Point);
            location246 = new Point(96, 56);
            this.button12.Location = location246;
            this.button12.Name = "button12";
            Size size244 = default(Size);
            size244 = new Size(72, 24);
            this.button12.Size = size244;
            this.button12.TabIndex = 59;
            this.button12.Text = "79 Unlock";
            this.button12.Click += this.button12_Click;
            this.checkBox1.Checked = true;
            this.checkBox1.CheckState = CheckState.Checked;
            this.checkBox1.FlatStyle = FlatStyle.System;
            Point location247 = default(Point);
            location247 = new Point(96, 8);
            this.checkBox1.Location = location247;
            this.checkBox1.Name = "checkBox1";
            this.checkBox1.RightToLeft = RightToLeft.Yes;
            Size size245 = default(Size);
            size245 = new Size(80, 24);
            this.checkBox1.Size = size245;
            this.checkBox1.TabIndex = 61;
            this.checkBox1.Text = "automatic";
            this.checkBox1.CheckedChanged += this.checkBox1_CheckedChanged;
            this.linkLabel3.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location248 = default(Point);
            location248 = new Point(8, 32);
            this.linkLabel3.Location = location248;
            this.linkLabel3.Name = "linkLabel3";
            Size size246 = default(Size);
            size246 = new Size(168, 16);
            this.linkLabel3.Size = size246;
            this.linkLabel3.TabIndex = 99;
            this.linkLabel3.TabStop = true;
            this.linkLabel3.Text = "Insert the 79 Unlock Audio CD.";
            this.linkLabel3.TextAlign = ContentAlignment.MiddleCenter;
            this.linkLabel3.LinkClicked += this.linkLabel3_LinkClicked;
            this.groupBox12.Controls.Add(this.listBox5);
            this.groupBox12.FlatStyle = FlatStyle.System;
            Point location249 = default(Point);
            location249 = new Point(504, 112);
            this.groupBox12.Location = location249;
            this.groupBox12.Name = "groupBox12";
            Size size247 = default(Size);
            size247 = new Size(144, 256);
            this.groupBox12.Size = size247;
            this.groupBox12.TabIndex = 68;
            this.groupBox12.TabStop = false;
            this.groupBox12.Text = "Sector List";
            this.listBox5.Font = new Font("Courier New", 9f, FontStyle.Regular, GraphicsUnit.Point, 0);
            this.listBox5.ItemHeight = 15;
            object[] items8 = new object[]
            {
                "0x90003000",
                "0x90005000",
                "0x90006000",
                "0x9000A000",
                "0x9001C000",
                "0x90027000",
                "0x9002E000",
                "0x90033000",
                "0x90034000",
                "0x90035000",
                "0x9003E000"
            };
            this.listBox5.Items.AddRange(items8);
            Point location250 = default(Point);
            location250 = new Point(16, 24);
            this.listBox5.Location = location250;
            this.listBox5.Name = "listBox5";
            Size size248 = default(Size);
            size248 = new Size(112, 214);
            this.listBox5.Size = size248;
            this.listBox5.TabIndex = 3;
            this.toolTip_0.SetToolTip(this.listBox5, "List of sectors to be flashed");
            this.groupBox13.Controls.Add(this.button25);
            this.groupBox13.Controls.Add(this.label99);
            this.groupBox13.Controls.Add(this.label97);
            this.groupBox13.Controls.Add(this.label98);
            this.groupBox13.Controls.Add(this.label100);
            this.groupBox13.Controls.Add(this.button11);
            this.groupBox13.Controls.Add(this.label82);
            this.groupBox13.Controls.Add(this.label89);
            this.groupBox13.Controls.Add(this.label91);
            this.groupBox13.Controls.Add(this.comboBox13);
            this.groupBox13.Controls.Add(this.button20);
            this.groupBox13.Controls.Add(this.button19);
            this.groupBox13.Controls.Add(this.label90);
            this.groupBox13.FlatStyle = FlatStyle.System;
            Point location251 = default(Point);
            location251 = new Point(8, 8);
            this.groupBox13.Location = location251;
            this.groupBox13.Name = "groupBox13";
            Size size249 = default(Size);
            size249 = new Size(184, 256);
            this.groupBox13.Size = size249;
            this.groupBox13.TabIndex = 67;
            this.groupBox13.TabStop = false;
            this.groupBox13.Text = "Port Properties";
            this.button25.FlatStyle = FlatStyle.System;
            Point location252 = default(Point);
            location252 = new Point(112, 24);
            this.button25.Location = location252;
            this.button25.Name = "button25";
            Size size250 = default(Size);
            size250 = new Size(24, 21);
            this.button25.Size = size250;
            this.button25.TabIndex = 94;
            this.button25.Text = "...";
            this.toolTip_0.SetToolTip(this.button25, "Refresh Drive Properties");
            this.button25.Click += this.button25_Click;
            Point location253 = default(Point);
            location253 = new Point(56, 88);
            this.label99.Location = location253;
            this.label99.Name = "label99";
            Size size251 = default(Size);
            size251 = new Size(120, 16);
            this.label99.Size = size251;
            this.label99.TabIndex = 70;
            Point location254 = default(Point);
            location254 = new Point(72, 152);
            this.label97.Location = location254;
            this.label97.Name = "label97";
            Size size252 = default(Size);
            size252 = new Size(96, 32);
            this.label97.Size = size252;
            this.label97.TabIndex = 72;
            Point location255 = default(Point);
            location255 = new Point(72, 120);
            this.label98.Location = location255;
            this.label98.Name = "label98";
            Size size253 = default(Size);
            size253 = new Size(96, 16);
            this.label98.Size = size253;
            this.label98.TabIndex = 71;
            Point location256 = default(Point);
            location256 = new Point(56, 56);
            this.label100.Location = location256;
            this.label100.Name = "label100";
            Size size254 = default(Size);
            size254 = new Size(125, 16);
            this.label100.Size = size254;
            this.label100.TabIndex = 69;
            this.button11.FlatStyle = FlatStyle.System;
            Point location257 = default(Point);
            location257 = new Point(16, 192);
            this.button11.Location = location257;
            this.button11.Name = "button11";
            Size size255 = default(Size);
            size255 = new Size(152, 24);
            this.button11.Size = size255;
            this.button11.TabIndex = 66;
            this.button11.Text = "Send Mode-B";
            this.button11.Click += this.button11_Click;
            Point location258 = default(Point);
            location258 = new Point(8, 56);
            this.label82.Location = location258;
            this.label82.Name = "label82";
            Size size256 = default(Size);
            size256 = new Size(56, 16);
            this.label82.Size = size256;
            this.label82.TabIndex = 6;
            this.label82.Text = "Vendor:";
            Point location259 = default(Point);
            location259 = new Point(8, 88);
            this.label89.Location = location259;
            this.label89.Name = "label89";
            Size size257 = default(Size);
            size257 = new Size(56, 16);
            this.label89.Size = size257;
            this.label89.TabIndex = 5;
            this.label89.Text = "Name:";
            Point location260 = default(Point);
            location260 = new Point(8, 152);
            this.label91.Location = location260;
            this.label91.Name = "label91";
            Size size258 = default(Size);
            size258 = new Size(72, 16);
            this.label91.Size = size258;
            this.label91.TabIndex = 3;
            this.label91.Text = "Reserved:";
            Point location261 = default(Point);
            location261 = new Point(16, 24);
            this.comboBox13.Location = location261;
            this.comboBox13.Name = "comboBox13";
            Size size259 = default(Size);
            size259 = new Size(88, 21);
            this.comboBox13.Size = size259;
            this.comboBox13.TabIndex = 68;
            this.comboBox13.SelectedIndexChanged += this.comboBox13_SelectedIndexChanged;
            this.button20.FlatStyle = FlatStyle.System;
            Point location262 = default(Point);
            location262 = new Point(96, 224);
            this.button20.Location = location262;
            this.button20.Name = "button20";
            Size size260 = default(Size);
            size260 = new Size(72, 24);
            this.button20.Size = size260;
            this.button20.TabIndex = 93;
            this.button20.Text = "Close";
            this.button20.Click += this.button20_Click;
            this.button19.FlatStyle = FlatStyle.System;
            Point location263 = default(Point);
            location263 = new Point(16, 224);
            this.button19.Location = location263;
            this.button19.Name = "button19";
            Size size261 = default(Size);
            size261 = new Size(72, 24);
            this.button19.Size = size261;
            this.button19.TabIndex = 92;
            this.button19.Text = "Open";
            this.button19.Click += this.button19_Click;
            Point location264 = default(Point);
            location264 = new Point(8, 120);
            this.label90.Location = location264;
            this.label90.Name = "label90";
            Size size262 = default(Size);
            size262 = new Size(80, 16);
            this.label90.Size = size262;
            this.label90.TabIndex = 4;
            this.label90.Text = "F/W Rev:";
            this.groupBox11.Controls.Add(this.radioButton16);
            this.groupBox11.Controls.Add(this.radioButton11);
            this.groupBox11.Controls.Add(this.radioButton10);
            this.groupBox11.Controls.Add(this.radioButton9);
            this.groupBox11.Controls.Add(this.radioButton8);
            this.groupBox11.Controls.Add(this.radioButton7);
            this.groupBox11.Controls.Add(this.radioButton6);
            this.groupBox11.Controls.Add(this.button26);
            this.groupBox11.FlatStyle = FlatStyle.System;
            Point location265 = default(Point);
            location265 = new Point(336, 112);
            this.groupBox11.Location = location265;
            this.groupBox11.Name = "groupBox11";
            Size size263 = default(Size);
            size263 = new Size(152, 256);
            this.groupBox11.Size = size263;
            this.groupBox11.TabIndex = 62;
            this.groupBox11.TabStop = false;
            this.groupBox11.Text = "Flashing Options";
            this.radioButton16.Enabled = false;
            this.radioButton16.FlatStyle = FlatStyle.System;
            Point location266 = default(Point);
            location266 = new Point(16, 184);
            this.radioButton16.Location = location266;
            this.radioButton16.Name = "radioButton16";
            this.radioButton16.RightToLeft = RightToLeft.Yes;
            Size size264 = default(Size);
            size264 = new Size(120, 24);
            this.radioButton16.Size = size264;
            this.radioButton16.TabIndex = 62;
            this.radioButton16.Text = "Free Flash";
            this.toolTip_0.SetToolTip(this.radioButton16, "Flash what you like, checks can be ignored.. **BE WARNED**");
            this.radioButton16.CheckedChanged += this.radioButton16_CheckedChanged;
            this.radioButton11.FlatStyle = FlatStyle.System;
            Point location267 = default(Point);
            location267 = new Point(16, 16);
            this.radioButton11.Location = location267;
            this.radioButton11.Name = "radioButton11";
            this.radioButton11.RightToLeft = RightToLeft.Yes;
            Size size265 = default(Size);
            size265 = new Size(120, 24);
            this.radioButton11.Size = size265;
            this.radioButton11.TabIndex = 61;
            this.radioButton11.Text = "Dump Drive";
            this.toolTip_0.SetToolTip(this.radioButton11, "Dump and save flash image.");
            this.radioButton11.CheckedChanged += this.radioButton11_CheckedChanged;
            this.radioButton10.FlatStyle = FlatStyle.System;
            Point location268 = default(Point);
            location268 = new Point(16, 156);
            this.radioButton10.Location = location268;
            this.radioButton10.Name = "radioButton10";
            this.radioButton10.RightToLeft = RightToLeft.Yes;
            Size size266 = default(Size);
            size266 = new Size(120, 24);
            this.radioButton10.Size = size266;
            this.radioButton10.TabIndex = 4;
            this.radioButton10.Text = "Set Checksum";
            this.toolTip_0.SetToolTip(this.radioButton10, "Flash checkum if incorrect or master -OR- Flash master is correct.");
            this.radioButton10.CheckedChanged += this.radioButton10_CheckedChanged;
            this.radioButton9.FlatStyle = FlatStyle.System;
            Point location269 = default(Point);
            location269 = new Point(16, 128);
            this.radioButton9.Location = location269;
            this.radioButton9.Name = "radioButton9";
            this.radioButton9.RightToLeft = RightToLeft.Yes;
            Size size267 = default(Size);
            size267 = new Size(120, 24);
            this.radioButton9.Size = size267;
            this.radioButton9.TabIndex = 3;
            this.radioButton9.Text = "Restore Firmware";
            this.toolTip_0.SetToolTip(this.radioButton9, "Dump flash, load stock, build sector list and flash them... fix checksum.");
            this.radioButton9.CheckedChanged += this.radioButton9_CheckedChanged;
            this.radioButton8.FlatStyle = FlatStyle.System;
            Point location270 = default(Point);
            location270 = new Point(16, 100);
            this.radioButton8.Location = location270;
            this.radioButton8.Name = "radioButton8";
            this.radioButton8.RightToLeft = RightToLeft.Yes;
            Size size268 = default(Size);
            size268 = new Size(120, 24);
            this.radioButton8.Size = size268;
            this.radioButton8.TabIndex = 2;
            this.radioButton8.Text = "Flash LT-Plus";
            this.toolTip_0.SetToolTip(this.radioButton8, "Dump flash, load latest iXtreme, build sector list and flash them.");
            this.radioButton8.CheckedChanged += this.radioButton8_CheckedChanged;
            this.radioButton7.FlatStyle = FlatStyle.System;
            Point location271 = default(Point);
            location271 = new Point(16, 72);
            this.radioButton7.Location = location271;
            this.radioButton7.Name = "radioButton7";
            this.radioButton7.RightToLeft = RightToLeft.Yes;
            Size size269 = default(Size);
            size269 = new Size(120, 24);
            this.radioButton7.Size = size269;
            this.radioButton7.TabIndex = 1;
            this.radioButton7.Text = "Auto Spoof";
            this.toolTip_0.SetToolTip(this.radioButton7, "Dump flash, Spoof from Source, flash Sector differences.");
            this.radioButton7.CheckedChanged += this.radioButton7_CheckedChanged;
            this.radioButton6.FlatStyle = FlatStyle.System;
            Point location272 = default(Point);
            location272 = new Point(16, 44);
            this.radioButton6.Location = location272;
            this.radioButton6.Name = "radioButton6";
            this.radioButton6.RightToLeft = RightToLeft.Yes;
            Size size270 = default(Size);
            size270 = new Size(120, 24);
            this.radioButton6.Size = size270;
            this.radioButton6.TabIndex = 0;
            this.radioButton6.Text = "Manual Spoof";
            this.toolTip_0.SetToolTip(this.radioButton6, "Dump flash, spoof manually, flash sector differences.");
            this.radioButton6.CheckedChanged += this.radioButton6_CheckedChanged;
            this.button26.FlatStyle = FlatStyle.System;
            Point location273 = default(Point);
            location273 = new Point(16, 208);
            this.button26.Location = location273;
            this.button26.Name = "button26";
            Size size271 = default(Size);
            size271 = new Size(120, 40);
            this.button26.Size = size271;
            this.button26.TabIndex = 60;
            this.button26.Text = "Delta Read";
            this.button26.Click += this.button26_Click;
            this.groupBox5.Controls.Add(this.radioButton12);
            this.groupBox5.Controls.Add(this.radioButton13);
            this.groupBox5.Controls.Add(this.radioButton14);
            this.groupBox5.Controls.Add(this.radioButton15);
            this.groupBox5.FlatStyle = FlatStyle.System;
            Point location274 = default(Point);
            location274 = new Point(208, 240);
            this.groupBox5.Location = location274;
            this.groupBox5.Name = "groupBox5";
            Size size272 = default(Size);
            size272 = new Size(112, 128);
            this.groupBox5.Size = size272;
            this.groupBox5.TabIndex = 62;
            this.groupBox5.TabStop = false;
            this.groupBox5.Text = "Transfer Method";
            this.radioButton12.Enabled = false;
            this.radioButton12.FlatStyle = FlatStyle.System;
            Point location275 = default(Point);
            location275 = new Point(8, 100);
            this.radioButton12.Location = location275;
            this.radioButton12.Name = "radioButton12";
            this.radioButton12.RightToLeft = RightToLeft.Yes;
            Size size273 = default(Size);
            size273 = new Size(88, 24);
            this.radioButton12.Size = size273;
            this.radioButton12.TabIndex = 3;
            this.radioButton12.Text = "Ram Poke";
            this.toolTip_0.SetToolTip(this.radioButton12, "Communicate with drive via Vendor Poke commands.");
            this.radioButton13.FlatStyle = FlatStyle.System;
            Point location276 = default(Point);
            location276 = new Point(8, 44);
            this.radioButton13.Location = location276;
            this.radioButton13.Name = "radioButton13";
            this.radioButton13.RightToLeft = RightToLeft.Yes;
            Size size274 = default(Size);
            size274 = new Size(88, 24);
            this.radioButton13.Size = size274;
            this.radioButton13.TabIndex = 2;
            this.radioButton13.Text = "Mode Select";
            this.toolTip_0.SetToolTip(this.radioButton13, "Communicate with drive via Mode Select commands, supports USB");
            this.radioButton14.FlatStyle = FlatStyle.System;
            Point location277 = default(Point);
            location277 = new Point(8, 72);
            this.radioButton14.Location = location277;
            this.radioButton14.Name = "radioButton14";
            this.radioButton14.RightToLeft = RightToLeft.Yes;
            Size size275 = default(Size);
            size275 = new Size(88, 24);
            this.radioButton14.Size = size275;
            this.radioButton14.TabIndex = 1;
            this.radioButton14.Text = "Ram Upload";
            this.toolTip_0.SetToolTip(this.radioButton14, "Communicate with drive via Vendor Ram Upload commands.");
            this.radioButton15.FlatStyle = FlatStyle.System;
            Point location278 = default(Point);
            location278 = new Point(8, 16);
            this.radioButton15.Location = location278;
            this.radioButton15.Name = "radioButton15";
            this.radioButton15.RightToLeft = RightToLeft.Yes;
            Size size276 = default(Size);
            size276 = new Size(88, 24);
            this.radioButton15.Size = size276;
            this.radioButton15.TabIndex = 0;
            this.radioButton15.Text = "Classic";
            this.toolTip_0.SetToolTip(this.radioButton15, "Dump via Classic ram peek Vendor command");
            this.tabPage5.Controls.Add(this.pictureBox4);
            this.tabPage5.Controls.Add(this.button31);
            this.tabPage5.Controls.Add(this.button30);
            this.tabPage5.Controls.Add(this.axWebBrowser_1);
            Point location279 = default(Point);
            location279 = new Point(4, 22);
            this.tabPage5.Location = location279;
            this.tabPage5.Name = "tabPage5";
            Size size277 = default(Size);
            size277 = new Size(656, 374);
            this.tabPage5.Size = size277;
            this.tabPage5.TabIndex = 7;
            this.tabPage5.Text = "  IRC Channel  ";
            this.pictureBox4.Image = (Image)resourceManager.GetObject("pictureBox4.Image");
            Point location280 = default(Point);
            location280 = new Point(552, 344);
            this.pictureBox4.Location = location280;
            this.pictureBox4.Name = "pictureBox4";
            Size size278 = default(Size);
            size278 = new Size(92, 26);
            this.pictureBox4.Size = size278;
            this.pictureBox4.TabIndex = 77;
            this.pictureBox4.TabStop = false;
            this.toolTip_0.SetToolTip(this.pictureBox4, "Help Support JungleFlasher Development!");
            this.pictureBox4.Visible = false;
            this.pictureBox4.Click += this.pictureBox4_Click;
            this.pictureBox4.MouseEnter += this.pictureBox3_MouseEnter;
            this.pictureBox4.MouseLeave += this.pictureBox3_MouseLeave;
            Point location281 = default(Point);
            location281 = new Point(112, 344);
            this.button31.Location = location281;
            this.button31.Name = "button31";
            Size size279 = default(Size);
            size279 = new Size(80, 24);
            this.button31.Size = size279;
            this.button31.TabIndex = 76;
            this.button31.Text = "Disconnect";
            this.button31.Click += this.button31_Click;
            Point location282 = default(Point);
            location282 = new Point(16, 344);
            this.button30.Location = location282;
            this.button30.Name = "button30";
            Size size280 = default(Size);
            size280 = new Size(80, 24);
            this.button30.Size = size280;
            this.button30.TabIndex = 75;
            this.button30.Text = "Connect";
            this.button30.Click += this.button30_Click;
            this.checkBox7.Checked = true;
            this.checkBox7.CheckState = CheckState.Checked;
            Point location283 = default(Point);
            location283 = new Point(536, 480);
            this.checkBox7.Location = location283;
            this.checkBox7.Name = "checkBox7";
            this.checkBox7.RightToLeft = RightToLeft.Yes;
            Size size281 = default(Size);
            size281 = new Size(88, 24);
            this.checkBox7.Size = size281;
            this.checkBox7.TabIndex = 72;
            this.checkBox7.Text = "Intel";
            Point location284 = default(Point);
            location284 = new Point(328, 480);
            this.checkBox6.Location = location284;
            this.checkBox6.Name = "checkBox6";
            this.checkBox6.RightToLeft = RightToLeft.Yes;
            Size size282 = default(Size);
            size282 = new Size(88, 24);
            this.checkBox6.Size = size282;
            this.checkBox6.TabIndex = 71;
            this.checkBox6.Text = "Use Port I/O";
            Color window19 = SystemColors.Window;
            Color color19 = window19;
            Color backColor19 = color19;
            this.textBox6.BackColor = backColor19;
            this.textBox6.Font = new Font("Courier New", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location285 = default(Point);
            location285 = new Point(8, 416);
            this.textBox6.Location = location285;
            this.textBox6.MaxLength = 262142;
            this.textBox6.Multiline = true;
            this.textBox6.Name = "textBox6";
            this.textBox6.ReadOnly = true;
            this.textBox6.ScrollBars = ScrollBars.Vertical;
            Size size283 = default(Size);
            size283 = new Size(664, 152);
            this.textBox6.Size = size283;
            this.textBox6.TabIndex = 27;
            this.textBox6.Text = "";
            this.textBox6.DoubleClick += this.textBox6_DoubleClick;
            this.pictureBox3.Image = (Image)resourceManager.GetObject("pictureBox3.Image");
            Point location286 = default(Point);
            location286 = new Point(680, 8);
            this.pictureBox3.Location = location286;
            this.pictureBox3.Name = "pictureBox3";
            Size size284 = default(Size);
            size284 = new Size(160, 560);
            this.pictureBox3.Size = size284;
            this.pictureBox3.SizeMode = PictureBoxSizeMode.StretchImage;
            this.pictureBox3.TabIndex = 32;
            this.pictureBox3.TabStop = false;
            this.toolTip_0.SetToolTip(this.pictureBox3, "http://www.modtraders.co.uk/");
            this.pictureBox3.Visible = false;
            this.pictureBox3.Click += this.pictureBox3_Click;
            this.pictureBox3.MouseEnter += this.pictureBox3_MouseEnter;
            this.pictureBox3.MouseLeave += this.pictureBox3_MouseLeave;
            this.button48.Font = new Font("Microsoft Sans Serif", 6f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location287 = default(Point);
            location287 = new Point(48, 80);
            this.button48.Location = location287;
            this.button48.Name = "button48";
            Size size285 = default(Size);
            size285 = new Size(32, 24);
            this.button48.Size = size285;
            this.button48.TabIndex = 5;
            this.button48.Text = "Half";
            this.toolTip_0.SetToolTip(this.button48, "Click to half tray");
            this.button48.Click += this.button48_Click;
            this.button47.Font = new Font("Microsoft Sans Serif", 6f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location288 = default(Point);
            location288 = new Point(48, 48);
            this.button47.Location = location288;
            this.button47.Name = "button47";
            Size size286 = default(Size);
            size286 = new Size(32, 24);
            this.button47.Size = size286;
            this.button47.TabIndex = 4;
            this.button47.Text = "Close";
            this.toolTip_0.SetToolTip(this.button47, "Click to close tray");
            this.button47.Click += this.button47_Click;
            this.button46.Font = new Font("Microsoft Sans Serif", 6f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location289 = default(Point);
            location289 = new Point(48, 16);
            this.button46.Location = location289;
            this.button46.Name = "button46";
            Size size287 = default(Size);
            size287 = new Size(32, 24);
            this.button46.Size = size287;
            this.button46.TabIndex = 3;
            this.button46.Text = "Open";
            this.toolTip_0.SetToolTip(this.button46, "Click to open tray");
            this.button46.Click += this.button46_Click;
            this.button45.Font = new Font("Microsoft Sans Serif", 6f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location290 = default(Point);
            location290 = new Point(8, 80);
            this.button45.Location = location290;
            this.button45.Name = "button45";
            Size size288 = default(Size);
            size288 = new Size(32, 24);
            this.button45.Size = size288;
            this.button45.TabIndex = 2;
            this.button45.Text = "Cycle";
            this.toolTip_0.SetToolTip(this.button45, "Click to power cycle drive");
            this.button45.Click += this.button45_Click;
            this.button44.Font = new Font("Microsoft Sans Serif", 6f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location291 = default(Point);
            location291 = new Point(8, 48);
            this.button44.Location = location291;
            this.button44.Name = "button44";
            Size size289 = default(Size);
            size289 = new Size(32, 24);
            this.button44.Size = size289;
            this.button44.TabIndex = 1;
            this.button44.Text = "OFF";
            this.toolTip_0.SetToolTip(this.button44, "Click to power off drive");
            this.button44.Click += this.button44_Click;
            this.button43.Font = new Font("Microsoft Sans Serif", 6f, FontStyle.Regular, GraphicsUnit.Point, 0);
            Point location292 = default(Point);
            location292 = new Point(8, 16);
            this.button43.Location = location292;
            this.button43.Name = "button43";
            Size size290 = default(Size);
            size290 = new Size(32, 24);
            this.button43.Size = size290;
            this.button43.TabIndex = 0;
            this.button43.Text = "ON";
            this.toolTip_0.SetToolTip(this.button43, "Click to power on drive");
            this.button43.Click += this.button43_Click;
            Color window20 = SystemColors.Window;
            Color color20 = window20;
            Color backColor20 = color20;
            this.textBox20.BackColor = backColor20;
            Point location293 = default(Point);
            location293 = new Point(232, 432);
            this.textBox20.Location = location293;
            this.textBox20.Name = "textBox20";
            Size size291 = default(Size);
            size291 = new Size(112, 20);
            this.textBox20.Size = size291;
            this.textBox20.TabIndex = 73;
            this.textBox20.Text = "EasyToFindUpdate";
            this.textBox20.TextChanged += this.textBox20_TextChanged;
            this.label135.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, 0);
            Point location294 = default(Point);
            location294 = new Point(504, 12);
            this.label135.Location = location294;
            this.label135.Name = "label135";
            this.label135.RightToLeft = RightToLeft.No;
            Size size292 = default(Size);
            size292 = new Size(160, 16);
            this.label135.Size = size292;
            this.label135.TabIndex = 75;
            this.groupBox18.ContextMenu = this.contextMenu_6;
            this.groupBox18.Controls.Add(this.button48);
            this.groupBox18.Controls.Add(this.button47);
            this.groupBox18.Controls.Add(this.button46);
            this.groupBox18.Controls.Add(this.button45);
            this.groupBox18.Controls.Add(this.button44);
            this.groupBox18.Controls.Add(this.button43);
            Point location295 = default(Point);
            location295 = new Point(560, 432);
            this.groupBox18.Location = location295;
            this.groupBox18.Name = "groupBox18";
            Size size293 = default(Size);
            size293 = new Size(88, 112);
            this.groupBox18.Size = size293;
            this.groupBox18.TabIndex = 76;
            this.groupBox18.TabStop = false;
            this.groupBox18.Text = "CK3i";
            this.groupBox18.Visible = false;
            MenuItem[] items9 = new MenuItem[]
            {
                this.menuItem_34,
                this.menuItem_35,
                this.menuItem_36
            };
            this.contextMenu_6.MenuItems.AddRange(items9);
            this.menuItem_34.Index = 0;
            this.menuItem_34.Text = "750nS";
            this.menuItem_35.Index = 1;
            this.menuItem_35.Text = "+ 50mS";
            this.menuItem_35.Click += this.menuItem_35_Click;
            this.menuItem_36.Index = 2;
            this.menuItem_36.Text = "- 50mS";
            this.menuItem_36.Click += this.menuItem_36_Click;
            Size autoScaleBaseSize = default(Size);
            autoScaleBaseSize = new Size(5, 13);
            this.AutoScaleBaseSize = autoScaleBaseSize;
            Color control = SystemColors.Control;
            Color color21 = control;
            Color backColor21 = color21;
            this.BackColor = backColor21;
            Size clientSize = default(Size);
            clientSize = new Size(850, 576);
            base.ClientSize = clientSize;
            base.Controls.Add(this.groupBox18);
            base.Controls.Add(this.label135);
            base.Controls.Add(this.textBox6);
            base.Controls.Add(this.textBox20);
            base.Controls.Add(this.textBox5);
            base.Controls.Add(this.textBox19);
            base.Controls.Add(this.checkBox7);
            base.Controls.Add(this.tabControl5);
            base.Controls.Add(this.checkBox6);
            base.Controls.Add(this.axWebBrowser_0);
            base.Controls.Add(this.pictureBox3);
            base.FormBorderStyle = FormBorderStyle.FixedDialog;
            base.HelpButton = true;
            base.Icon = (Icon)resourceManager.GetObject("$this.Icon");
            base.KeyPreview = true;
            base.MaximizeBox = false;
            Size maximumSize = default(Size);
            maximumSize = new Size(856, 608);
            base.MaximumSize = maximumSize;
            Size minimumSize = default(Size);
            minimumSize = new Size(856, 608);
            base.MinimumSize = minimumSize;
            base.Name = "Form1_DnSpy";
            base.StartPosition = FormStartPosition.CenterScreen;
            this.Text = "JungleFlasher 0.1.96 Beta";
            base.KeyDown += this.Form1_DnSpy_KeyDown;
            base.Closing += this.Form1_DnSpy_Closing;
            base.Load += this.Form1_DnSpy_Load;
            base.Closed += this.Form1_DnSpy_Closed;
            this.tabControl1.ResumeLayout(false);
            this.tabPage9.ResumeLayout(false);
            ((ISupportInitialize)this.axWebBrowser_0).EndInit();
            ((ISupportInitialize)this.axWebBrowser_1).EndInit();
            this.tabControl2.ResumeLayout(false);
            this.tabPage10.ResumeLayout(false);
            this.tabControl3.ResumeLayout(false);
            this.tabPage3.ResumeLayout(false);
            this.tabPage7.ResumeLayout(false);
            this.tabPage11.ResumeLayout(false);
            this.tabPage12.ResumeLayout(false);
            this.tabControl4.ResumeLayout(false);
            this.tabPage1.ResumeLayout(false);
            this.tabPage2.ResumeLayout(false);
            this.tabPage4.ResumeLayout(false);
            this.tabPage13.ResumeLayout(false);
            this.tabControl5.ResumeLayout(false);
            this.Firmtools.ResumeLayout(false);
            this.DVDKey32.ResumeLayout(false);
            this.groupBox16.ResumeLayout(false);
            this.groupBox17.ResumeLayout(false);
            this.groupBox2.ResumeLayout(false);
            this.groupBox4.ResumeLayout(false);
            this.Benq.ResumeLayout(false);
            this.groupBox9.ResumeLayout(false);
            this.groupBox7.ResumeLayout(false);
            this.groupBox1.ResumeLayout(false);
            this.groupBox3.ResumeLayout(false);
            this.groupBox6.ResumeLayout(false);
            this.Hitachi.ResumeLayout(false);
            this.groupBox8.ResumeLayout(false);
            this.groupBox15.ResumeLayout(false);
            this.groupBox14.ResumeLayout(false);
            this.groupBox12.ResumeLayout(false);
            this.groupBox13.ResumeLayout(false);
            this.groupBox11.ResumeLayout(false);
            this.groupBox5.ResumeLayout(false);
            this.tabPage5.ResumeLayout(false);
            this.groupBox18.ResumeLayout(false);
            base.ResumeLayout(false);
        }

        // Token: 0x060001B6 RID: 438 RVA: 0x00106518 File Offset: 0x00106518
        private unsafe Assembly method_0(object object_0, ResolveEventArgs resolveEventArgs_0)
        {
            string name = resolveEventArgs_0.Name;
            Assembly result;
            if (string.Compare(resolveEventArgs_0.Name.Substring(0, resolveEventArgs_0.Name.IndexOf(new string((sbyte*)(&_Module.struct6_4)))), "AxInterop.SHDocVw") == 0)
            {
                Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("AxInterop.SHDocVw.dll");
                byte[] array = new byte[(int)manifestResourceStream.Length];
                array.Initialize();
                byte[] array2 = array;
                manifestResourceStream.Read(array2, 0, array2.Length);
                result = Assembly.Load(array2);
            }
            else if (string.Compare(resolveEventArgs_0.Name.Substring(0, resolveEventArgs_0.Name.IndexOf(new string((sbyte*)(&_Module.struct6_4)))), "Interop.SHDocVw") == 0)
            {
                Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("Interop.SHDocVw.dll");
                byte[] array3 = new byte[(int)manifestResourceStream.Length];
                array3.Initialize();
                byte[] array4 = array3;
                manifestResourceStream.Read(array4, 0, array4.Length);
                result = Assembly.Load(array4);
            }
            else
            {
                result = null;
            }
            return result;
        }

        // Token: 0x060001B7 RID: 439 RVA: 0x0010660C File Offset: 0x0010660C
        private void method_1(object sender, EventArgs e)
        {

            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            if (MessageBox.Show("Do you want to exit?", "Jungle Flasher", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                this.method_4();
                Application.Exit();
            }

            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
        }

        // Token: 0x060001B8 RID: 440 RVA: 0x00106668 File Offset: 0x00106668
        private void Form1_DnSpy_Closed(object sender, EventArgs e)
        {
            this.bool_1 = false;
            this.method_4();
        }

        // Token: 0x060001B9 RID: 441 RVA: 0x00106684 File Offset: 0x00106684
        private unsafe void Form1_DnSpy_Closing(object sender, CancelEventArgs e)
        {
            while (this.pVoid_0 != null)
            {

                _Module.Sleep(100);

                _Module.SetCommMask(this.pVoid_0, 64);
            }

            _Module.smethod_150(*(ref _Module.gstruct101_0 + 4));

            _Module.smethod_148((sbyte*)(&_Module.struct24_5));
            if (*(ref _Module.gstruct10_0 + 12) == 1 && this.method_424(1) == 1)
            {

                _Module.Sleep(250);
                this.method_422();
            }
        }

        // Token: 0x060001BA RID: 442 RVA: 0x003BE754 File Offset: 0x00306754
        private unsafe void Form1_DnSpy_Load(object sender, EventArgs e)
        {
            string strA = null;
            string strA2 = null;
            string strA3 = null;
            string strA4 = null;
            string strA5 = null;
            this.Cursor = Cursors.AppStarting;
            this.bool_1 = false;
            this.pGstruct11_0 = _Module.FindWindowA(null, (sbyte*)(&_Module.struct12_5));
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            this.int_7 = 0;
            this.int_8 = 0;
            string text;
            if (registryKey.GetValue("Left") != null)
            {
                text = registryKey.GetValue("Left").ToString();
            }
            else
            {
                text = new string((sbyte*)(&_Module.struct18_6));
                registryKey.SetValue("Left", "0");
            }
            string text2;
            if (registryKey.GetValue("Top") != null)
            {
                text2 = registryKey.GetValue("Top").ToString();
            }
            else
            {
                text2 = new string((sbyte*)(&_Module.struct18_6));
                registryKey.SetValue("Top", "0");
            }
            string value;
            if (registryKey.GetValue("IOPort") != null)
            {
                value = registryKey.GetValue("IOPort").ToString();
            }
            else
            {
                value = new string((sbyte*)(&_Module.struct6_6));
                registryKey.SetValue("IOPort", "0");
            }
            if (registryKey.GetValue("COMPort") != null)
            {
                this.string_12 = registryKey.GetValue("COMPort").ToString();
            }
            else
            {
                this.string_12 = new string((sbyte*)(&_Module.struct18_6));
                registryKey.SetValue("COMPort", "-1");
            }
            string strA6;
            if (registryKey.GetValue("AdvView") != null)
            {
                strA6 = registryKey.GetValue("AdvView").ToString();
            }
            else
            {
                strA6 = new string((sbyte*)(&_Module.struct6_6));
                registryKey.SetValue("AdvView", "0");
            }
            string strA7;
            if (registryKey.GetValue("ScsiPorts") != null)
            {
                strA7 = registryKey.GetValue("ScsiPorts").ToString();
            }
            else
            {
                strA7 = new string((sbyte*)(&_Module.struct6_6));
                registryKey.SetValue("ScsiPorts", "0");
            }
            string strA8;
            if (registryKey.GetValue("ViaPortsOnly") != null)
            {
                strA8 = registryKey.GetValue("ViaPortsOnly").ToString();
            }
            else
            {
                strA8 = new string((sbyte*)(&_Module.struct6_8));
                registryKey.SetValue("ViaPortsOnly", "0");
            }
            string strA9;
            if (registryKey.GetValue("OnlyDummy") != null)
            {
                strA9 = registryKey.GetValue("OnlyDummy").ToString();
            }
            else
            {
                strA9 = new string((sbyte*)(&_Module.struct6_6));
                registryKey.SetValue("OnlyDummy", "0");
            }
            string strA10;
            if (registryKey.GetValue("Xswitch") != null)
            {
                strA10 = registryKey.GetValue("Xswitch").ToString();
            }
            else
            {
                strA10 = new string((sbyte*)(&_Module.struct6_6));
                registryKey.SetValue("Xswitch", "0");
            }
            string strA11;
            if (registryKey.GetValue("HitRev") != null)
            {
                strA11 = registryKey.GetValue("HitRev").ToString();
            }
            else
            {
                strA11 = new string((sbyte*)(&_Module.struct18_7));
                registryKey.SetValue("HitRev", "47");
            }
            string strA12;
            if (registryKey.GetValue("HitAPi") != null)
            {
                strA12 = registryKey.GetValue("HitAPi").ToString();
            }
            else
            {
                strA12 = new string((sbyte*)(&_Module.struct6_8));
                registryKey.SetValue("HitAPi", "1");
            }
            if (registryKey.GetValue("PermPortIO") != null)
            {
                strA = registryKey.GetValue("PermPortIO").ToString();
            }
            if (registryKey.GetValue("HackerMode") != null)
            {
                strA2 = registryKey.GetValue("HackerMode").ToString();
            }
            if (registryKey.GetValue("NoKeepDB") != null)
            {
                strA3 = registryKey.GetValue("NoKeepDB").ToString();
            }
            if (registryKey.GetValue("Sponsor") != null)
            {
                strA4 = registryKey.GetValue("Sponsor").ToString();
            }
            string strA13;
            if (registryKey.GetValue("HitTran") != null)
            {
                strA13 = registryKey.GetValue("HitTran").ToString();
            }
            else
            {
                strA13 = new string((sbyte*)(&_Module.struct6_8));
                registryKey.SetValue("HitTran", "1");
            }
            if (registryKey.GetValue("BackupFolder") != null)
            {
                this.string_8 = registryKey.GetValue("BackupFolder").ToString();
                this.bool_2 = true;
            }
            else
            {
                this.bool_2 = false;
            }
            string strA14;
            if (registryKey.GetValue("DoCom") != null)
            {
                strA14 = registryKey.GetValue("DoCom").ToString();
            }
            else
            {
                strA14 = "1";
                registryKey.SetValue("DoCom", "1");
            }
            string strA15;
            if (registryKey.GetValue("DoIO") != null)
            {
                strA15 = registryKey.GetValue("DoIO").ToString();
            }
            else
            {
                strA15 = "1";
                registryKey.SetValue("DoIO", "1");
            }
            string strA16;
            if (registryKey.GetValue("DoDrives") != null)
            {
                strA16 = registryKey.GetValue("DoDrives").ToString();
            }
            else
            {
                strA16 = "1";
                registryKey.SetValue("DoDrives", "1");
            }
            string strA17;
            if (registryKey.GetValue("DoDevID") != null)
            {
                strA17 = registryKey.GetValue("DoDevID").ToString();
            }
            else
            {
                strA17 = "0";
                registryKey.SetValue("DoDevID", "0");
            }
            if (registryKey.GetValue("DoUSBOnly") != null)
            {
                this.string_18 = registryKey.GetValue("DoUSBOnly").ToString();
            }
            else
            {
                this.string_18 = "0";
                registryKey.SetValue("DoUSBOnly", "0");
            }
            if (registryKey.GetValue("Delay32") != null)
            {
                strA5 = registryKey.GetValue("Delay32").ToString();
            }
            if (registryKey.GetValue("Mods") != null)
            {
                this.string_11 = registryKey.GetValue("Mods").ToString();
            }
            else
            {
                this.string_11 = "0";
                registryKey.SetValue("Mods", "0");
            }
            if (registryKey.GetValue("NetBook") != null)
            {
            }
            if (registryKey.GetValue("WriteKey") != null)
            {
                this.menuItem_32.Visible = true;
            }
            registryKey.Close();
            int systemMetrics = _Module.GetSystemMetrics(0);
            int systemMetrics2 = _Module.GetSystemMetrics(1);
            GStruct92* pGstruct92_ = _Module.CreateDCA((sbyte*)(&_Module.struct22_2), null, null, null);
            int deviceCaps = _Module.GetDeviceCaps(pGstruct92_, 88);
            int deviceCaps2 = _Module.GetDeviceCaps(pGstruct92_, 10);
            if (((IConvertible)text).ToInt32(null) + base.Width > systemMetrics)
            {
                base.Left = (systemMetrics - base.Width) / 2;
            }
            else if (((IConvertible)text).ToInt32(null) < 0)
            {
                base.Left = (systemMetrics - base.Width) / 2;
            }
            else
            {
                base.Left = ((IConvertible)text).ToInt32(null);
            }
            if (((IConvertible)text2).ToInt32(null) + base.Height > systemMetrics2)
            {
                base.Top = (systemMetrics2 - base.Height) / 2;
            }
            else if (((IConvertible)text2).ToInt32(null) < 0)
            {
                base.Top = (systemMetrics2 - base.Height) / 2;
            }
            else
            {
                base.Top = ((IConvertible)text2).ToInt32(null);
            }
            if (string.Compare(strA6, "1") == 0)
            {
                this.checkBox3.CheckState = CheckState.Checked;
            }
            else
            {
                this.checkBox3.CheckState = CheckState.Unchecked;
            }
            if (string.Compare(strA7, "1") == 0)
            {
                this.checkBox2.CheckState = CheckState.Checked;
                this.checkBox11.CheckState = CheckState.Checked;
            }
            else
            {
                this.checkBox2.CheckState = CheckState.Unchecked;
                this.checkBox11.CheckState = CheckState.Unchecked;
            }
            if (string.Compare(strA8, "0") == 0)
            {
                this.checkBox4.CheckState = CheckState.Unchecked;
                this.checkBox10.CheckState = CheckState.Unchecked;
                this.checkBox2.Enabled = true;
                this.checkBox11.Enabled = true;
                this.radioButton18.Enabled = false;
                this.radioButton17.Checked = true;
            }
            else
            {
                this.checkBox4.CheckState = CheckState.Checked;
                this.checkBox10.CheckState = CheckState.Checked;
                this.checkBox2.Enabled = false;
                this.checkBox11.Enabled = false;
                this.radioButton18.Enabled = true;
            }
            if (string.Compare(strA9, "0") == 0)
            {
                this.checkBox8.CheckState = CheckState.Unchecked;
            }
            else
            {
                this.checkBox8.CheckState = CheckState.Checked;
            }
            if (string.Compare(strA10, "0") == 0)
            {
                this.checkBox9.CheckState = CheckState.Unchecked;
            }
            else
            {
                this.checkBox9.CheckState = CheckState.Checked;
            }
            if (string.Compare(strA17, "1") == 0)
            {
                this.checkBox5.CheckState = CheckState.Checked;
            }
            else
            {
                this.checkBox5.CheckState = CheckState.Unchecked;
            }
            if (string.Compare(this.string_18, "1") == 0)
            {
                this.checkBox15.CheckState = CheckState.Checked;
                this.checkBox16.CheckState = CheckState.Checked;
                this.checkBox2.Enabled = false;
                this.checkBox11.Enabled = false;
                this.checkBox4.Enabled = false;
                this.checkBox10.Enabled = false;
                this.radioButton18.Enabled = true;
                this.radioButton17.Checked = true;
            }
            else
            {
                this.checkBox15.CheckState = CheckState.Unchecked;
                this.checkBox16.CheckState = CheckState.Unchecked;
                this.checkBox2.Enabled = true;
                this.checkBox11.Enabled = true;
                this.checkBox4.Enabled = true;
                this.checkBox10.Enabled = true;
                this.radioButton18.Enabled = false;
                this.radioButton17.Checked = true;
            }
            this.int_14 = 0;
            this.string_21 = "Dump";
            this.radioButton11.Checked = true;
            if (string.Compare(strA11, "32") == 0)
            {
                this.radioButton1.Checked = true;
                this.int_12 = 32;
                this.string_19 = "0032/0040";
            }
            else if (string.Compare(strA11, "36") == 0)
            {
                this.radioButton2.Checked = true;
                this.int_12 = 36;
                this.string_19 = "0036";
            }
            else if (string.Compare(strA11, "47") == 0)
            {
                this.radioButton3.Checked = true;
                this.int_12 = 47;
                this.string_19 = "0046/0047";
            }
            else if (string.Compare(strA11, "59") == 0)
            {
                this.radioButton4.Checked = true;
                this.int_12 = 59;
                this.string_19 = "0058/0059";
            }
            else if (string.Compare(strA11, "79") == 0)
            {
                this.radioButton5.Checked = true;
                this.int_12 = 79;
                this.string_19 = "0078/0079";
            }
            if (string.Compare(strA12, "1") == 0)
            {
                this.radioButton17.Checked = true;
            }
            else
            {
                this.radioButton18.Checked = true;
            }
            if (string.Compare(strA13, "0") == 0)
            {
                this.radioButton15.Checked = true;
                this.int_13 = 0;
                this.string_20 = "Classic Ram Peek";
            }
            else if (string.Compare(strA13, "1") == 0)
            {
                this.radioButton14.Checked = true;
                this.int_13 = 1;
                this.string_20 = "Ram Upload";
            }
            else if (string.Compare(strA13, "2") == 0)
            {
                this.radioButton13.Checked = true;
                this.int_13 = 2;
                this.string_20 = "Mode Select";
            }
            else if (string.Compare(strA13, "3") == 0)
            {
                this.radioButton12.Checked = true;
                this.int_13 = 3;
                this.string_20 = "Ram Poke";
            }
            this.method_378();
            this.textBox6.AppendText("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" + "\r\n" + "JungleFlasher 0.1.96 Beta (323)" + "\r\n");
            int num;

            _Module.time((int*)(&num));
            GStruct85* pGstruct85_ = _Module.localtime((int*)(&num));
            this.textBox6.AppendText("Session Started " + Convert.ToString(new string(_Module.asctime((GStruct85*)pGstruct85_))).Substring(0, 24) + "\r\n\r\n");
            int num2 = 0;
            method procAddress = _Module.GetProcAddress(_Module.GetModuleHandleA((sbyte*)(&_Module.struct24_6)), (sbyte*)(&_Module.struct65_0));
            if (0 != procAddress)
            {
                object obj = calli(System.Int32 modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.Void *, System.Int32 *), _Module.GetCurrentProcess(), ref num2, procAddress);
            }
            if (num2 != 0)
            {
                this.textBox6.AppendText("This is a Wow 64 process ");
            }
            else
            {
                this.textBox6.AppendText("This is a 32 bit process ");
            }
            GStruct81* moduleHandleA = _Module.GetModuleHandleA((sbyte*)(&_Module.struct15_1));
            method procAddress2 = _Module.GetProcAddress(moduleHandleA, (sbyte*)(&_Module.struct66_0));
            GStruct91 gstruct;
            if (procAddress2 != null)
            {
                calli(System.Void modopt(System.Runtime.CompilerServices.CallConvStdcall)(ns0.GStruct91 *), ref gstruct, procAddress2);
            }
            else
            {

                _Module.GetSystemInfo(&gstruct);
            }
            int num3 = *(ref gstruct + 20);
            if (gstruct == null)
            {
                if (num3 != 1)
                {
                    this.textBox6.AppendText("running on " + Convert.ToString(num3) + " x 32 bit CPUs " + "\r\n");
                }
                else
                {
                    this.textBox6.AppendText("running on " + "a 32 bit CPU " + "\r\n");
                }
            }
            else if (gstruct == 9)
            {
                if (num3 != 1)
                {
                    this.textBox6.AppendText("running on " + Convert.ToString(num3) + " x 64 bit CPUs " + "\r\n");
                }
                else
                {
                    this.textBox6.AppendText("running on " + "a 64 bit CPU " + "\r\n");
                }
            }
            else
            {
                this.textBox6.AppendText(Convert.ToString(num3) + " x unknown CPU " + "\r\n");
            }
            if (this.method_410() == 1)
            {
                this.textBox6.AppendText("X360USB PRO detected, ");
                *(ref _Module.gstruct10_0 + 14) = 0;
                this.method_420();
                this.method_412();
                this.method_422();
                this.textBox6.AppendText("\r\n");
            }
            if (this.method_411() == 1)
            {
                this.textBox6.AppendText("X360USB BAD ASS detected, ");
                if (*(ref _Module.gstruct10_0 + 12) == 1)
                {
                    *(ref _Module.gstruct10_0 + 14) = 0;
                }
                else
                {
                    *(ref _Module.gstruct10_0 + 14) = 1;
                }
                this.method_421();
                this.method_413();
                this.method_423();
                this.textBox6.AppendText("\r\n");
            }
            if (string.Compare(this.string_18, "1") != 0 || *(ref _Module.gstruct10_0 + 13) != 1)
            {
                if (string.Compare(this.string_18, "1") != 0 || *(ref _Module.gstruct10_0 + 12) != 1)
                {
                    this.method_2();
                }
            }
            if (string.Compare(strA15, "1") == 0)
            {
                if (this.method_170() != 0)
                {
                    this.textBox6.AppendText("Found " + Convert.ToString(this.comboBox1.Items.Count) + " I/O Ports." + "\r\n");
                    if ((int)Convert.ToInt16(value) > this.comboBox1.Items.Count - 1)
                    {
                        this.comboBox1.SelectedIndex = this.comboBox1.Items.Count - 1;
                    }
                    else
                    {
                        this.comboBox1.SelectedIndex = 0;

                        _Module.Sleep(200);
                        this.comboBox1.SelectedIndex = (int)Convert.ToInt16(value);
                    }
                    this.method_177();
                    if (string.Compare(this.string_18, "1") != 0)
                    {
                        this.method_169();
                    }
                }
                else
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("No I/O ports were found during Enumeration!", "JungleFlasher", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    this.textBox6.AppendText("Found 0 I/O Ports." + "\r\n");
                }
            }
            if (string.Compare(strA14, "1") == 0)
            {
                if (this.method_145() != 0)
                {
                    this.textBox6.AppendText("Found " + Convert.ToString(this.comboBox10.Items.Count) + " Com Ports.");
                    if (Convert.ToInt16(this.string_12) == -1 && this.comboBox10.Items.Count > 0)
                    {
                        this.comboBox10.SelectedIndex = 0;
                        this.method_148();
                    }
                    else if ((int)Convert.ToInt16(this.string_12) > this.comboBox10.Items.Count - 1)
                    {
                        this.comboBox10.SelectedIndex = 0;
                        this.method_148();
                    }
                    else
                    {
                        this.comboBox10.SelectedIndex = 0;
                        this.comboBox10.SelectedIndex = (int)Convert.ToInt16(this.string_12);
                    }
                    for (int i = 0; i < this.comboBox10.Items.Count; i++)
                    {
                        if (*(ref _Module.struct122_0 + i * 324 + 8) == 7)
                        {
                            this.int_0 = 1;
                            this.string_1 = Convert.ToString(new string(ref _Module.struct122_0 + i * 324));
                            this.textBox6.AppendText("\r\n" + "CK3-CP Found on " + Convert.ToString(new string(ref _Module.struct122_0 + i * 324)) + ": Connecting...");
                            this.method_151();
                        }
                    }
                    this.textBox6.AppendText("\r\n");
                    if (*(ref _Module.struct122_0 + this.comboBox10.SelectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
                    {
                        this.method_166(17U);
                    }
                    if (*(ref _Module.struct122_0 + this.comboBox10.SelectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
                    {
                        this.label135.Text = "xt2: Enabled";
                    }
                    if (this.checkBox9.Enabled && this.checkBox9.CheckState == CheckState.Checked)
                    {
                        this.method_150();
                    }
                }
                else
                {
                    this.textBox6.AppendText("Found 0 Com Ports." + "\r\n");
                }
            }
            if (string.Compare(strA16, "1") == 0)
            {
                this.method_359();
                this.int_11 = this.int_10;
            }
            string[] commandLineArgs = Environment.GetCommandLineArgs();
            this.method_29();
            if (commandLineArgs.Length == 3)
            {
                if (string.Compare(commandLineArgs[2], "Target") == 0)
                {
                    this.method_36(commandLineArgs[1], 1);
                }
                else if (string.Compare(commandLineArgs[2], "Source") == 0)
                {
                    this.method_36(commandLineArgs[1], 0);
                }
            }
            else if (commandLineArgs.Length == 2)
            {
                this.method_36(commandLineArgs[1], 0);
            }
            else
            {
                Welcome welcome = new Welcome();
                welcome.ShowDialog(this);
            }
            if (this.bool_2)
            {
                this.string_9 = "";
                this.string_10 = this.string_8;
                ProjectName projectName = new ProjectName();
                if (projectName.ShowDialog(this) == DialogResult.OK)
                {
                    this.string_9 = projectName.textBox1.Text;
                    this.string_10 = this.string_8 + this.string_9;
                    if (projectName.textBox1.Text != "")
                    {
                        if (Directory.Exists(this.string_10))
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            MessageBox.Show("The folder " + this.string_10 + " already exists!", "Enter Job Name", MessageBoxButtons.OK);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            this.textBox6.AppendText("Working folder '" + this.string_10 + "' re-opened." + "\r\n");
                        }
                        else
                        {
                            Directory.CreateDirectory(this.string_10);
                            this.textBox6.AppendText("Working folder '" + this.string_10 + "' created." + "\r\n");
                        }
                    }
                    Directory.SetCurrentDirectory(this.string_10);
                }
            }
            if (string.Compare(strA12, "1") == 0)
            {
                this.radioButton17.Checked = true;
            }
            else
            {
                this.radioButton18.Checked = true;
            }
            if (!this.radioButton18.Enabled)
            {
                this.radioButton17.Checked = true;
            }
            if (string.Compare(strA, "1") == 0)
            {
                this.radioButton18.Checked = true;
                this.radioButton18.Enabled = true;
            }
            if (string.Compare(this.string_18, "1") == 0)
            {
                this.radioButton18.Enabled = true;
                this.radioButton17.Checked = true;
            }
            if (string.Compare(strA2, "1") == 0)
            {
                this.bool_3 = true;
            }
            else
            {
                this.bool_3 = false;
            }
            if (string.Compare(strA3, "1") == 0)
            {
                this.bool_4 = true;
                this.menuItem_7.Visible = false;
                this.menuItem_12.Visible = false;
            }
            if (string.Compare(strA4, "1") != 0)
            {
                this.axWebBrowser_0.Width = deviceCaps * 160 / 96 + 4;
                this.axWebBrowser_0.Height = deviceCaps * 560 / 96 + 4;
                this.pictureBox3.Width = deviceCaps * 160 / 96;
                this.pictureBox3.Height = deviceCaps * 560 / 96;
                if (deviceCaps2 == 600)
                {
                    Size maximumSize = default(Size);
                    maximumSize = new Size(856, 565);
                    base.MaximumSize = maximumSize;
                    Size minimumSize = default(Size);
                    minimumSize = new Size(856, 565);
                    base.MinimumSize = minimumSize;
                    this.textBox6.Height = 109;
                }
                Thread thread = new Thread(new ThreadStart(this.method_11));
                thread.Start();
            }
            else
            {
                Size maximumSize2 = default(Size);
                maximumSize2 = new Size(688, 608);
                base.MaximumSize = maximumSize2;
                Size minimumSize2 = default(Size);
                minimumSize2 = new Size(688, 608);
                base.MinimumSize = minimumSize2;
            }
            this.bool_1 = true;
            Thread thread2 = new Thread(new ThreadStart(this.method_20));
            thread2.Start();
            if (string.Compare(strA5, "0") == 0)
            {
                this.menuItem_14.Enabled = false;
            }
            else if (string.Compare(strA5, "5") == 0)
            {
                this.menuItem_15.Enabled = false;
            }
            else if (string.Compare(strA5, "10") == 0)
            {
                this.menuItem_16.Enabled = false;
            }
            else if (string.Compare(strA5, "15") == 0)
            {
                this.menuItem_17.Enabled = false;
            }
            else if (string.Compare(strA5, "20") == 0)
            {
                this.menuItem_18.Enabled = false;
            }
            this.radioButton21.Visible = true;
            this.Cursor = Cursors.Arrow;
        }

        // Token: 0x060001BB RID: 443 RVA: 0x00107CB4 File Offset: 0x00107CB4
        private unsafe void method_2()
        {
            string text = null;
            Struct68 @struct;

            _Module.memset((void*)(&@struct), 0, 260U);

            _Module.smethod_146((sbyte*)(&@struct));
            GStruct81* moduleHandleA = _Module.GetModuleHandleA((sbyte*)(&_Module.struct15_1));
            method procAddress = _Module.GetProcAddress(moduleHandleA, (sbyte*)(&_Module.struct66_0));
            GStruct91 gstruct;
            if (procAddress != null)
            {
                calli(System.Void modopt(System.Runtime.CompilerServices.CallConvStdcall)(ns0.GStruct91 *), ref gstruct, procAddress);
            }
            else
            {

                _Module.GetSystemInfo(&gstruct);
            }
            Struct68 struct3;
            if (gstruct == null)
            {

                _Module.strcat((sbyte*)(&@struct), (sbyte*)(&_Module.struct67_0));
                text = "portio32.sys";
                if (!File.Exists(Convert.ToString(new string((sbyte*)(&@struct)))))
                {
                    Struct68 struct2;
                    int tempPathA = _Module.GetTempPathA(260, (sbyte*)(&struct2));
                    if (tempPathA > 260 || tempPathA == 0)
                    {
                        return;
                    }
                    int tempFileNameA = _Module.GetTempFileNameA((sbyte*)(&struct2), (sbyte*)(&_Module.struct25_8), 0U, (sbyte*)(&struct3));
                    if (tempFileNameA == 0)
                    {
                        return;
                    }
                    GStruct5* ptr = _Module.fopen((sbyte*)(&struct3), (sbyte*)(&_Module.struct18_5));
                    if (ptr == null)
                    {

                        _Module.DeleteFileA((sbyte*)(&struct3));
                        return;
                    }

                    _Module.fwrite((void*)(&_Module.struct50_0), 2560U, 1U, ptr);

                    _Module.strcpy((sbyte*)(&@struct), (sbyte*)(&struct3));

                    _Module.fclose(ptr);
                }
            }
            else if (gstruct == 9)
            {

                _Module.strcat((sbyte*)(&@struct), (sbyte*)(&_Module.struct67_1));
                text = "portio64.sys";
                if (!File.Exists(Convert.ToString(new string((sbyte*)(&@struct)))))
                {
                    Struct68 struct2;
                    int tempPathA = _Module.GetTempPathA(260, (sbyte*)(&struct2));
                    if (tempPathA > 260 || tempPathA == 0)
                    {
                        return;
                    }
                    int tempFileNameA = _Module.GetTempFileNameA((sbyte*)(&struct2), (sbyte*)(&_Module.struct25_8), 0U, (sbyte*)(&struct3));
                    if (tempFileNameA == 0)
                    {
                        return;
                    }
                    GStruct5* ptr = _Module.fopen((sbyte*)(&struct3), (sbyte*)(&_Module.struct18_5));
                    if (ptr == null)
                    {

                        _Module.DeleteFileA((sbyte*)(&struct3));
                        return;
                    }

                    _Module.fwrite((void*)(&_Module.struct53_0), 4608U, 1U, ptr);

                    _Module.strcpy((sbyte*)(&@struct), (sbyte*)(&struct3));

                    _Module.fclose(ptr);
                }
            }
            else
            {
                MessageBox.Show("Processor architecture is not supported!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }

            _Module.smethod_148((sbyte*)(&_Module.struct24_5));

            _Module.smethod_148((sbyte*)(&_Module.struct10_18));
            if (_Module.smethod_147((sbyte*)(&@struct), (sbyte*)(&_Module.struct24_5)) != null)
            {
                if (string.Compare(text, "portio64.sys") == 0)
                {
                    MessageBox.Show("Can't install " + text + " driver!" + "\r\n" + "Press F8 at boot to 'Disable Driver Signature Enforcement'" + "\r\n" + "OR Test sign the driver an run in 'Test Mode'" + "\r\n\r\n" + "And Be Sure to 'Run as Administrator' !", "PortIO Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    this.textBox6.AppendText(text + " Driver not Installed " + "\r\n");

                    _Module.DeleteFileA((sbyte*)(&struct3));
                    return;
                }
                if (string.Compare(text, "portio32.sys") == 0)
                {
                    MessageBox.Show("Can't install " + text + " driver!" + "\r\n" + "Be Sure to 'Run as Administrator' !", "PortIO Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    this.textBox6.AppendText(text + " Driver not Installed " + "\r\n");

                    _Module.DeleteFileA((sbyte*)(&struct3));
                    return;
                }
            }
            else
            {
                this.textBox6.AppendText(text + " Driver Installed " + "\r\n");
            }
            if (_Module.smethod_149(ref _Module.gstruct101_0 + 4) != null)
            {
                MessageBox.Show("Can't start " + text + " driver!" + "\r\n" + "Be Sure to 'Run as Administrator' !", "PortIO Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            }
            else
            {
                this.textBox6.AppendText(text + " Driver Started, thanks Schtrom ! " + "\r\n");
            }

            _Module.DeleteFileA((sbyte*)(&struct3));
        }

        // Token: 0x060001BC RID: 444 RVA: 0x00107FDC File Offset: 0x00107FDC
        private void method_3()
        {
            Welcome welcome = new Welcome();
            welcome.ShowDialog(this);
        }

        // Token: 0x060001BD RID: 445 RVA: 0x00107FFC File Offset: 0x00107FFC
        private void checkBox3_CheckedChanged(object sender, EventArgs e)
        {
            if (this.checkBox3.CheckState == CheckState.Unchecked)
            {
                this.tabControl1.Visible = true;
                this.tabControl2.Visible = true;
                this.tabControl3.Visible = false;
                this.tabControl4.Visible = false;
            }
            else
            {
                this.tabControl1.Visible = false;
                this.tabControl2.Visible = false;
                this.tabControl3.Visible = true;
                this.tabControl4.Visible = true;
            }
        }

        // Token: 0x060001BE RID: 446 RVA: 0x00108078 File Offset: 0x00108078
        private unsafe void method_4()
        {
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            registryKey.SetValue("Left", Convert.ToString(base.Left));
            registryKey.SetValue("Top", Convert.ToString(base.Top));
            if (this.checkBox3.CheckState == CheckState.Checked)
            {
                registryKey.SetValue("AdvView", "1");
            }
            else
            {
                registryKey.SetValue("AdvView", "0");
            }
            if (this.checkBox2.CheckState == CheckState.Checked)
            {
                registryKey.SetValue("ScsiPorts", "1");
            }
            else
            {
                registryKey.SetValue("ScsiPorts", "0");
            }
            if (this.checkBox4.CheckState == CheckState.Checked)
            {
                registryKey.SetValue("ViaPortsOnly", "1");
            }
            else
            {
                registryKey.SetValue("ViaPortsOnly", "0");
            }
            if (this.checkBox8.CheckState == CheckState.Checked)
            {
                registryKey.SetValue("OnlyDummy", "1");
            }
            else
            {
                registryKey.SetValue("OnlyDummy", "0");
            }
            if (this.checkBox9.CheckState == CheckState.Checked)
            {
                registryKey.SetValue("Xswitch", "1");
            }
            else
            {
                registryKey.SetValue("Xswitch", "0");
            }
            if (this.checkBox15.CheckState == CheckState.Checked)
            {
                registryKey.SetValue("DoUSBOnly", "1");
            }
            else
            {
                registryKey.SetValue("DoUSBOnly", "0");
            }
            if (this.radioButton1.Checked)
            {
                registryKey.SetValue("HitRev", "32");
            }
            else if (this.radioButton2.Checked)
            {
                registryKey.SetValue("HitRev", "36");
            }
            else if (this.radioButton3.Checked)
            {
                registryKey.SetValue("HitRev", "47");
            }
            else if (this.radioButton4.Checked)
            {
                registryKey.SetValue("HitRev", "59");
            }
            else if (this.radioButton5.Checked)
            {
                registryKey.SetValue("HitRev", "79");
            }
            if (this.radioButton17.Checked)
            {
                registryKey.SetValue("HitAPi", "1");
            }
            else
            {
                registryKey.SetValue("HitAPi", "0");
            }
            if (this.radioButton15.Checked)
            {
                registryKey.SetValue("HitTran", "0");
            }
            else if (this.radioButton13.Checked)
            {
                registryKey.SetValue("HitTran", "2");
            }
            else if (this.radioButton14.Checked)
            {
                registryKey.SetValue("HitTran", "1");
            }
            else if (this.radioButton12.Checked)
            {
                registryKey.SetValue("HitTran", "3");
            }
            registryKey.SetValue("ioport", Convert.ToString(this.comboBox1.SelectedIndex));
            registryKey.SetValue("COMPort", Convert.ToString(this.comboBox10.SelectedIndex));
            registryKey.Close();
            if (this.int_7 == 1 || this.int_8 != 0)
            {
                this.method_152();
            }
            int selectedIndex = this.comboBox10.SelectedIndex;
            if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 9 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_135();
                this.method_137();
                this.method_138();
            }
            if (this.bool_2)
            {
                string text = this.string_10 + "\\jf.log";
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                IntPtr value = intPtr;
                sbyte* pSbyte_ = (sbyte*)((void*)value);
                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_8));
                if (ptr == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(text, "Can't open log file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {
                    IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(this.textBox6.Text);
                    IntPtr value2 = intPtr2;
                    sbyte* pSbyte_2 = (sbyte*)((void*)value2);

                    _Module.fputs((sbyte*)(&_Module.struct35_122), ptr);

                    _Module.fputs((sbyte*)pSbyte_2, ptr);

                    _Module.fclose(ptr);
                }
            }
            else
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog();
                saveFileDialog.Filter = "Session Log file (*.log)|*.log|All Files (*.*)|*.*";
                saveFileDialog.DefaultExt = ".log";
                saveFileDialog.FileName = "jf.log";
                saveFileDialog.OverwritePrompt = false;
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                    IntPtr intPtr3 = Marshal.StringToHGlobalAnsi(fullPath);
                    IntPtr value3 = intPtr3;
                    sbyte* pSbyte_3 = (sbyte*)((void*)value3);
                    string fileName = saveFileDialog.FileName;
                    GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_3, (sbyte*)(&_Module.struct18_8));
                    if (ptr == null)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open log file", MessageBoxButtons.OK);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    }
                    else
                    {
                        IntPtr intPtr4 = Marshal.StringToHGlobalAnsi(this.textBox6.Text);
                        IntPtr value4 = intPtr4;
                        sbyte* pSbyte_4 = (sbyte*)((void*)value4);

                        _Module.fputs((sbyte*)(&_Module.struct35_122), ptr);

                        _Module.fputs((sbyte*)pSbyte_4, ptr);

                        _Module.fclose(ptr);
                    }
                }
            }
        }

        // Token: 0x060001BF RID: 447 RVA: 0x00108588 File Offset: 0x00108588
        private unsafe void method_5(byte* pByte_0, uint uint_0, uint uint_1)
        {
            string str = null;
            string str2 = null;
            Struct20 @struct;

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_0), 13);
            str += new string((sbyte*)(&@struct));
            uint num2;
            Struct71 struct2;
            for (uint num = 0U; num < uint_0; num += 1U)
            {
                num2 = num % 16U;
                string text;
                if (num2 == 0U)
                {
                    if (num != 0U)
                    {
                        for (uint num3 = 0U; num3 < 16U; num3 += 1U)
                        {
                            if (*(ref struct2 + num3) >= 32 && *(ref struct2 + num3) <= 126)
                            {

                                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_0), *(ref struct2 + num3));
                                text = new string((sbyte*)(&_Module.struct19_0));
                                text += new string((sbyte*)(&@struct));
                                str2 += text;
                            }
                            else
                            {
                                str2 += ".";
                            }
                        }
                        str2 += "\r\n";
                    }
                    Struct69 struct3;

                    _Module.sprintf((sbyte*)(&struct3), (sbyte*)(&_Module.struct10_19), uint_1 + num);
                    text = new string((sbyte*)(&_Module.struct19_0));
                    text += new string((sbyte*)(&struct3));
                    str2 += text;
                }
                else if (num != 0U && num % 8U == 0U)
                {
                    str2 += "- ";
                }
                *(ref struct2 + num2) = (byte)((sbyte)pByte_0[num]);
                Struct70 struct4;

                _Module.sprintf((sbyte*)(&struct4), (sbyte*)(&_Module.struct23_39), pByte_0[num]);
                text = new string((sbyte*)(&_Module.struct19_0));
                text += new string((sbyte*)(&struct4));
                str2 += text;
            }
            if (uint_0 == 0U)
            {
                str2 += "\r\n";
            }
            else
            {
                uint_0 = 16U - uint_0 % 16U;
                if (uint_0 != 16U)
                {
                    if (uint_0 >= 8U)
                    {
                        str2 += "  ";
                    }
                    num2 += 1U;
                    for (uint num = 0U; num < uint_0; num += 1U)
                    {
                        *(ref struct2 + (num2 + num)) = 32;
                        str2 += "   ";
                    }
                }
                for (uint num3 = 0U; num3 < 16U; num3 += 1U)
                {
                    if (*(ref struct2 + num3) >= 32 && *(ref struct2 + num3) <= 126)
                    {

                        _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_0), *(ref struct2 + num3));
                        string text = new string((sbyte*)(&_Module.struct19_0));
                        text += new string((sbyte*)(&@struct));
                        str2 += text;
                    }
                    else
                    {
                        str2 += ".";
                    }
                }
                str2 += "\r\n";
            }
            this.string_0 = str2;
        }

        // Token: 0x060001C0 RID: 448 RVA: 0x001087A4 File Offset: 0x001087A4
        private unsafe void method_6(byte* pByte_0, uint uint_0, uint uint_1)
        {
            string str = null;
            for (uint num = 0U; num < uint_0; num += 1U)
            {
                Struct62 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_121), pByte_0[num]);
                string text = new string((sbyte*)(&_Module.struct19_0));
                text += new string((sbyte*)(&@struct));
                str += text;
            }
            this.string_0 = str;
        }

        // Token: 0x060001C1 RID: 449 RVA: 0x001087FC File Offset: 0x001087FC
        private unsafe void method_7(byte* pByte_0)
        {
            string str = null;
            for (uint num = 0U; num < 32U; num += 1U)
            {
                if (pByte_0[num] >= 32 && pByte_0[num] <= 126)
                {
                    Struct20 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_0), pByte_0[num]);
                    string text = new string((sbyte*)(&_Module.struct19_0));
                    text += new string((sbyte*)(&@struct));
                    str += text;
                }
                else
                {
                    str += " ";
                }
            }
            this.string_0 = str;
        }

        // Token: 0x060001C2 RID: 450 RVA: 0x00108874 File Offset: 0x00108874
        private unsafe void method_8(byte* pByte_0)
        {
            string str = null;
            for (uint num = 0U; num < 28U; num += 1U)
            {
                if (pByte_0[num] >= 32 && pByte_0[num] <= 126)
                {
                    Struct20 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_0), pByte_0[num]);
                    string text = new string((sbyte*)(&_Module.struct19_0));
                    text += new string((sbyte*)(&@struct));
                    str += text;
                }
                else
                {
                    str += new string((sbyte*)(&_Module.struct6_5));
                }
            }
            this.string_0 = str;
        }

        // Token: 0x060001C3 RID: 451 RVA: 0x001088F0 File Offset: 0x001088F0
        private unsafe void method_9(byte* pByte_0, uint uint_0)
        {
            string str = null;
            for (uint num = 0U; num < uint_0; num += 1U)
            {
                if (pByte_0[num] >= 32 && pByte_0[num] <= 126)
                {
                    Struct20 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_0), pByte_0[num]);
                    string text = new string((sbyte*)(&_Module.struct19_0));
                    text += new string((sbyte*)(&@struct));
                    str += text;
                }
                else
                {
                    str += " ";
                }
            }
            this.string_0 = str;
        }

        // Token: 0x060001C4 RID: 452 RVA: 0x00108968 File Offset: 0x00108968
        private unsafe int method_10(void* pVoid_3, sbyte* pSbyte_0, int int_16)
        {

            _Module.memset(pVoid_3, 0, (uint)int_16);
            int num = _Module.strlen((sbyte*)pSbyte_0) - 1;
            for (int i = num; i >= 0; i--)
            {
                byte b;
                if (*(sbyte*)(pSbyte_0 + i / sizeof(sbyte)) >= 48 && *(sbyte*)(pSbyte_0 + i / sizeof(sbyte)) <= 57)
                {
                    b = (byte)(*(sbyte*)(pSbyte_0 + i / sizeof(sbyte)) - 48);
                }
                else if (*(sbyte*)(pSbyte_0 + i / sizeof(sbyte)) >= 97 && *(sbyte*)(pSbyte_0 + i / sizeof(sbyte)) <= 102)
                {
                    b = (byte)(*(sbyte*)(pSbyte_0 + i / sizeof(sbyte)) - 96 + 9);
                }
                else
                {
                    if (*(sbyte*)(pSbyte_0 + i / sizeof(sbyte)) < 65 || *(sbyte*)(pSbyte_0 + i / sizeof(sbyte)) > 70)
                    {
                        return 1;
                    }
                    b = (byte)(*(sbyte*)(pSbyte_0 + i / sizeof(sbyte)) - 64 + 9);
                }
                int num2 = num - i;
                if ((num2 & 1) != 0)
                {
                    b = (byte)(b << 4);
                }
                num2 >>= 1;
                if (num2 >= int_16 || num2 < 0)
                {
                    break;
                }
                ((byte*)pVoid_3)[num2] = (((byte*)pVoid_3)[num2] | b);
            }
            return 0;
        }

        // Token: 0x060001C5 RID: 453 RVA: 0x00108A1C File Offset: 0x00108A1C
        private void linkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            this.linkLabel1.LinkVisited = true;
            try
            {
                Process.Start("http://www.jungleflasher.net/files/JungleFlasher.pdf");
            }
            catch (Exception ex)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
        }

        // Token: 0x060001C6 RID: 454 RVA: 0x00108AA8 File Offset: 0x00108AA8
        private void linkLabel2_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            this.linkLabel2.LinkVisited = true;
            try
            {
                Process.Start("http://www.jungleflasher.net/files/activate.rar");
            }
            catch (Exception ex)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
        }

        // Token: 0x060001C7 RID: 455 RVA: 0x00108B34 File Offset: 0x00108B34
        private void linkLabel3_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            this.linkLabel3.LinkVisited = true;
            try
            {
                Process.Start("http://www.jungleflasher.net/files/79_Unlock.rar");
            }
            catch (Exception ex)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
        }

        // Token: 0x060001C8 RID: 456 RVA: 0x00108BC0 File Offset: 0x00108BC0
        private void linkLabel4_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            this.linkLabel4.LinkVisited = true;
            try
            {
                Process.Start("http://JungleFlasher.net/donate.html");
            }
            catch (Exception ex)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
        }

        // Token: 0x060001C9 RID: 457 RVA: 0x00108C4C File Offset: 0x00108C4C
        private void pictureBox4_Click(object sender, EventArgs e)
        {
            try
            {
                Process.Start("http://JungleFlasher.net/donate.html");
            }
            catch (Exception ex)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
        }

        // Token: 0x060001CA RID: 458 RVA: 0x00108CCC File Offset: 0x00108CCC
        private void pictureBox3_MouseEnter(object sender, EventArgs e)
        {
            this.Cursor = Cursors.Hand;
        }

        // Token: 0x060001CB RID: 459 RVA: 0x00108CE4 File Offset: 0x00108CE4
        private void pictureBox3_MouseLeave(object sender, EventArgs e)
        {
            this.Cursor = Cursors.Arrow;
        }

        // Token: 0x060001CC RID: 460 RVA: 0x00108CFC File Offset: 0x00108CFC
        private unsafe void Form1_DnSpy_KeyDown(object sender, KeyEventArgs e)
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            Struct28 @struct = 0;
            initblk(ref @struct + 1, 0, 15);
            Struct28 struct2 = 195;
            *(ref struct2 + 1) = 177;
            *(ref struct2 + 2) = 42;
            *(ref struct2 + 3) = 66;
            *(ref struct2 + 4) = 160;
            *(ref struct2 + 5) = 142;
            *(ref struct2 + 6) = 124;
            *(ref struct2 + 7) = 228;
            *(ref struct2 + 8) = 118;
            *(ref struct2 + 9) = 126;
            *(ref struct2 + 10) = 84;
            *(ref struct2 + 11) = 87;
            *(ref struct2 + 12) = 240;
            *(ref struct2 + 13) = 40;
            *(ref struct2 + 14) = 182;
            *(ref struct2 + 15) = 222;
            Struct28 struct3 = 90;
            *(ref struct3 + 1) = 90;
            *(ref struct3 + 2) = 90;
            *(ref struct3 + 3) = 90;
            *(ref struct3 + 4) = 90;
            *(ref struct3 + 5) = 90;
            *(ref struct3 + 6) = 90;
            *(ref struct3 + 7) = 90;
            *(ref struct3 + 8) = 90;
            *(ref struct3 + 9) = 90;
            *(ref struct3 + 10) = 90;
            *(ref struct3 + 11) = 90;
            *(ref struct3 + 12) = 90;
            *(ref struct3 + 13) = 90;
            *(ref struct3 + 14) = 90;
            *(ref struct3 + 15) = 90;
            Struct28 struct4 = 155;
            *(ref struct4 + 1) = 106;
            *(ref struct4 + 2) = 72;
            *(ref struct4 + 3) = 189;
            *(ref struct4 + 4) = 225;
            *(ref struct4 + 5) = 101;
            *(ref struct4 + 6) = 95;
            *(ref struct4 + 7) = 184;
            *(ref struct4 + 8) = 152;
            *(ref struct4 + 9) = 240;
            *(ref struct4 + 10) = 183;
            *(ref struct4 + 11) = 187;
            *(ref struct4 + 12) = 237;
            *(ref struct4 + 13) = 60;
            *(ref struct4 + 14) = 194;
            *(ref struct4 + 15) = 66;
            Struct28 struct5 = 90;
            *(ref struct5 + 1) = 90;
            *(ref struct5 + 2) = 90;
            *(ref struct5 + 3) = 90;
            *(ref struct5 + 4) = 90;
            *(ref struct5 + 5) = 90;
            *(ref struct5 + 6) = 90;
            *(ref struct5 + 7) = 90;
            *(ref struct5 + 8) = 90;
            *(ref struct5 + 9) = 90;
            *(ref struct5 + 10) = 90;
            *(ref struct5 + 11) = 90;
            *(ref struct5 + 12) = 90;
            *(ref struct5 + 13) = 90;
            *(ref struct5 + 14) = 90;
            *(ref struct5 + 15) = 90;
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F1)
            {
                this.method_12();
            }
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F2)
            {
                this.method_13();
            }
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F3)
            {
                this.tabControl5.SelectedTab = this.Benq;
                this.method_202();
            }
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F4)
            {
                this.method_56();
            }
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F5)
            {
                WorkingFolder workingFolder = new WorkingFolder();
                if (this.bool_2)
                {
                    workingFolder.textBox8.Text = this.string_8;
                }
                if (workingFolder.ShowDialog(this) == DialogResult.OK)
                {
                    this.string_8 = workingFolder.textBox8.Text;
                    if (workingFolder.textBox8.Text != "")
                    {
                        this.textBox6.AppendText("Backup Dir set as '" + this.string_8 + "\r\n");
                        RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
                        registryKey.SetValue("BackupFolder", this.string_8);
                        this.bool_2 = true;
                        registryKey.Close();
                        ProjectName projectName = new ProjectName();
                        if (projectName.ShowDialog(this) == DialogResult.OK)
                        {
                            this.string_10 = this.string_8 + projectName.textBox1.Text;
                            this.string_9 = projectName.textBox1.Text;
                            if (projectName.textBox1.Text == "")
                            {
                                return;
                            }
                            if (Directory.Exists(this.string_10))
                            {

                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                MessageBox.Show("The folder " + this.string_10 + " already exists!", "Enter Job Name", MessageBoxButtons.OK);

                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                this.textBox6.AppendText("Working folder '" + this.string_10 + "' re-opened." + "\r\n");
                            }
                            else
                            {
                                Directory.CreateDirectory(this.string_10);
                                this.textBox6.AppendText("Working folder '" + this.string_10 + "' created." + "\r\n");
                            }
                            Directory.SetCurrentDirectory(this.string_10);
                        }
                    }
                    else
                    {
                        this.textBox6.AppendText("Removing Backup Dir from Registry" + "\r\n");
                        RegistryKey registryKey2 = Registry.CurrentUser.CreateSubKey("JungleFlasher");
                        registryKey2.DeleteValue("BackupFolder");
                        this.bool_2 = false;
                        registryKey2.Close();
                    }
                }
            }
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F6)
            {
                if (this.checkBox7.CheckState == CheckState.Unchecked)
                {
                    this.checkBox7.CheckState = CheckState.Checked;
                }
                else
                {
                    this.checkBox7.CheckState = CheckState.Unchecked;
                }
            }
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F7)
            {

                _Module.memset(_Module.struct123_0, 0, 2392U);

                _Module.memset(*(ref _Module.struct123_0 + 4), 0, 2392U);
                this.method_40();
                this.method_43();
                this.method_177();
                this.label87.Text = "";
                this.label88.Text = "";
                if (this.bool_2)
                {
                    int num = Convert.ToInt32(this.string_11);
                    num++;
                    this.string_11 = Convert.ToString(num);
                    RegistryKey registryKey3 = Registry.CurrentUser.CreateSubKey("JungleFlasher");
                    registryKey3.SetValue("Mods", Convert.ToString(num));
                    registryKey3.Close();
                    if (num % 10 == 0)
                    {
                        Donate donate = new Donate();
                        if (donate.ShowDialog(this) == DialogResult.OK)
                        {
                            try
                            {
                                Process.Start("http://JungleFlasher.net/donate.html");
                            }
                            catch (Exception ex)
                            {

                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);

                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            }
                        }
                    }
                    string text = this.string_10 + "\\jf.log";
                    IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                    IntPtr value = intPtr;
                    sbyte* pSbyte_ = (sbyte*)((void*)value);
                    GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_8));
                    if (ptr == null)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show(text, "Can't open log file", MessageBoxButtons.OK);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        return;
                    }
                    IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(this.textBox6.Text);
                    IntPtr value2 = intPtr2;
                    sbyte* pSbyte_2 = (sbyte*)((void*)value2);

                    _Module.fputs((sbyte*)(&_Module.struct35_122), ptr);

                    _Module.fputs((sbyte*)pSbyte_2, ptr);

                    _Module.fclose(ptr);
                    this.textBox6.Clear();
                    this.textBox6.AppendText("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" + "\r\n" + "JungleFlasher 0.1.96 Beta" + "\r\n");
                    int num2;

                    _Module.time((int*)(&num2));
                    GStruct85* pGstruct85_ = _Module.localtime((int*)(&num2));
                    this.textBox6.AppendText("Session Started " + Convert.ToString(new string(_Module.asctime((GStruct85*)pGstruct85_))).Substring(0, 24) + "\r\n\r\n");
                    ProjectName projectName2 = new ProjectName();
                    if (projectName2.ShowDialog(this) == DialogResult.OK)
                    {
                        this.string_10 = this.string_8 + projectName2.textBox1.Text;
                        this.string_9 = projectName2.textBox1.Text;
                        if (projectName2.textBox1.Text == "")
                        {
                            return;
                        }
                        if (Directory.Exists(this.string_10))
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            MessageBox.Show("The folder " + this.string_10 + " already exists!", "Enter Job Name", MessageBoxButtons.OK);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            this.textBox6.AppendText("Working folder '" + this.string_10 + "' re-opened." + "\r\n");
                        }
                        else
                        {
                            Directory.CreateDirectory(this.string_10);
                            this.textBox6.AppendText("Working folder '" + this.string_10 + "' created." + "\r\n");
                        }
                        Directory.SetCurrentDirectory(this.string_10);
                    }
                }
            }
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F8)
            {
                this.radioButton16.Enabled = true;
                if (this.radioButton13.Enabled)
                {
                    this.radioButton12.Enabled = true;
                }
                else
                {
                    this.radioButton12.Enabled = false;
                }
            }
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F9)
            {

                _Module.smethod_157();
            }
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F10 && !this.bool_4)
            {
                this.method_27();
            }
            if (e.Modifiers == Keys.Control && e.KeyCode == Keys.F12)
            {
                this.method_24();
            }
            if (e.Shift && e.Control && e.KeyCode == Keys.F1)
            {
                this.method_192();
            }
            if (e.Shift && e.Control && e.KeyCode == Keys.F9)
            {
                this.method_215();
            }
            if (e.Shift && e.Control && e.KeyCode == Keys.F10)
            {
                if (*_Module.struct123_0 != 1)
                {
                    return;
                }
                if (_Module.memcmp(_Module.struct123_0 + 280, (void*)(&@struct), 16U) == null)
                {
                    this.method_53();
                    this.method_54();
                }
                else if (string.Compare(this.textBox9.Text, "") == 0)
                {
                    this.method_53();
                    this.method_54();
                }
                else
                {
                    this.method_53();
                }
            }
            if (e.Shift && e.Control && e.KeyCode == Keys.F12)
            {
                this.radioButton18.Enabled = true;
            }
            if (e.Shift && e.Control && e.KeyCode == Keys.F11)
            {
                this.method_322();
            }
        }

        // Token: 0x060001CD RID: 461 RVA: 0x003BFD58 File Offset: 0x00307D58
        private unsafe void method_11()
        {
            GStruct92* pGstruct92_ = _Module.CreateDCA((sbyte*)(&_Module.struct22_2), null, null, null);
            int deviceCaps = _Module.GetDeviceCaps(pGstruct92_, 88);
            this.pictureBox3.Visible = false;
            this.axWebBrowser_0.Visible = true;
            if (deviceCaps == 120)
            {
                this.axWebBrowser_0.Navigate("http://jungleflasher.net/flash/loader1.html");
            }
            else
            {
                this.axWebBrowser_0.Navigate("http://jungleflasher.net/flash/loader.html");
            }
            while (this.axWebBrowser_0.Busy)
            {
                Application.DoEvents();
            }
        }

        // Token: 0x060001CE RID: 462 RVA: 0x001097E0 File Offset: 0x001097E0
        private void axWebBrowser_0_NavigateError(object object_0, DWebBrowserEvents2_NavigateErrorEvent dwebBrowserEvents2_NavigateErrorEvent_0)
        {
            this.pictureBox3.Visible = true;
            this.axWebBrowser_0.Visible = false;
            this.axWebBrowser_0.Stop();
        }

        // Token: 0x060001CF RID: 463 RVA: 0x00109810 File Offset: 0x00109810
        private void axWebBrowser_0_NavigateComplete2(object object_0, DWebBrowserEvents2_NavigateComplete2Event dwebBrowserEvents2_NavigateComplete2Event_0)
        {
        }

        // Token: 0x060001D0 RID: 464 RVA: 0x00109820 File Offset: 0x00109820
        private void axWebBrowser_0_NewWindow3(object object_0, DWebBrowserEvents2_NewWindow3Event dwebBrowserEvents2_NewWindow3Event_0)
        {
            string text = Convert.ToString(dwebBrowserEvents2_NewWindow3Event_0.bstrUrl);
            if (string.Compare(text, "http://jungleflasher.net/flash/loader.html") != 0 && string.Compare(text, "http://jungleflasher.net/flash/loader1.html") != 0)
            {
                dwebBrowserEvents2_NewWindow3Event_0.cancel = true;
                Process.Start(text);
            }
        }

        // Token: 0x060001D1 RID: 465 RVA: 0x00109864 File Offset: 0x00109864
        private void pictureBox3_Click(object sender, EventArgs e)
        {
            try
            {
                Process.Start("http://www.modtraders.co.uk");
            }
            catch (Exception ex)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
        }

        // Token: 0x060001D2 RID: 466 RVA: 0x001098E4 File Offset: 0x001098E4
        private unsafe void textBox6_DoubleClick(object sender, EventArgs e)
        {
            Process process = new Process();
            process.StartInfo.FileName = new string((sbyte*)(&_Module.struct72_0));
            process.Start();
            process.WaitForInputIdle();
            GStruct11* ptr = _Module.FindWindowA((sbyte*)(&_Module.struct22_3), null);
            string s = new string((sbyte*)(&_Module.struct13_1)) + this.string_9;
            IntPtr intPtr = Marshal.StringToHGlobalAnsi(s);
            IntPtr value = intPtr;
            sbyte* int_ = (sbyte*)((void*)value);
            if (ptr != -1)
            {

                _Module.SendMessageA(ptr, 12U, 0U, int_);
                GStruct11* ptr2 = _Module.FindWindowExA(ptr, null, (sbyte*)(&_Module.struct35_123), null);
                string text = this.textBox6.Text;
                IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(text);
                IntPtr value2 = intPtr2;
                int int_2 = (void*)value2;

                _Module.SendMessageA(ptr2, 12U, 0U, int_2);
            }
        }

        // Token: 0x060001D3 RID: 467 RVA: 0x001099AC File Offset: 0x001099AC
        private unsafe void method_12()
        {
            string[] commandLineArgs = Environment.GetCommandLineArgs();
            string value = commandLineArgs[0] + " \"%1\" Source";
            string value2 = commandLineArgs[0] + " \"%1\" Target";
            string value3 = commandLineArgs[0] + " \"%1\" DBupdate";
            string value4 = commandLineArgs[0] + " \"%1\"";
            RegistryKey registryKey = Registry.ClassesRoot.CreateSubKey(".bin\\Shell\\JF Source\\Command");
            registryKey.SetValue(new string((sbyte*)(&_Module.struct19_0)), value);
            registryKey.Close();
            registryKey = Registry.ClassesRoot.CreateSubKey(".bin\\Shell\\JF Target\\Command");
            registryKey.SetValue(new string((sbyte*)(&_Module.struct19_0)), value2);
            registryKey.Close();
            if (!this.bool_4)
            {
                registryKey = Registry.ClassesRoot.CreateSubKey(".bin\\Shell\\JF Update DB\\Command");
                registryKey.SetValue(new string((sbyte*)(&_Module.struct19_0)), value3);
                registryKey.Close();
            }
            registryKey = Registry.ClassesRoot.CreateSubKey(".bin\\Shell\\Open\\Command");
            registryKey.SetValue(new string((sbyte*)(&_Module.struct19_0)), value4);
            registryKey.Close();
            registryKey = Registry.ClassesRoot.CreateSubKey(".bin");
            if (registryKey.GetValue("NoOpen") != null)
            {
                registryKey.DeleteValue("NoOpen");
            }
            registryKey.SetValue(new string((sbyte*)(&_Module.struct19_0)), "Open");
            registryKey.Close();
        }

        // Token: 0x060001D4 RID: 468 RVA: 0x00109AF4 File Offset: 0x00109AF4
        private void method_13()
        {
            Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\JF Target\\Command", false);
            Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\JF Target", false);
            Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\JF Source\\Command", false);
            Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\JF Source", false);
            Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\JF Update DB\\Command", false);
            Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\JF Update DB", false);
            Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\Open\\Command", false);
            Registry.ClassesRoot.DeleteSubKey(".bin\\Shell\\Open", false);
        }

        // Token: 0x060001D5 RID: 469 RVA: 0x00109B84 File Offset: 0x00109B84
        private unsafe void method_14()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            if (*(ref _Module.struct38_0 + selectedIndex * 72U) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72U + 3) == 0)
            {
                this.method_424(2);
            }
            this.button7.Enabled = false;
            this.button13.Enabled = false;
            this.button14.Enabled = false;
            this.button15.Enabled = false;
            this.button16.Enabled = false;
            this.button17.Enabled = false;
            this.button18.Enabled = false;
            this.button21.Enabled = false;
            this.button40.Enabled = false;
            this.button42.Enabled = false;
        }

        // Token: 0x060001D6 RID: 470 RVA: 0x00109C3C File Offset: 0x00109C3C
        private void method_15()
        {
            this.button7.Enabled = true;
            this.button16.Enabled = true;
            this.button17.Enabled = true;
            this.button18.Enabled = true;
            this.button21.Enabled = true;
            this.button40.Enabled = true;
            this.button14.Enabled = true;
            this.button13.Enabled = true;
            this.button15.Enabled = true;
            if (string.Compare(this.button42.Text, "") != 0)
            {
                this.button42.Enabled = true;
            }
        }

        // Token: 0x060001D7 RID: 471 RVA: 0x00109CD8 File Offset: 0x00109CD8
        private void method_16()
        {
            this.groupBox11.Enabled = true;
            this.groupBox13.Enabled = true;
            this.groupBox14.Enabled = true;
        }

        // Token: 0x060001D8 RID: 472 RVA: 0x00109D0C File Offset: 0x00109D0C
        private void method_17()
        {
            this.groupBox11.Enabled = false;
            this.groupBox13.Enabled = false;
            this.groupBox14.Enabled = false;
        }

        // Token: 0x060001D9 RID: 473 RVA: 0x00109D40 File Offset: 0x00109D40
        private void radioButton19_CheckedChanged(object sender, EventArgs e)
        {
            if (string.Compare(this.button42.Text, "") != 0)
            {
                this.button42.Enabled = true;
            }
        }

        // Token: 0x060001DA RID: 474 RVA: 0x00109D70 File Offset: 0x00109D70
        private unsafe void method_18()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            if (*(ref _Module.struct38_0 + selectedIndex * 72U) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72U + 3) == 0)
            {
                this.method_424(2);
            }
            this.button1.Enabled = false;
            this.button2.Enabled = false;
            this.button4.Enabled = false;
            this.button5.Enabled = false;
            this.button28.Enabled = false;
            this.button32.Enabled = false;
            this.button38.Enabled = false;
            this.button39.Enabled = false;
            Application.DoEvents();
        }

        // Token: 0x060001DB RID: 475 RVA: 0x00109E14 File Offset: 0x00109E14
        private void method_19()
        {
            this.button1.Enabled = true;
            this.button2.Enabled = true;
            this.button4.Enabled = true;
            this.button5.Enabled = true;
            this.button28.Enabled = true;
            this.button32.Enabled = true;
            this.button38.Enabled = true;
            this.button39.Enabled = true;
        }

        // Token: 0x060001DC RID: 476 RVA: 0x00109E84 File Offset: 0x00109E84
        private void button30_Click(object sender, EventArgs e)
        {
            this.axWebBrowser_1.Navigate("http://jungleflasher.net/chat/support.html");
        }

        // Token: 0x060001DD RID: 477 RVA: 0x00109EA4 File Offset: 0x00109EA4
        private void button31_Click(object sender, EventArgs e)
        {
            this.axWebBrowser_1.Navigate("http://jungleflasher.net/chat/leave.html");
        }

        // Token: 0x060001DE RID: 478 RVA: 0x00109EC4 File Offset: 0x00109EC4
        private unsafe void method_20()
        {
            if (*(ref _Module.gstruct10_0 + 12) == 1)
            {
                this.axWebBrowser_1.Navigate("http://jungleflasher.net/chat/jf196u.html");
            }
            else
            {
                this.axWebBrowser_1.Navigate("http://jungleflasher.net/chat/jf196.html");
            }
        }

        // Token: 0x060001DF RID: 479 RVA: 0x00109F00 File Offset: 0x00109F00
        private unsafe void axWebBrowser_1_NavigateError(object object_0, DWebBrowserEvents2_NavigateErrorEvent dwebBrowserEvents2_NavigateErrorEvent_0)
        {
            string text = null;
            string[] commandLineArgs = Environment.GetCommandLineArgs();
            string directoryName = Path.GetDirectoryName(commandLineArgs[0]);
            string text2 = directoryName + "\\Blank.html";
            IntPtr intPtr = Marshal.StringToHGlobalAnsi(text2);
            IntPtr value = intPtr;
            sbyte* pSbyte_ = (sbyte*)((void*)value);
            GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_2));
            if (ptr != null)
            {
                text = text + "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">" + "\r\n";
                text = text + "<html xmlns=\"www.Jungleflasher.net\" xml:lang=\"en\">" + "\r\n";
                text = text + "   <body>" + "\r\n" + "      <div id=\"main\">" + "\r\n" + "      </div>" + "\r\n" + "   </body>" + "\r\n" + "</html>" + "\r\n";
                IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(text);
                IntPtr value2 = intPtr2;
                sbyte* pSbyte_2 = (sbyte*)((void*)value2);

                _Module.fputs((sbyte*)pSbyte_2, ptr);

                _Module.fclose(ptr);
            }
            this.axWebBrowser_1.Navigate(text2);
        }

        // Token: 0x060001E0 RID: 480 RVA: 0x00109FE8 File Offset: 0x00109FE8
        private void axWebBrowser_1_NewWindow3(object object_0, DWebBrowserEvents2_NewWindow3Event dwebBrowserEvents2_NewWindow3Event_0)
        {
            string text = Convert.ToString(dwebBrowserEvents2_NewWindow3Event_0.bstrUrl);
            if (string.Compare(text, "http://jungleflasher.net/chat/jf196.html") != 0)
            {
                dwebBrowserEvents2_NewWindow3Event_0.cancel = true;
                Process.Start(text);
            }
        }

        // Token: 0x060001E1 RID: 481 RVA: 0x0010A020 File Offset: 0x0010A020
        private int method_21()
        {
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB");
            int num;
            if (registryKey.GetValue("Index") != null)
            {
                string value = registryKey.GetValue("Index").ToString();
                num = Convert.ToInt32(value) + 1;
                value = Convert.ToString(num);
                registryKey.SetValue("Index", value);
            }
            else
            {
                num = 1;
                registryKey.SetValue("Index", "1");
            }
            registryKey.Close();
            return num;
        }

        // Token: 0x060001E2 RID: 482 RVA: 0x0010A098 File Offset: 0x0010A098
        private unsafe int method_22(string string_25)
        {
            Struct68 @struct = 0;
            initblk(ref @struct + 1, 0, 259);
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\KeyList");
            string value;
            int num;
            if (registryKey.GetValue(string_25) != null)
            {
                value = registryKey.GetValue(string_25).ToString();
                num = Convert.ToInt32(value);
            }
            else
            {
                num = this.method_21();
                value = Convert.ToString(num);
                registryKey.SetValue(string_25, value);
            }
            registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\SerList");
            if (*_Module.struct123_0 == 4 && *(_Module.struct123_0 + 2028) != 0 && *(_Module.struct123_0 + 2028) != 255)
            {
                string text = "";

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), _Module.struct123_0 + 2028);
                text += new string((sbyte*)(&@struct));
                registryKey.SetValue(text.Substring(0, 17), value);
                if (string.Compare(text, "D608CG73880800348") == 0 && this.bool_1)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num2 = (int)MessageBox.Show("Barcode is common to all Lite-On DG-16D2S following the 13146 System update" + "\n" + "Do you wish to enter the actual barcode as a second Key DB Barcode entry" + "\n" + "Click YES to manually enter and include the Case Barcode.", "PhatKey", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num2 == 6)
                    {
                        Common_Barcode common_Barcode = new Common_Barcode();
                        if (common_Barcode.ShowDialog(this) == DialogResult.OK)
                        {
                            text = common_Barcode.textBox3.Text;
                            text = text.Substring(0, 17);
                            registryKey.SetValue(text.Substring(0, 17), value);
                        }
                    }
                }
            }
            if (*_Module.struct123_0 != 4 && *(_Module.struct123_0 + 2382) == 4 && *(_Module.struct123_0 + 2028) != 0 && *(_Module.struct123_0 + 2028) != 255)
            {
                Struct73 struct2;

                _Module.memcpy((void*)(&struct2), _Module.struct123_0 + 610, 20U);
                string text = "";

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), ref struct2);
                text += new string((sbyte*)(&@struct));
                registryKey.SetValue(text.Substring(0, 17), value);
            }
            if (*_Module.struct123_0 == 5 && *(_Module.struct123_0 + 2028) != 0 && *(_Module.struct123_0 + 2028) != 255)
            {
                string text = "";

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), _Module.struct123_0 + 2028);
                text += new string((sbyte*)(&@struct));
                registryKey.SetValue(text.Substring(0, 17), value);
            }
            if (*_Module.struct123_0 == 6 && *(_Module.struct123_0 + 2028) != 0 && *(_Module.struct123_0 + 2028) != 255)
            {
                string text = "";

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), _Module.struct123_0 + 2028);
                text += new string((sbyte*)(&@struct));
                registryKey.SetValue(text.Substring(0, 17), value);
            }
            registryKey.Close();
            return num;
        }

        // Token: 0x060001E3 RID: 483 RVA: 0x0010A3DC File Offset: 0x0010A3DC
        private unsafe void method_23(int int_16)
        {
            Struct68 @struct = 0;
            initblk(ref @struct + 1, 0, 259);
            string text = this.textBox9.Text;
            string text2 = this.label37.Text;
            string text3 = this.label6.Text;
            string text4 = this.label7.Text;
            string text5 = this.label8.Text;
            string text6 = this.label16.Text;
            string text7 = this.label44.Text;
            string text8 = this.label40.Text;
            string text9 = this.textBox15.Text;
            int num = 0;
            string text10 = Convert.ToString(int_16);
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + text10);
            if (registryKey.GetValue("Key") != null)
            {
                if (registryKey.GetValue("Date1") == null && registryKey.GetValue("Updated") != null)
                {
                    registryKey.SetValue("Date1", registryKey.GetValue("Updated"));
                }
                int num2;

                _Module.time((int*)(&num2));
                GStruct85* pGstruct85_ = _Module.localtime((int*)(&num2));
                registryKey.SetValue("Updated", Convert.ToString(new string(_Module.asctime((GStruct85*)pGstruct85_))).Substring(0, 24));
                this.textBox6.AppendText("Key database updated" + "\r\n\r\n");
                this.label21.Text = "DVD Key @";
                do
                {
                    num++;
                }
                while (registryKey.GetValue("Date" + Convert.ToString(num)) != null);
                registryKey.SetValue("Date" + Convert.ToString(num), Convert.ToString(new string(_Module.asctime((GStruct85*)pGstruct85_))).Substring(0, 24));
                registryKey.SetValue("LastFile", text9);
            }
            else
            {
                registryKey.SetValue("Index", text10);
                registryKey.SetValue("Key", text);
                registryKey.SetValue("KeyLoc", text2);
                registryKey.SetValue("Vendor", text3);
                registryKey.SetValue(new string((sbyte*)(&_Module.struct23_0)), text4);
                registryKey.SetValue("Rev", text5);
                registryKey.SetValue("Type", text6);
                registryKey.SetValue("Osig", text7);
                registryKey.SetValue("LastFile", text9);
                if (string.Compare(text7, text8) != 0)
                {
                    registryKey.SetValue("Spoof", text8);
                }
                int num3;

                _Module.time((int*)(&num3));
                GStruct85* pGstruct85_2 = _Module.localtime((int*)(&num3));
                registryKey.SetValue(new string((sbyte*)(&_Module.struct22_0)), Convert.ToString(new string(_Module.asctime((GStruct85*)pGstruct85_2))).Substring(0, 24));
                this.textBox6.AppendText("Key added to database" + "\r\n\r\n");
                this.label21.Text = "DVD Key *";
            }
            string value;
            string text11;
            if (this.bool_2)
            {
                if (this.string_9 == "")
                {
                    value = "N/A";
                    text11 = "N/A";
                    if (this.textBox15.TextLength != 0)
                    {
                        text11 = Path.GetDirectoryName(this.textBox15.Text);
                        value = Path.GetFileName(text11);
                    }
                }
                else
                {
                    value = this.string_9;
                    text11 = this.string_10;
                }
            }
            else if (this.textBox15.TextLength != 0)
            {
                text11 = Path.GetDirectoryName(this.textBox15.Text);
                value = Path.GetFileName(text11);
            }
            else
            {
                text11 = "N/A";
                value = "N/A";
            }
            registryKey.SetValue("JobName", value);
            registryKey.SetValue("WorkingDir", text11);
            registryKey.Close();
        }

        // Token: 0x060001E4 RID: 484 RVA: 0x0010A758 File Offset: 0x0010A758
        private unsafe void method_24()
        {
            string text = null;
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB");
            int num;
            if (registryKey.GetValue("Index") != null)
            {
                text = registryKey.GetValue("Index").ToString();
                num = Convert.ToInt32(text) + 1;
            }
            registryKey.Close();
            string text2 = "JungleFlasher Key Database - dumped at ";
            int num2;

            _Module.time((int*)(&num2));
            GStruct85* pGstruct85_ = _Module.localtime((int*)(&num2));
            text2 = text2 + Convert.ToString(new string(_Module.asctime((GStruct85*)pGstruct85_))).Substring(0, 24) + "\r\n";
            text2 = text2 + text + " keys present!" + "\r\n";
            for (int i = 1; i < num; i++)
            {
                RegistryKey registryKey2 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + Convert.ToString(i));
                if (registryKey2.GetValue("Key") != null)
                {
                    string arg = registryKey2.GetValue("Key").ToString();
                    string text3 = registryKey2.GetValue("KeyLoc").ToString();
                    string value = registryKey2.GetValue("Vendor").ToString();
                    string value2 = registryKey2.GetValue(new string((sbyte*)(&_Module.struct23_0))).ToString();
                    string value3 = registryKey2.GetValue("Rev").ToString();
                    string value4 = registryKey2.GetValue("Type").ToString();
                    string text4 = registryKey2.GetValue("JobName").ToString();
                    string text5 = registryKey2.GetValue(new string((sbyte*)(&_Module.struct22_0))).ToString();
                    string text6;
                    if (registryKey2.GetValue("Spoof") != null)
                    {
                        text6 = registryKey2.GetValue("Spoof").ToString();
                    }
                    else
                    {
                        text6 = "";
                    }
                    string text7;
                    if (registryKey2.GetValue("Updated") != null)
                    {
                        text7 = registryKey2.GetValue("Updated").ToString();
                    }
                    else
                    {
                        text7 = "";
                    }
                    string arg2 = registryKey2.GetValue("Osig").ToString();
                    string str = registryKey2.GetValue("WorkingDir").ToString();
                    registryKey2.Close();
                    text2 = text2 + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" + "\r\n\r\n";
                    text2 = text2 + "  " + Convert.ToString(i) + "\t" + "Job: " + text4 + "\t" + " Created: " + text5 + "\r\n\r\n";
                    text2 = text2 + "  " + str + "\r\n\r\n";
                    text2 = text2 + "  Osig:  [" + arg2 + "]" + "\r\n";
                    if (string.Compare(text6, "") != 0)
                    {
                        text2 = text2 + "  Spoof: [" + text6 + "]" + "\r\n";
                    }
                    text2 += "\r\n";
                    string text8 = "                                                          ";
                    text8 = text8.Insert(0, value);
                    text8 = text8.Insert(9, value2);
                    text8 = text8.Insert(19, value3);
                    text8 = text8.Insert(27, value4);
                    text2 = text2 + "  " + text8 + "\r\n\r\n";
                    text2 = text2 + "  Key: " + arg + " @ " + text3 + "\r\n\r\n";
                    if (string.Compare(text7, "") != 0)
                    {
                        text2 = text2 + "  Last Updated: " + text7 + "\r\n\r\n";
                    }
                }
            }
            text2 = text2 + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" + "\r\n";
            Process process = new Process();
            process.StartInfo.FileName = new string((sbyte*)(&_Module.struct72_0));
            process.Start();
            process.WaitForInputIdle();
            GStruct11* ptr = _Module.FindWindowA((sbyte*)(&_Module.struct22_3), null);
            string s = "JungleFlasher Key Database";
            IntPtr intPtr = Marshal.StringToHGlobalAnsi(s);
            IntPtr value5 = intPtr;
            sbyte* int_ = (sbyte*)((void*)value5);
            if (ptr != -1)
            {

                _Module.SendMessageA(ptr, 12U, 0U, int_);
                GStruct11* ptr2 = _Module.FindWindowExA(ptr, null, (sbyte*)(&_Module.struct35_123), null);
                string s2 = text2;
                IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(s2);
                IntPtr value6 = intPtr2;
                int int_2 = (void*)value6;

                _Module.SendMessageA(ptr2, 12U, 0U, int_2);
            }
        }

        // Token: 0x060001E5 RID: 485 RVA: 0x0010AB58 File Offset: 0x0010AB58
        private unsafe void method_25()
        {
            string text = null;
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB");
            int num;
            if (registryKey.GetValue("Index") != null)
            {
                text = registryKey.GetValue("Index").ToString();
                num = Convert.ToInt32(text) + 1;
            }
            registryKey.Close();
            RegistryKey registryKey2 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\SerList");
            string value = registryKey2.ValueCount.ToString();
            string[] valueNames = registryKey2.GetValueNames();
            string text2 = ",,JungleFlasher Key Database,";
            int num2;

            _Module.time((int*)(&num2));
            GStruct85* pGstruct85_ = _Module.localtime((int*)(&num2));
            text2 += Convert.ToString(new string(_Module.asctime((GStruct85*)pGstruct85_))).Substring(0, 24);
            text2 = text2 + "," + text + " keys present!" + "\n";
            for (int i = 1; i < num; i++)
            {
                RegistryKey registryKey3 = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + Convert.ToString(i));
                if (registryKey3.GetValue("Key") != null)
                {
                    string str = registryKey3.GetValue("Key").ToString();
                    string str2 = registryKey3.GetValue("KeyLoc").ToString();
                    string str3 = registryKey3.GetValue("Vendor").ToString();
                    string str4 = registryKey3.GetValue(new string((sbyte*)(&_Module.struct23_0))).ToString();
                    string str5 = registryKey3.GetValue("Rev").ToString();
                    string str6 = registryKey3.GetValue("Type").ToString();
                    string str7 = registryKey3.GetValue("JobName").ToString();
                    string str8 = registryKey3.GetValue(new string((sbyte*)(&_Module.struct22_0))).ToString();
                    string text3;
                    if (registryKey3.GetValue("Spoof") != null)
                    {
                        text3 = registryKey3.GetValue("Spoof").ToString();
                    }
                    else
                    {
                        text3 = "";
                    }
                    string text4;
                    if (registryKey3.GetValue("Updated") != null)
                    {
                        text4 = registryKey3.GetValue("Updated").ToString();
                    }
                    else
                    {
                        text4 = "";
                    }
                    string str9 = registryKey3.GetValue("Osig").ToString();
                    string str10 = registryKey3.GetValue("WorkingDir").ToString();
                    string text5;
                    if (registryKey3.GetValue("LastFile") != null)
                    {
                        text5 = registryKey3.GetValue("LastFile").ToString();
                    }
                    else
                    {
                        text5 = "";
                    }
                    registryKey3.Close();
                    string text6 = "";
                    for (int j = 0; j < Convert.ToInt32(value); j++)
                    {
                        if (string.Compare(registryKey2.GetValue(valueNames[j]).ToString(), Convert.ToString(i)) == 0)
                        {
                            text6 = valueNames[j];
                            break;
                        }
                    }
                    text2 = text2 + Convert.ToString(i) + ",";
                    text2 = text2 + str7 + ",";
                    text2 = text2 + str8 + ",";
                    text2 = text2 + str10 + ",";
                    text2 = text2 + str9 + ",";
                    if (string.Compare(text3, "") != 0)
                    {
                        text2 = text2 + text3 + ",";
                    }
                    else
                    {
                        text2 += ",";
                    }
                    text2 = text2 + str3 + ",";
                    text2 = text2 + str4 + ",";
                    text2 = text2 + str5 + ",";
                    text2 = text2 + str6 + ",";
                    text2 = text2 + str + ",";
                    text2 = text2 + str2 + ",";
                    if (string.Compare(text4, "") != 0)
                    {
                        text2 = text2 + text4 + ",";
                    }
                    else
                    {
                        text2 += "n/a,";
                    }
                    if (string.Compare(text5, "") != 0)
                    {
                        text2 = text2 + text5 + ",";
                    }
                    else
                    {
                        text2 += "n/a,";
                    }
                    if (string.Compare(text6, "") != 0)
                    {
                        text2 = text2 + text6 + "\n";
                    }
                    else
                    {
                        text2 += "n/a\n";
                    }
                }
            }
            registryKey2.Close();
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "KeyDb CSV file (*.csv)|*.csv|All Files (*.*)|*.*";
            saveFileDialog.DefaultExt = ".csv";
            saveFileDialog.FileName = "JF_Key_db.csv";
            saveFileDialog.OverwritePrompt = false;
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(fullPath);
                IntPtr value2 = intPtr;
                sbyte* pSbyte_ = (sbyte*)((void*)value2);
                this.string_13 = saveFileDialog.FileName;
                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_2));
                if (ptr == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open log file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {
                    IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(text2);
                    IntPtr value3 = intPtr2;
                    sbyte* pSbyte_2 = (sbyte*)((void*)value3);

                    _Module.fputs((sbyte*)pSbyte_2, ptr);

                    _Module.fclose(ptr);
                }
            }
        }

        // Token: 0x060001E6 RID: 486 RVA: 0x0010B060 File Offset: 0x0010B060
        private unsafe void method_26()
        {
            string value = null;
            string[,] array = null;
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "KeyDB Backup file (*.csv)|*.csv|All Files (*.*)|*.*";
            openFileDialog.FileName = "KeyDB.csv";
            openFileDialog.DefaultExt = ".csv";
            openFileDialog.CheckFileExists = true;
            openFileDialog.CheckPathExists = true;
            openFileDialog.RestoreDirectory = false;
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(openFileDialog.FileName);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(fullPath);
                IntPtr value2 = intPtr;
                sbyte* pSbyte_ = (sbyte*)((void*)value2);
                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct6_3));
                if (ptr == null)
                {

                    _Module.pGstruct14_9 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, null, _Module.GetCurrentThreadId());
                    MessageBox.Show(openFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_9);
                    return;
                }
                Struct27 @struct;

                _Module.fgets((sbyte*)(&@struct), 1024, ptr);
                sbyte* ptr2 = _Module.strtok((sbyte*)(&@struct), (sbyte*)(&_Module.struct6_4));
                ptr2 = _Module.strtok(null, (sbyte*)(&_Module.struct6_4));
                ptr2 = _Module.strtok(null, (sbyte*)(&_Module.struct6_4));
                sbyte* value3 = _Module.strtok(ptr2, (sbyte*)(&_Module.struct6_5));
                value = "" + new string((sbyte*)value3);
                array = new string[Convert.ToInt32(value), 15];
                for (int i = 0; i < Convert.ToInt32(value); i++)
                {

                    _Module.fgets((sbyte*)(&@struct), 1024, ptr);
                    ptr2 = _Module.strtok((sbyte*)(&@struct), (sbyte*)(&_Module.struct6_4));
                    string text = "" + new string((sbyte*)ptr2);
                    array[i, 0] = text;
                    for (int j = 1; j < 15; j++)
                    {
                        ptr2 = _Module.strtok(null, (sbyte*)(&_Module.struct18_3));
                        text = "" + new string((sbyte*)ptr2);
                        array[i, j] = text;
                    }
                }
            }
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB_Import");
            registryKey.SetValue("Index", Convert.ToString(value));
            registryKey.Close();
            for (int i = 0; i < Convert.ToInt32(value); i++)
            {
                registryKey = Registry.CurrentUser.CreateSubKey(new string((sbyte*)(&_Module.struct16_4)) + Convert.ToString(i + 1));
                registryKey.SetValue("Index", Convert.ToString(i + 1));
                registryKey.SetValue("JobName", array[i, 1]);
                registryKey.SetValue("Created", array[i, 2]);
                registryKey.SetValue("Working", array[i, 3]);
                registryKey.SetValue("Osig", array[i, 4]);
                registryKey.SetValue("Spoof", array[i, 5]);
                registryKey.SetValue("Vendor", array[i, 6]);
                registryKey.SetValue("Model", array[i, 7]);
                registryKey.SetValue("Rev", array[i, 8]);
                registryKey.SetValue("Type", array[i, 9]);
                registryKey.SetValue("Key", array[i, 10]);
                registryKey.SetValue("KeyLoc", array[i, 11]);
                registryKey.SetValue("Updated", array[i, 12]);
                registryKey.SetValue("Lastfile", array[i, 13]);
                registryKey.Close();
            }
            for (int i = 0; i < Convert.ToInt32(value); i++)
            {
                registryKey = Registry.CurrentUser.CreateSubKey(new string((sbyte*)(&_Module.struct1_2)));
                registryKey.SetValue(array[i, 10], Convert.ToString(i + 1));
                registryKey.Close();
            }
            for (int i = 0; i < Convert.ToInt32(value); i++)
            {
                registryKey = Registry.CurrentUser.CreateSubKey(new string((sbyte*)(&_Module.struct1_3)));
                registryKey.SetValue(array[i, 14], Convert.ToString(i + 1));
                registryKey.Close();
            }
        }

        // Token: 0x060001E7 RID: 487 RVA: 0x0010B434 File Offset: 0x0010B434
        private void method_27()
        {
            if (string.Compare(this.textBox9.Text, "4DCB62B1031A08033818E62E95EE11EF") == 0)
            {
                new Donate();
                try
                {
                    Process.Start("http://JungleFlasher.net/donate.html");
                }
                catch (Exception ex)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(ex.Message, this.Text, MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                Application.Exit();
            }
            if (!this.bool_4)
            {
                if (this.textBox9.TextLength != 0)
                {
                    int int_ = this.method_22(this.textBox9.Text);
                    this.method_23(int_);
                }
            }
        }

        // Token: 0x060001E8 RID: 488 RVA: 0x0010B508 File Offset: 0x0010B508
        private void method_28()
        {
            if (string.Compare(this.textBox9.Text, "") != 0)
            {
                int num = this.method_22(this.textBox9.Text);
                new Job_history
                {
                    int_0 = num
                }.ShowDialog(this);
            }
        }

        // Token: 0x060001E9 RID: 489 RVA: 0x0010B558 File Offset: 0x0010B558
        private unsafe void method_29()
        {
            for (int i = 0; i < 4; i++)
            {
                *(ref _Module.struct123_0 + i * 4) = _Module.malloc(2392U);
                if (*(ref _Module.struct123_0 + i * 4) == 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Malloc Failed Struct:" + Convert.ToString(i), "SetupFI", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }

                _Module.memset(*(ref _Module.struct123_0 + i * 4), 0, 2392U);
                if (*(ref _Module.struct121_0 + i * 2392 + 2388) != 0)
                {

                    _Module.free(*(ref _Module.struct121_0 + i * 2392 + 2388));
                }
                *(ref _Module.struct121_0 + i * 2392 + 2388) = _Module.malloc(262144U);
                if (*(ref _Module.struct121_0 + i * 2392 + 2388) == 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Malloc Failed Buffer:" + Convert.ToString(i), "SetupFI", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
            }
        }

        // Token: 0x060001EA RID: 490 RVA: 0x0010B6A8 File Offset: 0x0010B6A8
        private unsafe int method_30(int int_16)
        {
            byte* ptr = *(ref _Module.struct121_0 + int_16 * 2392 + 2388);
            uint num = 0U;
            uint num2 = 0U;
            for (uint num3 = 45056U; num3 < 110592U; num3 += 4U)
            {
                num2 += num;
                num = (uint)((int)ptr[num3 + 3U] << 24 | (int)ptr[num3 + 2U] << 16 | (int)ptr[num3 + 1U] << 8 | (int)ptr[num3]);
            }
            num2 = 0U - num2;
            uint result;
            if (num2 == 789421430U)
            {
                result = 1U;
            }
            else if (num2 == 529584510U)
            {
                result = 2U;
            }
            else if (num2 == 1731285449U)
            {
                result = 3U;
            }
            else if (num2 == 4236510092U)
            {
                result = 4U;
            }
            else if (num2 == 17588177U)
            {
                result = 5U;
            }
            else if (num2 == 2999884414U)
            {
                result = 6U;
            }
            else if (num2 == 253026502U)
            {
                result = 7U;
            }
            else if (num2 == 771127765U)
            {
                result = 8U;
            }
            else if (num2 == 2680630850U)
            {
                result = 9U;
            }
            else if (num2 == 3231213612U)
            {
                result = 10U;
            }
            else if (num2 == 1482142839U)
            {
                result = 11U;
            }
            else if (num2 == 2691219462U)
            {
                result = 12U;
            }
            else if (num2 == 811045522U)
            {
                result = 13U;
            }
            else if (num2 == 1009034336U)
            {
                result = 14U;
            }
            else
            {
                if (num2 != 3402234535U)
                {
                    return 0;
                }
                result = 15U;
            }
            return (int)result;
        }

        // Token: 0x060001EB RID: 491 RVA: 0x0010B7E4 File Offset: 0x0010B7E4
        private unsafe int method_31(int int_16)
        {
            Struct76 @struct = 0;
            initblk(ref @struct + 1, 0, 259);
            Struct76 struct2 = 0;
            initblk(ref struct2 + 1, 0, 259);
            Struct28 struct3 = 255;
            *(ref struct3 + 1) = byte.MaxValue;
            *(ref struct3 + 2) = byte.MaxValue;
            *(ref struct3 + 3) = byte.MaxValue;
            *(ref struct3 + 4) = byte.MaxValue;
            *(ref struct3 + 5) = byte.MaxValue;
            *(ref struct3 + 6) = byte.MaxValue;
            *(ref struct3 + 7) = byte.MaxValue;
            *(ref struct3 + 8) = byte.MaxValue;
            *(ref struct3 + 9) = byte.MaxValue;
            *(ref struct3 + 10) = byte.MaxValue;
            *(ref struct3 + 11) = byte.MaxValue;
            *(ref struct3 + 12) = byte.MaxValue;
            *(ref struct3 + 13) = byte.MaxValue;
            *(ref struct3 + 14) = byte.MaxValue;
            *(ref struct3 + 15) = byte.MaxValue;
            Struct42 struct4 = 255;
            *(ref struct4 + 1) = byte.MaxValue;
            *(ref struct4 + 2) = byte.MaxValue;
            *(ref struct4 + 3) = byte.MaxValue;
            *(ref struct4 + 4) = byte.MaxValue;
            *(ref struct4 + 5) = byte.MaxValue;
            *(ref struct4 + 6) = byte.MaxValue;
            *(ref struct4 + 7) = byte.MaxValue;
            *(ref struct4 + 8) = byte.MaxValue;
            *(ref struct4 + 9) = byte.MaxValue;
            *(ref struct4 + 10) = byte.MaxValue;
            *(ref struct4 + 11) = byte.MaxValue;
            *(ref struct4 + 12) = byte.MaxValue;
            *(ref struct4 + 13) = byte.MaxValue;
            *(ref struct4 + 14) = byte.MaxValue;
            *(ref struct4 + 15) = byte.MaxValue;
            *(ref struct4 + 16) = byte.MaxValue;
            *(ref struct4 + 17) = byte.MaxValue;
            *(ref struct4 + 18) = byte.MaxValue;
            *(ref struct4 + 19) = byte.MaxValue;
            Struct28 struct5 = 248;
            *(ref struct5 + 1) = 121;
            *(ref struct5 + 2) = 55;
            *(ref struct5 + 3) = 225;
            *(ref struct5 + 4) = 18;
            *(ref struct5 + 5) = 144;
            *(ref struct5 + 6) = 161;
            *(ref struct5 + 7) = 82;
            *(ref struct5 + 8) = 4;
            *(ref struct5 + 9) = 46;
            *(ref struct5 + 10) = 3;
            *(ref struct5 + 11) = 9;
            *(ref struct5 + 12) = 145;
            *(ref struct5 + 13) = 109;
            *(ref struct5 + 14) = 2;
            *(ref struct5 + 15) = 81;
            Struct28 struct6 = 118;
            *(ref struct6 + 1) = 36;
            *(ref struct6 + 2) = 207;
            *(ref struct6 + 3) = 26;
            *(ref struct6 + 4) = 128;
            *(ref struct6 + 5) = 64;
            *(ref struct6 + 6) = 59;
            *(ref struct6 + 7) = 187;
            *(ref struct6 + 8) = 120;
            *(ref struct6 + 9) = 42;
            *(ref struct6 + 10) = 105;
            *(ref struct6 + 11) = 8;
            *(ref struct6 + 12) = 1;
            *(ref struct6 + 13) = 102;
            *(ref struct6 + 14) = 240;
            *(ref struct6 + 15) = 24;
            Struct41 struct7 = 27;
            *(ref struct7 + 1) = 41;
            *(ref struct7 + 2) = 209;
            *(ref struct7 + 3) = 161;
            *(ref struct7 + 4) = 157;
            *(ref struct7 + 5) = 12;
            *(ref struct7 + 6) = 156;
            *(ref struct7 + 7) = 232;
            *(ref struct7 + 8) = 132;
            *(ref struct7 + 9) = 220;
            *(ref struct7 + 10) = 21;
            *(ref struct7 + 11) = 229;
            *(ref struct7 + 12) = 153;
            *(ref struct7 + 13) = 8;
            *(ref struct7 + 14) = 253;
            *(ref struct7 + 15) = 229;
            *(ref struct7 + 16) = 17;
            *(ref struct7 + 17) = 126;
            Struct41 struct8 = 27;
            *(ref struct8 + 1) = 41;
            *(ref struct8 + 2) = 209;
            *(ref struct8 + 3) = 161;
            *(ref struct8 + 4) = 157;
            *(ref struct8 + 5) = 12;
            *(ref struct8 + 6) = 156;
            *(ref struct8 + 7) = 232;
            *(ref struct8 + 8) = 132;
            *(ref struct8 + 9) = 220;
            *(ref struct8 + 10) = 21;
            *(ref struct8 + 11) = 229;
            *(ref struct8 + 12) = 157;
            *(ref struct8 + 13) = 8;
            *(ref struct8 + 14) = 253;
            *(ref struct8 + 15) = 229;
            *(ref struct8 + 16) = 17;
            *(ref struct8 + 17) = 126;
            Struct41 struct9 = 27;
            *(ref struct9 + 1) = 41;
            *(ref struct9 + 2) = 209;
            *(ref struct9 + 3) = 161;
            *(ref struct9 + 4) = 157;
            *(ref struct9 + 5) = 12;
            *(ref struct9 + 6) = 156;
            *(ref struct9 + 7) = 232;
            *(ref struct9 + 8) = 132;
            *(ref struct9 + 9) = 220;
            *(ref struct9 + 10) = 21;
            *(ref struct9 + 11) = 233;
            *(ref struct9 + 12) = 157;
            *(ref struct9 + 13) = 8;
            *(ref struct9 + 14) = 253;
            *(ref struct9 + 15) = 229;
            *(ref struct9 + 16) = 17;
            *(ref struct9 + 17) = 126;
            Struct41 struct10 = 27;
            *(ref struct10 + 1) = 41;
            *(ref struct10 + 2) = 209;
            *(ref struct10 + 3) = 161;
            *(ref struct10 + 4) = 157;
            *(ref struct10 + 5) = 12;
            *(ref struct10 + 6) = 156;
            *(ref struct10 + 7) = 232;
            *(ref struct10 + 8) = 132;
            *(ref struct10 + 9) = 220;
            *(ref struct10 + 10) = 21;
            *(ref struct10 + 11) = 233;
            *(ref struct10 + 12) = 153;
            *(ref struct10 + 13) = 8;
            *(ref struct10 + 14) = 253;
            *(ref struct10 + 15) = 229;
            *(ref struct10 + 16) = 17;
            *(ref struct10 + 17) = 126;
            Struct41 struct11 = 93;
            *(ref struct11 + 1) = 44;
            *(ref struct11 + 2) = 211;
            *(ref struct11 + 3) = 238;
            *(ref struct11 + 4) = 23;
            *(ref struct11 + 5) = 2;
            *(ref struct11 + 6) = 12;
            *(ref struct11 + 7) = 254;
            *(ref struct11 + 8) = 206;
            *(ref struct11 + 9) = 208;
            *(ref struct11 + 10) = 152;
            *(ref struct11 + 11) = 251;
            *(ref struct11 + 12) = 145;
            *(ref struct11 + 13) = 4;
            *(ref struct11 + 14) = 249;
            *(ref struct11 + 15) = 236;
            *(ref struct11 + 16) = 128;
            *(ref struct11 + 17) = 186;
            Struct41 struct12 = 72;
            *(ref struct12 + 1) = 70;
            *(ref struct12 + 2) = 191;
            *(ref struct12 + 3) = 169;
            *(ref struct12 + 4) = 192;
            *(ref struct12 + 5) = 220;
            *(ref struct12 + 6) = 10;
            *(ref struct12 + 7) = 133;
            *(ref struct12 + 8) = 16;
            *(ref struct12 + 9) = 23;
            *(ref struct12 + 10) = 237;
            *(ref struct12 + 11) = 17;
            *(ref struct12 + 12) = 245;
            *(ref struct12 + 13) = 224;
            *(ref struct12 + 14) = 100;
            *(ref struct12 + 15) = 23;
            *(ref struct12 + 16) = 245;
            *(ref struct12 + 17) = 145;
            Struct41 struct13 = 203;
            *(ref struct13 + 1) = 241;
            *(ref struct13 + 2) = 181;
            *(ref struct13 + 3) = 55;
            *(ref struct13 + 4) = 18;
            *(ref struct13 + 5) = 0;
            *(ref struct13 + 6) = 3;
            *(ref struct13 + 7) = 7;
            *(ref struct13 + 8) = 213;
            *(ref struct13 + 9) = 55;
            *(ref struct13 + 10) = 140;
            *(ref struct13 + 11) = 215;
            *(ref struct13 + 12) = 85;
            *(ref struct13 + 13) = 39;
            *(ref struct13 + 14) = 93;
            *(ref struct13 + 15) = 172;
            *(ref struct13 + 16) = 52;
            *(ref struct13 + 17) = 177;
            Struct41 struct14 = 124;
            *(ref struct14 + 1) = 8;
            *(ref struct14 + 2) = 22;
            *(ref struct14 + 3) = 102;
            *(ref struct14 + 4) = 227;
            *(ref struct14 + 5) = 9;
            *(ref struct14 + 6) = 24;
            *(ref struct14 + 7) = 222;
            *(ref struct14 + 8) = 233;
            *(ref struct14 + 9) = 80;
            *(ref struct14 + 10) = 24;
            *(ref struct14 + 11) = 168;
            *(ref struct14 + 12) = 190;
            *(ref struct14 + 13) = 82;
            *(ref struct14 + 14) = 218;
            *(ref struct14 + 15) = 241;
            *(ref struct14 + 16) = 126;
            *(ref struct14 + 17) = 80;
            Struct41 struct15 = 87;
            *(ref struct15 + 1) = 238;
            *(ref struct15 + 2) = 39;
            *(ref struct15 + 3) = 8;
            *(ref struct15 + 4) = 64;
            *(ref struct15 + 5) = 200;
            *(ref struct15 + 6) = byte.MaxValue;
            *(ref struct15 + 7) = 61;
            *(ref struct15 + 8) = 141;
            *(ref struct15 + 9) = 173;
            *(ref struct15 + 10) = 117;
            *(ref struct15 + 11) = 2;
            *(ref struct15 + 12) = 33;
            *(ref struct15 + 13) = 249;
            *(ref struct15 + 14) = 205;
            *(ref struct15 + 15) = 155;
            *(ref struct15 + 16) = 138;
            *(ref struct15 + 17) = 209;
            Struct41 struct16 = 64;
            *(ref struct16 + 1) = 246;
            *(ref struct16 + 2) = 147;
            *(ref struct16 + 3) = 70;
            *(ref struct16 + 4) = 118;
            *(ref struct16 + 5) = 192;
            *(ref struct16 + 6) = 60;
            *(ref struct16 + 7) = 223;
            *(ref struct16 + 8) = 178;
            *(ref struct16 + 9) = 49;
            *(ref struct16 + 10) = 3;
            *(ref struct16 + 11) = 133;
            *(ref struct16 + 12) = 64;
            *(ref struct16 + 13) = 133;
            *(ref struct16 + 14) = 213;
            *(ref struct16 + 15) = 13;
            *(ref struct16 + 16) = 101;
            *(ref struct16 + 17) = 226;
            Struct41 struct17 = 187;
            *(ref struct17 + 1) = 17;
            *(ref struct17 + 2) = 180;
            *(ref struct17 + 3) = 20;
            *(ref struct17 + 4) = 49;
            *(ref struct17 + 5) = 209;
            *(ref struct17 + 6) = 145;
            *(ref struct17 + 7) = 190;
            *(ref struct17 + 8) = 90;
            *(ref struct17 + 9) = 232;
            *(ref struct17 + 10) = 25;
            *(ref struct17 + 11) = 133;
            *(ref struct17 + 12) = 21;
            *(ref struct17 + 13) = 113;
            *(ref struct17 + 14) = 45;
            *(ref struct17 + 15) = 137;
            *(ref struct17 + 16) = 220;
            *(ref struct17 + 17) = 19;
            Struct41 struct18 = 220;
            *(ref struct18 + 1) = 41;
            *(ref struct18 + 2) = 114;
            *(ref struct18 + 3) = 172;
            *(ref struct18 + 4) = 224;
            *(ref struct18 + 5) = 244;
            *(ref struct18 + 6) = 33;
            *(ref struct18 + 7) = 210;
            *(ref struct18 + 8) = 22;
            *(ref struct18 + 9) = 185;
            *(ref struct18 + 10) = 161;
            *(ref struct18 + 11) = 147;
            *(ref struct18 + 12) = 14;
            *(ref struct18 + 13) = 20;
            *(ref struct18 + 14) = 57;
            *(ref struct18 + 15) = 157;
            *(ref struct18 + 16) = 41;
            *(ref struct18 + 17) = 78;
            Struct28 struct19 = 192;
            *(ref struct19 + 1) = 224;
            *(ref struct19 + 2) = 126;
            *(ref struct19 + 3) = 9;
            *(ref struct19 + 4) = 127;
            *(ref struct19 + 5) = 234;
            *(ref struct19 + 6) = 18;
            *(ref struct19 + 7) = 70;
            *(ref struct19 + 8) = 17;
            *(ref struct19 + 9) = 239;
            *(ref struct19 + 10) = 84;
            *(ref struct19 + 11) = 1;
            *(ref struct19 + 12) = byte.MaxValue;
            *(ref struct19 + 13) = 208;
            *(ref struct19 + 14) = 224;
            *(ref struct19 + 15) = 34;
            Struct28 struct20 = 2;
            *(ref struct20 + 1) = 208;
            *(ref struct20 + 2) = 128;
            *(ref struct20 + 3) = 228;
            *(ref struct20 + 4) = 245;
            *(ref struct20 + 5) = 58;
            *(ref struct20 + 6) = 245;
            *(ref struct20 + 7) = 59;
            *(ref struct20 + 8) = 5;
            *(ref struct20 + 9) = 59;
            *(ref struct20 + 10) = 229;
            *(ref struct20 + 11) = 59;
            *(ref struct20 + 12) = 174;
            *(ref struct20 + 13) = 58;
            *(ref struct20 + 14) = 112;
            *(ref struct20 + 15) = 2;
            Struct28 struct21 = 2;
            *(ref struct21 + 1) = 213;
            *(ref struct21 + 2) = 0;
            *(ref struct21 + 3) = 228;
            *(ref struct21 + 4) = 245;
            *(ref struct21 + 5) = 58;
            *(ref struct21 + 6) = 245;
            *(ref struct21 + 7) = 59;
            *(ref struct21 + 8) = 5;
            *(ref struct21 + 9) = 59;
            *(ref struct21 + 10) = 229;
            *(ref struct21 + 11) = 59;
            *(ref struct21 + 12) = 174;
            *(ref struct21 + 13) = 58;
            *(ref struct21 + 14) = 112;
            *(ref struct21 + 15) = 2;
            Struct28 struct22 = 2;
            *(ref struct22 + 1) = 208;
            *(ref struct22 + 2) = 128;
            *(ref struct22 + 3) = 228;
            *(ref struct22 + 4) = 245;
            *(ref struct22 + 5) = 58;
            *(ref struct22 + 6) = 245;
            *(ref struct22 + 7) = 59;
            *(ref struct22 + 8) = 5;
            *(ref struct22 + 9) = 59;
            *(ref struct22 + 10) = 229;
            *(ref struct22 + 11) = 59;
            *(ref struct22 + 12) = 174;
            *(ref struct22 + 13) = 58;
            *(ref struct22 + 14) = 112;
            *(ref struct22 + 15) = 2;
            Struct28 struct23 = 2;
            *(ref struct23 + 1) = 213;
            *(ref struct23 + 2) = 128;
            *(ref struct23 + 3) = 228;
            *(ref struct23 + 4) = 245;
            *(ref struct23 + 5) = 58;
            *(ref struct23 + 6) = 245;
            *(ref struct23 + 7) = 59;
            *(ref struct23 + 8) = 5;
            *(ref struct23 + 9) = 59;
            *(ref struct23 + 10) = 229;
            *(ref struct23 + 11) = 59;
            *(ref struct23 + 12) = 174;
            *(ref struct23 + 13) = 58;
            *(ref struct23 + 14) = 112;
            *(ref struct23 + 15) = 2;
            Struct28 struct24 = 239;
            *(ref struct24 + 1) = 192;
            *(ref struct24 + 2) = 224;
            *(ref struct24 + 3) = 126;
            *(ref struct24 + 4) = 9;
            *(ref struct24 + 5) = 127;
            *(ref struct24 + 6) = 234;
            *(ref struct24 + 7) = 18;
            *(ref struct24 + 8) = 64;
            *(ref struct24 + 9) = 2;
            *(ref struct24 + 10) = 239;
            *(ref struct24 + 11) = 84;
            *(ref struct24 + 12) = 1;
            *(ref struct24 + 13) = byte.MaxValue;
            *(ref struct24 + 14) = 208;
            *(ref struct24 + 15) = 224;
            Struct28 struct25 = 123;
            *(ref struct25 + 1) = 12;
            *(ref struct25 + 2) = 228;
            *(ref struct25 + 3) = 253;
            *(ref struct25 + 4) = byte.MaxValue;
            *(ref struct25 + 5) = 254;
            *(ref struct25 + 6) = 18;
            *(ref struct25 + 7) = 62;
            *(ref struct25 + 8) = 47;
            *(ref struct25 + 9) = 143;
            *(ref struct25 + 10) = 53;
            *(ref struct25 + 11) = 142;
            *(ref struct25 + 12) = 52;
            *(ref struct25 + 13) = 141;
            *(ref struct25 + 14) = 51;
            *(ref struct25 + 15) = 140;
            Struct28 struct26 = 2;
            *(ref struct26 + 1) = 87;
            *(ref struct26 + 2) = 0;
            *(ref struct26 + 3) = 126;
            *(ref struct26 + 4) = 33;
            *(ref struct26 + 5) = 127;
            *(ref struct26 + 6) = 67;
            *(ref struct26 + 7) = 18;
            *(ref struct26 + 8) = 64;
            *(ref struct26 + 9) = 2;
            *(ref struct26 + 10) = 239;
            *(ref struct26 + 11) = 100;
            *(ref struct26 + 12) = 32;
            *(ref struct26 + 13) = 96;
            *(ref struct26 + 14) = 1;
            *(ref struct26 + 15) = 34;
            Struct28 struct27 = 128;
            *(ref struct27 + 1) = 227;
            *(ref struct27 + 2) = 129;
            *(ref struct27 + 3) = 196;
            *(ref struct27 + 4) = 7;
            *(ref struct27 + 5) = 12;
            *(ref struct27 + 6) = 78;
            *(ref struct27 + 7) = 116;
            *(ref struct27 + 8) = 78;
            *(ref struct27 + 9) = 138;
            *(ref struct27 + 10) = 121;
            *(ref struct27 + 11) = 171;
            *(ref struct27 + 12) = 98;
            *(ref struct27 + 13) = 5;
            *(ref struct27 + 14) = 31;
            *(ref struct27 + 15) = 116;
            Struct28 struct28 = 116;
            *(ref struct28 + 1) = 55;
            *(ref struct28 + 2) = 240;
            *(ref struct28 + 3) = 116;
            *(ref struct28 + 4) = 243;
            *(ref struct28 + 5) = 240;
            *(ref struct28 + 6) = 210;
            *(ref struct28 + 7) = 81;
            *(ref struct28 + 8) = 228;
            *(ref struct28 + 9) = 245;
            *(ref struct28 + 10) = 30;
            *(ref struct28 + 11) = 120;
            *(ref struct28 + 12) = 127;
            *(ref struct28 + 13) = 246;
            *(ref struct28 + 14) = 120;
            *(ref struct28 + 15) = 137;
            Struct28 struct29 = 116;
            *(ref struct29 + 1) = 164;
            *(ref struct29 + 2) = 240;
            *(ref struct29 + 3) = 116;
            *(ref struct29 + 4) = 64;
            *(ref struct29 + 5) = 240;
            *(ref struct29 + 6) = 210;
            *(ref struct29 + 7) = 81;
            *(ref struct29 + 8) = 228;
            *(ref struct29 + 9) = 245;
            *(ref struct29 + 10) = 30;
            *(ref struct29 + 11) = 120;
            *(ref struct29 + 12) = 127;
            *(ref struct29 + 13) = 246;
            *(ref struct29 + 14) = 120;
            *(ref struct29 + 15) = 137;
            Struct28 struct30 = 209;
            *(ref struct30 + 1) = 62;
            *(ref struct30 + 2) = 182;
            *(ref struct30 + 3) = 196;
            *(ref struct30 + 4) = 140;
            *(ref struct30 + 5) = 172;
            *(ref struct30 + 6) = 26;
            *(ref struct30 + 7) = 204;
            *(ref struct30 + 8) = 196;
            *(ref struct30 + 9) = 176;
            *(ref struct30 + 10) = 82;
            *(ref struct30 + 11) = 243;
            *(ref struct30 + 12) = 207;
            *(ref struct30 + 13) = 10;
            *(ref struct30 + 14) = 44;
            *(ref struct30 + 15) = 249;
            Struct28 struct31 = 210;
            *(ref struct31 + 1) = 225;
            *(ref struct31 + 2) = 241;
            *(ref struct31 + 3) = 225;
            *(ref struct31 + 4) = 2;
            *(ref struct31 + 5) = 103;
            *(ref struct31 + 6) = 0;
            *(ref struct31 + 7) = 29;
            *(ref struct31 + 8) = 82;
            *(ref struct31 + 9) = 230;
            *(ref struct31 + 10) = 36;
            *(ref struct31 + 11) = 220;
            *(ref struct31 + 12) = 161;
            *(ref struct31 + 13) = 161;
            *(ref struct31 + 14) = 143;
            *(ref struct31 + 15) = 64;
            Struct28 struct32 = 13;
            *(ref struct32 + 1) = 225;
            *(ref struct32 + 2) = 183;
            *(ref struct32 + 3) = 224;
            *(ref struct32 + 4) = 2;
            *(ref struct32 + 5) = 253;
            *(ref struct32 + 6) = 241;
            *(ref struct32 + 7) = 42;
            *(ref struct32 + 8) = 5;
            *(ref struct32 + 9) = 42;
            *(ref struct32 + 10) = 234;
            *(ref struct32 + 11) = 247;
            *(ref struct32 + 12) = 235;
            *(ref struct32 + 13) = 250;
            *(ref struct32 + 14) = 34;
            *(ref struct32 + 15) = 96;
            Struct28 struct33 = 15;
            *(ref struct33 + 1) = 62;
            *(ref struct33 + 2) = byte.MaxValue;
            *(ref struct33 + 3) = 233;
            *(ref struct33 + 4) = 10;
            *(ref struct33 + 5) = 218;
            *(ref struct33 + 6) = 15;
            *(ref struct33 + 7) = 120;
            *(ref struct33 + 8) = 10;
            *(ref struct33 + 9) = 56;
            *(ref struct33 + 10) = 230;
            *(ref struct33 + 11) = byte.MaxValue;
            *(ref struct33 + 12) = 218;
            *(ref struct33 + 13) = 218;
            *(ref struct33 + 14) = 249;
            *(ref struct33 + 15) = 98;
            Struct28 struct34 = 76;
            *(ref struct34 + 1) = 48;
            *(ref struct34 + 2) = 83;
            *(ref struct34 + 3) = 32;
            *(ref struct34 + 4) = 191;
            *(ref struct34 + 5) = 215;
            *(ref struct34 + 6) = 103;
            *(ref struct34 + 7) = 44;
            *(ref struct34 + 8) = 102;
            *(ref struct34 + 9) = 1;
            *(ref struct34 + 10) = 106;
            *(ref struct34 + 11) = 228;
            *(ref struct34 + 12) = 110;
            *(ref struct34 + 13) = 201;
            *(ref struct34 + 14) = 129;
            *(ref struct34 + 15) = 248;
            Struct28 struct35 = 76;
            *(ref struct35 + 1) = 48;
            *(ref struct35 + 2) = 83;
            *(ref struct35 + 3) = 33;
            *(ref struct35 + 4) = 4;
            *(ref struct35 + 5) = 194;
            *(ref struct35 + 6) = 103;
            *(ref struct35 + 7) = 44;
            *(ref struct35 + 8) = 102;
            *(ref struct35 + 9) = 1;
            *(ref struct35 + 10) = 106;
            *(ref struct35 + 11) = 228;
            *(ref struct35 + 12) = 110;
            *(ref struct35 + 13) = 201;
            *(ref struct35 + 14) = 129;
            *(ref struct35 + 15) = 248;
            Struct77 struct36 = 217;
            *(ref struct36 + 1) = 108;
            *(ref struct36 + 2) = 10;
            *(ref struct36 + 3) = 39;
            *(ref struct36 + 4) = 95;
            *(ref struct36 + 5) = 82;
            Struct77 struct37 = 214;
            *(ref struct37 + 1) = 4;
            *(ref struct37 + 2) = 104;
            *(ref struct37 + 3) = 56;
            *(ref struct37 + 4) = 208;
            *(ref struct37 + 5) = 99;
            Struct77 struct38 = 241;
            *(ref struct38 + 1) = 76;
            *(ref struct38 + 2) = 182;
            *(ref struct38 + 3) = 121;
            *(ref struct38 + 4) = 75;
            *(ref struct38 + 5) = 171;
            Struct77 struct39 = 156;
            *(ref struct39 + 1) = 77;
            *(ref struct39 + 2) = 201;
            *(ref struct39 + 3) = 90;
            *(ref struct39 + 4) = 35;
            *(ref struct39 + 5) = 208;
            Struct28 struct40 = 0;
            initblk(ref struct40 + 1, 0, 15);
            Struct71 struct41 = 0;
            initblk(ref struct41 + 1, 0, 15);
            Struct55 struct42 = 213;
            *(ref struct42 + 1) = 110;
            *(ref struct42 + 2) = 185;
            *(ref struct42 + 3) = 18;
            *(ref struct42 + 4) = 21;
            *(ref struct42 + 5) = 210;
            *(ref struct42 + 6) = 40;
            *(ref struct42 + 7) = 34;
            *(ref struct42 + 8) = 28;
            *(ref struct42 + 9) = 145;
            *(ref struct42 + 10) = 238;
            *(ref struct42 + 11) = 120;
            *(ref struct42 + 12) = 247;
            *(ref struct42 + 13) = 9;
            *(ref struct42 + 14) = 249;
            *(ref struct42 + 15) = 0;
            *(ref struct42 + 16) = 80;
            *(ref struct42 + 17) = 248;
            *(ref struct42 + 18) = 163;
            *(ref struct42 + 19) = 254;
            *(ref struct42 + 20) = 148;
            *(ref struct42 + 21) = 106;
            *(ref struct42 + 22) = 172;
            *(ref struct42 + 23) = 54;
            *(ref struct42 + 24) = 180;
            *(ref struct42 + 25) = 155;
            *(ref struct42 + 26) = 36;
            *(ref struct42 + 27) = 62;
            *(ref struct42 + 28) = 63;
            *(ref struct42 + 29) = 174;
            *(ref struct42 + 30) = 161;
            *(ref struct42 + 31) = 65;
            byte* ptr = *(ref _Module.struct121_0 + int_16 * 2392 + 2388);
            byte* pByte_ = *(ref _Module.struct121_0 + 7172);
            int num = 8192;
            while (num < 12288 && (ptr[num] != 5 || ptr[num + 1] != 128 || ptr[num + 2] != 0 || ptr[num + 3] != 50 || ptr[num + 5] != 0 || ptr[num + 7] != 0))
            {
                num++;
            }
            if (num != 12288)
            {

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(ptr + num), 96U);

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(ptr + (num + 8)), 28U);
                *(*(ref _Module.struct123_0 + int_16 * 4) + 560) = num;
                this.textBox6.AppendText("Inquiry string found" + "\r\n");
            }
            int i = 8192;
            while (i < 12288 && (ptr[i] != 192 || ptr[i + 1] != 133 || ptr[i + 2] != 0 || ptr[i + 3] != 0 || ptr[i + 4] != 0 || ptr[i + 5] != 0))
            {
                i++;
            }
            if (i != 12288)
            {

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(ptr + i), 180U);
                *(*(ref _Module.struct123_0 + int_16 * 4) + 564) = i;
                this.textBox6.AppendText("Identify string found" + "\r\n");
            }
            if (num == 8372)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4)) = 1;
                if (ptr[2152] == 230 && ptr[2153] == 160 && ptr[2158] == 189)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_3), 28U);
                }
                else
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 2;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_4), 28U);
                }
                if (ptr[65504] != 0 && ptr[65504] != 255)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(ptr + 65504), 32U);
                }
                else if (_Module.memcmp((void*)(&struct28), (void*)(ptr + 9088), 16U) == null)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct74_0), 10U);
                }
                else if (_Module.memcmp((void*)(&struct29), (void*)(ptr + 9088), 16U) == null)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct74_1), 10U);
                    if (ptr[20480] == 2)
                    {

                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct74_2), 10U);
                    }
                    if (ptr[23883] == 22)
                    {

                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct74_3), 10U);
                    }
                }
                else
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                }
                uint num2;
                for (num2 = 16406U; num2 < 20480U; num2 += 42U)
                {
                    if (_Module.memcmp((void*)(ptr + num2), (void*)(&struct4), 20U) == null)
                    {
                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = (int)(num2 - 42U + 4U);

                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(ptr + (num2 - 42U + 4U)), 16U);
                        break;
                    }
                }
                if (num2 > 18912U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive Key not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 0;
                }
                if (int_16 == 0 && _Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(&struct40), 16U) == null)
                {
                    this.method_53();
                    this.method_54();
                }
            }
            else if (num == 8370)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4)) = 2;
                num = 245760;
                while (num < 253952 && (ptr[num] != 5 || ptr[num + 1] != 128 || ptr[num + 2] != 0 || ptr[num + 3] != 50 || ptr[num + 5] != 0 || ptr[num + 7] != 0))
                {
                    num++;
                }
                if (num == 253952)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Inquiry string not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 0;
                }
                *(*(ref _Module.struct123_0 + int_16 * 4) + 560) = num;
                i = 245760;
                while (i < 253952 && (ptr[i] != 192 || ptr[i + 1] != 133 || ptr[i + 2] != 0 || ptr[i + 3] != 0 || ptr[i + 4] != 0 || ptr[i + 5] != 0))
                {
                    i++;
                }
                if (i == 253952)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Identify string not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 0;
                }
                *(*(ref _Module.struct123_0 + int_16 * 4) + 564) = i;

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(ptr + num), 96U);

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(ptr + (num + 8)), 28U);

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(ptr + i), 180U);
                uint num3 = (uint)this.method_30(int_16);
                if (num3 == 0U)
                {
                    return 0;
                }
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = (short)num3;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 20224;

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(ptr + 20224), 16U);
                if (num3 == 1U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_5), 28U);
                }
                else if (num3 == 2U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_6), 28U);
                }
                else if (num3 == 3U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_7), 28U);
                }
                else if (num3 == 4U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_8), 28U);
                }
                else if (num3 == 5U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_9), 28U);
                }
                else if (num3 == 6U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_2), 28U);
                }
                else if (num3 == 7U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_10), 28U);
                }
                else if (num3 == 8U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_11), 28U);
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 19200;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(ptr + 19200), 16U);
                }
                else if (num3 == 9U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_11), 28U);
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 19504;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(ptr + 19504), 16U);
                }
                else if (num3 == 10U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_11), 28U);
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 19744;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(ptr + 19744), 16U);
                }
                else if (num3 == 11U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_11), 28U);
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 19984;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(ptr + 19984), 16U);
                }
                else if (num3 == 12U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_12), 28U);
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 19200;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(ptr + 19200), 16U);
                }
                else if (num3 == 13U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_12), 28U);
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 19504;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(ptr + 19504), 16U);
                }
                else if (num3 == 14U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_12), 28U);
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 19744;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(ptr + 19744), 16U);
                }
                else if (num3 == 15U)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_12), 28U);
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 19984;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(ptr + 19984), 16U);
                }

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2028, (void*)(ptr + 20352), 20U);
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2024) = 20352;
                uint num4 = (uint)((int)ptr[255999] << 24 | (int)ptr[255998] << 16 | (int)ptr[255997] << 8 | (int)ptr[255996]);
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2020) = (int)num4;
                if (ptr[14320] != 255)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(ptr + 14320), 32U);
                }
                else if (ptr[13428] == 255)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                }
                else if (ptr[13428] == 0)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct15_2), 12U);
                }
                else if (ptr[13381] == 252)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct15_3), 12U);
                }
                else if (ptr[14000] != 255)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct15_4), 12U);
                }
                else if (ptr[14336] != 255)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct15_5), 12U);
                }
                else if (ptr[13428] != 0)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct15_5), 12U);
                }
                else
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                }
            }
            else if (num == 11776)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4)) = 4;
                if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_35), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_13), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_30), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 2;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_14), 28U);
                    if (_Module.memcmp((void*)(ptr + 12032), (void*)(&_Module.struct29_17), 36U) == null)
                    {
                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 3;
                    }
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_5), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 4;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_15), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_24), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 5;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_16), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_31), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4)) = 5;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;
                    if (this.method_72() == 0)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Key sector area is incomplete or invalid !", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        return 0;
                    }

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_17), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_33), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4)) = 5;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 2;
                    if (this.method_74() == 0)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Key sector area is incomplete or invalid !", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        return 0;
                    }

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_18), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_7), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4)) = 5;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 3;
                    if (this.method_76() == 0)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Key sector area is incomplete or invalid !", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        return 0;
                    }

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_19), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_0), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4)) = 5;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 4;
                    if (this.method_72() == 0)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Key sector area is incomplete or invalid !", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        return 0;
                    }

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_20), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_19), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4)) = 5;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 5;
                    if (this.method_78() == 0)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Key sector area is incomplete or invalid !", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        return 0;
                    }

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_21), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_8), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 1;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_3), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_11), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 2;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_4), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_36), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 1;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_5), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_15), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 2;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_6), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_2), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 3;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_7), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_1), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 4;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_8), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_29), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 5;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_9), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_27), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 6;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_2), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_10), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 7;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_10), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_3), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 8;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_11), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_21), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 12;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_12), 28U);
                }
                else if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_34), 36U) == null)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 3;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 1;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_22), 28U);
                }
                else
                {
                    if (_Module.memcmp((void*)(ptr + 11776), (void*)(&_Module.struct29_25), 36U) != null)
                    {
                        return 0;
                    }
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 3;
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 2;

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_23), 28U);
                }

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(ptr + 24512), 32U);
                *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 41008;

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(ptr + 41008), 16U);
                Struct46 struct43;

                _Module.memcpy((void*)(&struct43), *(ref _Module.struct123_0 + int_16 * 4) + 780, 180U);
                for (int j = 46; j < 93; j += 2)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + j) = *(ref struct43 + (j + 1));
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + (j + 1)) = *(ref struct43 + j);
                }
                *(*(ref _Module.struct123_0 + int_16 * 4) + 800) = 54;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 801) = 68;
                for (int j = 20; j < 40; j += 2)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + j) = *(ref struct43 + (j + 1));
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + (j + 1)) = *(ref struct43 + j);
                }

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2028, (void*)(ptr + 130816), 224U);
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2024) = 130816;
                if (int_16 == 1)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Dummy files are not suitable for flashing.", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 0;
                }
            }
            else
            {
                Struct46 struct43;
                uint num5;
                if (num != 9530 && num != 11607)
                {
                    if (num != 9888)
                    {
                        if (num != 9893)
                        {
                            if (num != 11612)
                            {
                                if (num == 9948)
                                {
                                    *(*(ref _Module.struct123_0 + int_16 * 4)) = 3;
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 3;

                                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_24), 28U);
                                    if (ptr[24544] != 0)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(ptr + 24544), 32U);
                                    }
                                    else if (ptr[53760] == 126)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct72_2), 11U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct26), (void*)(ptr + 86016), 16U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct72_3), 11U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct25), (void*)(ptr + 53600), 16U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct15_4), 12U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct24), (void*)(ptr + 53248), 16U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct72_4), 11U);
                                    }
                                    else
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    for (num5 = 40960U; num5 < 61440U; num5 += 4096U)
                                    {
                                        if (num5 != 53248U)
                                        {
                                            if (_Module.memcmp((void*)(ptr + (num5 + 4080U)), (void*)(&struct3), 16U) == null)
                                            {
                                                uint num2;
                                                for (num2 = 32U; num2 < 4096U; num2 += 16U)
                                                {
                                                    if (_Module.memcmp((void*)(ptr + (num5 + num2 + 16U)), (void*)(&struct3), 16U) == null)
                                                    {
                                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = (int)(num2 + num5);

                                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(ptr + (num5 + num2)), 16U);
                                                        break;
                                                    }
                                                }
                                                if (num2 < 4096U)
                                                {
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    if (num5 == 61440U)
                                    {

                                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                        MessageBox.Show("Drive Key not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                        return 0;
                                    }

                                    _Module.memcpy((void*)(&struct43), *(ref _Module.struct123_0 + int_16 * 4) + 780, 180U);
                                    for (int j = 20; j < 93; j += 2)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + j) = *(ref struct43 + (j + 1));
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + (j + 1)) = *(ref struct43 + j);
                                    }

                                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2028, (void*)(ptr + 65280), 80U);
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2024) = 65280;
                                    goto IL_6AFF;
                                }
                                else
                                {
                                    if (num != 12288)
                                    {
                                        goto IL_6AFF;
                                    }
                                    num = 69632;
                                    while (num < 86016 && (ptr[num] != 5 || ptr[num + 1] != 128 || ptr[num + 2] != 0 || ptr[num + 3] != 50 || ptr[num + 5] != 0 || ptr[num + 7] != 0))
                                    {
                                        num++;
                                    }
                                    if (num == 70628 | num == 73464 | num == 82278)
                                    {
                                        this.textBox6.AppendText("Kreon Inquiry found" + "\r\n");

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(ptr + num), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(ptr + (num + 8)), 28U);
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 560) = num;
                                        i = 69632;
                                        while (i < 1396736 && (ptr[i] != 192 || ptr[i + 1] != 133 || ptr[i + 2] != 0 || ptr[i + 3] != 0 || ptr[i + 4] != 0 || ptr[i + 5] != 0))
                                        {
                                            i++;
                                        }

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(ptr + i), 180U);
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 564) = i;
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 9;
                                        return 3;
                                    }
                                    if (_Module.memcmp((void*)(&struct42), (void*)ptr, 32U) == null)
                                    {
                                        this.textBox6.AppendText("Encrypted Hitachi f/w detected" + "\r\n");
                                        this.method_392(ptr, pByte_, 262144);

                                        _Module.memcpy((void*)ptr, (void*)pByte_, 262144U);
                                        this.textBox6.AppendText("DeCrypting " + "\r\n");
                                        return 2;
                                    }
                                    if (_Module.memcmp((void*)(ptr + 82176), (void*)(&_Module.struct43_16), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 4;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_13), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_35), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_32), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_5), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 82176), (void*)(&_Module.struct43_24), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 4;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 2;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_14), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_30), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_26), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_3), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 82176), (void*)(&_Module.struct43_13), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 4;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 3;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_14), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_30), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_17), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_3), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 82176), (void*)(&_Module.struct43_22), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 4;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 4;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_15), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_5), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_32), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_24), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 82176), (void*)(&_Module.struct43_15), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 4;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 5;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_16), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_24), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_13), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_14), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 82176), (void*)(&_Module.struct43_7), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 4;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 2;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_14), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_30), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_26), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_3), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 82176), (void*)(&_Module.struct43_14), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 4;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 3;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_14), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_30), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_17), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_3), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 81920), (void*)(&_Module.struct43_8), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 5;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_17), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_31), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_20), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_15), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 81920), (void*)(&_Module.struct43_20), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 5;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 2;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_18), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_33), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_18), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_2), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 81920), (void*)(&_Module.struct43_9), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 5;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 3;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_19), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_7), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_22), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_6), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 81920), (void*)(&_Module.struct43_1), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 5;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 4;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_20), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_0), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_23), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_13), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 81920), (void*)(&_Module.struct43_9), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 5;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 3;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_19), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_7), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_22), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_6), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 81920), (void*)(&_Module.struct43_18), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 5;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 5;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_21), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_19), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_4), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_16), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 81920), (void*)(&_Module.struct43_11), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 6;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_25), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_28), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_12), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_18), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct24_7), 8U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 81920), (void*)(&_Module.struct43_12), 256U) == null)
                                    {
                                        if (ptr[123952] == 93)
                                        {
                                            *(*(ref _Module.struct123_0 + int_16 * 4)) = 6;
                                            *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 3;

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_26), 28U);

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_9), 96U);

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_4), 180U);

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct24_7), 8U);
                                        }
                                        else if (ptr[123952] == 85)
                                        {
                                            *(*(ref _Module.struct123_0 + int_16 * 4)) = 6;
                                            *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 4;

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_27), 28U);

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_9), 96U);

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_4), 180U);

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct24_7), 8U);
                                        }
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 81920), (void*)(&_Module.struct43_19), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 6;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 5;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_18), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_33), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_18), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_2), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct24_7), 8U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 81920), (void*)(&_Module.struct43_5), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 6;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 6;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_19), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_7), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_22), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_6), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct24_7), 8U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 81920), (void*)(&_Module.struct43_3), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 6;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 7;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_21), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_19), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_4), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_16), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct24_7), 8U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 81920), (void*)(&_Module.struct43_23), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 6;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 2;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_28), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_6), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_14), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_21), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct24_7), 8U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 82176), (void*)(&_Module.struct43_2), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 7;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_25), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_28), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_12), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_18), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct7_4), 9U);
                                        if (ptr[80176] == 3)
                                        {

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_26), 28U);

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_9), 96U);

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_4), 180U);
                                            *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 3;
                                        }
                                        if (ptr[80176] == 11)
                                        {

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_27), 28U);

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_16), 96U);

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_8), 180U);
                                            *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 4;
                                        }
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 82176), (void*)(&_Module.struct43_10), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 7;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 2;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_28), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_6), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_12), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_21), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct7_4), 9U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 82176), (void*)(&_Module.struct43_6), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 7;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 5;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_20), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_0), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_23), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_13), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct7_4), 9U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 82176), (void*)(&_Module.struct43_17), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 7;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 6;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_18), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_33), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_18), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_2), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct7_4), 9U);
                                    }
                                    else if (_Module.memcmp((void*)(ptr + 82176), (void*)(&_Module.struct43_4), 256U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 7;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 7;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_19), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_7), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_22), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_6), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct7_4), 9U);
                                    }
                                    else
                                    {
                                        if (_Module.memcmp((void*)(ptr + 82176), (void*)(&_Module.struct43_0), 256U) != null)
                                        {
                                            return 0;
                                        }
                                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 7;
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 8;

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_21), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_19), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 684, (void*)(&_Module.struct29_4), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_16), 180U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct7_4), 9U);
                                    }
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 114688;
                                    if (_Module.memcmp((void*)(&struct38), (void*)(ptr + 118784), 6U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 106496;
                                    }
                                    else if (_Module.memcmp((void*)(&struct36), (void*)(ptr + 118784), 6U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 114688;
                                    }
                                    else if (_Module.memcmp((void*)(&struct37), (void*)(ptr + 118784), 6U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 122880;
                                    }
                                    else if (_Module.memcmp((void*)(&struct39), (void*)(ptr + 118784), 6U) == null)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 110592;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 5 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 1)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 172032;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 5 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 2)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 172032;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 5 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 3)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 172032;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 5 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 4)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 172032;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 5 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 5)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 172032;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 1)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 126960;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 2)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 126960;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 3)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 126960;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 4)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 126960;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 5)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 126960;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 6)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 126960;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 7)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 126960;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 7 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 1)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 114688;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 7 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 2)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 114688;
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 7 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 3)
                                    {
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 114688;
                                    }
                                    else
                                    {
                                        if (*(*(ref _Module.struct123_0 + int_16 * 4)) != 7 || *(*(ref _Module.struct123_0 + int_16 * 4) + 2) != 4)
                                        {

                                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                            MessageBox.Show("Drive Key not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                            return 0;
                                        }
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = 114688;
                                    }
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 280) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 312];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 281) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 2796];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 282) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 1858];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 283) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 1664];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 284) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 3789];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 285) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 2868];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 286) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 2111];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 287) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 1829];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 288) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 1322];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 289) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 513];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 290) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 2527];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 291) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 35];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 292) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 1184];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 293) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 1434];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 294) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 1022];
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 295) = ptr[*(*(ref _Module.struct123_0 + int_16 * 4) + 296) + 3913];
                                    if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 5 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 2)
                                    {
                                        this.method_79(int_16);
                                    }
                                    if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 5 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 3)
                                    {
                                        this.method_80(int_16);
                                    }
                                    if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 5 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 5)
                                    {
                                        this.method_81(int_16);
                                    }
                                    if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 1)
                                    {
                                        this.method_34(ptr + 126960, *(ref _Module.struct123_0 + int_16 * 4) + 280);
                                    }
                                    if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 2)
                                    {
                                        this.method_34(ptr + 126960, *(ref _Module.struct123_0 + int_16 * 4) + 280);
                                    }
                                    if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 3)
                                    {
                                        this.method_34(ptr + 126960, *(ref _Module.struct123_0 + int_16 * 4) + 280);
                                    }
                                    if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 4)
                                    {
                                        this.method_34(ptr + 126960, *(ref _Module.struct123_0 + int_16 * 4) + 280);
                                    }
                                    if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 5)
                                    {
                                        this.method_34(ptr + 126960, *(ref _Module.struct123_0 + int_16 * 4) + 280);
                                    }
                                    if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 6)
                                    {
                                        this.method_34(ptr + 126960, *(ref _Module.struct123_0 + int_16 * 4) + 280);
                                    }
                                    if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 7)
                                    {
                                        this.method_34(ptr + 126960, *(ref _Module.struct123_0 + int_16 * 4) + 280);
                                    }
                                    if (_Module.memcmp((void*)(&struct8), (void*)(ptr + 81888), 18U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct0_1), 17U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct7), (void*)(ptr + 81888), 18U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct0_2), 17U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct9), (void*)(ptr + 81888), 18U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct75_0), 32U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct11), (void*)(ptr + 81888), 18U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct75_1), 32U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct10), (void*)(ptr + 81888), 18U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct75_2), 32U);
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 7 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 1)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct7_4), 9U);
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 7 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 2)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct7_4), 9U);
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 7 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 3)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct7_4), 9U);
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 7 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 4)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct7_4), 9U);
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 7 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 5)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct7_4), 9U);
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 7 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 6)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct7_4), 9U);
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 7 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 7)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct7_4), 9U);
                                    }
                                    else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 7 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) == 8)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct7_4), 9U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct30), (void*)(ptr + 126976), 16U) == null)
                                    {
                                        if (_Module.memcmp((void*)(&struct31), (void*)(ptr + 251056), 16U) == null)
                                        {

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct74_0), 10U);
                                        }
                                        else if (_Module.memcmp((void*)(&struct32), (void*)(ptr + 251056), 16U) == null)
                                        {

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct65_2), 14U);
                                            if (ptr[112435] == 178)
                                            {

                                                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct65_3), 14U);
                                                if (ptr[251104] == 105)
                                                {

                                                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct65_4), 14U);
                                                    if (ptr[127900] == 80)
                                                    {

                                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct65_5), 14U);
                                                    }
                                                }
                                                if (ptr[249856] == 74)
                                                {

                                                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct65_6), 14U);
                                                }
                                            }
                                            if (ptr[112275] == 58)
                                            {

                                                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct65_7), 14U);
                                            }
                                        }
                                        else if (_Module.memcmp((void*)(&struct33), (void*)(ptr + 251056), 16U) == null)
                                        {

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct22_4), 7U);
                                        }
                                    }
                                    else if (_Module.memcmp((void*)(&struct12), (void*)(ptr + 81888), 18U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct13), (void*)(ptr + 81888), 18U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct14), (void*)(ptr + 81888), 18U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct15), (void*)(ptr + 81888), 18U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct16), (void*)(ptr + 81888), 18U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct17), (void*)(ptr + 81888), 18U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct18), (void*)(ptr + 81888), 18U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct34), (void*)(ptr + 148448), 16U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct22_4), 7U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct35), (void*)(ptr + 148448), 16U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                                    }
                                    else if (_Module.memcmp((void*)(&struct27), (void*)(ptr + 148448), 16U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct72_4), 11U);
                                        if (ptr[195959] == 247 && ptr[195960] == 83)
                                        {

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct15_4), 12U);
                                        }
                                        if (ptr[196079] == 255 && ptr[196080] == 208)
                                        {

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct65_8), 14U);
                                        }
                                        if (ptr[258235] == 18 && ptr[258236] == 190)
                                        {

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct65_6), 14U);
                                        }
                                        if (ptr[185719] == 118 && ptr[185720] == 251)
                                        {

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct65_7), 14U);
                                        }
                                        if (ptr[184541] == 16 && ptr[184542] == 137)
                                        {

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct65_7), 14U);
                                        }
                                    }
                                    if (_Module.memcmp(*(ref _Module.struct123_0 + 4) + 2348, (void*)(&_Module.struct74_0), 10U) == null && *(*(ref _Module.struct123_0 + 4)) == 4)
                                    {

                                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_7), 276U);

                                        _Module.memset(*(ref _Module.struct123_0 + int_16 * 4) + 2316, 0, 32U);
                                        for (int j = 0; j < 20; j++)
                                        {
                                            *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 42)) = ptr[j + 130816];
                                            *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + (j + 20)) = ptr[j + 130816];
                                        }
                                        for (int j = 0; j < 2; j++)
                                        {
                                            *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 38)) = ptr[j + 130856];
                                            *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 40)) = ptr[j + 130892];
                                        }
                                    }
                                    else if (_Module.memcmp(*(ref _Module.struct123_0 + 4) + 2348, (void*)(&_Module.struct22_4), 7U) == null && *(*(ref _Module.struct123_0 + 4)) == 4)
                                    {

                                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_7), 276U);

                                        _Module.memset(*(ref _Module.struct123_0 + int_16 * 4) + 2316, 0, 32U);
                                        for (int j = 0; j < 20; j++)
                                        {
                                            *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 42)) = ptr[j + 130816];
                                            *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + (j + 20)) = ptr[j + 130816];
                                        }
                                        for (int j = 0; j < 2; j++)
                                        {
                                            *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 38)) = ptr[j + 130856];
                                            *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 40)) = ptr[j + 130892];
                                        }
                                    }
                                    else if (_Module.memcmp((void*)(&_Module.struct47_8), (void*)(ptr + 81408), 276U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_3), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_8), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_0), 180U);
                                    }
                                    else if (_Module.memcmp((void*)(&_Module.struct47_6), (void*)(ptr + 81408), 276U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_4), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_11), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_1), 180U);
                                    }
                                    else if (_Module.memcmp((void*)(&_Module.struct47_1), (void*)(ptr + 81408), 276U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_22), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_34), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_22), 180U);
                                    }
                                    else if (_Module.memcmp((void*)(&_Module.struct47_5), (void*)(ptr + 81408), 276U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_23), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_25), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_9), 180U);
                                    }
                                    else if (_Module.memcmp((void*)(&_Module.struct47_2), (void*)(ptr + 81408), 276U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_5), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_36), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_23), 180U);
                                    }
                                    else if (_Module.memcmp((void*)(&_Module.struct47_0), (void*)(ptr + 81408), 276U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_6), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_15), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_17), 180U);
                                    }
                                    else if (_Module.memcmp((void*)(&_Module.struct47_10), (void*)(ptr + 81408), 276U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_7), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_2), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_20), 180U);
                                    }
                                    else if (_Module.memcmp((void*)(&_Module.struct47_4), (void*)(ptr + 81408), 276U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_8), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_1), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_25), 180U);
                                    }
                                    else if (_Module.memcmp((void*)(&_Module.struct47_3), (void*)(ptr + 81408), 276U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_9), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_29), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_10), 180U);
                                    }
                                    else if (_Module.memcmp((void*)(&_Module.struct47_12), (void*)(ptr + 81408), 276U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_2), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_27), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_7), 180U);
                                    }
                                    else if (_Module.memcmp((void*)(&_Module.struct47_11), (void*)(ptr + 81408), 276U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_10), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_10), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_19), 180U);
                                    }
                                    else if (_Module.memcmp((void*)(&_Module.struct47_9), (void*)(ptr + 81408), 276U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_11), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_3), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_12), 180U);
                                    }
                                    else if (_Module.memcmp((void*)(&_Module.struct47_13), (void*)(ptr + 81408), 276U) == null)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_12), 28U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 568, (void*)(&_Module.struct29_21), 96U);

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 780, (void*)(&_Module.struct46_11), 180U);
                                    }
                                    else
                                    {

                                        _Module.memset(*(ref _Module.struct123_0 + int_16 * 4) + 2316, 0, 32U);
                                        if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 4)
                                        {
                                            for (int j = 0; j < 20; j++)
                                            {
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 42)) = ptr[j + 130816];
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + (j + 20)) = ptr[j + 130816];
                                            }
                                            for (int j = 0; j < 2; j++)
                                            {
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 38)) = ptr[j + 130856];
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 40)) = ptr[j + 130892];
                                            }
                                        }
                                        else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 5)
                                        {
                                            for (int j = 0; j < 20; j++)
                                            {
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 96)) = ptr[j + 130816];
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + (j + 20)) = ptr[j + 130816];
                                            }
                                            for (int j = 0; j < 2; j++)
                                            {
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 52)) = ptr[j + 130856];
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 54)) = ptr[j + 130892];
                                            }
                                        }
                                        else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6)
                                        {
                                            if (*(*(ref _Module.struct123_0 + int_16 * 4) + 2) != 1 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) != 2 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) != 5 && *(*(ref _Module.struct123_0 + int_16 * 4) + 2) != 6)
                                            {
                                                if (*(*(ref _Module.struct123_0 + int_16 * 4) + 2) != 7)
                                                {
                                                    for (int j = 0; j < 20; j++)
                                                    {
                                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 96)) = ptr[j + 261888];
                                                    }
                                                    goto IL_63CF;
                                                }
                                            }
                                            for (int j = 0; j < 20; j++)
                                            {
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 96)) = ptr[j + 261888];
                                            }
                                            for (int j = 0; j < 20; j += 2)
                                            {
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + (j + 20)) = ptr[j + 261889];
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + (j + 21)) = ptr[j + 261888];
                                            }
                                            for (int j = 0; j < 2; j++)
                                            {
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 52)) = ptr[j + 261928];
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 54)) = ptr[j + 261964];
                                            }
                                        }
                                        else if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 7)
                                        {
                                            if (*(*(ref _Module.struct123_0 + int_16 * 4) + 2) != 1)
                                            {
                                                if (*(*(ref _Module.struct123_0 + int_16 * 4) + 2) != 2)
                                                {
                                                    for (int j = 0; j < 20; j++)
                                                    {
                                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 96)) = ptr[j + 130816];
                                                    }
                                                    goto IL_63CF;
                                                }
                                            }
                                            for (int j = 0; j < 20; j++)
                                            {
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 96)) = ptr[j + 130816];
                                            }
                                            for (int j = 0; j < 20; j += 2)
                                            {
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + (j + 20)) = ptr[j + 130817];
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + (j + 21)) = ptr[j + 130816];
                                            }
                                            for (int j = 0; j < 2; j++)
                                            {
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 52)) = ptr[j + 130856];
                                                *(*(ref _Module.struct123_0 + int_16 * 4) + 568 + (j + 54)) = ptr[j + 130892];
                                            }
                                        }
                                    }
                                IL_63CF:

                                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2028, (void*)(ptr + 130816), 224U);
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 2024) = 130816;
                                    if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 6)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2028, (void*)(ptr + 261888), 256U);
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2024) = 261888;
                                    }
                                    if (*(*(ref _Module.struct123_0 + int_16 * 4)) == 7)
                                    {

                                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2028, (void*)(ptr + 130816), 80U);
                                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2024) = 130816;
                                        goto IL_6AFF;
                                    }
                                    goto IL_6AFF;
                                }
                            }
                        }
                        *(*(ref _Module.struct123_0 + int_16 * 4)) = 3;
                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 2;

                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_23), 28U);
                        if (ptr[24544] != 0)
                        {

                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(ptr + 24544), 32U);
                        }
                        else if (_Module.memcmp((void*)(&struct19), (void*)(ptr + 64176), 16U) == null)
                        {
                            if (_Module.memcmp((void*)(&struct21), (void*)(ptr + 91520), 16U) == null)
                            {

                                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct74_0), 10U);
                                if (ptr[118790] == 67)
                                {

                                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct65_1), 14U);
                                }
                                else if (ptr[63096] == 84)
                                {

                                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct65_2), 14U);
                                }
                            }
                            if (_Module.memcmp((void*)(&struct22), (void*)(ptr + 91520), 16U) == null)
                            {

                                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct22_4), 7U);
                            }
                            if (_Module.memcmp((void*)(&struct23), (void*)(ptr + 91520), 16U) == null)
                            {

                                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct72_1), 11U);
                            }
                        }
                        else
                        {

                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                        }
                        for (num5 = 40960U; num5 < 61440U; num5 += 4096U)
                        {
                            if (num5 != 53248U)
                            {
                                if (_Module.memcmp((void*)(ptr + (num5 + 4080U)), (void*)(&struct3), 16U) == null)
                                {
                                    uint num2;
                                    for (num2 = 32U; num2 < 4096U; num2 += 16U)
                                    {
                                        if (_Module.memcmp((void*)(ptr + (num5 + num2 + 16U)), (void*)(&struct3), 16U) == null)
                                        {
                                            *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = (int)(num2 + num5);

                                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(ptr + (num5 + num2)), 16U);
                                            break;
                                        }
                                    }
                                    if (num2 < 4096U)
                                    {
                                        break;
                                    }
                                }
                            }
                        }
                        if (num5 == 61440U)
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            MessageBox.Show("Drive Key not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            return 0;
                        }

                        _Module.memcpy((void*)(&struct43), *(ref _Module.struct123_0 + int_16 * 4) + 780, 180U);
                        for (int j = 20; j < 93; j += 2)
                        {
                            *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + j) = *(ref struct43 + (j + 1));
                            *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + (j + 1)) = *(ref struct43 + j);
                        }

                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2028, (void*)(ptr + 65280), 80U);
                        *(*(ref _Module.struct123_0 + int_16 * 4) + 2024) = 65280;
                        goto IL_6AFF;
                    }
                }
                *(*(ref _Module.struct123_0 + int_16 * 4)) = 3;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2) = 1;

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2284, (void*)(&_Module.struct9_22), 28U);
                if (ptr[24544] != 0)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(ptr + 24544), 32U);
                }
                else if (_Module.memcmp((void*)(&struct19), (void*)(ptr + 64176), 16U) == null)
                {
                    if (_Module.memcmp((void*)(&struct21), (void*)(ptr + 91520), 16U) == null)
                    {

                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct74_0), 10U);
                        if (ptr[118790] == 67)
                        {

                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct65_1), 14U);
                        }
                        else if (ptr[63096] == 84)
                        {

                            _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct65_2), 14U);
                        }
                    }
                    if (_Module.memcmp((void*)(&struct22), (void*)(ptr + 91520), 16U) == null)
                    {

                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct22_4), 7U);
                    }
                    if (_Module.memcmp((void*)(&struct23), (void*)(ptr + 91520), 16U) == null)
                    {

                        _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct72_1), 11U);
                    }
                }
                else
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2348, (void*)(&_Module.struct23_40), 5U);
                }
                for (num5 = 40960U; num5 < 61440U; num5 += 4096U)
                {
                    if (num5 != 53248U)
                    {
                        if (_Module.memcmp((void*)(ptr + (num5 + 4080U)), (void*)(&struct3), 16U) == null)
                        {
                            uint num2;
                            for (num2 = 32U; num2 < 4096U; num2 += 16U)
                            {
                                if (_Module.memcmp((void*)(ptr + (num5 + num2 + 16U)), (void*)(&struct3), 16U) == null)
                                {
                                    *(*(ref _Module.struct123_0 + int_16 * 4) + 296) = (int)(num5 + num2);

                                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(ptr + (num5 + num2)), 16U);
                                    break;
                                }
                            }
                            if (num2 < 4096U)
                            {
                                break;
                            }
                        }
                    }
                }
                if (num5 == 61440U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive Key not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 0;
                }

                _Module.memcpy((void*)(&struct43), *(ref _Module.struct123_0 + int_16 * 4) + 780, 180U);
                for (int j = 20; j < 93; j += 2)
                {
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + j) = *(ref struct43 + (j + 1));
                    *(*(ref _Module.struct123_0 + int_16 * 4) + 780 + (j + 1)) = *(ref struct43 + j);
                }

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 2028, (void*)(ptr + 65280), 80U);
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2024) = 65280;
            }
        IL_6AFF:
            ptr = *(ref _Module.struct123_0 + int_16 * 4) + 2316;
            if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_3), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 1;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 1;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_4), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 1;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 2;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_5), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 1;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_6), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 2;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_7), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 3;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_8), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 4;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_9), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 5;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_2), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 6;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_10), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 7;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_11), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 8;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_12), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 2;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 12;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_22), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 3;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 1;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_23), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 3;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 2;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_13), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 4;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 1;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_14), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 4;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 2;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_15), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 4;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 4;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_16), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 4;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 5;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_17), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 5;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 1;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_18), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 5;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 2;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_19), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 5;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 3;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_20), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 5;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 4;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_25), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 6;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 1;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_28), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 6;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 2;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_26), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 8;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 1;
            }
            else if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2316, (void*)(&_Module.struct9_27), 28U) == null)
            {
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 8;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 2;
            }
            if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 2284, *(ref _Module.struct123_0 + int_16 * 4) + 2316, 28U) == null)
            {

                _Module.memset(*(ref _Module.struct123_0 + int_16 * 4) + 2316, 0, 32U);
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2382) = 0;
                *(*(ref _Module.struct123_0 + int_16 * 4) + 2384) = 0;
            }

            _Module.sprintf((sbyte*)(&struct41), (sbyte*)(&_Module.struct35_124), *(*(ref _Module.struct123_0 + int_16 * 4) + 296));
            string text = new string((sbyte*)(&_Module.struct18_10));
            text += new string((sbyte*)(&struct41));
            if (*(*(ref _Module.struct123_0 + int_16 * 4) + 296) == 114688 || *(*(ref _Module.struct123_0 + int_16 * 4) + 296) == 122880 || *(*(ref _Module.struct123_0 + int_16 * 4) + 296) == 110592 || *(*(ref _Module.struct123_0 + int_16 * 4) + 296) == 106496 || *(*(ref _Module.struct123_0 + int_16 * 4) + 296) == 172032)
            {
                text = new string((sbyte*)(&_Module.struct25_9));
            }
            string text2 = "";

            _Module.sprintf((sbyte*)(&struct41), (sbyte*)(&_Module.struct19_0));
            for (i = 0; i < 16; i++)
            {

                _Module.sprintf((sbyte*)(&struct41), (sbyte*)(&_Module.struct10_20), ref struct41, *(*(ref _Module.struct123_0 + int_16 * 4) + 280 + i));
            }
            text2 += new string((sbyte*)(&struct41));
            this.textBox6.AppendText("Drive key @ " + text + " " + text2 + "\r\n");
            string text3 = "";

            _Module.sprintf((sbyte*)(&struct41), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&struct41), *(ref _Module.struct123_0 + int_16 * 4) + 2284);
            text3 += new string((sbyte*)(&struct41));
            this.textBox6.AppendText("Firmware Osig: [" + text3 + "]" + "\r\n");
            if (*(*(ref _Module.struct123_0 + int_16 * 4) + 2382) != 0)
            {
                string text4 = "";

                _Module.sprintf((sbyte*)(&struct41), (sbyte*)(&_Module.struct19_0));

                _Module.sprintf((sbyte*)(&struct41), *(ref _Module.struct123_0 + int_16 * 4) + 2316);
                text4 += new string((sbyte*)(&struct41));
                this.textBox6.AppendText("Spoofed As:" + "    [" + text4 + "]" + "\r\n");
            }
            return 1;
        }

        // Token: 0x060001EC RID: 492 RVA: 0x0015092C File Offset: 0x0015092C
        private unsafe uint method_32(uint uint_0, int* pInt_0)
        {
            uint num = 0U;
            for (int i = 0; i < 32; i++)
            {
                uint num2 = (uint_0 & 1U << pInt_0[i]) >> pInt_0[i];
                num = (num << 1 | num2);
            }
            return num;
        }

        // Token: 0x060001ED RID: 493 RVA: 0x00112C8C File Offset: 0x00112C8C
        private unsafe byte method_33(byte byte_0, int* pInt_0)
        {
            sbyte b = 0;
            for (int i = 0; i < 8; i++)
            {
                sbyte b2 = (sbyte)(((int)byte_0 & 1 << pInt_0[i]) >> pInt_0[i]);
                b = (sbyte)((int)b << 1 | (int)b2);
            }
            return (byte)b;
        }

        // Token: 0x060001EE RID: 494 RVA: 0x00112CC8 File Offset: 0x00112CC8
        private unsafe void method_34(byte* pByte_0, byte* pByte_1)
        {
            Struct78 @struct = 5;
            *(ref @struct + 4) = 4;
            *(ref @struct + 8) = 1;
            *(ref @struct + 12) = 0;
            *(ref @struct + 16) = 7;
            *(ref @struct + 20) = 6;
            *(ref @struct + 24) = 3;
            *(ref @struct + 28) = 2;
            Struct28 struct2 = 111;
            *(ref struct2 + 1) = 159;
            *(ref struct2 + 2) = 163;
            *(ref struct2 + 3) = 191;
            *(ref struct2 + 4) = 58;
            *(ref struct2 + 5) = 35;
            *(ref struct2 + 6) = 187;
            *(ref struct2 + 7) = 173;
            *(ref struct2 + 8) = 111;
            *(ref struct2 + 9) = 59;
            *(ref struct2 + 10) = 238;
            *(ref struct2 + 11) = 254;
            *(ref struct2 + 12) = 45;
            *(ref struct2 + 13) = 125;
            *(ref struct2 + 14) = 124;
            *(ref struct2 + 15) = 188;
            for (int i = 0; i < 16; i++)
            {
                byte byte_ = pByte_0[i];
                byte b = this.method_33(byte_, (int*)(&@struct));
                pByte_1[i] = (b ^ *(ref struct2 + i));
            }
        }

        // Token: 0x060001EF RID: 495 RVA: 0x00112DC0 File Offset: 0x00112DC0
        private unsafe void method_35(byte* pByte_0, byte* pByte_1)
        {
            Struct78 @struct = 3;
            *(ref @struct + 4) = 2;
            *(ref @struct + 8) = 7;
            *(ref @struct + 12) = 6;
            *(ref @struct + 16) = 1;
            *(ref @struct + 20) = 0;
            *(ref @struct + 24) = 5;
            *(ref @struct + 28) = 4;
            Struct28 struct2 = 111;
            *(ref struct2 + 1) = 159;
            *(ref struct2 + 2) = 163;
            *(ref struct2 + 3) = 191;
            *(ref struct2 + 4) = 58;
            *(ref struct2 + 5) = 35;
            *(ref struct2 + 6) = 187;
            *(ref struct2 + 7) = 173;
            *(ref struct2 + 8) = 111;
            *(ref struct2 + 9) = 59;
            *(ref struct2 + 10) = 238;
            *(ref struct2 + 11) = 254;
            *(ref struct2 + 12) = 45;
            *(ref struct2 + 13) = 125;
            *(ref struct2 + 14) = 124;
            *(ref struct2 + 15) = 188;
            for (int i = 0; i < 16; i++)
            {
                byte byte_ = pByte_0[i] ^ *(ref struct2 + i);
                byte b = this.method_33(byte_, (int*)(&@struct));
                pByte_1[i] = b;
            }
        }

        // Token: 0x060001F0 RID: 496 RVA: 0x00112EB8 File Offset: 0x00112EB8
        private unsafe int method_36(string string_25, int int_16)
        {
            string text = new string((sbyte*)(&_Module.struct19_0));
            int num = 1;
            if (int_16 == 5)
            {
                int_16 = 0;
                num = 0;
            }

            _Module.memset(*(ref _Module.struct123_0 + int_16 * 4), 0, 2392U);
            Struct68 @struct;

            _Module.memset((void*)(&@struct), 0, 260U);
            string text2 = new string((sbyte*)(&_Module.struct19_0));
            text2 = Path.GetFullPath(string_25);
            void* ptr = null;
            IntPtr intPtr = Marshal.StringToHGlobalAnsi(text2);
            IntPtr value = intPtr;
            ptr = (void*)value;
            int result;
            try
            {

                _Module.memcpy((void*)(&@struct), (void*)ptr, 260U);
                goto IL_C1;
            }
            catch (Exception ex)
            {
                string message = ex.Message;
                if (_Module.memcmp((void*)(&@struct), (void*)ptr, _Module.strlen((sbyte*)(&@struct))) == null)
                {
                    goto IL_C1;
                }
                this.textBox6.AppendText("Debug:: Memcpy failed" + "\r\n");
                result = 0;
            }
            return result;
        IL_C1:

            _Module.GetLongPathNameA((sbyte*)(&@struct), *(ref _Module.struct123_0 + int_16 * 4) + 300, 260);

            _Module.memcpy((void*)(&@struct), *(ref _Module.struct123_0 + int_16 * 4) + 300, 260U);
            text2 = Path.GetFileName(new string((sbyte*)(&@struct)));
            ptr = null;
            IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(text2);
            IntPtr value2 = intPtr2;
            ptr = (void*)value2;
            if (*(ref _Module.struct123_0 + int_16 * 4) + 4 == 0)
            {
                this.textBox6.AppendText("Debug:: Gotcha 2" + text2 + "\r\n");
            }
            int result2;
            try
            {

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 4, (void*)ptr, 260U);
                goto IL_1BD;
            }
            catch (Exception ex2)
            {
                string message2 = ex2.Message;
                if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 4, (void*)ptr, _Module.strlen(ref _Module.struct121_0 + int_16 * 2392 + 4)) == null)
                {
                    goto IL_1BD;
                }
                this.textBox6.AppendText("Debug:: Memcpy failed" + "\r\n");
                result2 = 0;
            }
            return result2;
        IL_1BD:
            this.textBox6.AppendText("Loading firmware file " + new string((sbyte*)(&@struct)) + "\r\n");
            GStruct93 gstruct;

            _Module.smethod_111(ref gstruct);
            int result3;
            try
            {
                GStruct19 gstruct2;
                GStruct19* pGstruct19_ = _Module.smethod_91(ref gstruct2, (sbyte*)(&@struct));
                GStruct19 gstruct3;

                _Module.smethod_114(ref gstruct, &gstruct3, (GStruct19*)pGstruct19_);
                try
                {
                    GStruct19 gstruct4;
                    GStruct19* pGstruct19_2 = _Module.smethod_91(ref gstruct4, (sbyte*)(&@struct));
                    Struct28 struct2;

                    _Module.smethod_116(ref gstruct, (GStruct19*)pGstruct19_2, (byte*)(&struct2));

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 264, (void*)(&struct2), 16U);
                    text = new string(_Module.smethod_94(ref gstruct3));
                    this.textBox6.AppendText("MD5 hash:  " + text + "\r\n");
                    this.method_45(text);
                    this.method_44(*(ref _Module.struct123_0 + int_16 * 4) + 300, int_16);
                    int num2 = this.method_31(int_16);
                    if (num2 == 2)
                    {
                        num2 = this.method_31(int_16);
                    }
                    if (num2 != 3)
                    {
                        goto IL_34F;
                    }
                    if (int_16 != 0)
                    {
                        goto IL_2F6;
                    }
                    this.method_40();
                    this.method_39();
                    this.tabControl5.SelectedTab = this.Firmtools;
                    result3 = 0;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct3));
                    throw;
                }

                _Module.smethod_92(ref gstruct3);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return result3;
            int result4;
            try
            {
                GStruct19 gstruct3;
                try
                {
                IL_2F6:
                    if (int_16 != 1)
                    {
                        goto IL_34F;
                    }
                    this.method_43();
                    this.method_42();
                    this.tabControl5.SelectedTab = this.Firmtools;
                    result4 = 0;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct3));
                    throw;
                }

                _Module.smethod_92(ref gstruct3);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return result4;
            int result5;
            try
            {
                GStruct19 gstruct3;
                try
                {
                IL_34F:
                    int num2;
                    if (num2 != 0)
                    {
                        goto IL_3B8;
                    }
                    if (int_16 == 0)
                    {
                        this.method_40();
                    }
                    if (int_16 == 1)
                    {
                        this.method_43();
                    }
                    this.textBox6.AppendText("Parse Failed !" + "\r\n\r\n");
                    result5 = 0;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct3));
                    throw;
                }

                _Module.smethod_92(ref gstruct3);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return result5;
            int result6;
            try
            {
                GStruct19 gstruct3;
                try
                {
                IL_3B8:
                    this.string_0 = "";
                    this.method_7(*(ref _Module.struct123_0 + int_16 * 4) + 2348);
                    this.textBox6.AppendText("Firmware is:  " + this.string_0 + "\r\n");
                    if (int_16 == 0)
                    {
                        this.method_40();
                        this.method_38();
                        if (*_Module.struct123_0 == 4 && num == 1)
                        {
                            this.method_48();
                        }
                        if (num == 1)
                        {
                            this.tabControl5.SelectedTab = this.Firmtools;
                            if (this.method_49() == 1)
                            {
                                this.method_46();
                                this.method_47();
                                this.method_41();
                            }
                        }
                    }
                    else if (int_16 == 1)
                    {
                        this.method_43();
                        this.method_41();
                    }
                    if (*_Module.struct123_0 != 0 && *(*(ref _Module.struct123_0 + 4)) != 0)
                    {
                        this.button6.Enabled = true;
                    }
                    this.tabControl5.SelectedTab = this.Firmtools;
                    result6 = 1;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct3));
                    throw;
                }

                _Module.smethod_92(ref gstruct3);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return result6;
        }

        // Token: 0x060001F1 RID: 497 RVA: 0x00113488 File Offset: 0x00113488
        private unsafe int method_37(string string_25, int int_16, byte* pByte_0)
        {
            int num = 1;
            if (int_16 == 5)
            {
                int_16 = 0;
                num = 0;
            }
            this.textBox6.AppendText("Loading firmware from buffer" + "\r\n");

            _Module.memset(*(ref _Module.struct123_0 + int_16 * 4), 0, 2392U);
            Struct68 @struct;

            _Module.memset((void*)(&@struct), 0, 260U);
            if (string.Compare(string_25, "") != 0)
            {
                string text = Path.GetFullPath(string_25);
                void* ptr = null;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                IntPtr value = intPtr;
                ptr = (void*)value;
                int result;
                try
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 300, (void*)ptr, 260U);
                    goto IL_ED;
                }
                catch (Exception ex)
                {
                    string message = ex.Message;
                    if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 300, (void*)ptr, _Module.strlen((sbyte*)(&@struct))) == null)
                    {
                        goto IL_ED;
                    }
                    this.textBox6.AppendText("Debug:: Memcpy failed" + "\r\n");
                    result = 0;
                }
                return result;
            IL_ED:

                _Module.memcpy((void*)(&@struct), *(ref _Module.struct123_0 + int_16 * 4) + 300, 260U);
                text = Path.GetFileName(string_25);
                ptr = null;
                IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(text);
                IntPtr value2 = intPtr2;
                ptr = (void*)value2;
                if (*(ref _Module.struct123_0 + int_16 * 4) + 4 == 0)
                {
                    this.textBox6.AppendText("Debug:: Gotcha 2" + text + "\r\n");
                }
                int result2;
                try
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 4, (void*)ptr, 260U);
                    goto IL_1C6;
                }
                catch (Exception ex2)
                {
                    string message2 = ex2.Message;
                    if (_Module.memcmp(*(ref _Module.struct123_0 + int_16 * 4) + 4, (void*)ptr, _Module.strlen(ref _Module.struct121_0 + int_16 * 2392 + 4)) == null)
                    {
                        goto IL_1C6;
                    }
                    this.textBox6.AppendText("Debug:: Memcpy failed" + "\r\n");
                    result2 = 0;
                }
                return result2;
            }
        IL_1C6:

            _Module.memcpy(*(ref _Module.struct121_0 + int_16 * 2392 + 2388), (void*)pByte_0, 262144U);
            int num2 = this.method_31(int_16);
            if (num2 == 3)
            {
                if (int_16 == 0)
                {
                    this.method_40();
                    this.method_39();
                    this.tabControl5.SelectedTab = this.Firmtools;
                    return 0;
                }
                if (int_16 == 1)
                {
                    this.method_43();
                    this.method_42();
                    this.tabControl5.SelectedTab = this.Firmtools;
                    return 0;
                }
            }
            int result3;
            if (num2 == 0)
            {
                if (int_16 == 0)
                {
                    this.method_40();
                }
                if (int_16 == 1)
                {
                    this.method_43();
                }
                this.textBox6.AppendText("Parse Failed !" + "\r\n\r\n");
                result3 = 0;
            }
            else
            {
                this.string_0 = "";
                this.method_7(*(ref _Module.struct123_0 + int_16 * 4) + 2348);
                this.textBox6.AppendText("Firmware is:  " + this.string_0 + "\r\n");
                if (int_16 == 0)
                {
                    this.method_40();
                    this.method_38();
                    if (!this.bool_4)
                    {
                        this.method_27();
                    }
                    if (*_Module.struct123_0 == 4)
                    {
                        this.method_48();
                    }
                    if (num == 1)
                    {
                        this.tabControl5.SelectedTab = this.Firmtools;
                        if (this.method_49() == 1)
                        {
                            this.method_46();
                            this.method_47();
                            this.method_41();
                        }
                    }
                }
                else if (int_16 == 1)
                {
                    this.method_43();
                    this.method_41();
                }
                if (*_Module.struct123_0 != 0 && *(*(ref _Module.struct123_0 + 4)) != 0)
                {
                    this.button6.Enabled = true;
                }
                this.tabControl5.SelectedTab = this.Firmtools;
                result3 = 1;
            }
            return result3;
        }

        // Token: 0x060001F2 RID: 498 RVA: 0x003BFDD4 File Offset: 0x00307DD4
        private unsafe void method_38()
        {
            Struct68 @struct = 0;
            initblk(ref @struct + 1, 0, 259);
            if (*_Module.struct123_0 == *(_Module.struct123_0 + 2382) && *(_Module.struct123_0 + 2) == *(_Module.struct123_0 + 2384))
            {

                _Module.memset(_Module.struct123_0 + 2316, 0, 28U);
                *(_Module.struct123_0 + 2382) = 0;
                *(_Module.struct123_0 + 2384) = 0;
            }
            string str = new string((sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_124), *(_Module.struct123_0 + 296));
            this.label37.Text = str + new string((sbyte*)(&@struct));
            if (*(_Module.struct123_0 + 296) == 114688 || *(_Module.struct123_0 + 296) == 122880 || *(_Module.struct123_0 + 296) == 106496 || *(_Module.struct123_0 + 296) == 110592 || *(_Module.struct123_0 + 296) == 172032)
            {
                this.label37.Text = "n/a";
            }
            this.label38.Text = this.label37.Text;
            string str2 = "";

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));
            for (int i = 0; i < 16; i++)
            {

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct10_20), ref @struct, *(_Module.struct123_0 + 280 + i));
            }
            this.textBox9.Text = str2 + new string((sbyte*)(&@struct));
            this.textBox3.Text = this.textBox9.Text;
            string str3 = "";

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_125), _Module.struct123_0 + 2284);
            this.label44.Text = str3 + new string((sbyte*)(&@struct));
            this.label45.Text = this.label44.Text;
            if (*_Module.struct123_0 == 2)
            {
                string str4 = "";

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct10_21), *(_Module.struct123_0 + 2020));
                this.label101.Text = str4 + new string((sbyte*)(&@struct));
                this.label128.Text = this.label101.Text;
            }
            string str5 = "";

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_125), _Module.struct123_0 + 2316);
            this.label40.Text = str5 + new string((sbyte*)(&@struct));
            this.label39.Text = this.label40.Text;
            if (*(_Module.struct123_0 + 2384) == 0)
            {
                this.label42.Visible = false;
                this.label41.Visible = false;
                this.label40.Visible = false;
                this.label39.Visible = false;
            }
            else
            {
                this.label42.Visible = true;
                this.label41.Visible = true;
                this.label40.Visible = true;
                this.label39.Visible = true;
            }

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), _Module.struct123_0 + 300);
            this.textBox15.Text = str + new string((sbyte*)(&@struct));
            this.textBox16.Text = this.textBox15.Text;
            if (*_Module.struct123_0 == 1)
            {
                this.label6.Text = "Samsung";
                this.label7.Text = "TS-H943A";
                if (*(_Module.struct123_0 + 2) == 1)
                {
                    this.label8.Text = "MS25";
                }
                else if (*(_Module.struct123_0 + 2) == 2)
                {
                    this.label8.Text = "MS28";
                }
            }
            else if (*_Module.struct123_0 == 2)
            {
                this.label6.Text = "Hitachi";
                this.label7.Text = "GDR3120L";
                if (*(_Module.struct123_0 + 2) == 1)
                {
                    this.label8.Text = "0032";
                }
                else if (*(_Module.struct123_0 + 2) == 2)
                {
                    this.label8.Text = "0036";
                }
                else if (*(_Module.struct123_0 + 2) == 3)
                {
                    this.label8.Text = "0040";
                }
                else if (*(_Module.struct123_0 + 2) == 4)
                {
                    this.label8.Text = "0046";
                }
                else if (*(_Module.struct123_0 + 2) == 5)
                {
                    this.label8.Text = "0047";
                }
                else if (*(_Module.struct123_0 + 2) == 6)
                {
                    this.label8.Text = "0058";
                }
                else if (*(_Module.struct123_0 + 2) == 7)
                {
                    this.label8.Text = "0059";
                }
                else if (*(_Module.struct123_0 + 2) == 8)
                {
                    this.label8.Text = "0078";
                }
                else if (*(_Module.struct123_0 + 2) == 9)
                {
                    this.label8.Text = "0078";
                }
                else if (*(_Module.struct123_0 + 2) == 10)
                {
                    this.label8.Text = "0078";
                }
                else if (*(_Module.struct123_0 + 2) == 11)
                {
                    this.label8.Text = "0078";
                }
                else if (*(_Module.struct123_0 + 2) == 12)
                {
                    this.label8.Text = "0079";
                }
                else if (*(_Module.struct123_0 + 2) == 13)
                {
                    this.label8.Text = "0079";
                }
                else if (*(_Module.struct123_0 + 2) == 14)
                {
                    this.label8.Text = "0079";
                }
                else if (*(_Module.struct123_0 + 2) == 15)
                {
                    this.label8.Text = "0079";
                }
            }
            else if (*_Module.struct123_0 == 3)
            {
                this.label6.Text = "Benq";
                this.label7.Text = "VAD6038";
                if (*(_Module.struct123_0 + 2) == 1)
                {
                    this.label8.Text = "62430C";
                }
                else if (*(_Module.struct123_0 + 2) == 2)
                {
                    this.label8.Text = "64930C";
                }
                else if (*(_Module.struct123_0 + 2) == 3)
                {
                    this.label8.Text = "04421C";
                }
            }
            else if (*_Module.struct123_0 == 4)
            {
                this.label6.Text = "Lite-On";
                this.label7.Text = "DG-16D2S";
                if (*(_Module.struct123_0 + 2) == 1)
                {
                    this.label8.Text = "74850C";
                }
                else if (*(_Module.struct123_0 + 2) == 2)
                {
                    this.label8.Text = "83850C";
                }
                else if (*(_Module.struct123_0 + 2) == 3)
                {
                    this.label8.Text = "83850Cv2";
                }
                else if (*(_Module.struct123_0 + 2) == 4)
                {
                    this.label8.Text = "93450C";
                }
                else if (*(_Module.struct123_0 + 2) == 5)
                {
                    this.label8.Text = "02510C";
                }
            }
            else if (*_Module.struct123_0 == 5)
            {
                this.label6.Text = "Lite-On";
                this.label7.Text = "DG-16D4S";
                if (*(_Module.struct123_0 + 2) == 1)
                {
                    this.label8.Text = "9504";
                }
                if (*(_Module.struct123_0 + 2) == 2)
                {
                    this.label8.Text = "0225";
                }
                if (*(_Module.struct123_0 + 2) == 3)
                {
                    this.label8.Text = "0401";
                }
                if (*(_Module.struct123_0 + 2) == 4)
                {
                    this.label8.Text = "0272";
                }
                if (*(_Module.struct123_0 + 2) == 5)
                {
                    this.label8.Text = "1071";
                }
            }
            else if (*_Module.struct123_0 == 6)
            {
                this.label6.Text = "Lite-On";
                this.label7.Text = "DG-16D5S";
                if (*(_Module.struct123_0 + 2) == 1)
                {
                    this.label8.Text = "1175";
                }
                if (*(_Module.struct123_0 + 2) == 2)
                {
                    this.label8.Text = "1532";
                }
                if (*(_Module.struct123_0 + 2) == 3)
                {
                    this.label8.Text = "0500";
                }
                if (*(_Module.struct123_0 + 2) == 4)
                {
                    this.label8.Text = "0502";
                }
                if (*(_Module.struct123_0 + 2) == 5)
                {
                    this.label8.Text = "0225";
                }
                if (*(_Module.struct123_0 + 2) == 6)
                {
                    this.label8.Text = "0401";
                }
                if (*(_Module.struct123_0 + 2) == 7)
                {
                    this.label8.Text = "1071";
                }
            }
            else if (*_Module.struct123_0 == 7)
            {
                this.label6.Text = "Xecuter";
                this.label7.Text = "LTU2";
                if (*(_Module.struct123_0 + 2) == 1)
                {
                    this.label8.Text = "1175";
                }
                if (*(_Module.struct123_0 + 2) == 2)
                {
                    this.label8.Text = "1532";
                }
                if (*(_Module.struct123_0 + 2) == 3)
                {
                    this.label8.Text = "0500";
                }
                if (*(_Module.struct123_0 + 2) == 4)
                {
                    this.label8.Text = "0502";
                }
                if (*(_Module.struct123_0 + 2) == 5)
                {
                    this.label8.Text = "0272";
                }
                if (*(_Module.struct123_0 + 2) == 6)
                {
                    this.label8.Text = "0225";
                }
                if (*(_Module.struct123_0 + 2) == 7)
                {
                    this.label8.Text = "0401";
                }
                if (*(_Module.struct123_0 + 2) == 8)
                {
                    this.label8.Text = "1071";
                }
            }
            this.label26.Text = this.label6.Text;
            this.label25.Text = this.label7.Text;
            this.label24.Text = this.label8.Text;
            this.string_0 = "";
            this.method_7(_Module.struct123_0 + 2348);
            this.label16.Text = this.string_0;
            this.label22.Text = this.label16.Text;
            this.string_0 = "";
            this.method_5(_Module.struct123_0 + 568, 96U, 0U);
            this.textBox7.Text = this.string_0;
            if (*_Module.struct123_0 == 6 || *_Module.struct123_0 == 5 || *_Module.struct123_0 == 7)
            {
                this.string_0 = "";
                this.method_5(_Module.struct123_0 + 568, 116U, 0U);
                this.textBox7.Text = this.string_0;
            }
            this.string_0 = "";
            this.method_5(_Module.struct123_0 + 780, 180U, 0U);
            this.textBox10.Text = this.string_0;
            this.string_0 = "";
            if (*_Module.struct123_0 != 3)
            {
                if (*_Module.struct123_0 != 4)
                {
                    if (*_Module.struct123_0 == 5)
                    {
                        this.method_5(_Module.struct123_0 + 2028, 224U, 0U);
                        goto IL_C60;
                    }
                    if (*_Module.struct123_0 == 6)
                    {
                        this.method_5(_Module.struct123_0 + 2028, 96U, 0U);
                        goto IL_C60;
                    }
                    if (*_Module.struct123_0 == 7)
                    {
                        this.method_5(_Module.struct123_0 + 2028, 96U, 0U);
                        goto IL_C60;
                    }
                    if (*_Module.struct123_0 == 2)
                    {
                        this.method_5(_Module.struct123_0 + 2028, 20U, 0U);
                        goto IL_C60;
                    }
                    goto IL_C60;
                }
            }
            this.method_5(_Module.struct123_0 + 2028, 80U, 0U);
        IL_C60:
            this.textBox12.Text = this.string_0;
            this.DumpDrive.Enabled = true;
            this.menuItem_6.Enabled = true;
            this.menuItem_7.Enabled = true;
            this.menuItem_13.Enabled = true;
            this.menuItem_19.Enabled = true;
            this.menuItem_33.Enabled = true;
        }

        // Token: 0x060001F3 RID: 499 RVA: 0x001144D0 File Offset: 0x001144D0
        private unsafe void method_39()
        {
            Struct68 @struct = 0;
            initblk(ref @struct + 1, 0, 259);
            Struct71 struct2 = 0;
            initblk(ref struct2 + 1, 0, 15);
            Struct71 struct3 = 0;
            initblk(ref struct3 + 1, 0, 15);
            string str = "";

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), _Module.struct123_0 + 2284);
            this.label44.Text = str + new string((sbyte*)(&@struct));
            this.label45.Text = this.label44.Text;
            string str2 = "";

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), _Module.struct123_0 + 300);
            this.textBox15.Text = str2 + new string((sbyte*)(&@struct));
            this.textBox16.Text = this.textBox15.Text;
            this.label6.Text = "Samsung";
            this.label26.Text = this.label6.Text;
            string str3 = "";

            _Module.memcpy((void*)(&struct2), _Module.struct123_0 + 2300, 8U);

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), ref struct2);
            this.label7.Text = str3 + new string((sbyte*)(&@struct));
            this.label25.Text = this.label7.Text;
            string str4 = "";

            _Module.memcpy((void*)(&struct3), _Module.struct123_0 + 2308, 4U);

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), ref struct3);
            this.label8.Text = str4 + new string((sbyte*)(&@struct));
            this.label24.Text = this.label8.Text;
            this.string_0 = "";
            this.method_7(_Module.struct123_0 + 2348);
            this.label16.Text = this.string_0;
            this.label22.Text = this.label16.Text;
            this.string_0 = "";
            this.method_5(_Module.struct123_0 + 568, 96U, 0U);
            this.textBox7.Text = this.string_0;
            this.string_0 = "";
            this.method_5(_Module.struct123_0 + 780, 180U, 0U);
            this.textBox10.Text = this.string_0;
            this.menuItem_6.Enabled = true;
        }

        // Token: 0x060001F4 RID: 500 RVA: 0x00114768 File Offset: 0x00114768
        private void method_40()
        {
            this.textBox3.Text = "";
            this.textBox7.Text = "";
            this.textBox9.Text = "";
            this.textBox10.Text = "";
            this.textBox12.Text = "";
            this.textBox15.Text = "";
            this.textBox16.Text = "";
            this.label6.Text = "";
            this.label7.Text = "";
            this.label8.Text = "";
            this.label16.Text = "";
            this.label22.Text = "";
            this.label24.Text = "";
            this.label25.Text = "";
            this.label26.Text = "";
            this.label37.Text = "";
            this.label38.Text = "";
            this.label39.Text = "";
            this.label40.Text = "";
            this.label44.Text = "";
            this.label45.Text = "";
            this.label101.Text = "";
            this.label128.Text = "";
            this.button6.Enabled = false;
            this.bool_10 = false;
            this.DumpDrive.Enabled = false;
            this.menuItem_6.Enabled = false;
            this.menuItem_7.Enabled = false;
            this.menuItem_13.Enabled = false;
            this.menuItem_19.Enabled = false;
            this.menuItem_33.Enabled = false;
        }

        // Token: 0x060001F5 RID: 501 RVA: 0x003C0A9C File Offset: 0x00308A9C
        private unsafe void method_41()
        {
            Struct68 @struct = 0;
            initblk(ref @struct + 1, 0, 259);
            if (*(*(ref _Module.struct123_0 + 4)) == *(*(ref _Module.struct123_0 + 4) + 2382) && *(*(ref _Module.struct123_0 + 4) + 2) == *(*(ref _Module.struct123_0 + 4) + 2384))
            {

                _Module.memset(*(ref _Module.struct123_0 + 4) + 2316, 0, 28U);
                *(*(ref _Module.struct123_0 + 4) + 2382) = 0;
                *(*(ref _Module.struct123_0 + 4) + 2384) = 0;
            }
            string str = new string((sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_124), *(*(ref _Module.struct123_0 + 4) + 296));
            this.label55.Text = str + new string((sbyte*)(&@struct));
            if (*(*(ref _Module.struct123_0 + 4) + 296) == 114688 || *(*(ref _Module.struct123_0 + 4) + 296) == 122880 || *(*(ref _Module.struct123_0 + 4) + 296) == 106496 || *(*(ref _Module.struct123_0 + 4) + 296) == 110592 || *(*(ref _Module.struct123_0 + 4) + 296) == 172032)
            {
                this.label55.Text = "n/a";
            }
            this.label56.Text = this.label55.Text;
            string str2 = "";

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));
            for (int i = 0; i < 16; i++)
            {

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct10_20), ref @struct, *(*(ref _Module.struct123_0 + 4) + 280 + i));
            }
            this.textBox11.Text = str2 + new string((sbyte*)(&@struct));
            this.textBox1.Text = this.textBox11.Text;
            string str3 = "";

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_125), *(ref _Module.struct123_0 + 4) + 2284);
            this.label48.Text = str3 + new string((sbyte*)(&@struct));
            this.label53.Text = this.label48.Text;
            if (*(*(ref _Module.struct123_0 + 4)) == 2)
            {
                string str4 = "";

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct10_21), *(*(ref _Module.struct123_0 + 4) + 2020));
                this.label71.Text = str4 + new string((sbyte*)(&@struct));
                this.label129.Text = this.label71.Text;
            }
            string str5 = "";

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_125), *(ref _Module.struct123_0 + 4) + 2316);
            this.label50.Text = str5 + new string((sbyte*)(&@struct));
            this.label54.Text = this.label50.Text;
            if (*(*(ref _Module.struct123_0 + 4) + 2384) == 0)
            {
                this.label49.Visible = false;
                this.label50.Visible = false;
                this.label54.Visible = false;
                this.label52.Visible = false;
            }
            else
            {
                this.label49.Visible = true;
                this.label50.Visible = true;
                this.label54.Visible = true;
                this.label52.Visible = true;
            }

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), *(ref _Module.struct123_0 + 4) + 300);
            this.textBox17.Text = str + new string((sbyte*)(&@struct));
            this.textBox18.Text = this.textBox17.Text;
            if (*(*(ref _Module.struct123_0 + 4)) == 1)
            {
                this.label11.Text = "Samsung";
                this.label10.Text = "TS-H943A";
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 1)
                {
                    this.label9.Text = "MS25";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 2)
                {
                    this.label9.Text = "MS28";
                }
            }
            else if (*(*(ref _Module.struct123_0 + 4)) == 2)
            {
                this.label11.Text = "Hitachi";
                this.label10.Text = "GDR3120L";
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 1)
                {
                    this.label9.Text = "0032";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 2)
                {
                    this.label9.Text = "0036";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 3)
                {
                    this.label9.Text = "0040";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 4)
                {
                    this.label9.Text = "0046";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 5)
                {
                    this.label9.Text = "0047";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 6)
                {
                    this.label9.Text = "0058";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 7)
                {
                    this.label9.Text = "0059";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 8)
                {
                    this.label9.Text = "0078";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 9)
                {
                    this.label9.Text = "0078";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 10)
                {
                    this.label9.Text = "0078";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 11)
                {
                    this.label9.Text = "0078";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 12)
                {
                    this.label9.Text = "0079";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 13)
                {
                    this.label9.Text = "0079";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 14)
                {
                    this.label9.Text = "0079";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 15)
                {
                    this.label9.Text = "0079";
                }
            }
            else if (*(*(ref _Module.struct123_0 + 4)) == 3)
            {
                this.label11.Text = "Benq";
                this.label10.Text = "VAD6038";
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 1)
                {
                    this.label9.Text = "62430C";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 2)
                {
                    this.label9.Text = "64930C";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 3)
                {
                    this.label9.Text = "04421C";
                }
            }
            else if (*(*(ref _Module.struct123_0 + 4)) == 4)
            {
                this.label11.Text = "Lite-On";
                this.label10.Text = "DG-16D2S";
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 1)
                {
                    this.label9.Text = "74850C";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 2)
                {
                    this.label9.Text = "83850C";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 3)
                {
                    this.label9.Text = "83850Cv2";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 4)
                {
                    this.label9.Text = "93450C";
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 5)
                {
                    this.label9.Text = "02510C";
                }
            }
            else if (*(*(ref _Module.struct123_0 + 4)) == 5)
            {
                this.label11.Text = "Lite-On";
                this.label10.Text = "DG-16D4S";
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 1)
                {
                    this.label9.Text = "9504";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 2)
                {
                    this.label9.Text = "0225";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 3)
                {
                    this.label9.Text = "0401";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 4)
                {
                    this.label9.Text = "0272";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 5)
                {
                    this.label9.Text = "1071";
                }
            }
            else if (*(*(ref _Module.struct123_0 + 4)) == 6)
            {
                this.label11.Text = "Lite-On";
                this.label10.Text = "DG-16D5S";
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 1)
                {
                    this.label9.Text = "1175";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 2)
                {
                    this.label9.Text = "1532";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 3)
                {
                    this.label9.Text = "0500";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 4)
                {
                    this.label9.Text = "0502";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 5)
                {
                    this.label9.Text = "0225";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 6)
                {
                    this.label9.Text = "0401";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 7)
                {
                    this.label9.Text = "1071";
                }
            }
            else if (*(*(ref _Module.struct123_0 + 4)) == 7)
            {
                this.label11.Text = "Xecuter";
                this.label10.Text = "LTU2";
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 1)
                {
                    this.label9.Text = "1175";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 2)
                {
                    this.label9.Text = "1532";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 3)
                {
                    this.label9.Text = "0500";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 4)
                {
                    this.label9.Text = "0502";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 5)
                {
                    this.label9.Text = "0272";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 6)
                {
                    this.label9.Text = "0225";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 7)
                {
                    this.label9.Text = "0401";
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 8)
                {
                    this.label9.Text = "1071";
                }
            }
            this.label32.Text = this.label11.Text;
            this.label31.Text = this.label10.Text;
            this.label30.Text = this.label9.Text;
            this.string_0 = "";
            this.method_7(*(ref _Module.struct123_0 + 4) + 2348);
            this.label17.Text = this.string_0;
            this.label1.Text = this.label17.Text;
            this.string_0 = "";
            this.method_5(*(ref _Module.struct123_0 + 4) + 568, 96U, 0U);
            this.textBox2.Text = this.string_0;
            if (*(*(ref _Module.struct123_0 + 4)) == 6 || *(*(ref _Module.struct123_0 + 4)) == 5 || *(*(ref _Module.struct123_0 + 4)) == 7)
            {
                this.string_0 = "";
                this.method_5(*(ref _Module.struct123_0 + 4) + 568, 116U, 0U);
                this.textBox2.Text = this.string_0;
            }
            this.string_0 = "";
            this.method_5(*(ref _Module.struct123_0 + 4) + 780, 180U, 0U);
            this.textBox4.Text = this.string_0;
            this.string_0 = "";
            if (*(*(ref _Module.struct123_0 + 4)) != 3)
            {
                if (*(*(ref _Module.struct123_0 + 4)) != 4)
                {
                    if (*(*(ref _Module.struct123_0 + 4)) == 5)
                    {
                        this.method_5(*(ref _Module.struct123_0 + 4) + 2028, 224U, 0U);
                        goto IL_D17;
                    }
                    if (*(*(ref _Module.struct123_0 + 4)) == 6)
                    {
                        this.method_5(*(ref _Module.struct123_0 + 4) + 2028, 96U, 0U);
                        goto IL_D17;
                    }
                    if (*(*(ref _Module.struct123_0 + 4)) == 7)
                    {
                        this.method_5(*(ref _Module.struct123_0 + 4) + 2028, 96U, 0U);
                        goto IL_D17;
                    }
                    if (*(*(ref _Module.struct123_0 + 4)) == 2)
                    {
                        this.method_5(*(ref _Module.struct123_0 + 4) + 2028, 20U, 0U);
                        goto IL_D17;
                    }
                    goto IL_D17;
                }
            }
            this.method_5(*(ref _Module.struct123_0 + 4) + 2028, 80U, 0U);
        IL_D17:
            this.textBox13.Text = this.string_0;
            this.button29.Enabled = true;
            this.SaveTarget.Enabled = true;
            this.menuItem_4.Enabled = true;
            if (*(*(ref _Module.struct123_0 + 4)) == 4)
            {
                this.menuItem_11.Enabled = true;
            }
            this.menuItem_20.Enabled = true;
            this.menuItem_32.Enabled = true;
            if (*(*(ref _Module.struct123_0 + 4)) == 6 || *(*(ref _Module.struct123_0 + 4)) == 7)
            {
                this.menuItem_37.Enabled = true;
                this.menuItem_37.Visible = true;
            }
        }

        // Token: 0x060001F6 RID: 502 RVA: 0x001156D0 File Offset: 0x001156D0
        private unsafe void method_42()
        {
            Struct68 @struct = 0;
            initblk(ref @struct + 1, 0, 259);
            Struct71 struct2 = 0;
            initblk(ref struct2 + 1, 0, 15);
            Struct71 struct3 = 0;
            initblk(ref struct3 + 1, 0, 15);
            string str = "";

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), *(ref _Module.struct123_0 + 4) + 2284);
            this.label48.Text = str + new string((sbyte*)(&@struct));
            this.label53.Text = this.label48.Text;
            string str2 = "";

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), *(ref _Module.struct123_0 + 4) + 300);
            this.textBox17.Text = str2 + new string((sbyte*)(&@struct));
            this.textBox18.Text = this.textBox17.Text;
            this.label11.Text = "Samsung";
            this.label32.Text = this.label11.Text;
            string str3 = "";

            _Module.memcpy((void*)(&struct2), *(ref _Module.struct123_0 + 4) + 2300, 8U);

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), ref struct2);
            this.label10.Text = str3 + new string((sbyte*)(&@struct));
            this.label31.Text = this.label10.Text;
            string str4 = "";

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct123_0 + 4) + 2308, 4U);

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), ref struct3);
            this.label9.Text = str4 + new string((sbyte*)(&@struct));
            this.label30.Text = this.label9.Text;
            this.string_0 = "";
            this.method_7(*(ref _Module.struct123_0 + 4) + 2348);
            this.label17.Text = this.string_0;
            this.label1.Text = this.label17.Text;
            this.string_0 = "";
            this.method_5(*(ref _Module.struct123_0 + 4) + 568, 96U, 0U);
            this.textBox2.Text = this.string_0;
            this.string_0 = "";
            this.method_5(*(ref _Module.struct123_0 + 4) + 780, 180U, 0U);
            this.textBox4.Text = this.string_0;
            this.menuItem_4.Enabled = true;
        }

        // Token: 0x060001F7 RID: 503 RVA: 0x00115978 File Offset: 0x00115978
        private void method_43()
        {
            this.textBox1.Text = "";
            this.textBox2.Text = "";
            this.textBox4.Text = "";
            this.textBox11.Text = "";
            this.textBox13.Text = "";
            this.textBox17.Text = "";
            this.textBox18.Text = "";
            this.label1.Text = "";
            this.label9.Text = "";
            this.label10.Text = "";
            this.label11.Text = "";
            this.label17.Text = "";
            this.label30.Text = "";
            this.label31.Text = "";
            this.label32.Text = "";
            this.label48.Text = "";
            this.label50.Text = "";
            this.label53.Text = "";
            this.label54.Text = "";
            this.label55.Text = "";
            this.label56.Text = "";
            this.label71.Text = "";
            this.label129.Text = "";
            this.SaveTarget.Enabled = false;
            this.button6.Enabled = false;
            this.button29.Enabled = false;
            this.menuItem_4.Enabled = false;
            this.menuItem_11.Enabled = false;
            this.menuItem_20.Enabled = false;
            this.menuItem_32.Enabled = false;
            this.menuItem_37.Enabled = false;
            this.menuItem_37.Visible = false;
            this.bool_10 = false;
            this.bool_11 = false;
        }

        // Token: 0x060001F8 RID: 504 RVA: 0x00115B70 File Offset: 0x00115B70
        private unsafe int method_44(sbyte* pSbyte_0, int int_16)
        {
            GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_0, (sbyte*)(&_Module.struct18_4));
            int result;
            if (ptr == null)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("Firmware file not found", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 0;
            }
            else
            {

                _Module.fseek(ptr, 0, 2);
                uint num = _Module.ftell(ptr);

                _Module.rewind(ptr);
                if (num != 262144U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Firmware file must be 256Kb", "Parse Firmware", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);

                    _Module.fclose(ptr);
                    result = 0;
                }
                else if (_Module.fread(*(ref _Module.struct121_0 + int_16 * 2392 + 2388), 262144U, 1U, ptr) != 1)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Firmware file should be 256Kbytes", "Loading File", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);

                    _Module.fclose(ptr);
                    result = 0;
                }
                else
                {

                    _Module.fclose(ptr);
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x060001F9 RID: 505 RVA: 0x00115CB4 File Offset: 0x00115CB4
        private int method_45(string string_25)
        {
            int result;
            if (string.Compare(string_25, "84e8290978447d9363762e57e5414054") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On iXtreme 1.5 rev 3" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "bc0309442c06e442e89f4c55d2c2859f") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On iXtreme 1.5 rev 4" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "d0ff1f977f35d40a57d476ba5957c93b") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On iXtreme 1.5 rev 5" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "499c26f34c3093f13e9ef8d0198f80c8") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On iXtreme 1.5 rev 6" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "a6d4c666c0014cadd0ca51c98cd3c80b") == 0)
            {
                this.textBox6.AppendText("Genuine Benq iXtreme 1.5 Final" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "4bc77f39c4cc65d61b7cdc2574119912") == 0)
            {
                this.textBox6.AppendText("Genuine Sammy iXtreme 1.5 Final" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "d8aaa30797c7680109b395bc3a380d5f") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On iXtreme 1.5 Final" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "933ed9c64d5839c69628059fc1e2806d") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On iXtreme 1.51" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "23f5a368839dfc10dabb8231ba64567a") == 0)
            {
                this.textBox6.AppendText("Genuine Samsung iXtreme 1.6" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "c3a17c9726f4be3cc3e597797caba7f9") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On iXtreme 1.6" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "bc61fac4efd37b69f88dfabe6e104117") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On 83850c iXtreme 1.6" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "f36c85c5bfba325b283417f8643d7c27") == 0)
            {
                this.textBox6.AppendText("Genuine Benq iXtreme 1.6" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "d9b4a4b8c668e28268066ce639e9866e") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On iXtreme 1.61" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "6695c239a716e84de3d6eefe64f9c3a7") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On iXtreme 1.61" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "7f2140e6f44b0d5fc59b4cbac0fc7f8a") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On iXtreme 1.61" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "2f30e817ad4bd1b85743289738fbc1c3") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On iXtreme 1.61" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "b951b7e08650e775886b78a2c1901a08") == 0)
            {
                this.textBox6.AppendText("Genuine iXtreme Lite-Touch" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "187ee5780d863922d49ec1d2ed0d9f48") == 0)
            {
                this.textBox6.AppendText("Genuine iXtreme Lite-Touch" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "7381f964ffef44da7bf94aa1dc067fb2") == 0)
            {
                this.textBox6.AppendText("Genuine iXtreme Lite-Touch" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "a6a01f28f4582afdefb6cf5367912a1d") == 0)
            {
                this.textBox6.AppendText("Genuine iXtreme Lite-Touch" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "b93c95db4fac3ca37c89c727e61c2453") == 0)
            {
                this.textBox6.AppendText("Genuine iXtreme Lite-Touch 1.1" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "3de7ccb1e529ce588d66bbaacbdf353a") == 0)
            {
                this.textBox6.AppendText("Genuine iXtreme Lite-Touch 1.1" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "7eb4e4ceeb720e24e6c1a77e4e2a66ae") == 0)
            {
                this.textBox6.AppendText("Genuine iXtreme Lite-Touch 1.1" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "483ee55c9bbaf9db83331d8c8f6a551d") == 0)
            {
                this.textBox6.AppendText("Genuine iXtreme Lite-Touch 1.1" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "c95fc1cf2f6f35bf1b84ae546cf58b97") == 0)
            {
                this.textBox6.AppendText("Genuine LT-Plus" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "f5ec9fa4b16d624ca71074ac6e6641d9") == 0)
            {
                this.textBox6.AppendText("Genuine LT-Plus" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "4cb38e41d87c204df72a395c6354fc7a") == 0)
            {
                this.textBox6.AppendText("Genuine LT-Plus" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "dc6b675de4c58a353d830f99a4a03d2e") == 0)
            {
                this.textBox6.AppendText("Genuine LT-Plus" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "53786fac70e9c6b895b2e99144c7fb6d") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.1" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "020325ef05290fa80baec9863041a11c") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.1" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "acc8ce739377578df2ca33ba3680ff54") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.1" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "d1671296ac52b8a67838f637f435fa6a") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.1" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "71cfb6569fd42a1d4eb243dbd4d3b159") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.9" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "5b94b528591d1028f6b1a9d7884c7a55") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.91" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "0264149996f783b54629c1598072e50e") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v2.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "d14fe82b96741b7a18e5c1e7adbf0a98") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v3.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "693cfff56a632029f008295b06ce1021") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.9" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "21ea0e6d5c8f04f21f95bfb40ff1ae1e") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.9 (9504 upgrade)" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "bd05e901e072c08a92364ed864395fb3") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.9" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "37d3222c404a1f841584b2cd50a308ad") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.9" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "5a14a34b933602a94f8375f9ce88f803") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.91" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "c51e40b948dfd2591420111c57beca8e") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.91 (9504 upgrade)" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "b161fcb485d1aafa9d9986c82c0f5a20") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.91" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "02e542648c5d42f291e9c2a206c48770") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.91" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "55828ef0e599d07f33698e482c85af19") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.91" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "c3f45b669000bb2d178394fa4164896d") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.92" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "2b4fce3f4da264939858d428971ce45b") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.92 (9504 upgrade)" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "3128442eae48cb5f9ffb0ce9778a3bd0") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.92" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "26c9114d31ff459123fa8af7f50b93e3") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.92" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "92504d007f30c0e6bceeb12a092600be") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.92" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "1012021472620cad9adf1f838497668e") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v2.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "a28aa0c2386925550f05b4b5af62d81b") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v2.0 (9504 upgrade)" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "0270d5174a07385eeb313c8371b547f8") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v2.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "e89c22ad8eecf634a3b27510901999c8") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v2.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "2811f396793a42c2f284c4ac8f9c4dbc") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v2.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "1a38d3a2a6519339599fa1866642c513") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v3.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "db5c70eaaabb53501c2c4f53dce9abfd") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v3.0 (9504 upgrade)" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "faf085ff40fcbedf6a352318d55879c0") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v3.0 (0401 downgrade)" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "87fba52607d01d3c73722f9f818588c9") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v3.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "76b991307ddd5b2af581d0608e671b36") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v3.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "3d1243454d9c6c1cd2760b8ea5f5c648") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v3.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "be5a7720962eb20340d403004717931a") == 0)
            {
                this.textBox6.AppendText("Genuine iXtreme Benq LT" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "c89cc7d1740f421d5d48bd002120571b") == 0)
            {
                this.textBox6.AppendText("Genuine iXtreme Benq LT 1.1" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "26a2add0da187dbf6aebce59fd73a1d2") == 0)
            {
                this.textBox6.AppendText("Genuine iXtreme Benq LT 1.2" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "ef3a351f05699a3ee0ad86d63375725e") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "c45d60fbd68cc642b2235ba12e5aad7d") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.1" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "cf132deb838212288f8b365bd16e9d24") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.9" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "6a146d19c9c52c0933ed737305cb8383") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v1.91" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "847700a6b5f12a88c61cfe31a5514772") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v2.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "8784e0f4ce27941a2a3293c8a5ac85e4") == 0)
            {
                this.textBox6.AppendText("Genuine LT plus v3.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "6f7dd0c34da043f4b5d29828b661bba0") == 0)
            {
                this.textBox6.AppendText("Genuine iXtreme Samsung LT" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "dc3bceed3b58e39133df3e186d1e4271") == 0)
            {
                this.textBox6.AppendText("Genuine LT v1.9" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "9e9ecbed96b490375497e9acef8326ac") == 0)
            {
                this.textBox6.AppendText("Genuine LT v2.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "d66252800c1c072bc612f2f72d1e3c76") == 0)
            {
                this.textBox6.AppendText("Genuine LT v2.01" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "fb7b3d4487cc17c6518b14e57ae82cc2") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On Slim 9504 LT" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "24305e18770955635041fd9221de4710") == 0)
            {
                this.textBox6.AppendText("Genuine Benq iXtreme 1.6 0800" + "\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("0800 f/w should not be used in a console, it is for external use only", "Warning", MessageBoxButtons.OK);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.bool_11 = true;
                result = 0;
            }
            else if (string.Compare(string_25, "83bd1232eb853b00e3f18c7d24b0e3c7") == 0)
            {
                this.textBox6.AppendText("Genuine Samsung iXtreme 1.6 0800" + "\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("0800 f/w should not be used in a console, it is for external use only", "Warning", MessageBoxButtons.OK);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.bool_11 = true;
                result = 0;
            }
            else if (string.Compare(string_25, "bbc6a11e18d0a01842e63bfba6dcba1c") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On iXtreme 1.6 0800" + "\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("0800 f/w should not be used in a console, it is for external use only", "Warning", MessageBoxButtons.OK);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.bool_11 = true;
                result = 0;
            }
            else if (string.Compare(string_25, "777e8c2d89e0f57f891aa6735ed1cc95") == 0)
            {
                this.textBox6.AppendText("Genuine Lite-On LT 0800 v3" + "\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("0800 f/w should not be used in a console, it is for external use only", "Warning", MessageBoxButtons.OK);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.bool_11 = true;
                result = 0;
            }
            else if (string.Compare(string_25, "31b7a19fa0e92c27060a77bb0cf37fcf") == 0)
            {
                this.textBox6.AppendText("Genuine Benq LT 0800 v3" + "\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("0800 f/w should not be used in a console, it is for external use only", "Warning", MessageBoxButtons.OK);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.bool_11 = true;
                result = 0;
            }
            else if (string.Compare(string_25, "17eb69239a0b09774e8048e65f0fec73") == 0)
            {
                this.textBox6.AppendText("Genuine SH-D162C Kreon V1.00" + "\r\n");
                result = 1;
            }
            else if (string.Compare(string_25, "6360057764b8c982ddad06de1c657378") == 0)
            {
                this.textBox6.AppendText("Genuine SH-D162D Kreon V1.00" + "\r\n");
                result = 1;
            }
            else if (string.Compare(string_25, "102564b8bc50918a68a25587e8b281ff") == 0)
            {
                this.textBox6.AppendText("Genuine SH-D163A Kreon V1.00" + "\r\n");
                result = 1;
            }
            else if (string.Compare(string_25, "356331d88a72bd20937dd8ebd1305f5a") == 0)
            {
                this.textBox6.AppendText("Genuine SH-D163B Kreon V1.00" + "\r\n");
                result = 1;
            }
            else if (string.Compare(string_25, "acb3a39456d2dd0e9380d365b4e6b122") == 0)
            {
                this.textBox6.AppendText("Genuine SH-D162C Kreon V0.80" + "\r\n");
                result = 1;
            }
            else if (string.Compare(string_25, "16f38161d1db01ad96da6ec566377d99") == 0)
            {
                this.textBox6.AppendText("Genuine SH-D162C Kreon V0.81" + "\r\n");
                result = 1;
            }
            else if (string.Compare(string_25, "7722d31323e6d5d70b2f28a6755303f8") == 0)
            {
                this.textBox6.AppendText("Genuine LTU v1.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "d354a7c0681302300cfcd7e2e35c0e66") == 0)
            {
                this.textBox6.AppendText("Genuine LTU v1.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "7c66816d5e144af6e638cc5e4ff39c55") == 0)
            {
                this.textBox6.AppendText("Genuine LTU v1.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "5af581cd3c86022c5d1187a8a5cb51dd") == 0)
            {
                this.textBox6.AppendText("Genuine LTU v1.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "b20d3c83f3205c21375d8747d9c40cc8") == 0)
            {
                this.textBox6.AppendText("Genuine LTU v1.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "b2912a15a6f571e5b39d758a10cdd791") == 0)
            {
                this.textBox6.AppendText("Genuine LTU v1.0" + "\r\n");
                result = 0;
            }
            else if (string.Compare(string_25, "9ef0587eaf725808ccd251384b89aef8") == 0)
            {
                this.textBox6.AppendText("Genuine LTU v1.0" + "\r\n");
                result = 0;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        // Token: 0x060001FA RID: 506 RVA: 0x00116E70 File Offset: 0x00116E70
        private unsafe int method_46()
        {
            int result;
            if (*_Module.struct123_0 == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No Source f/w loaded", "Spoof Target", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 0;
            }
            else if (*(*(ref _Module.struct123_0 + 4)) == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No Target f/w loaded", "Spoof Target", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 0;
            }
            else
            {
                this.textBox6.AppendText("Spoofing Target" + "\r\n");
                if (_Module.memcmp(*(ref _Module.struct123_0 + 4) + 280, _Module.struct123_0 + 280, 16U) != null)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + 4) + 280, _Module.struct123_0 + 280, 16U);
                    this.textBox6.AppendText("DVD Key copied to target" + "\r\n");
                }
                else
                {
                    this.textBox6.AppendText("DVD Key already matches" + "\r\n");
                }
                if (*(*(ref _Module.struct123_0 + 4)) == 5)
                {

                    _Module.memcpy(*(ref _Module.struct121_0 + 4780) + 172032, *(ref _Module.struct121_0 + 2388) + 172032, 4096U);
                    this.textBox6.AppendText("Key Sector copied from Source to Target" + "\r\n");
                }
                if (*_Module.struct123_0 == 6)
                {
                    if (*(*(ref _Module.struct123_0 + 4)) == 6)
                    {

                        _Module.memcpy(*(ref _Module.struct121_0 + 4780) + 62464, *(ref _Module.struct121_0 + 2388) + 62464, 3059U);

                        _Module.memcpy(*(ref _Module.struct121_0 + 4780) + 127488, *(ref _Module.struct121_0 + 2388) + 127488, 3572U);

                        _Module.memcpy(*(ref _Module.struct121_0 + 4780) + 193024, *(ref _Module.struct121_0 + 2388) + 193024, 2907U);
                    }
                    if (*(*(ref _Module.struct123_0 + 4)) == 7)
                    {
                        for (int i = 0; i < 3059; i++)
                        {
                            *(*(ref _Module.struct121_0 + 4780) + (i + 186624)) = (*(*(ref _Module.struct121_0 + 2388) + (i + 62464)) ^ *(ref _Module.struct58_0 + i));
                        }
                        for (int i = 0; i < 3572; i++)
                        {
                            *(*(ref _Module.struct121_0 + 4780) + (i + 189683)) = (*(*(ref _Module.struct121_0 + 2388) + (i + 127488)) ^ *(ref _Module.struct56_0 + i));
                        }
                        for (int i = 0; i < 2907; i++)
                        {
                            *(*(ref _Module.struct121_0 + 4780) + (i + 193255)) = (*(*(ref _Module.struct121_0 + 2388) + (i + 193024)) ^ *(ref _Module.struct49_0 + i));
                        }

                        _Module.memcpy(*(ref _Module.struct121_0 + 4780) + 130816, *(ref _Module.struct121_0 + 2388) + 261888, 80U);

                        _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2028, _Module.struct123_0 + 2028, 80U);
                    }
                }
                if (*_Module.struct123_0 == 7)
                {
                    if (*(*(ref _Module.struct123_0 + 4)) == 7)
                    {

                        _Module.memcpy(*(ref _Module.struct121_0 + 4780) + 186624, *(ref _Module.struct121_0 + 2388) + 186624, 9538U);
                    }
                    if (*(*(ref _Module.struct123_0 + 4)) == 6)
                    {
                        for (int i = 0; i < 3059; i++)
                        {
                            *(*(ref _Module.struct121_0 + 4780) + (i + 62464)) = (*(*(ref _Module.struct121_0 + 2388) + (i + 186624)) ^ *(ref _Module.struct58_0 + i));
                        }
                        for (int i = 0; i < 3572; i++)
                        {
                            *(*(ref _Module.struct121_0 + 4780) + (i + 127488)) = (*(*(ref _Module.struct121_0 + 2388) + (i + 189683)) ^ *(ref _Module.struct56_0 + i));
                        }
                        for (int i = 0; i < 2907; i++)
                        {
                            *(*(ref _Module.struct121_0 + 4780) + (i + 193024)) = (*(*(ref _Module.struct121_0 + 2388) + (i + 193255)) ^ *(ref _Module.struct49_0 + i));
                        }

                        _Module.memcpy(*(ref _Module.struct121_0 + 4780) + 261888, *(ref _Module.struct121_0 + 2388) + 130816, 80U);

                        _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2028, _Module.struct123_0 + 2028, 80U);
                    }
                }
                if (*(_Module.struct123_0 + 2382) == 0)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2316, _Module.struct123_0 + 2284, 28U);
                    *(*(ref _Module.struct123_0 + 4) + 2382) = (short)(*_Module.struct123_0);
                    *(*(ref _Module.struct123_0 + 4) + 2384) = (short)(*(_Module.struct123_0 + 2));
                }
                else
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2316, _Module.struct123_0 + 2316, 28U);
                    *(*(ref _Module.struct123_0 + 4) + 2382) = (short)(*(_Module.struct123_0 + 2382));
                    *(*(ref _Module.struct123_0 + 4) + 2384) = (short)(*(_Module.struct123_0 + 2384));
                }
                if (*(*(ref _Module.struct123_0 + 4)) == 4 && _Module.memcmp(*(ref _Module.struct123_0 + 4) + 2348, (void*)(&_Module.struct74_0), 10U) == null)
                {
                    this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
                }
                else if (*(*(ref _Module.struct123_0 + 4)) == 4 && _Module.memcmp(*(ref _Module.struct123_0 + 4) + 2348, (void*)(&_Module.struct22_4), 7U) == null)
                {
                    this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
                }
                else if (*(*(ref _Module.struct123_0 + 4)) == 4 && *(*(ref _Module.struct123_0 + 4) + 2) == 5)
                {
                    this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
                }
                else if (*(*(ref _Module.struct123_0 + 4)) == 5)
                {
                    this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
                }
                else if (*(*(ref _Module.struct123_0 + 4)) == 3 && *(*(ref _Module.struct123_0 + 4) + 2) == 3)
                {
                    this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
                }
                else if (_Module.memcmp(*(ref _Module.struct123_0 + 4) + 568, _Module.struct123_0 + 568, 96U) != null)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + 4) + 568, _Module.struct123_0 + 568, 96U);
                    this.textBox6.AppendText("Inquiry string copied to Target" + "\r\n");

                    _Module.memcpy(*(ref _Module.struct123_0 + 4) + 780, _Module.struct123_0 + 780, 180U);
                    this.textBox6.AppendText("Identify string copied to Target" + "\r\n");
                }
                else if (_Module.memcmp(*(ref _Module.struct123_0 + 4) + 568, _Module.struct123_0 + 568, 116U) != null)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + 4) + 568, _Module.struct123_0 + 568, 116U);
                    this.textBox6.AppendText("Inquiry string copied to Target" + "\r\n");

                    _Module.memcpy(*(ref _Module.struct123_0 + 4) + 780, _Module.struct123_0 + 780, 180U);
                    this.textBox6.AppendText("Identify string copied to Target" + "\r\n");
                }
                else
                {
                    this.textBox6.AppendText("ID strings already match" + "\r\n");
                }
                if (*_Module.struct123_0 == *(*(ref _Module.struct123_0 + 4)) && _Module.memcmp(*(ref _Module.struct123_0 + 4) + 2028, _Module.struct123_0 + 2028, 80U) != null)
                {
                    if (*(*(ref _Module.struct123_0 + 4)) == 2)
                    {

                        _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2028, _Module.struct123_0 + 2028, 20U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4)) == 3 && *(*(ref _Module.struct123_0 + 4) + 2) != 3)
                    {

                        _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2028, _Module.struct123_0 + 2028, 80U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4)) == 4 && *(*(ref _Module.struct123_0 + 4) + 2) != 5)
                    {

                        _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2028, _Module.struct123_0 + 2028, 80U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4)) == 5)
                    {

                        _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2028, _Module.struct123_0 + 2028, 80U);
                        if (*(_Module.struct123_0 + 2156) != 0)
                        {

                            _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2028, _Module.struct123_0 + 2028, 144U);
                        }
                        if (*(_Module.struct123_0 + 2187) != 0)
                        {

                            _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2028, _Module.struct123_0 + 2028, 224U);
                        }
                    }
                    else if (*(*(ref _Module.struct123_0 + 4)) == 6)
                    {

                        _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2028, _Module.struct123_0 + 2028, 256U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4)) == 7)
                    {

                        _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2028, _Module.struct123_0 + 2028, 80U);
                    }
                    if (*(*(ref _Module.struct123_0 + 4)) != 1 && *(*(ref _Module.struct123_0 + 4)) == 4 && *(*(ref _Module.struct123_0 + 4) + 2) != 5)
                    {
                        this.textBox6.AppendText("Serial data copied from Source to Target" + "\r\n");
                    }
                }
                else if (_Module.memcmp(*(ref _Module.struct123_0 + 4) + 2028, _Module.struct123_0 + 2028, 80U) == null && *(*(ref _Module.struct123_0 + 4)) != 1)
                {
                    this.textBox6.AppendText("Serial data already matches" + "\r\n");
                }
                this.textBox6.AppendText("\r\n");
                if (_Module.memcmp(*(ref _Module.struct123_0 + 4) + 2284, *(ref _Module.struct123_0 + 4) + 2316, 28U) == null)
                {

                    _Module.memset(*(ref _Module.struct123_0 + 4) + 2316, 0, 32U);
                    *(*(ref _Module.struct123_0 + 4) + 2382) = 0;
                    *(*(ref _Module.struct123_0 + 4) + 2384) = 0;
                }
                if (*(*(ref _Module.struct123_0 + 4)) == 4 && *(*(ref _Module.struct123_0 + 4) + 2382) == 4)
                {

                    _Module.memset(*(ref _Module.struct123_0 + 4) + 2316, 0, 32U);
                    *(*(ref _Module.struct123_0 + 4) + 2382) = 0;
                    *(*(ref _Module.struct123_0 + 4) + 2384) = 0;
                }
                if (*(*(ref _Module.struct123_0 + 4)) == 4 && _Module.memcmp(*(ref _Module.struct123_0 + 4) + 2348, (void*)(&_Module.struct74_0), 10U) == null)
                {

                    _Module.memset(*(ref _Module.struct123_0 + 4) + 2316, 0, 32U);
                    *(*(ref _Module.struct123_0 + 4) + 2382) = 0;
                    *(*(ref _Module.struct123_0 + 4) + 2384) = 0;
                }
                if (*(*(ref _Module.struct123_0 + 4)) == 4 && _Module.memcmp(*(ref _Module.struct123_0 + 4) + 2348, (void*)(&_Module.struct22_4), 7U) == null)
                {

                    _Module.memset(*(ref _Module.struct123_0 + 4) + 2316, 0, 32U);
                    *(*(ref _Module.struct123_0 + 4) + 2382) = 0;
                    *(*(ref _Module.struct123_0 + 4) + 2384) = 0;
                }
                if (*(*(ref _Module.struct123_0 + 4)) == 5)
                {

                    _Module.memset(*(ref _Module.struct123_0 + 4) + 2316, 0, 32U);
                    *(*(ref _Module.struct123_0 + 4) + 2382) = 0;
                    *(*(ref _Module.struct123_0 + 4) + 2384) = 0;
                }
                if (*(*(ref _Module.struct123_0 + 4)) == 4 && *(*(ref _Module.struct123_0 + 4) + 2) == 5)
                {

                    _Module.memset(*(ref _Module.struct123_0 + 4) + 2316, 0, 32U);
                    *(*(ref _Module.struct123_0 + 4) + 2382) = 0;
                    *(*(ref _Module.struct123_0 + 4) + 2384) = 0;
                }
                if (*(*(ref _Module.struct123_0 + 4)) == 3 && *(*(ref _Module.struct123_0 + 4) + 2) == 3)
                {

                    _Module.memset(*(ref _Module.struct123_0 + 4) + 2316, 0, 32U);
                    *(*(ref _Module.struct123_0 + 4) + 2382) = 0;
                    *(*(ref _Module.struct123_0 + 4) + 2384) = 0;
                }
                this.bool_10 = true;
                result = 1;
            }
            return result;
        }

        // Token: 0x060001FB RID: 507 RVA: 0x00117B98 File Offset: 0x00117B98
        private unsafe int method_47()
        {
            byte* ptr = *(ref _Module.struct121_0 + 4780);
            if (*(*(ref _Module.struct123_0 + 4)) == 1)
            {

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 560)), *(ref _Module.struct123_0 + 4) + 568, 96U);

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 564)), *(ref _Module.struct123_0 + 4) + 780, 180U);

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 296)), *(ref _Module.struct123_0 + 4) + 280, 16U);
            }
            if (*(*(ref _Module.struct123_0 + 4)) == 2)
            {

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 560)), *(ref _Module.struct123_0 + 4) + 568, 96U);

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 564)), *(ref _Module.struct123_0 + 4) + 780, 180U);

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 296)), *(ref _Module.struct123_0 + 4) + 280, 16U);

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 2024)), *(ref _Module.struct123_0 + 4) + 2028, 20U);
                ptr[255996] = (byte)(*(*(ref _Module.struct123_0 + 4) + 2020) & 255);
                ptr[255997] = (byte)((uint)(*(*(ref _Module.struct123_0 + 4) + 2020) & 65280) >> 8);
                ptr[255998] = (byte)((uint)(*(*(ref _Module.struct123_0 + 4) + 2020) & 16711680) >> 16);
                ptr[255999] = (byte)((uint)(*(*(ref _Module.struct123_0 + 4) + 2020) & -16777216) >> 24);
            }
            if (*(*(ref _Module.struct123_0 + 4)) == 3)
            {

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 560)), *(ref _Module.struct123_0 + 4) + 568, 96U);

                _Module.memcpy((void*)(ptr + (*(*(ref _Module.struct123_0 + 4) + 560) + 65536)), *(ref _Module.struct123_0 + 4) + 568, 96U);

                _Module.memcpy((void*)(ptr + (*(*(ref _Module.struct123_0 + 4) + 560) + 131072)), *(ref _Module.struct123_0 + 4) + 568, 96U);

                _Module.memcpy((void*)(ptr + (*(*(ref _Module.struct123_0 + 4) + 560) + 196608)), *(ref _Module.struct123_0 + 4) + 568, 96U);
                Struct46 @struct;

                _Module.memcpy((void*)(&@struct), *(ref _Module.struct123_0 + 4) + 780, 180U);
                for (int i = 20; i < 93; i += 2)
                {
                    *(ref @struct + (i + 1)) = *(*(ref _Module.struct123_0 + 4) + 780 + i);
                    *(ref @struct + i) = *(*(ref _Module.struct123_0 + 4) + 780 + (i + 1));
                }

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 564)), (void*)(&@struct), 180U);

                _Module.memcpy((void*)(ptr + (*(*(ref _Module.struct123_0 + 4) + 564) + 65536)), (void*)(&@struct), 180U);

                _Module.memcpy((void*)(ptr + (*(*(ref _Module.struct123_0 + 4) + 564) + 131072)), (void*)(&@struct), 180U);

                _Module.memcpy((void*)(ptr + (*(*(ref _Module.struct123_0 + 4) + 564) + 196608)), (void*)(&@struct), 180U);

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 296)), *(ref _Module.struct123_0 + 4) + 280, 16U);

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 2024)), *(ref _Module.struct123_0 + 4) + 2028, 80U);
            }
            if (*(*(ref _Module.struct123_0 + 4)) == 4)
            {
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 312] = *(*(ref _Module.struct123_0 + 4) + 280);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 2796] = *(*(ref _Module.struct123_0 + 4) + 281);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 1858] = *(*(ref _Module.struct123_0 + 4) + 282);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 1664] = *(*(ref _Module.struct123_0 + 4) + 283);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 3789] = *(*(ref _Module.struct123_0 + 4) + 284);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 2868] = *(*(ref _Module.struct123_0 + 4) + 285);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 2111] = *(*(ref _Module.struct123_0 + 4) + 286);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 1829] = *(*(ref _Module.struct123_0 + 4) + 287);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 1322] = *(*(ref _Module.struct123_0 + 4) + 288);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 513] = *(*(ref _Module.struct123_0 + 4) + 289);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 2527] = *(*(ref _Module.struct123_0 + 4) + 290);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 35] = *(*(ref _Module.struct123_0 + 4) + 291);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 1184] = *(*(ref _Module.struct123_0 + 4) + 292);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 1434] = *(*(ref _Module.struct123_0 + 4) + 293);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 1022] = *(*(ref _Module.struct123_0 + 4) + 294);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 3913] = *(*(ref _Module.struct123_0 + 4) + 295);
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 5)
                {
                    this.textBox6.AppendText("Target rev is LT 02510C, serial info not copied" + "\r\n");
                    return 1;
                }

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 2024)), *(ref _Module.struct123_0 + 4) + 2028, 80U);
                if (_Module.memcmp(*(ref _Module.struct123_0 + 4) + 2348, (void*)(&_Module.struct74_0), 10U) == null)
                {

                    _Module.memset(*(ref _Module.struct123_0 + 4) + 2316, 0, 32U);
                    *(*(ref _Module.struct123_0 + 4) + 2382) = 0;
                    *(*(ref _Module.struct123_0 + 4) + 2384) = 0;
                    for (int i = 0; i < 20; i++)
                    {
                        *(*(ref _Module.struct123_0 + 4) + 568 + (i + 42)) = ptr[i + 130816];
                        *(*(ref _Module.struct123_0 + 4) + 780 + (i + 20)) = ptr[i + 130816];
                    }
                    for (int i = 0; i < 2; i++)
                    {
                        *(*(ref _Module.struct123_0 + 4) + 568 + (i + 38)) = ptr[i + 130856];
                        *(*(ref _Module.struct123_0 + 4) + 568 + (i + 40)) = ptr[i + 130892];
                    }
                }
                else if (_Module.memcmp(*(ref _Module.struct123_0 + 4) + 2348, (void*)(&_Module.struct22_4), 7U) == null)
                {

                    _Module.memset(*(ref _Module.struct123_0 + 4) + 2316, 0, 32U);
                    *(*(ref _Module.struct123_0 + 4) + 2382) = 0;
                    *(*(ref _Module.struct123_0 + 4) + 2384) = 0;
                    for (int i = 0; i < 20; i++)
                    {
                        *(*(ref _Module.struct123_0 + 4) + 568 + (i + 42)) = ptr[i + 130816];
                        *(*(ref _Module.struct123_0 + 4) + 780 + (i + 20)) = ptr[i + 130816];
                    }
                    for (int i = 0; i < 2; i++)
                    {
                        *(*(ref _Module.struct123_0 + 4) + 568 + (i + 38)) = ptr[i + 130856];
                        *(*(ref _Module.struct123_0 + 4) + 568 + (i + 40)) = ptr[i + 130892];
                    }
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2382) == 1)
                {
                    if (*(*(ref _Module.struct123_0 + 4) + 2384) == 1)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_8), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 2)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_6), 276U);
                    }
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2382) == 2)
                {
                    if (*(*(ref _Module.struct123_0 + 4) + 2384) == 1)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_2), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 2)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_0), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 3)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_10), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 4)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_4), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 5)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_3), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 6)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_12), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 7)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_11), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 8)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_9), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 9)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_9), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 10)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_9), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 11)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_9), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 12)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_13), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 13)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_13), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 14)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_13), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 15)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_13), 276U);
                    }
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2382) == 3)
                {
                    if (*(*(ref _Module.struct123_0 + 4) + 2384) == 1)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_1), 276U);
                    }
                    else if (*(*(ref _Module.struct123_0 + 4) + 2384) == 2)
                    {

                        _Module.memcpy((void*)(ptr + 81408), (void*)(&_Module.struct47_5), 276U);
                    }
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2382) == 0)
                {
                    for (int i = 0; i < 20; i++)
                    {
                        *(*(ref _Module.struct123_0 + 4) + 568 + (i + 42)) = ptr[i + 130816];
                        *(*(ref _Module.struct123_0 + 4) + 780 + (i + 20)) = ptr[i + 130816];
                    }
                    for (int i = 0; i < 2; i++)
                    {
                        *(*(ref _Module.struct123_0 + 4) + 568 + (i + 38)) = ptr[i + 130856];
                        *(*(ref _Module.struct123_0 + 4) + 568 + (i + 40)) = ptr[i + 130892];
                    }
                }
            }
            if (*(*(ref _Module.struct123_0 + 4)) == 5)
            {
                if (*(*(ref _Module.struct123_0 + 4) + 2) == 1)
                {
                    *(*(ref _Module.struct123_0 + 4) + 2045) = 0;
                    *(*(ref _Module.struct123_0 + 4) + 2046) = 0;
                    *(*(ref _Module.struct123_0 + 4) + 2047) = 0;
                }
                else if (*(*(ref _Module.struct123_0 + 4) + 2) == 2 && ptr[126976] == 96)
                {
                    *(*(ref _Module.struct123_0 + 4) + 2045) = 0;
                    *(*(ref _Module.struct123_0 + 4) + 2046) = 0;
                    *(*(ref _Module.struct123_0 + 4) + 2047) = 0;
                }
                else
                {
                    *(*(ref _Module.struct123_0 + 4) + 2045) = 32;
                    *(*(ref _Module.struct123_0 + 4) + 2046) = 32;
                    *(*(ref _Module.struct123_0 + 4) + 2047) = 32;
                }

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 2024)), *(ref _Module.struct123_0 + 4) + 2028, 80U);
                if (*(*(ref _Module.struct123_0 + 4) + 2156) != 0)
                {

                    _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 2024)), *(ref _Module.struct123_0 + 4) + 2028, 144U);
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2187) != 0)
                {

                    _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 2024)), *(ref _Module.struct123_0 + 4) + 2028, 224U);
                }
                if (*(*(ref _Module.struct121_0 + 2388) + 258048) != 0)
                {
                    *(*(ref _Module.struct121_0 + 4780) + 258048) = *(*(ref _Module.struct121_0 + 2388) + 258048);
                    *(*(ref _Module.struct121_0 + 4780) + 258049) = *(*(ref _Module.struct121_0 + 2388) + 258049);
                    if (*(*(ref _Module.struct121_0 + 2388) + 258050) != 229 && *(*(ref _Module.struct121_0 + 4780) + 258050) != 229 && *(*(ref _Module.struct121_0 + 2388) + 258050) != 0)
                    {
                        *(*(ref _Module.struct121_0 + 4780) + 258050) = *(*(ref _Module.struct121_0 + 2388) + 258050);
                        *(*(ref _Module.struct121_0 + 4780) + 258051) = *(*(ref _Module.struct121_0 + 2388) + 258051);
                        if (*(*(ref _Module.struct121_0 + 2388) + 258052) != 229 && *(*(ref _Module.struct121_0 + 4780) + 258052) != 229 && *(*(ref _Module.struct121_0 + 2388) + 258052) != 0)
                        {
                            *(*(ref _Module.struct121_0 + 4780) + 258052) = *(*(ref _Module.struct121_0 + 2388) + 258052);
                            *(*(ref _Module.struct121_0 + 4780) + 258053) = *(*(ref _Module.struct121_0 + 2388) + 258053);
                        }
                    }
                }
            }
            if (*(*(ref _Module.struct123_0 + 4)) == 6)
            {
                this.method_35(*(ref _Module.struct123_0 + 4) + 280, *(ref _Module.struct121_0 + 4780) + 126960);

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 2024)), *(ref _Module.struct123_0 + 4) + 2028, 256U);
                if (*(*(ref _Module.struct123_0 + 4) + 2) != 1)
                {
                    if (*(*(ref _Module.struct123_0 + 4) + 2) != 2)
                    {
                        for (int i = 0; i < 20; i++)
                        {
                            *(*(ref _Module.struct123_0 + 4) + 568 + (i + 96)) = *(*(ref _Module.struct123_0 + 4) + 2028 + i);
                        }
                        goto IL_1146;
                    }
                }
                for (int i = 0; i < 20; i++)
                {
                    *(*(ref _Module.struct123_0 + 4) + 568 + (i + 96)) = *(*(ref _Module.struct123_0 + 4) + 2028 + i);
                }
                for (int i = 0; i < 20; i += 2)
                {
                    *(*(ref _Module.struct123_0 + 4) + 780 + (i + 20)) = *(*(ref _Module.struct123_0 + 4) + 2028 + (i + 1));
                    *(*(ref _Module.struct123_0 + 4) + 780 + (i + 21)) = *(*(ref _Module.struct123_0 + 4) + 2028 + i);
                }
                for (int i = 0; i < 2; i++)
                {
                    *(*(ref _Module.struct123_0 + 4) + 568 + (i + 52)) = *(*(ref _Module.struct123_0 + 4) + 2028 + (i + 40));
                    *(*(ref _Module.struct123_0 + 4) + 568 + (i + 54)) = *(*(ref _Module.struct123_0 + 4) + 2028 + (i + 76));
                }
            }
        IL_1146:
            if (*(*(ref _Module.struct123_0 + 4)) == 7)
            {
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 312] = *(*(ref _Module.struct123_0 + 4) + 280);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 2796] = *(*(ref _Module.struct123_0 + 4) + 281);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 1858] = *(*(ref _Module.struct123_0 + 4) + 282);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 1664] = *(*(ref _Module.struct123_0 + 4) + 283);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 3789] = *(*(ref _Module.struct123_0 + 4) + 284);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 2868] = *(*(ref _Module.struct123_0 + 4) + 285);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 2111] = *(*(ref _Module.struct123_0 + 4) + 286);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 1829] = *(*(ref _Module.struct123_0 + 4) + 287);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 1322] = *(*(ref _Module.struct123_0 + 4) + 288);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 513] = *(*(ref _Module.struct123_0 + 4) + 289);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 2527] = *(*(ref _Module.struct123_0 + 4) + 290);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 35] = *(*(ref _Module.struct123_0 + 4) + 291);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 1184] = *(*(ref _Module.struct123_0 + 4) + 292);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 1434] = *(*(ref _Module.struct123_0 + 4) + 293);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 1022] = *(*(ref _Module.struct123_0 + 4) + 294);
                ptr[*(*(ref _Module.struct123_0 + 4) + 296) + 3913] = *(*(ref _Module.struct123_0 + 4) + 295);

                _Module.memcpy((void*)(ptr + *(*(ref _Module.struct123_0 + 4) + 2024)), *(ref _Module.struct123_0 + 4) + 2028, 80U);
                if (*(*(ref _Module.struct123_0 + 4) + 2) != 1)
                {
                    if (*(*(ref _Module.struct123_0 + 4) + 2) != 2)
                    {
                        for (int i = 0; i < 20; i++)
                        {
                            *(*(ref _Module.struct123_0 + 4) + 568 + (i + 96)) = *(*(ref _Module.struct123_0 + 4) + 2028 + i);
                        }
                        goto IL_1525;
                    }
                }
                for (int i = 0; i < 20; i++)
                {
                    *(*(ref _Module.struct123_0 + 4) + 568 + (i + 96)) = *(*(ref _Module.struct123_0 + 4) + 2028 + i);
                }
                for (int i = 0; i < 20; i += 2)
                {
                    *(*(ref _Module.struct123_0 + 4) + 780 + (i + 20)) = *(*(ref _Module.struct123_0 + 4) + 2028 + (i + 1));
                    *(*(ref _Module.struct123_0 + 4) + 780 + (i + 21)) = *(*(ref _Module.struct123_0 + 4) + 2028 + i);
                }
                for (int i = 0; i < 2; i++)
                {
                    *(*(ref _Module.struct123_0 + 4) + 568 + (i + 52)) = *(*(ref _Module.struct123_0 + 4) + 2028 + (i + 40));
                    *(*(ref _Module.struct123_0 + 4) + 568 + (i + 54)) = *(*(ref _Module.struct123_0 + 4) + 2028 + (i + 76));
                }
            }
        IL_1525:
            return 1;
        }

        // Token: 0x060001FC RID: 508 RVA: 0x001190DC File Offset: 0x001190DC
        private unsafe void method_48()
        {
            if (*_Module.struct123_0 != 4 || *(_Module.struct123_0 + 2) != 5)
            {
                byte* ptr = _Module.struct123_0 + 2028;
                if (ptr[24] == ptr[25] & ptr[24] == ptr[26] & ptr[24] == ptr[27] & ptr[44] == ptr[45] & ptr[44] == ptr[46] & ptr[44] == ptr[47])
                {
                    string text = new string(_Module.struct123_0 + 4) + " is missing some drive specific information.     " + "\n\n";
                    text = text + "If this is an old dummy.bin that predates ix1.5 then" + "\n";
                    text = text + "if possible you should re-extract your drive info again" + "\n";
                    text = text + "with the latest tools.." + new string((sbyte*)(&_Module.struct6_7));
                    text = text + "        1. JungleFlasher, this tool - DVDKey32 Tab" + "\n";
                    text = text + "        2. Dosflash 1.7+" + new string((sbyte*)(&_Module.struct6_7));
                    text = text + "        3. DVDKey32 0.7+" + new string((sbyte*)(&_Module.struct6_7));
                    text = text + "You can rebuild the serial info if you have the original" + new string((sbyte*)(&_Module.struct6_7));
                    text = text + "drive available. Tick advanced view, select the Serial" + new string((sbyte*)(&_Module.struct6_7));
                    text = text + "sub-tab in the Source tab. Double-click the serial data" + new string((sbyte*)(&_Module.struct18_11));
                    text = text + "For some newer drives this info is blank by default, if" + new string((sbyte*)(&_Module.struct6_7));
                    text = text + "you are happy that this is the case then there is no" + new string((sbyte*)(&_Module.struct6_7));
                    text = text + "need to repair the serial info." + new string((sbyte*)(&_Module.struct18_11));
                    text = text + "Do you wish to proceed anyway ?" + "\n";

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num = (int)MessageBox.Show(this, text, "Loading Dummy.bin", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num == 7)
                    {
                        this.textBox6.AppendText("Dummy.bin not loaded" + "\r\n");
                        this.method_40();
                    }
                    else
                    {
                        text = "";
                        text = text + "Do you wish to repair the serial from drive barcodes ?" + "\n";

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        num = (int)MessageBox.Show(this, text, "Loading Dummy.bin", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        if (num == 6)
                        {
                            this.method_52();
                        }
                    }
                }
            }
        }

        // Token: 0x060001FD RID: 509 RVA: 0x00119358 File Offset: 0x00119358
        private unsafe int method_49()
        {
            string text = null;
            string[] commandLineArgs = Environment.GetCommandLineArgs();
            while (string.Compare(commandLineArgs[0], "") == 0)
            {
                Environment.GetCommandLineArgs();
            }
            text = Path.GetDirectoryName(commandLineArgs[0]);
            string strB;
            if (*_Module.struct123_0 == 1)
            {
                text += "\\firmware\\LT-sammy-v2.01.bin";
                strB = "d66252800c1c072bc612f2f72d1e3c76";
            }
            else if (*_Module.struct123_0 == 3 && *(_Module.struct123_0 + 2) == 1)
            {
                text += "\\firmware\\LTPlus-benq-v1.1.bin";
                strB = "c45d60fbd68cc642b2235ba12e5aad7d";
            }
            else if (*_Module.struct123_0 == 3 && *(_Module.struct123_0 + 2) == 2)
            {
                text += "\\firmware\\LTPlus-benq-v1.1.bin";
                strB = "c45d60fbd68cc642b2235ba12e5aad7d";
            }
            else if (*_Module.struct123_0 == 3 && *(_Module.struct123_0 + 2) == 3)
            {
                text += "\\firmware\\LTPlus-0442-v3.0.bin";
                strB = "8784e0f4ce27941a2a3293c8a5ac85e4";
            }
            else if (*_Module.struct123_0 == 4 && *(_Module.struct123_0 + 2) == 1)
            {
                text += "\\firmware\\LTPlus-748v1.1.bin";
                strB = "53786fac70e9c6b895b2e99144c7fb6d";
            }
            else if (*_Module.struct123_0 == 4 && *(_Module.struct123_0 + 2) == 2)
            {
                text += "\\firmware\\LTPlus-838v1.1.bin";
                strB = "020325ef05290fa80baec9863041a11c";
            }
            else if (*_Module.struct123_0 == 4 && *(_Module.struct123_0 + 2) == 3)
            {
                text += "\\firmware\\LTPlus-838v2v1.1.bin";
                strB = "acc8ce739377578df2ca33ba3680ff54";
            }
            else if (*_Module.struct123_0 == 4 && *(_Module.struct123_0 + 2) == 4)
            {
                text += "\\firmware\\LTPlus-934v1.1.bin";
                strB = "d1671296ac52b8a67838f637f435fa6a";
            }
            else if (*_Module.struct123_0 == 4 && *(_Module.struct123_0 + 2) == 5)
            {
                text += "\\firmware\\LTPlus-0251-v3.0.bin";
                strB = "d14fe82b96741b7a18e5c1e7adbf0a98";
            }
            else if (*_Module.struct123_0 == 5 && *(_Module.struct123_0 + 2) == 1)
            {
                text += "\\firmware\\LTPlus-9504.bin";
                strB = "fb7b3d4487cc17c6518b14e57ae82cc2";
            }
            else if (*_Module.struct123_0 == 5 && *(_Module.struct123_0 + 2) == 2)
            {
                if (*(*(ref _Module.struct121_0 + 2388) + 126976) == 96)
                {
                    text += "\\firmware\\LTPlus-0225-v3.0u.bin";
                    strB = "db5c70eaaabb53501c2c4f53dce9abfd";
                }
                else if (*(*(ref _Module.struct121_0 + 2388) + 126976) == 125)
                {
                    text += "\\firmware\\LTPlus-0225-v3.0d.bin";
                    strB = "faf085ff40fcbedf6a352318d55879c0";
                }
                else
                {
                    text += "\\firmware\\LTPlus-0225-v3.0.bin";
                    strB = "1a38d3a2a6519339599fa1866642c513";
                }
            }
            else if (*_Module.struct123_0 == 5 && *(_Module.struct123_0 + 2) == 3)
            {
                text += "\\firmware\\LTPlus-0401-v3.0.bin";
                strB = "87fba52607d01d3c73722f9f818588c9";
            }
            else if (*_Module.struct123_0 == 5 && *(_Module.struct123_0 + 2) == 4)
            {
                text += "\\firmware\\LTPlus-0272-v3.0.bin";
                strB = "76b991307ddd5b2af581d0608e671b36";
            }
            else
            {
                if (*_Module.struct123_0 != 5 || *(_Module.struct123_0 + 2) != 5)
                {
                    return 0;
                }
                text += "\\firmware\\LTPlus-1071-v3.0.bin";
                strB = "3d1243454d9c6c1cd2760b8ea5f5c648";
            }
            if (!this.bool_2)
            {
                string text2 = this.label6.Text + " firmware loaded to Source buffer!" + "\n" + "Do you wish to auto-load " + this.label6.Text + " LT-Plus ?";

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num = (int)MessageBox.Show(this, text2, "Loading Source", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                if (num == 7)
                {
                    return 0;
                }
            }
            IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
            IntPtr value = intPtr;
            sbyte* pSbyte_ = (sbyte*)((void*)value);
            int result;
            if (_Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_4)) == null)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show(this, "Can't open file" + " " + text, "Auto-Load iXtreme", MessageBoxButtons.OK);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 0;
            }
            else
            {
                GStruct93 gstruct;

                _Module.smethod_111(ref gstruct);
                int result2;
                try
                {
                    GStruct19 gstruct2;
                    GStruct19* pGstruct19_ = _Module.smethod_91(ref gstruct2, (sbyte*)pSbyte_);
                    GStruct19 gstruct3;

                    _Module.smethod_114(ref gstruct, &gstruct3, (GStruct19*)pGstruct19_);
                    try
                    {
                        string strA = new string(_Module.smethod_94(ref gstruct3));
                        if (string.Compare(strA, strB) == 0)
                        {
                            goto IL_4B0;
                        }

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show(this, "iXtreme file failed MD5 hash check!", "Load iXtreme", MessageBoxButtons.OK);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        result2 = 0;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct3));
                        throw;
                    }

                    _Module.smethod_92(ref gstruct3);
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }

                _Module.smethod_112(ref gstruct);
                return result2;
                int num2;
                try
                {
                    GStruct19 gstruct3;
                    try
                    {
                    IL_4B0:
                        this.textBox6.AppendText(string.Concat("Auto-"));
                        this.method_36(text, 1);
                        num2 = 1;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct3));
                        throw;
                    }

                    _Module.smethod_92(ref gstruct3);
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }

                _Module.smethod_112(ref gstruct);
                result = num2;
            }
            return result;
        }

        // Token: 0x060001FE RID: 510 RVA: 0x001198D0 File Offset: 0x001198D0
        private void OpenSource_Click(object sender, EventArgs e)
        {
            this.method_50(0);
        }

        // Token: 0x060001FF RID: 511 RVA: 0x001198E4 File Offset: 0x001198E4
        private void method_50(int int_16)
        {
            this.method_40();
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Firmware file (*.bin)|*.bin|All Files (*.*)|*.*";
            openFileDialog.FileName = "Orig.bin";
            openFileDialog.DefaultExt = ".bin";
            openFileDialog.CheckFileExists = true;
            openFileDialog.CheckPathExists = true;
            openFileDialog.RestoreDirectory = false;
            if (this.bool_2)
            {
                openFileDialog.InitialDirectory = this.string_10;
            }
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(openFileDialog.FileName);
                this.method_36(fullPath, int_16);
            }
        }

        // Token: 0x06000200 RID: 512 RVA: 0x0011996C File Offset: 0x0011996C
        private void tabPage12_DragDrop(object sender, DragEventArgs e)
        {
            this.method_40();
            string[] array = (string[])e.Data.GetData(DataFormats.FileDrop);
            string string_ = array[0];
            this.method_36(string_, 0);
        }

        // Token: 0x06000201 RID: 513 RVA: 0x001199A8 File Offset: 0x001199A8
        private void textBox19_TextChanged(object sender, EventArgs e)
        {
            if (string.Compare(this.textBox19.Text, "EasyToFindSource") != 0)
            {
                if (string.Compare(this.textBox19.Text, "DoDVDKey") == 0)
                {
                    this.method_60();
                }
                else if (string.Compare(this.textBox19.Text, "DoBadFlash") == 0)
                {
                    this.method_198();
                }
                else
                {
                    this.method_36(this.textBox19.Text, 0);
                }
                this.textBox19.Text = "EasyToFindSource";
            }
        }

        // Token: 0x06000202 RID: 514 RVA: 0x00119A30 File Offset: 0x00119A30
        private void textBox20_TextChanged(object sender, EventArgs e)
        {
            if (string.Compare(this.textBox20.Text, "EasyToFindUpdate") != 0)
            {
                this.method_43();
                this.method_36(this.textBox20.Text, 5);
                this.method_27();
                this.textBox20.Text = "EasyToFindUpdate";
            }
        }

        // Token: 0x06000203 RID: 515 RVA: 0x00119A84 File Offset: 0x00119A84
        private void tabPage12_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                e.Effect = DragDropEffects.All;
            }
            else
            {
                e.Effect = DragDropEffects.None;
            }
            string[] array = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (array.Length > 1)
            {
                e.Effect = DragDropEffects.None;
            }
        }

        // Token: 0x06000204 RID: 516 RVA: 0x00119ADC File Offset: 0x00119ADC
        private void menuItem_5_Click(object sender, EventArgs e)
        {
            this.method_50(0);
        }

        // Token: 0x06000205 RID: 517 RVA: 0x00119AF0 File Offset: 0x00119AF0
        private void menuItem_6_Click(object sender, EventArgs e)
        {

            _Module.memset(_Module.struct123_0, 0, 2392U);
            this.method_40();
        }

        // Token: 0x06000206 RID: 518 RVA: 0x00119B18 File Offset: 0x00119B18
        private void menuItem_7_Click(object sender, EventArgs e)
        {
            if (!this.bool_4)
            {
                this.method_27();
            }
        }

        // Token: 0x06000207 RID: 519 RVA: 0x00119B34 File Offset: 0x00119B34
        private void menuItem_12_Click(object sender, EventArgs e)
        {
            DataBaseView dataBaseView = new DataBaseView();
            dataBaseView.int_0 = 0;
            if (dataBaseView.ShowDialog(this) == DialogResult.OK)
            {
                this.string_10 = Path.GetDirectoryName(dataBaseView.textBox15.Text);
                this.string_9 = dataBaseView.textBox2.Text;
            }
        }

        // Token: 0x06000208 RID: 520 RVA: 0x00119B84 File Offset: 0x00119B84
        private void menuItem_13_Click(object sender, EventArgs e)
        {
            this.method_28();
        }

        // Token: 0x06000209 RID: 521 RVA: 0x00119B98 File Offset: 0x00119B98
        private void menuItem_19_Click(object sender, EventArgs e)
        {
            string text = null;
            if (this.method_69() == 0)
            {
                this.textBox6.AppendText("No drive present on port " + this.comboBox7.Text + "\r\n\r\n");
            }
            else
            {
                this.textBox6.AppendText("Attempting to verify Source Key to drive on port " + this.comboBox7.Text + "\r\n");
                string text2 = this.textBox9.Text;
                if (this.method_107(_Module.struct123_0 + 280) == 1)
                {
                    RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\KeyList");
                    if (registryKey.GetValue(text2) != null)
                    {
                        string text3 = registryKey.GetValue(text2).ToString();
                        registryKey.Close();
                        registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + text3);
                        if (registryKey.GetValue("JobName") != null)
                        {
                            text = registryKey.GetValue("JobName").ToString();
                        }
                        string text4;
                        if (registryKey.GetValue("WorkingDir") != null)
                        {
                            text4 = registryKey.GetValue("WorkingDir").ToString();
                        }
                        else
                        {
                            text4 = "";
                        }
                        string strA;
                        if (registryKey.GetValue("LastFile") != null)
                        {
                            strA = registryKey.GetValue("LastFile").ToString();
                        }
                        else
                        {
                            strA = "";
                        }
                        if (registryKey.GetValue("Index") != null)
                        {
                            text3 = registryKey.GetValue("Index").ToString();
                        }
                        this.toolTip_0.SetToolTip(this.pictureBox5, "Drive Key found in KeyDB (" + text3 + " - " + text + ")" + Environment.NewLine + "Key is: " + text2);
                        this.toolTip_0.SetToolTip(this.pictureBox2, "Drive Key found in KeyDB (" + text3 + " - " + text + ")" + Environment.NewLine + "Key is: " + text2);
                        this.pictureBox5.Visible = true;
                        this.pictureBox7.Visible = false;
                        this.pictureBox2.Visible = true;
                        this.pictureBox6.Visible = false;
                        if (string.Compare(strA, "") != 0)
                        {
                            this.menuItem_21.Enabled = true;
                        }
                        this.menuItem_22.Enabled = true;
                        this.menuItem_23.Enabled = true;
                        this.menuItem_24.Enabled = true;
                        this.string_14 = text2;
                        this.string_15 = text3;
                        this.string_16 = strA;
                        this.string_17 = text4;
                        this.label133.Text = "Verified";
                        this.label131.Text = "Verified";
                        registryKey.Close();
                        this.Cursor = Cursors.Arrow;
                        this.textBox6.AppendText("\r\n" + "Key found in KeyDB at record (" + text3 + " - " + text + ")" + "\r\n" + "Key is: " + text2 + "\r\n" + "Key has been tested and verified, thanks C4eva ! " + "\r\n");
                    }
                    else
                    {
                        this.toolTip_0.SetToolTip(this.pictureBox5, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + text2);
                        this.toolTip_0.SetToolTip(this.pictureBox2, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + text2);
                        this.pictureBox5.Visible = true;
                        this.pictureBox7.Visible = false;
                        this.pictureBox2.Visible = true;
                        this.pictureBox6.Visible = false;
                        this.string_14 = text2;
                        this.label133.Text = "Verified";
                        this.label131.Text = "Verified";
                        registryKey.Close();
                        this.Cursor = Cursors.Arrow;
                        if (this.bool_1)
                        {
                            this.textBox6.AppendText("\r\n" + "Key NOT in KeyDB " + "\r\n" + "Key is: " + text2 + "\r\n" + "Key has been tested and verified, thanks C4eva ! " + "\r\n");
                        }
                    }
                }
                else
                {
                    this.textBox6.AppendText("\r\n" + "Source Key not verified against drive." + "\r\n");
                }
            }
        }

        // Token: 0x0600020A RID: 522 RVA: 0x00119F7C File Offset: 0x00119F7C
        private void menuItem_33_Click(object sender, EventArgs e)
        {
            bool flag = this.bool_2;
            this.bool_2 = true;
            if (this.method_49() == 1)
            {
                this.method_46();
                this.method_47();
                this.method_41();
            }
            this.bool_2 = flag;
        }

        // Token: 0x0600020B RID: 523 RVA: 0x00119FC0 File Offset: 0x00119FC0
        private void button41_Click(object sender, EventArgs e)
        {
            DataBaseView dataBaseView = new DataBaseView();
            dataBaseView.int_0 = 0;
            if (dataBaseView.ShowDialog(this) == DialogResult.OK)
            {
                this.string_10 = Path.GetDirectoryName(dataBaseView.textBox15.Text);
                this.string_9 = dataBaseView.textBox2.Text;
            }
        }

        // Token: 0x0600020C RID: 524 RVA: 0x003C1858 File Offset: 0x00309858
        private unsafe void DumpDrive_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
            saveFileDialog.DefaultExt = ".bin";
            saveFileDialog.FileName = "Key.bin";
            saveFileDialog.RestoreDirectory = false;
            if (this.bool_2)
            {
                saveFileDialog.InitialDirectory = this.string_10;
            }
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(fullPath);
                IntPtr value = intPtr;
                sbyte* pSbyte_ = (sbyte*)((void*)value);
                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                if (ptr == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return;
                }
                this.textBox6.AppendText("Key data saved to " + saveFileDialog.FileName + "\r\n\r\n");

                _Module.fwrite(_Module.struct123_0 + 280, 16U, 1U, ptr);

                _Module.fclose(ptr);
            }
            saveFileDialog.FileName = "Inquiry.bin";
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath2 = Path.GetFullPath(saveFileDialog.FileName);
                IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(fullPath2);
                IntPtr value2 = intPtr2;
                sbyte* pSbyte_2 = (sbyte*)((void*)value2);
                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_2, (sbyte*)(&_Module.struct18_5));
                if (ptr == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return;
                }
                this.textBox6.AppendText("Inquiry data saved to " + saveFileDialog.FileName + "\r\n\r\n");
                if (*_Module.struct123_0 != 7 && *_Module.struct123_0 != 6)
                {
                    if (*_Module.struct123_0 != 5)
                    {

                        _Module.fwrite(_Module.struct123_0 + 568, 96U, 1U, ptr);
                        goto IL_20F;
                    }
                }

                _Module.fwrite(_Module.struct123_0 + 568, 116U, 1U, ptr);
            IL_20F:

                _Module.fclose(ptr);
            }
            saveFileDialog.FileName = "Identify.bin";
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath3 = Path.GetFullPath(saveFileDialog.FileName);
                IntPtr intPtr3 = Marshal.StringToHGlobalAnsi(fullPath3);
                IntPtr value3 = intPtr3;
                sbyte* pSbyte_3 = (sbyte*)((void*)value3);
                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_3, (sbyte*)(&_Module.struct18_5));
                if (ptr == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {
                    this.textBox6.AppendText("Identify data saved to " + saveFileDialog.FileName + "\r\n\r\n");

                    _Module.fwrite(_Module.struct123_0 + 780, 180U, 1U, ptr);

                    _Module.fclose(ptr);
                }
            }
        }

        // Token: 0x0600020D RID: 525 RVA: 0x0011A300 File Offset: 0x0011A300
        private void button2_Click(object sender, EventArgs e)
        {
            this.method_18();
            this.method_51();
            this.method_19();
        }

        // Token: 0x0600020E RID: 526 RVA: 0x0011A320 File Offset: 0x0011A320
        private unsafe void method_51()
        {
            DumpFile dumpFile = new DumpFile();
            dumpFile.bool_4 = this.bool_2;
            dumpFile.string_1 = this.string_10;
            if (dumpFile.ShowDialog(this) == DialogResult.OK)
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog();
                saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
                saveFileDialog.DefaultExt = ".bin";
                saveFileDialog.FileName = "dummy.bin";
                saveFileDialog.RestoreDirectory = false;
                if (this.bool_2)
                {
                    saveFileDialog.InitialDirectory = this.string_10;
                }
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                    string fileName = Path.GetFileName(saveFileDialog.FileName);
                    IntPtr intPtr = Marshal.StringToHGlobalAnsi(fullPath);
                    IntPtr value = intPtr;
                    sbyte* pSbyte_ = (sbyte*)((void*)value);
                    GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                    if (ptr == null)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    }

                    _Module.fwrite((void*)dumpFile.pByte_4, 262144U, 1U, ptr);

                    _Module.fclose(ptr);
                    this.textBox6.AppendText("\r\n" + "Loading DVDkey source file " + "\r\n");
                    this.method_37(fullPath, 0, dumpFile.pByte_4);
                    this.tabControl5.SelectedTab = this.Firmtools;
                }
            }
        }

        // Token: 0x0600020F RID: 527 RVA: 0x0011A484 File Offset: 0x0011A484
        private void textBox12_DoubleClick(object sender, EventArgs e)
        {
            this.method_52();
        }

        // Token: 0x06000210 RID: 528 RVA: 0x0011A498 File Offset: 0x0011A498
        private unsafe void method_52()
        {
            if (*_Module.struct123_0 == 4 || *_Module.struct123_0 == 5)
            {
                if (*_Module.struct123_0 == 4)
                {

                    _Module.memset(ref _Module.struct121_0 + 2028 + 64, 255, 12U);

                    _Module.memset(*(ref _Module.struct121_0 + 2388) + 130880, 255, 12U);
                }
                else if (*_Module.struct123_0 == 5)
                {

                    _Module.memset(ref _Module.struct121_0 + 2028 + 64, 0, 12U);

                    _Module.memset(*(ref _Module.struct121_0 + 2388) + 130880, 0, 12U);
                }
                FixSerial fixSerial = new FixSerial();
                if (fixSerial.pByte_0 != null)
                {

                    _Module.free((void*)fixSerial.pByte_0);
                }
                fixSerial.pByte_0 = _Module.malloc(80U);

                _Module.memcpy((void*)fixSerial.pByte_0, _Module.struct123_0 + 2028, 80U);
                if (fixSerial.pByte_1 != null)
                {

                    _Module.free((void*)fixSerial.pByte_1);
                }
                fixSerial.pByte_1 = _Module.malloc(262144U);

                _Module.memcpy((void*)fixSerial.pByte_1, *(ref _Module.struct121_0 + 2388), 262144U);
                fixSerial.uint_1 = (uint)(*_Module.struct123_0);
                fixSerial.uint_2 = (uint)(*(_Module.struct123_0 + 2));
                fixSerial.uint_0 = (uint)(*(_Module.struct123_0 + 296));
                if (fixSerial.ShowDialog(this) == DialogResult.OK)
                {
                    this.textBox6.AppendText("\r\n" + "Loading Fixed Dummy.bin file " + "\r\n");
                    this.method_37(fixSerial.string_0, 0, fixSerial.pByte_1);
                    this.tabControl5.SelectedTab = this.Firmtools;
                }
                if (fixSerial.pByte_1 != null)
                {

                    _Module.free((void*)fixSerial.pByte_1);
                }
                if (fixSerial.pByte_0 != null)
                {

                    _Module.free((void*)fixSerial.pByte_0);
                }
            }
        }

        // Token: 0x06000211 RID: 529 RVA: 0x0011A668 File Offset: 0x0011A668
        private unsafe void method_53()
        {
            Struct28 @struct = 255;
            *(ref @struct + 1) = byte.MaxValue;
            *(ref @struct + 2) = byte.MaxValue;
            *(ref @struct + 3) = byte.MaxValue;
            *(ref @struct + 4) = byte.MaxValue;
            *(ref @struct + 5) = byte.MaxValue;
            *(ref @struct + 6) = byte.MaxValue;
            *(ref @struct + 7) = byte.MaxValue;
            *(ref @struct + 8) = byte.MaxValue;
            *(ref @struct + 9) = byte.MaxValue;
            *(ref @struct + 10) = byte.MaxValue;
            *(ref @struct + 11) = byte.MaxValue;
            *(ref @struct + 12) = byte.MaxValue;
            *(ref @struct + 13) = byte.MaxValue;
            *(ref @struct + 14) = byte.MaxValue;
            *(ref @struct + 15) = byte.MaxValue;
            this.textBox6.AppendText("\r\n" + "Scanning sector 0x4000 for keys" + "\r\n\r\n");
            int num = 1;
            for (int i = 16410; i < 20480; i += 42)
            {
                byte* pByte_ = *(ref _Module.struct121_0 + 2388) + i;
                this.method_6(pByte_, 16U, 0U);
                if (_Module.memcmp((void*)pByte_, (void*)(&@struct), 16U) == null)
                {
                    break;
                }
                Struct79 struct2;

                _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct35_124), i);
                string str = "0x";
                str += new string((sbyte*)(&struct2));
                num++;
                this.textBox6.AppendText(str + "  " + this.string_0 + "\r\n");
            }
            this.textBox6.AppendText(Convert.ToString(num) + " keys populated " + "\r\n\r\n");
        }

        // Token: 0x06000212 RID: 530 RVA: 0x0011A7E4 File Offset: 0x0011A7E4
        private unsafe void method_54()
        {
            string text = null;
            Struct28 @struct = 255;
            *(ref @struct + 1) = byte.MaxValue;
            *(ref @struct + 2) = byte.MaxValue;
            *(ref @struct + 3) = byte.MaxValue;
            *(ref @struct + 4) = byte.MaxValue;
            *(ref @struct + 5) = byte.MaxValue;
            *(ref @struct + 6) = byte.MaxValue;
            *(ref @struct + 7) = byte.MaxValue;
            *(ref @struct + 8) = byte.MaxValue;
            *(ref @struct + 9) = byte.MaxValue;
            *(ref @struct + 10) = byte.MaxValue;
            *(ref @struct + 11) = byte.MaxValue;
            *(ref @struct + 12) = byte.MaxValue;
            *(ref @struct + 13) = byte.MaxValue;
            *(ref @struct + 14) = byte.MaxValue;
            *(ref @struct + 15) = byte.MaxValue;
            Struct28 struct2 = 187;
            *(ref struct2 + 1) = 187;
            *(ref struct2 + 2) = 187;
            *(ref struct2 + 3) = byte.MaxValue;
            *(ref struct2 + 4) = byte.MaxValue;
            *(ref struct2 + 5) = byte.MaxValue;
            *(ref struct2 + 6) = byte.MaxValue;
            *(ref struct2 + 7) = byte.MaxValue;
            *(ref struct2 + 8) = byte.MaxValue;
            *(ref struct2 + 9) = byte.MaxValue;
            *(ref struct2 + 10) = byte.MaxValue;
            *(ref struct2 + 11) = byte.MaxValue;
            *(ref struct2 + 12) = byte.MaxValue;
            *(ref struct2 + 13) = byte.MaxValue;
            *(ref struct2 + 14) = byte.MaxValue;
            *(ref struct2 + 15) = byte.MaxValue;
            Struct28 struct3 = 0;
            *(ref struct3 + 1) = 0;
            *(ref struct3 + 2) = 0;
            *(ref struct3 + 3) = 0;
            *(ref struct3 + 4) = 0;
            *(ref struct3 + 5) = 0;
            *(ref struct3 + 6) = 0;
            *(ref struct3 + 7) = 0;
            *(ref struct3 + 8) = 0;
            *(ref struct3 + 9) = 0;
            *(ref struct3 + 10) = 0;
            *(ref struct3 + 11) = 0;
            *(ref struct3 + 12) = 0;
            *(ref struct3 + 13) = 0;
            *(ref struct3 + 14) = 0;
            *(ref struct3 + 15) = 0;
            int num2;
            int value;
            for (int i = 16410; i < 20480; i += 42)
            {
                byte* pByte_ = *(ref _Module.struct121_0 + 2388) + i;
                int num = 1;
                Struct79 struct4;

                _Module.sprintf((sbyte*)(&struct4), (sbyte*)(&_Module.struct35_124), i);
                string text2 = "0x";
                text2 += new string((sbyte*)(&struct4));
                if (_Module.memcmp((void*)pByte_, (void*)(&@struct), 16U) == null)
                {
                    break;
                }
                if (_Module.memcmp((void*)pByte_, (void*)(&struct2), 16U) != null && _Module.memcmp((void*)pByte_, (void*)(&struct3), 16U) != null)
                {
                    num2 = i;
                    this.method_6(pByte_, 16U, (uint)i);
                    for (int j = 1; j < 256; j++)
                    {
                        byte* ptr = *(ref _Module.struct121_0 + 2388) + (i + 42);
                        if (_Module.memcmp((void*)pByte_, (void*)ptr, 16U) != null)
                        {
                            break;
                        }
                        num++;
                        i += 42;
                    }
                    this.textBox6.AppendText(text2 + "  " + this.string_0 + " x " + Convert.ToString(num) + "\r\n");
                    text = text2;
                    value = num;
                }
            }

            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num3 = (int)MessageBox.Show("Last good key " + this.string_0 + " found " + Convert.ToString(value) + " times, starting at " + text + "\n" + "Do you wish to revert to this key ?" + "\n\n" + "Press yes to proceed.", "Sammy-Un-Lock Repair", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            if (num3 == 6)
            {
                this.textBox6.AppendText("Reverting to last good key " + this.string_0 + " found at " + text + "\r\n");
                Struct32 struct5;

                _Module.memcpy((void*)(&struct5), *(ref _Module.struct121_0 + 2388), 262144U);
                for (int k = num2 + 16; k < 20480; k++)
                {
                    *(ref struct5 + k) = byte.MaxValue;
                }
                SaveFileDialog saveFileDialog = new SaveFileDialog();
                saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
                saveFileDialog.DefaultExt = ".bin";
                saveFileDialog.FileName = "SAM-OFW-Fixed.bin";
                saveFileDialog.RestoreDirectory = false;
                if (this.bool_2)
                {
                    saveFileDialog.InitialDirectory = this.string_10;
                }
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                    string fileName = Path.GetFileName(saveFileDialog.FileName);
                    IntPtr intPtr = Marshal.StringToHGlobalAnsi(fullPath);
                    IntPtr value2 = intPtr;
                    sbyte* pSbyte_ = (sbyte*)((void*)value2);
                    this.string_13 = saveFileDialog.FileName;
                    GStruct5* ptr2 = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                    if (ptr2 == null)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    }
                    else
                    {

                        _Module.fwrite((void*)(&struct5), 262144U, 1U, ptr2);

                        _Module.fclose(ptr2);
                        this.textBox6.AppendText("\r\n" + "F/W file saved to " + fileName + "\r\n");
                        this.method_37(fullPath, 0, (byte*)(&struct5));
                    }
                }
            }
        }

        // Token: 0x06000213 RID: 531 RVA: 0x0011ACB8 File Offset: 0x0011ACB8
        private void OpeniXtreme_Click(object sender, EventArgs e)
        {
            this.method_55();
        }

        // Token: 0x06000214 RID: 532 RVA: 0x0011ACCC File Offset: 0x0011ACCC
        private void method_55()
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Firmware file (*.bin)|*.bin|All Files (*.*)|*.*";
            openFileDialog.FileName = "ix16.bin";
            openFileDialog.DefaultExt = ".bin";
            openFileDialog.CheckFileExists = true;
            openFileDialog.CheckPathExists = true;
            openFileDialog.RestoreDirectory = false;
            if (this.bool_2)
            {
                openFileDialog.InitialDirectory = this.string_10;
            }
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(openFileDialog.FileName);
                this.method_36(fullPath, 1);
            }
        }

        // Token: 0x06000215 RID: 533 RVA: 0x0011AD4C File Offset: 0x0011AD4C
        private void method_56()
        {
            string[] commandLineArgs = Environment.GetCommandLineArgs();
            string directoryName = Path.GetDirectoryName(commandLineArgs[0]);
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "LTPlus files |LTPlus-*.bin;LT-*.bin|All Files (*.*)|*.*";
            openFileDialog.FileName = "LTPlus.bin";
            openFileDialog.DefaultExt = ".bin";
            openFileDialog.CheckFileExists = true;
            openFileDialog.CheckPathExists = true;
            openFileDialog.RestoreDirectory = false;
            openFileDialog.InitialDirectory = directoryName + "\\firmware";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(openFileDialog.FileName);
                this.method_36(fullPath, 1);
            }
        }

        // Token: 0x06000216 RID: 534 RVA: 0x0011ADDC File Offset: 0x0011ADDC
        private void textBox5_TextChanged(object sender, EventArgs e)
        {
            if (string.Compare(this.textBox5.Text, "EasyToFindTarget") != 0)
            {
                this.method_36(this.textBox5.Text, 1);
                this.textBox5.Text = "EasyToFindTarget";
            }
        }

        // Token: 0x06000217 RID: 535 RVA: 0x0011AE24 File Offset: 0x0011AE24
        private void tabPage13_DragDrop(object sender, DragEventArgs e)
        {
            string[] array = (string[])e.Data.GetData(DataFormats.FileDrop);
            string string_ = array[0];
            this.method_36(string_, 1);
        }

        // Token: 0x06000218 RID: 536 RVA: 0x0011AE58 File Offset: 0x0011AE58
        private void menuItem_2_Click(object sender, EventArgs e)
        {
            this.method_55();
        }

        // Token: 0x06000219 RID: 537 RVA: 0x0011AE6C File Offset: 0x0011AE6C
        private void menuItem_3_Click(object sender, EventArgs e)
        {
            this.method_56();
        }

        // Token: 0x0600021A RID: 538 RVA: 0x0011AE80 File Offset: 0x0011AE80
        private unsafe void menuItem_4_Click(object sender, EventArgs e)
        {

            _Module.memset(*(ref _Module.struct123_0 + 4), 0, 2392U);
            this.method_43();
        }

        // Token: 0x0600021B RID: 539 RVA: 0x0011AEA8 File Offset: 0x0011AEA8
        private void menuItem_11_Click(object sender, EventArgs e)
        {
            this.method_59();
        }

        // Token: 0x0600021C RID: 540 RVA: 0x0011AEBC File Offset: 0x0011AEBC
        private unsafe void menuItem_20_Click(object sender, EventArgs e)
        {
            string text = null;
            if (this.method_69() == 0)
            {
                this.textBox6.AppendText("No drive present on port " + this.comboBox7.Text + "\r\n\r\n");
            }
            else
            {
                this.textBox6.AppendText("Attempting to verify Target Key to drive on port " + this.comboBox7.Text + "\r\n");
                string text2 = this.textBox11.Text;
                if (this.method_107(*(ref _Module.struct123_0 + 4) + 280) == 1)
                {
                    RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\KeyList");
                    if (registryKey.GetValue(text2) != null)
                    {
                        string text3 = registryKey.GetValue(text2).ToString();
                        registryKey.Close();
                        registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + text3);
                        if (registryKey.GetValue("JobName") != null)
                        {
                            text = registryKey.GetValue("JobName").ToString();
                        }
                        string text4;
                        if (registryKey.GetValue("WorkingDir") != null)
                        {
                            text4 = registryKey.GetValue("WorkingDir").ToString();
                        }
                        else
                        {
                            text4 = "";
                        }
                        string strA;
                        if (registryKey.GetValue("LastFile") != null)
                        {
                            strA = registryKey.GetValue("LastFile").ToString();
                        }
                        else
                        {
                            strA = "";
                        }
                        if (registryKey.GetValue("Index") != null)
                        {
                            text3 = registryKey.GetValue("Index").ToString();
                        }
                        this.toolTip_0.SetToolTip(this.pictureBox5, "Drive Key found in KeyDB (" + text3 + " - " + text + ")" + Environment.NewLine + "Key is: " + text2);
                        this.toolTip_0.SetToolTip(this.pictureBox2, "Drive Key found in KeyDB (" + text3 + " - " + text + ")" + Environment.NewLine + "Key is: " + text2);
                        this.pictureBox5.Visible = true;
                        this.pictureBox7.Visible = false;
                        this.pictureBox2.Visible = true;
                        this.pictureBox6.Visible = false;
                        if (string.Compare(strA, "") != 0)
                        {
                            this.menuItem_21.Enabled = true;
                        }
                        this.menuItem_22.Enabled = true;
                        this.menuItem_23.Enabled = true;
                        this.menuItem_24.Enabled = true;
                        this.string_14 = text2;
                        this.string_15 = text3;
                        this.string_16 = strA;
                        this.string_17 = text4;
                        this.label133.Text = "Verified";
                        this.label131.Text = "Verified";
                        registryKey.Close();
                        this.Cursor = Cursors.Arrow;
                        this.textBox6.AppendText("\r\n" + "Key found in KeyDB at record (" + text3 + " - " + text + ")" + "\r\n" + "Key is: " + text2 + "\r\n" + "Key has been tested and verified, thanks C4eva ! " + "\r\n");
                    }
                    else
                    {
                        this.toolTip_0.SetToolTip(this.pictureBox5, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + text2);
                        this.toolTip_0.SetToolTip(this.pictureBox2, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + text2);
                        this.pictureBox5.Visible = true;
                        this.pictureBox7.Visible = false;
                        this.pictureBox2.Visible = true;
                        this.pictureBox6.Visible = false;
                        this.string_14 = text2;
                        this.label133.Text = "Verified";
                        this.label131.Text = "Verified";
                        registryKey.Close();
                        this.Cursor = Cursors.Arrow;
                        if (this.bool_1)
                        {
                            this.textBox6.AppendText("\r\n" + "Key NOT in KeyDB " + "\r\n" + "Key is: " + text2 + "\r\n" + "Key has been tested and verified, thanks C4eva ! " + "\r\n");
                        }
                    }
                }
                else
                {
                    this.textBox6.AppendText("\r\n" + "Target Key not verified against drive." + "\r\n");
                }
            }
        }

        // Token: 0x0600021D RID: 541 RVA: 0x0011B2A0 File Offset: 0x0011B2A0
        private void menuItem_32_Click(object sender, EventArgs e)
        {
            this.method_194();
        }

        // Token: 0x0600021E RID: 542 RVA: 0x0011B2B4 File Offset: 0x0011B2B4
        private unsafe void menuItem_37_Click(object sender, EventArgs e)
        {
            KeyCR keyCR = new KeyCR();
            keyCR.bool_4 = this.bool_2;
            keyCR.string_0 = this.string_10;
            Struct32 @struct;

            _Module.memcpy((void*)(&@struct), *(ref _Module.struct121_0 + 4780), 262144U);
            if (keyCR.ShowDialog(this) == DialogResult.OK)
            {
                Struct32 struct2;

                _Module.memcpy((void*)(&struct2), (void*)keyCR.pByte_0, 262144U);
                if (*(*(ref _Module.struct123_0 + 4)) == 6)
                {
                    this.method_35(ref struct2 + 126960, ref @struct + 126960);
                    Struct64 struct3;
                    for (int i = 0; i < 3059; i++)
                    {
                        *(ref struct3 + i) = (*(ref struct2 + (i + 186624)) ^ *(ref _Module.struct58_0 + i));
                    }
                    for (int i = 0; i < 3572; i++)
                    {
                        *(ref struct3 + (i + 3059)) = (*(ref struct2 + (i + 189683)) ^ *(ref _Module.struct56_0 + i));
                    }
                    for (int i = 0; i < 2907; i++)
                    {
                        *(ref struct3 + (i + 6631)) = (*(ref struct2 + (i + 193255)) ^ *(ref _Module.struct49_0 + i));
                    }

                    _Module.memcpy(ref @struct + 62464, (void*)(&struct3), 3059U);

                    _Module.memcpy(ref @struct + 127488, ref struct3 + 3059, 3572U);

                    _Module.memcpy(ref @struct + 193024, ref struct3 + 6631, 2907U);
                }
                if (*(*(ref _Module.struct123_0 + 4)) == 7)
                {

                    _Module.memcpy(ref @struct + 186624, ref struct2 + 186624, 9538U);
                    *(ref @struct + 115000) = *(ref struct2 + 126960);
                    *(ref @struct + 117484) = *(ref struct2 + 126961);
                    *(ref @struct + 116546) = *(ref struct2 + 126962);
                    *(ref @struct + 116352) = *(ref struct2 + 126963);
                    *(ref @struct + 118477) = *(ref struct2 + 126964);
                    *(ref @struct + 117556) = *(ref struct2 + 126965);
                    *(ref @struct + 116799) = *(ref struct2 + 126966);
                    *(ref @struct + 116517) = *(ref struct2 + 126967);
                    *(ref @struct + 116010) = *(ref struct2 + 126968);
                    *(ref @struct + 115201) = *(ref struct2 + 126969);
                    *(ref @struct + 117215) = *(ref struct2 + 126970);
                    *(ref @struct + 114723) = *(ref struct2 + 126971);
                    *(ref @struct + 115872) = *(ref struct2 + 126972);
                    *(ref @struct + 116122) = *(ref struct2 + 126973);
                    *(ref @struct + 115710) = *(ref struct2 + 126974);
                    *(ref @struct + 118601) = *(ref struct2 + 126975);
                }
                this.textBox6.AppendText("\r\n" + "re-parseing file " + "\r\n");
                this.method_37("", 1, (byte*)(&@struct));
                this.bool_10 = true;
                this.tabControl5.SelectedTab = this.Firmtools;
                Application.DoEvents();
                this.Cursor = Cursors.WaitCursor;
                Struct28 struct4;
                Struct28 struct5;
                if (*(*(ref _Module.struct123_0 + 4)) == 6)
                {
                    if (this.method_107(*(ref _Module.struct123_0 + 4) + 280) == 1)
                    {
                        this.textBox6.AppendText("Key Verified " + "\r\n");
                        if (this.method_57((byte*)(&struct4)) == 1)
                        {
                            if (string.Compare(this.label109.Text, 0, "DG-16D5S", 0, 8) == 0)
                            {
                                this.textBox6.AppendText("Grabbing RAM data " + "\r\n");
                                if (this.method_91(2, 180, 96, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 261888, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(2, 180, 112, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 261904, (void*)(&struct5), 4U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 8, 208, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 261912, ref struct5 + 8, 8U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 8, 224, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 261920, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 8, 240, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 261936, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 0, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 261952, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 16, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 261968, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 32, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 261984, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 48, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 262016, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 64, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 262032, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 80, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 262048, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 96, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 262064, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 112, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 262080, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 128, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 262096, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 144, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 262128, (void*)(&struct5), 16U);
                                this.textBox6.AppendText("." + "\r\n");
                                Application.DoEvents();
                            }
                            else if (string.Compare(this.label109.Text, 0, "DG-16D4S", 0, 8) == 0)
                            {
                                this.textBox6.AppendText("Grabbing RAM data " + "\r\n");
                                if (this.method_91(2, 181, 96, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130816, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(2, 181, 112, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130832, (void*)(&struct5), 4U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();

                                _Module.memset(ref @struct + 130833, 0, 3U);

                                _Module.memset(ref @struct + 130836, 255, 4U);
                                if (this.method_91(3, 8, 238, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130840, (void*)(&struct5), 8U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 8, 246, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130848, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 6, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130864, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 22, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130880, (void*)(&struct5), 16U);
                                this.textBox6.AppendText("." + "\r\n");
                                Application.DoEvents();
                            }
                            else if (string.Compare(this.label109.Text, 0, "DVD-ROM DL10N", 0, 13) == 0)
                            {

                                _Module.memcpy(ref @struct + 262128, (void*)(&struct4), 16U);
                                this.method_83(ref @struct + 261888);
                            }
                        }
                        this.textBox6.AppendText("\r\n" + "re-parseing file " + "\r\n");
                        this.method_37("", 1, (byte*)(&@struct));
                        this.bool_10 = true;
                        this.tabControl5.SelectedTab = this.Firmtools;
                    }
                    else
                    {
                        this.textBox6.AppendText("Key Verification Failed !! " + "\r\n");
                        this.textBox6.AppendText("Additional extracts not completed. " + "\r\n");
                    }
                }
                if (*(*(ref _Module.struct123_0 + 4)) == 7)
                {
                    if (this.method_107(*(ref _Module.struct123_0 + 4) + 280) == 1)
                    {
                        if (this.method_57((byte*)(&struct4)) == 1)
                        {
                            if (string.Compare(this.label109.Text, 0, "DG-16D5S", 0, 8) == 0)
                            {
                                this.textBox6.AppendText("Grabbing RAM data " + "\r\n");
                                if (this.method_91(2, 180, 96, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130816, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(2, 180, 112, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130832, (void*)(&struct5), 4U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 8, 208, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130840, ref struct5 + 8, 8U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 8, 224, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130848, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 8, 240, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130864, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 0, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130880, (void*)(&struct5), 16U);
                                this.textBox6.AppendText("." + "\r\n");
                                Application.DoEvents();
                            }
                            else if (string.Compare(this.label109.Text, 0, "DG-16D4S", 0, 8) == 0)
                            {
                                this.textBox6.AppendText("Grabbing RAM data " + "\r\n");
                                if (this.method_91(2, 181, 96, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130816, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(2, 181, 112, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130832, (void*)(&struct5), 4U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();

                                _Module.memset(ref @struct + 130833, 0, 3U);

                                _Module.memset(ref @struct + 130836, 255, 4U);
                                if (this.method_91(3, 8, 238, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130840, (void*)(&struct5), 8U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 8, 246, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130848, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 6, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130864, (void*)(&struct5), 16U);
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                                if (this.method_91(3, 9, 22, (byte*)(&struct5)) == 0)
                                {
                                    return;
                                }

                                _Module.memcpy(ref @struct + 130880, (void*)(&struct5), 16U);
                                this.textBox6.AppendText("." + "\r\n");
                                Application.DoEvents();
                            }
                            else if (string.Compare(this.label109.Text, 0, "DVD-ROM DL10N", 0, 13) == 0)
                            {
                                this.method_83(ref @struct + 130816);
                            }
                        }
                        this.textBox6.AppendText("\r\n" + "re-parseing file " + "\r\n");
                        this.method_37("", 1, (byte*)(&@struct));
                        this.bool_10 = true;
                        this.tabControl5.SelectedTab = this.Firmtools;
                    }
                    else
                    {
                        this.textBox6.AppendText("Key Verification Failed !! " + "\r\n");
                        this.textBox6.AppendText("Additional extracts not completed. " + "\r\n");
                    }
                }
                this.Cursor = Cursors.Arrow;
                this.method_58();
            }
        }

        // Token: 0x0600021F RID: 543 RVA: 0x0011C0D4 File Offset: 0x0011C0D4
        private unsafe int method_57(byte* pByte_0)
        {
            Struct28 @struct;

            _Module.memset((void*)(&@struct), 255, 16U);
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                int selectedIndex = this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72);
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72 + 4));
                uint num2;
                if (num == 160U)
                {
                    num2 = 0U;
                }
                else
                {
                    num2 = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct80 struct2;

                _Module.memset((void*)(&struct2), 0, 42U);
                Struct52 struct3;

                _Module.memset((void*)(&struct3), 0, 12U);
                struct3 = 90;
                *(ref struct3 + 2) = 37;
                *(ref struct3 + 8) = 26;
                uint num3;
                if (_Module.smethod_16((byte*)(&struct3), 12U, (byte)num2, 512, (void*)(&struct2), &num3, 26U, 1, &gstruct) != null)
                {
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else if (_Module.memcmp((void*)(&@struct), ref struct2 + 10, 16U) == null)
                {
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {

                    _Module.memcpy((void*)pByte_0, ref struct2 + 10, 16U);
                    this.Cursor = Cursors.Arrow;
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x06000220 RID: 544 RVA: 0x0011C1D8 File Offset: 0x0011C1D8
        private void tabPage13_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
            {
                e.Effect = DragDropEffects.All;
            }
            else
            {
                e.Effect = DragDropEffects.None;
            }
            string[] array = (string[])e.Data.GetData(DataFormats.FileDrop);
            if (array.Length > 1)
            {
                e.Effect = DragDropEffects.None;
            }
        }

        // Token: 0x06000221 RID: 545 RVA: 0x0011C230 File Offset: 0x0011C230
        private void SaveTarget_Click(object sender, EventArgs e)
        {
            this.method_58();
        }

        // Token: 0x06000222 RID: 546 RVA: 0x0011C244 File Offset: 0x0011C244
        private unsafe void method_58()
        {
            if (!this.bool_10)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("Target hasn't been Spoofed", "Saving Target", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
            saveFileDialog.DefaultExt = ".bin";
            saveFileDialog.RestoreDirectory = false;
            if (this.bool_2)
            {
                saveFileDialog.InitialDirectory = this.string_10;
            }
            if (*(*(ref _Module.struct123_0 + 4)) == 2)
            {
                saveFileDialog.FileName = "Hit_CFW.bin";
            }
            else if (*(*(ref _Module.struct123_0 + 4)) == 3)
            {
                saveFileDialog.FileName = "Benq_CFW.bin";
            }
            else if (*(*(ref _Module.struct123_0 + 4)) == 1)
            {
                saveFileDialog.FileName = "Sam_CFW.bin";
            }
            else if (*(*(ref _Module.struct123_0 + 4)) == 4)
            {
                saveFileDialog.FileName = "Lite_CFW.bin";
            }
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                string fileName = Path.GetFileName(saveFileDialog.FileName);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(fullPath);
                IntPtr value = intPtr;
                sbyte* pSbyte_ = (sbyte*)((void*)value);
                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                if (ptr == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return;
                }
                this.textBox6.AppendText("\r\n" + "Target f/w saved as: " + fileName + "\r\n");

                _Module.fwrite(*(ref _Module.struct121_0 + 4780), 262144U, 1U, ptr);

                _Module.fclose(ptr);
                this.textBox17.Text = fullPath;
                this.textBox18.Text = fullPath;
            }
            if (*(*(ref _Module.struct123_0 + 4)) == 2)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num = (int)MessageBox.Show("Do you wish to save an Encrypted copy?", "Save Target", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                if (num == 6)
                {
                    SaveFileDialog saveFileDialog2 = new SaveFileDialog();
                    saveFileDialog2.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
                    saveFileDialog2.DefaultExt = ".bin";
                    saveFileDialog2.FileName = "Hit_CFW.e.bin";
                    saveFileDialog2.RestoreDirectory = false;
                    if (this.bool_2)
                    {
                        saveFileDialog2.InitialDirectory = this.string_10;
                    }
                    if (saveFileDialog2.ShowDialog() == DialogResult.OK)
                    {
                        string fullPath2 = Path.GetFullPath(saveFileDialog2.FileName);
                        string fileName2 = Path.GetFileName(saveFileDialog2.FileName);
                        IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(fullPath2);
                        IntPtr value2 = intPtr2;
                        sbyte* pSbyte_2 = (sbyte*)((void*)value2);
                        string fileName3 = saveFileDialog2.FileName;
                        GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_2, (sbyte*)(&_Module.struct18_5));
                        if (ptr == null)
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            MessageBox.Show(fileName2, "Can't open file", MessageBoxButtons.OK);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        }
                        else
                        {
                            this.textBox6.AppendText("EnCrypted target f/w saved as: " + fileName2 + "\r\n");
                            this.method_391(*(ref _Module.struct121_0 + 4780), *(ref _Module.struct121_0 + 9564), 262144);

                            _Module.fwrite(*(ref _Module.struct121_0 + 9564), 262144U, 1U, ptr);

                            _Module.fclose(ptr);
                        }
                    }
                }
            }
        }

        // Token: 0x06000223 RID: 547 RVA: 0x0011C5B8 File Offset: 0x0011C5B8
        private unsafe void method_59()
        {
            Struct34 @struct = 127;
            *(ref @struct + 1) = byte.MaxValue;
            *(ref @struct + 2) = byte.MaxValue;
            *(ref @struct + 3) = byte.MaxValue;
            *(ref @struct + 4) = byte.MaxValue;
            *(ref @struct + 5) = byte.MaxValue;
            *(ref @struct + 6) = byte.MaxValue;
            *(ref @struct + 7) = byte.MaxValue;
            *(ref @struct + 8) = byte.MaxValue;
            *(ref @struct + 9) = byte.MaxValue;
            *(ref @struct + 10) = byte.MaxValue;
            *(ref @struct + 11) = byte.MaxValue;
            *(ref @struct + 12) = byte.MaxValue;
            *(ref @struct + 13) = byte.MaxValue;
            *(ref @struct + 14) = byte.MaxValue;
            *(ref @struct + 15) = byte.MaxValue;
            *(ref @struct + 16) = byte.MaxValue;
            *(ref @struct + 17) = byte.MaxValue;
            *(ref @struct + 18) = byte.MaxValue;
            *(ref @struct + 19) = byte.MaxValue;
            *(ref @struct + 20) = byte.MaxValue;
            *(ref @struct + 21) = byte.MaxValue;
            *(ref @struct + 22) = byte.MaxValue;
            *(ref @struct + 23) = byte.MaxValue;
            *(ref @struct + 24) = byte.MaxValue;
            *(ref @struct + 25) = byte.MaxValue;
            *(ref @struct + 26) = byte.MaxValue;
            *(ref @struct + 27) = byte.MaxValue;
            *(ref @struct + 28) = byte.MaxValue;
            *(ref @struct + 29) = byte.MaxValue;
            *(ref @struct + 30) = byte.MaxValue;
            *(ref @struct + 31) = byte.MaxValue;
            *(ref @struct + 32) = 0;
            *(ref @struct + 33) = 17;
            *(ref @struct + 34) = 34;
            *(ref @struct + 35) = 51;
            *(ref @struct + 36) = 68;
            *(ref @struct + 37) = 85;
            *(ref @struct + 38) = 102;
            *(ref @struct + 39) = 119;
            *(ref @struct + 40) = 136;
            *(ref @struct + 41) = 153;
            *(ref @struct + 42) = 170;
            *(ref @struct + 43) = 187;
            *(ref @struct + 44) = 204;
            *(ref @struct + 45) = 221;
            *(ref @struct + 46) = 238;
            *(ref @struct + 47) = 250;
            Struct55 struct2 = 68;
            *(ref struct2 + 1) = 117;
            *(ref struct2 + 2) = 109;
            *(ref struct2 + 3) = 109;
            *(ref struct2 + 4) = 121;
            *(ref struct2 + 5) = 32;
            *(ref struct2 + 6) = 102;
            *(ref struct2 + 7) = 114;
            *(ref struct2 + 8) = 111;
            *(ref struct2 + 9) = 109;
            *(ref struct2 + 10) = 32;
            *(ref struct2 + 11) = 69;
            *(ref struct2 + 12) = 110;
            *(ref struct2 + 13) = 99;
            *(ref struct2 + 14) = 114;
            *(ref struct2 + 15) = 116;
            *(ref struct2 + 16) = 121;
            *(ref struct2 + 17) = 112;
            *(ref struct2 + 18) = 116;
            *(ref struct2 + 19) = 101;
            *(ref struct2 + 20) = 100;
            *(ref struct2 + 21) = 32;
            *(ref struct2 + 22) = 102;
            *(ref struct2 + 23) = 47;
            *(ref struct2 + 24) = 119;
            *(ref struct2 + 25) = 0;
            *(ref struct2 + 26) = 0;
            *(ref struct2 + 27) = 0;
            *(ref struct2 + 28) = 0;
            *(ref struct2 + 29) = 0;
            *(ref struct2 + 30) = 0;
            *(ref struct2 + 31) = 0;
            Struct30 struct3;

            _Module.memset((void*)(&struct3), 0, 512U);
            Struct30 struct4;

            _Module.memset((void*)(&struct4), 0, 512U);
            Struct29 struct5;

            _Module.memset((void*)(&struct5), 0, 96U);
            Struct29 struct6;

            _Module.memset((void*)(&struct6), 0, 96U);
            Struct81 struct7;

            _Module.memset((void*)(&struct7), 0, 752U);
            if (*(*(ref _Module.struct123_0 + 4) + 2) == 1)
            {

                _Module.memcpy((void*)(&struct5), (void*)(&_Module.struct29_35), 96U);

                _Module.memcpy((void*)(&struct6), (void*)(&_Module.struct29_32), 96U);

                _Module.memcpy((void*)(&struct3), (void*)(&_Module.struct46_5), 180U);

                _Module.memcpy((void*)(&struct4), (void*)(&_Module.struct46_5), 180U);
            }
            else if (*(*(ref _Module.struct123_0 + 4) + 2) == 2)
            {

                _Module.memcpy((void*)(&struct5), (void*)(&_Module.struct29_30), 96U);

                _Module.memcpy((void*)(&struct6), (void*)(&_Module.struct29_26), 96U);

                _Module.memcpy((void*)(&struct3), (void*)(&_Module.struct46_3), 180U);

                _Module.memcpy((void*)(&struct4), (void*)(&_Module.struct46_3), 180U);
            }
            else if (*(*(ref _Module.struct123_0 + 4) + 2) == 3)
            {

                _Module.memcpy((void*)(&struct5), (void*)(&_Module.struct29_30), 96U);

                _Module.memcpy((void*)(&struct6), (void*)(&_Module.struct29_17), 96U);

                _Module.memcpy((void*)(&struct3), (void*)(&_Module.struct46_3), 180U);

                _Module.memcpy((void*)(&struct4), (void*)(&_Module.struct46_3), 180U);
            }
            else if (*(*(ref _Module.struct123_0 + 4) + 2) == 4)
            {

                _Module.memcpy((void*)(&struct5), (void*)(&_Module.struct29_5), 96U);

                _Module.memcpy((void*)(&struct6), (void*)(&_Module.struct29_32), 96U);

                _Module.memcpy((void*)(&struct3), (void*)(&_Module.struct46_24), 180U);

                _Module.memcpy((void*)(&struct4), (void*)(&_Module.struct46_24), 180U);
            }
            for (int i = 20; i < 93; i += 2)
            {
                *(ref struct3 + i) = *(ref struct4 + (i + 1));
                *(ref struct3 + (i + 1)) = *(ref struct4 + i);
            }
            Struct32 struct8;

            _Module.memset((void*)(&struct8), 0, 262144U);
            Struct33 struct9;

            _Module.memset((void*)(&struct9), 255, 4096U);
            byte* ptr = ref struct8 + 11264;

            _Module.memcpy((void*)ptr, (void*)(&struct3), 512U);
            ptr = ref struct8 + 11776;

            _Module.memcpy((void*)ptr, (void*)(&struct5), 96U);
            ptr = ref struct8 + 12032;

            _Module.memcpy((void*)ptr, (void*)(&struct6), 96U);
            ptr = ref struct8 + 24512;

            _Module.memcpy((void*)ptr, (void*)(&struct2), 32U);
            ptr = ref struct8 + 40960;

            _Module.memcpy((void*)ptr, (void*)(&struct9), 4096U);
            ptr = ref struct8 + 40960;

            _Module.memcpy((void*)ptr, (void*)(&@struct), 48U);
            ptr = ref struct8 + 41008;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 4) + 280, 16U);
            ptr = ref struct8 + 130816;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 4) + 2028, 224U);
            ptr = ref struct8 + 11284;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 4) + 2028, 20U);
            ptr = ref struct8 + 11818;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 4) + 2028, 20U);
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
            saveFileDialog.DefaultExt = ".bin";
            saveFileDialog.FileName = "Dummy.bin";
            saveFileDialog.RestoreDirectory = false;
            if (this.bool_2)
            {
                saveFileDialog.InitialDirectory = this.string_10;
            }
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(fullPath);
                IntPtr value = intPtr;
                sbyte* pSbyte_ = (sbyte*)((void*)value);
                this.string_13 = saveFileDialog.FileName;
                GStruct5* ptr2 = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                if (ptr2 == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {
                    this.textBox6.AppendText("Dummy from Lite-On f/w saved as: " + saveFileDialog.FileName + "\r\n");

                    _Module.fwrite((void*)(&struct8), 262144U, 1U, ptr2);

                    _Module.fclose(ptr2);
                }
            }
        }

        // Token: 0x06000224 RID: 548 RVA: 0x0011CC80 File Offset: 0x0011CC80
        private void button6_Click(object sender, EventArgs e)
        {
            this.method_46();
            this.method_47();
            this.method_41();
            this.bool_10 = true;
        }

        // Token: 0x06000225 RID: 549 RVA: 0x0011CCA8 File Offset: 0x0011CCA8
        private unsafe void button29_Click(object sender, EventArgs e)
        {
            FreeKey freeKey = new FreeKey();
            if (this.bool_2)
            {
                freeKey.string_0 = this.string_10;
                freeKey.bool_4 = this.bool_2;
            }
            freeKey.ushort_0 = *(*(ref _Module.struct123_0 + 4));
            freeKey.ushort_1 = *(*(ref _Module.struct123_0 + 4) + 2);
            freeKey.ushort_2 = *(*(ref _Module.struct123_0 + 4) + 2382);
            freeKey.ushort_3 = *(*(ref _Module.struct123_0 + 4) + 2384);
            freeKey.textBox1.Text = this.textBox11.Text;
            if (freeKey.pByte_0 != null)
            {

                _Module.free((void*)freeKey.pByte_0);
            }
            freeKey.pByte_0 = _Module.malloc(16U);

            _Module.memcpy((void*)freeKey.pByte_0, *(ref _Module.struct123_0 + 4) + 280, 16U);
            if (freeKey.pByte_1 != null)
            {

                _Module.free((void*)freeKey.pByte_1);
            }
            freeKey.pByte_1 = _Module.malloc(96U);

            _Module.memcpy((void*)freeKey.pByte_1, *(ref _Module.struct123_0 + 4) + 568, 96U);
            if (freeKey.pByte_2 != null)
            {

                _Module.free((void*)freeKey.pByte_2);
            }
            freeKey.pByte_2 = _Module.malloc(180U);

            _Module.memcpy((void*)freeKey.pByte_2, *(ref _Module.struct123_0 + 4) + 780, 180U);
            if (*(*(ref _Module.struct123_0 + 4) + 2382) == 4)
            {
                this.method_9(*(ref _Module.struct123_0 + 4) + 610, 20U);
                freeKey.textBox2.Text = this.string_0;
                if (freeKey.pByte_4 != null)
                {

                    _Module.free((void*)freeKey.pByte_4);
                }
                freeKey.pByte_4 = _Module.malloc(20U);

                _Module.memset((void*)freeKey.pByte_4, 32, 20U);

                _Module.memcpy((void*)freeKey.pByte_4, *(ref _Module.struct123_0 + 4) + 610, 20U);
            }
            if (freeKey.ShowDialog(this) == DialogResult.OK)
            {
                if (_Module.memcmp(*(ref _Module.struct123_0 + 4) + 280, (void*)freeKey.pByte_0, 16U) != null)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + 4) + 280, (void*)freeKey.pByte_0, 16U);
                    this.textBox6.AppendText("DVD Key copied to target" + "\r\n");
                }
                else
                {
                    this.textBox6.AppendText("DVD Key already matches" + "\r\n");
                }
                if (_Module.memcmp(*(ref _Module.struct123_0 + 4) + 2348, (void*)(&_Module.struct74_0), 10U) == null && *(*(ref _Module.struct123_0 + 4)) == 4)
                {
                    this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
                }
                if (_Module.memcmp(*(ref _Module.struct123_0 + 4) + 2348, (void*)(&_Module.struct22_4), 7U) == null && *(*(ref _Module.struct123_0 + 4)) == 4)
                {
                    this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
                }
                if (_Module.memcmp(*(ref _Module.struct123_0 + 4) + 2348, (void*)(&_Module.struct22_4), 7U) == null && *(*(ref _Module.struct123_0 + 4)) == 5)
                {
                    this.textBox6.AppendText("Target is LT - ID strings not copied to Target" + "\r\n");
                }
                else if (_Module.memcmp(*(ref _Module.struct123_0 + 4) + 568, (void*)freeKey.pByte_1, 96U) != null)
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + 4) + 568, (void*)freeKey.pByte_1, 96U);

                    _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2316, *(ref _Module.struct123_0 + 4) + 576, 28U);
                    this.textBox6.AppendText("Inquiry string copied to Target" + "\r\n");

                    _Module.memcpy(*(ref _Module.struct123_0 + 4) + 780, (void*)freeKey.pByte_2, 180U);
                    this.textBox6.AppendText("Identify string copied to Target" + "\r\n");
                }
                else
                {
                    this.textBox6.AppendText("ID strings already match" + "\r\n");
                }
                if (*(*(ref _Module.struct123_0 + 4) + 2382) == 2)
                {
                    this.textBox6.AppendText(string.Concat("Setting Master Checksum."));
                    *(*(ref _Module.struct123_0 + 4) + 2020) = 0;
                }
                *(*(ref _Module.struct123_0 + 4) + 2382) = (short)freeKey.ushort_2;
                *(*(ref _Module.struct123_0 + 4) + 2384) = (short)freeKey.ushort_3;
                this.bool_10 = true;
                this.method_47();
                this.method_41();
            }
        }

        // Token: 0x06000226 RID: 550 RVA: 0x0011D108 File Offset: 0x0011D108
        private void button5_Click(object sender, EventArgs e)
        {
            this.method_18();
            this.method_60();
            this.Cursor = Cursors.Arrow;
            this.method_19();
        }

        // Token: 0x06000227 RID: 551 RVA: 0x0011D134 File Offset: 0x0011D134
        private unsafe void method_60()
        {
            if (this.pVoid_0 != null)
            {

                _Module.SetCommMask(this.pVoid_0, 64);
            }
            this.method_61();
            int selectedIndex = this.comboBox10.SelectedIndex;
            if (this.checkBox9.CheckState == CheckState.Checked && *(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 2 && this.method_146() == 1)
            {
                this.method_123();
            }
        }

        // Token: 0x06000228 RID: 552 RVA: 0x0011D19C File Offset: 0x0011D19C
        private unsafe void method_61()
        {
            this.label88.Text = "";
            this.label87.Text = "";
            Application.DoEvents();
            this.method_172();
            if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
            {
                this.textBox6.AppendText("\r\n" + "No Drive Detected! DVDkey files extraction aborted! " + "\r\n\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("        No Drive Detected!" + "\n" + "DVDkey files extraction aborted! ", "DVDkey Extract", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
            {
                this.textBox6.AppendText("\r\n" + "Drive in Vendor Mode! DVDkey files extraction aborted! " + "\r\n\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("        Drive in Vendor Mode!" + "\n" + "DVDkey files extraction aborted! ", "DVDkey Extract", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else if (this.method_62() == 0)
            {
                this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else
            {
                if (this.checkBox8.CheckState == CheckState.Unchecked)
                {
                    this.method_116();
                }
                if (this.method_63() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else if (this.method_65() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else if (this.method_66() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else if (this.method_67() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else
                {
                    this.method_117();
                    if (this.bool_2 && this.method_107(*(ref _Module.struct123_0 + 4) + 280) == 1)
                    {
                        this.tabControl5.SelectedTab = this.Benq;
                        this.pictureBox5.Visible = true;
                        this.pictureBox7.Visible = false;
                        this.pictureBox2.Visible = true;
                        this.pictureBox6.Visible = false;
                        this.label133.Text = "Verified";
                        this.label131.Text = "Verified";
                        this.textBox6.AppendText("Target Key verified, thanks C4eva" + "\r\n" + "Proceeding with LO-Erase" + "\r\n");
                        this.method_14();
                        this.method_207();
                        this.method_15();
                    }
                }
            }
        }

        // Token: 0x06000229 RID: 553 RVA: 0x003C1B4C File Offset: 0x00309B4C
        private unsafe int method_62()
        {
            string text = null;
            Struct52 @struct = 168;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            *(ref @struct + 4) = 0;
            *(ref @struct + 5) = 0;
            *(ref @struct + 6) = 0;
            *(ref @struct + 7) = 0;
            *(ref @struct + 8) = 0;
            *(ref @struct + 9) = 0;
            *(ref @struct + 10) = 0;
            *(ref @struct + 11) = 0;
            Struct52 struct2 = 253;
            *(ref struct2 + 1) = 14;
            *(ref struct2 + 2) = 66;
            *(ref struct2 + 3) = 69;
            *(ref struct2 + 4) = 78;
            *(ref struct2 + 5) = 81;
            *(ref struct2 + 6) = 0;
            *(ref struct2 + 7) = 0;
            *(ref struct2 + 8) = 0;
            *(ref struct2 + 9) = 0;
            *(ref struct2 + 10) = 0;
            *(ref struct2 + 11) = 0;
            Struct55 struct3 = 68;
            *(ref struct3 + 1) = 86;
            *(ref struct3 + 2) = 68;
            *(ref struct3 + 3) = 75;
            *(ref struct3 + 4) = 101;
            *(ref struct3 + 5) = 121;
            *(ref struct3 + 6) = 51;
            *(ref struct3 + 7) = 50;
            *(ref struct3 + 8) = 32;
            *(ref struct3 + 9) = 101;
            *(ref struct3 + 10) = 120;
            *(ref struct3 + 11) = 116;
            *(ref struct3 + 12) = 114;
            *(ref struct3 + 13) = 97;
            *(ref struct3 + 14) = 99;
            *(ref struct3 + 15) = 116;
            *(ref struct3 + 16) = 0;
            *(ref struct3 + 17) = 0;
            *(ref struct3 + 18) = 0;
            *(ref struct3 + 19) = 0;
            *(ref struct3 + 20) = 0;
            *(ref struct3 + 21) = 0;
            *(ref struct3 + 22) = 0;
            *(ref struct3 + 23) = 0;
            *(ref struct3 + 24) = 0;
            *(ref struct3 + 25) = 0;
            *(ref struct3 + 26) = 0;
            *(ref struct3 + 27) = 0;
            *(ref struct3 + 28) = 0;
            *(ref struct3 + 29) = 0;
            *(ref struct3 + 30) = 0;
            *(ref struct3 + 31) = 0;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72U + 4));
                ushort num2 = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint selectedIndex2 = (uint)this.comboBox10.SelectedIndex;
                Struct84 struct4;

                _Module.sprintf((sbyte*)(&struct4), (sbyte*)(&_Module.struct10_22), Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex2 * 324U)));
                GStruct96 gstruct = 0;
                initblk(ref gstruct + 4, 0, 24);
                GStruct95 gstruct2 = 0;
                initblk(ref gstruct2 + 4, 0, 16);
                GStruct95 gstruct3 = 0;
                initblk(ref gstruct3 + 4, 0, 16);
                if (this.method_128() == 1)
                {

                    _Module.Sleep(500);
                }
                else if (num2 == 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Power on drive with tray half open.", "DVDKey32", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
                if (registryKey.GetValue("Delay32") != null)
                {
                    text = registryKey.GetValue("Delay32").ToString();
                }
                else if (registryKey.GetValue("Delay32") == null)
                {
                    registryKey.SetValue("Delay32", "0");
                    text = "0";
                }
                registryKey.Close();
                int num3 = Convert.ToInt32(text) * 1000;
                if (num3 > 20000)
                {
                    num3 = 20000;
                }
                if (num3 != 0)
                {
                    int num4 = num3 / 250;
                    this.textBox6.AppendText("DVDkey delayed by " + text + " seconds" + "\r\n");
                    for (int i = 0; i < num4; i++)
                    {
                        this.textBox6.AppendText(".");

                        _Module.Sleep(250);
                    }
                    this.textBox6.AppendText("\r\n");
                }
                this.textBox6.AppendText("Sending DVDKey request to I/O port " + this.label123.Text);
                this.textBox6.AppendText(" and " + this.comboBox10.Text + "\r\n\r\n");
                this.label88.Text = " ";
                this.label87.Text = " ";
                Struct83 struct5;

                _Module.memset((void*)(&struct5), 0, 24U);
                this.Cursor = Cursors.WaitCursor;
                GStruct3 gstruct4;

                _Module.smethod_21(&gstruct4, num2, 0, 1, 10000U);
                if (num2 != 0)
                {

                    _Module.smethod_2(*(ref gstruct4 + 14), (byte)num);

                    _Module.smethod_2(*(ref gstruct4 + 18), 8);
                    while ((_Module.smethod_0(*(ref gstruct4 + 16)) & 128) != null)
                    {
                    }
                }
                for (uint num5 = 0U; num5 < 768U; num5 += 1U)
                {
                    if (gstruct4 == null)
                    {
                        this.method_424(9);
                    }
                    else
                    {

                        _Module.smethod_2(*(ref gstruct4 + 14), (byte)num);
                        while ((_Module.smethod_0(*(ref gstruct4 + 16)) & 128) != null)
                        {
                        }

                        _Module.smethod_2(*(ref gstruct4 + 18), 160);
                        while ((_Module.smethod_0(*(ref gstruct4 + 16)) & 128) != null)
                        {
                        }

                        _Module.smethod_3(gstruct4, 168);

                        _Module.smethod_3(gstruct4, 0);

                        _Module.smethod_3(gstruct4, 0);

                        _Module.smethod_3(gstruct4, 0);

                        _Module.smethod_3(gstruct4, 0);

                        _Module.smethod_3(gstruct4, 0);
                    }
                    if (num5 % 64U == 0U)
                    {
                        this.textBox6.AppendText(".");
                    }
                    Application.DoEvents();
                }
                *(ref gstruct2 + 16) = _Module.CreateEventA(null, 1, 0, null);
                *(ref gstruct3 + 16) = _Module.CreateEventA(null, 1, 0, null);
                void* ptr = _Module.CreateFileA((sbyte*)(&struct4), -1073741824, 0, null, 3, 1073741952, null);
                if (ptr == -1)
                {
                    this.textBox6.AppendText("\r\n" + "Failed to open com port " + Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex2 * 324U)) + "\r\n");
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {
                    gstruct = 28;

                    _Module.GetCommState(ptr, &gstruct);
                    *(ref gstruct + 4) = 115200;
                    *(ref gstruct + 18) = 8;
                    *(ref gstruct + 19) = 0;
                    *(ref gstruct + 20) = 0;
                    *(ref gstruct + 8) = (*(ref gstruct + 8) & -257);
                    *(ref gstruct + 8) = (*(ref gstruct + 8) & -513);

                    _Module.SetCommState(ptr, &gstruct);
                    GStruct94 gstruct5 = 20;
                    *(ref gstruct5 + 8) = 20;
                    *(ref gstruct5 + 4) = 20;
                    *(ref gstruct5 + 16) = 20;
                    *(ref gstruct5 + 12) = 20;

                    _Module.SetCommTimeouts(ptr, &gstruct5);
                    uint num6;

                    _Module.ReadFile(ptr, (void*)(&struct5), 24, (uint*)(&num6), &gstruct2);
                    for (uint num5 = 0U; num5 < 256U; num5 += 1U)
                    {
                        if (gstruct4 == null)
                        {
                            this.method_424(10);
                        }
                        else
                        {

                            _Module.smethod_2(*(ref gstruct4 + 14), (byte)num);
                            while ((_Module.smethod_0(*(ref gstruct4 + 16)) & 128) != null)
                            {
                            }

                            _Module.smethod_2(*(ref gstruct4 + 18), 160);
                            while ((_Module.smethod_0(*(ref gstruct4 + 16)) & 128) != null)
                            {
                            }

                            _Module.smethod_3(gstruct4, 3837);

                            _Module.smethod_3(gstruct4, 17730);

                            _Module.smethod_3(gstruct4, 20814);

                            _Module.smethod_3(gstruct4, 0);

                            _Module.smethod_3(gstruct4, 0);

                            _Module.smethod_3(gstruct4, 0);
                        }
                        if (num5 % 64U == 0U)
                        {
                            this.textBox6.AppendText(".");
                        }
                        Application.DoEvents();
                    }

                    _Module.GetOverlappedResult(ptr, &gstruct2, (uint*)(&num6), 1);
                    Struct82 struct6;

                    _Module.memcpy((void*)(&struct6), (void*)(&struct5), 24U);
                    this.Cursor = Cursors.Arrow;
                    if (struct6 == 131 && *(ref struct6 + 4) == 131 && *(ref struct6 + 8) == 131 && *(ref struct6 + 12) == 131 && *(ref struct6 + 16) == 131 && *(ref struct6 + 20) == 131 && *(ref struct6 + 22) == 32 && *(ref struct6 + 23) == 32)
                    {
                        this.textBox6.AppendText(" Serial Data looks ok, " + " ");
                        Struct28 struct7;

                        _Module.memcpy((void*)(&struct7), ref struct5 + 1, 3U);

                        _Module.memcpy(ref struct7 + 3, ref struct5 + 5, 3U);

                        _Module.memcpy(ref struct7 + 6, ref struct5 + 9, 3U);

                        _Module.memcpy(ref struct7 + 9, ref struct5 + 13, 3U);

                        _Module.memcpy(ref struct7 + 12, ref struct5 + 17, 3U);

                        _Module.memcpy(ref struct7 + 15, ref struct5 + 21, 1U);
                        this.method_6((byte*)(&struct7), 16U, 0U);
                        this.textBox6.AppendText("key returned: " + this.string_0 + "\r\n");
                        this.label87.Text = this.string_0;
                        this.label88.Text = "Good";
                        this.Cursor = Cursors.Arrow;

                        _Module.CloseHandle(ptr);
                        if (this.method_107((byte*)(&struct7)) != 1)
                        {
                            this.textBox6.AppendText("\r\n" + "Extracted drive key failed Verification !" + "\r\n\r\n");
                            this.Cursor = Cursors.Arrow;
                            this.label87.Text = "";
                            this.label88.Text = "bad";
                            result = 0;
                        }
                        else
                        {
                            this.textBox6.AppendText("\r\n" + "Extracted drive key passed Verification !" + "\r\n\r\n");

                            _Module.memcpy(*(ref _Module.struct123_0 + 8) + 280, (void*)(&struct7), 16U);

                            _Module.memcpy(*(ref _Module.struct123_0 + 8) + 2348, (void*)(&struct3), 32U);
                            result = 1;
                        }
                    }
                    else
                    {
                        this.textBox6.AppendText(" Serial Data is bad, " + "\r\n");

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("***WARNING*** Serial Data is bad", "DVDKey32", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        this.label88.Text = "Bad";

                        _Module.CloseHandle(ptr);
                        this.Cursor = Cursors.Arrow;
                        result = 0;
                    }
                }
            }
            return result;
        }

        // Token: 0x0600022A RID: 554 RVA: 0x0011DEF0 File Offset: 0x0011DEF0
        private unsafe int method_63()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 18;
                *(ref @struct + 1) = 0;
                *(ref @struct + 2) = 0;
                *(ref @struct + 3) = 0;
                *(ref @struct + 4) = 96;
                *(ref @struct + 5) = 192;
                Struct29 struct2;
                uint num2;
                if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct2), &num2, 96U, 1, &gstruct) != null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Inquiry command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    result = 0;
                }
                else
                {
                    this.method_5((byte*)(&struct2), 96U, 0U);
                    this.textBox6.AppendText(this.string_0 + "\r\n");

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 568, (void*)(&struct2), 96U);
                    if (this.checkBox8.CheckState == CheckState.Unchecked)
                    {
                        if (this.bool_2)
                        {
                            string text = this.string_10 + "\\Inquiry.bin";
                            if (!File.Exists(text))
                            {
                                IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                                IntPtr value = intPtr;
                                sbyte* pSbyte_ = (sbyte*)((void*)value);
                                this.string_13 = text;
                                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                                if (ptr != null)
                                {

                                    _Module.fwrite(*(ref _Module.struct123_0 + 8) + 568, 96U, 1U, ptr);

                                    _Module.fclose(ptr);
                                    this.textBox6.AppendText("\r\n" + "Inquiry String saved to " + text + "\r\n");
                                    return 1;
                                }

                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                MessageBox.Show(text, "Can't open file", MessageBoxButtons.OK);

                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            }
                        }
                        SaveFileDialog saveFileDialog = new SaveFileDialog();
                        saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
                        saveFileDialog.DefaultExt = ".bin";
                        saveFileDialog.FileName = "Inquiry.bin";
                        saveFileDialog.RestoreDirectory = false;
                        if (this.bool_2)
                        {
                            saveFileDialog.InitialDirectory = this.string_10;
                        }
                        if (saveFileDialog.ShowDialog() == DialogResult.OK)
                        {
                            string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                            IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(fullPath);
                            IntPtr value2 = intPtr2;
                            sbyte* pSbyte_2 = (sbyte*)((void*)value2);
                            GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_2, (sbyte*)(&_Module.struct18_5));
                            if (ptr == null)
                            {

                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);

                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                return 0;
                            }
                            this.textBox6.AppendText("Inquiry String saved to " + saveFileDialog.FileName + "\r\n\r\n");

                            _Module.fwrite(*(ref _Module.struct123_0 + 8) + 568, 96U, 1U, ptr);

                            _Module.fclose(ptr);
                        }
                    }
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x0600022B RID: 555 RVA: 0x0011E224 File Offset: 0x0011E224
        private unsafe int method_64()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 18;
                *(ref @struct + 1) = 0;
                *(ref @struct + 2) = 0;
                *(ref @struct + 3) = 0;
                *(ref @struct + 4) = 116;
                *(ref @struct + 5) = 192;
                Struct85 struct2;
                uint num2;
                if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct2), &num2, 116U, 1, &gstruct) != null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Inquiry command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    result = 0;
                }
                else
                {
                    this.method_5((byte*)(&struct2), 116U, 0U);
                    this.textBox6.AppendText(this.string_0 + "\r\n");

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 568, (void*)(&struct2), 116U);

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 2028, ref struct2 + 96, 20U);
                    if (this.checkBox8.CheckState == CheckState.Unchecked)
                    {
                        if (this.bool_2)
                        {
                            string text = this.string_10 + "\\Inquiry.bin";
                            if (!File.Exists(text))
                            {
                                IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                                IntPtr value = intPtr;
                                sbyte* pSbyte_ = (sbyte*)((void*)value);
                                this.string_13 = text;
                                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                                if (ptr != null)
                                {

                                    _Module.fwrite(*(ref _Module.struct123_0 + 8) + 568, 96U, 1U, ptr);

                                    _Module.fclose(ptr);
                                    this.textBox6.AppendText("\r\n" + "Inquiry String saved to " + text + "\r\n");
                                    return 1;
                                }

                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                MessageBox.Show(text, "Can't open file", MessageBoxButtons.OK);

                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            }
                        }
                        SaveFileDialog saveFileDialog = new SaveFileDialog();
                        saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
                        saveFileDialog.DefaultExt = ".bin";
                        saveFileDialog.FileName = "Inquiry.bin";
                        saveFileDialog.RestoreDirectory = false;
                        if (this.bool_2)
                        {
                            saveFileDialog.InitialDirectory = this.string_10;
                        }
                        if (saveFileDialog.ShowDialog() == DialogResult.OK)
                        {
                            string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                            IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(fullPath);
                            IntPtr value2 = intPtr2;
                            sbyte* pSbyte_2 = (sbyte*)((void*)value2);
                            GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_2, (sbyte*)(&_Module.struct18_5));
                            if (ptr == null)
                            {

                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);

                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                return 0;
                            }
                            this.textBox6.AppendText("Inquiry String saved to " + saveFileDialog.FileName + "\r\n\r\n");

                            _Module.fwrite(*(ref _Module.struct123_0 + 8) + 568, 96U, 1U, ptr);

                            _Module.fclose(ptr);
                        }
                    }
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x0600022C RID: 556 RVA: 0x0011E574 File Offset: 0x0011E574
        private unsafe int method_65()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 18;
                *(ref @struct + 1) = 0;
                *(ref @struct + 2) = 0;
                *(ref @struct + 3) = 0;
                *(ref @struct + 4) = 96;
                *(ref @struct + 5) = 192;
                *(ref @struct + 6) = 0;
                *(ref @struct + 7) = 0;
                *(ref @struct + 8) = 80;
                *(ref @struct + 9) = 76;
                *(ref @struct + 10) = 68;
                *(ref @struct + 11) = 83;
                Struct29 struct2;
                uint num2;
                if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct2), &num2, 96U, 1, &gstruct) != null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Secret command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    result = 0;
                }
                else
                {
                    if (*(ref struct2 + 8) == 80 && *(ref struct2 + 9) == 76 && *(ref struct2 + 10) == 68)
                    {
                        if (*(ref struct2 + 11) == 83)
                        {
                            this.method_5((byte*)(&struct2), 96U, 0U);
                            this.textBox6.AppendText(this.string_0 + "\r\n");

                            _Module.memcpy(*(ref _Module.struct123_0 + 8) + 684, (void*)(&struct2), 96U);
                            return 1;
                        }
                    }
                    this.textBox6.AppendText("Drive is NOT Lite-On, Aborting ! ");
                    result = 0;
                }
            }
            return result;
        }

        // Token: 0x0600022D RID: 557 RVA: 0x0011E718 File Offset: 0x0011E718
        private unsafe int method_66()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct30 @struct;
                uint num2;
                if (_Module.smethod_12(161, (byte)num, null, null, 64, (void*)(&@struct), &num2, 512U, 512U, 1, &gstruct) != null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Identify command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    result = 0;
                }
                else
                {
                    this.method_5((byte*)(&@struct), 180U, 0U);
                    this.textBox6.AppendText(this.string_0 + "\r\n");

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 780, (void*)(&@struct), 180U);
                    if (this.checkBox8.CheckState == CheckState.Unchecked)
                    {
                        if (this.bool_2)
                        {
                            string text = this.string_10 + "\\Identify.bin";
                            if (!File.Exists(text))
                            {
                                IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                                IntPtr value = intPtr;
                                sbyte* pSbyte_ = (sbyte*)((void*)value);
                                this.string_13 = text;
                                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                                if (ptr != null)
                                {

                                    _Module.fwrite(*(ref _Module.struct123_0 + 8) + 780, 180U, 1U, ptr);
                                    for (uint num3 = 0U; num3 < 332U; num3 += 1U)
                                    {

                                        _Module.fputc(0, ptr);
                                    }

                                    _Module.fclose(ptr);
                                    this.textBox6.AppendText("\r\n" + "Identify String saved to " + text + "\r\n");
                                    return 1;
                                }

                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                MessageBox.Show(text, "Can't open file", MessageBoxButtons.OK);

                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            }
                        }
                        SaveFileDialog saveFileDialog = new SaveFileDialog();
                        saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
                        saveFileDialog.DefaultExt = ".bin";
                        saveFileDialog.FileName = "Identify.bin";
                        saveFileDialog.RestoreDirectory = false;
                        if (this.bool_2)
                        {
                            saveFileDialog.InitialDirectory = this.string_10;
                        }
                        if (saveFileDialog.ShowDialog() == DialogResult.OK)
                        {
                            string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                            IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(fullPath);
                            IntPtr value2 = intPtr2;
                            sbyte* pSbyte_2 = (sbyte*)((void*)value2);
                            GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_2, (sbyte*)(&_Module.struct18_5));
                            if (ptr == null)
                            {

                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);

                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                return 0;
                            }
                            this.textBox6.AppendText("Identify String saved to " + saveFileDialog.FileName + "\r\n\r\n");

                            _Module.fwrite(*(ref _Module.struct123_0 + 8) + 780, 180U, 1U, ptr);
                            for (uint num3 = 0U; num3 < 332U; num3 += 1U)
                            {

                                _Module.fputc(0, ptr);
                            }

                            _Module.fclose(ptr);
                        }
                    }
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x0600022E RID: 558 RVA: 0x0011EA64 File Offset: 0x0011EA64
        private unsafe int method_67()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72U + 4));
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 18;
                *(ref @struct + 1) = 0;
                *(ref @struct + 2) = 0;
                *(ref @struct + 3) = 0;
                *(ref @struct + 4) = 96;
                *(ref @struct + 5) = 192;
                Struct29 struct2;
                uint num2;
                if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct2), &num2, 96U, 1, &gstruct) != null)
                {
                    result = 0;
                }
                else
                {

                    _Module.memset((void*)(&@struct), 0, 12U);
                    @struct = 253;
                    *(ref @struct + 1) = 4;
                    *(ref @struct + 2) = 66;
                    *(ref @struct + 3) = 69;
                    *(ref @struct + 4) = 78;
                    *(ref @struct + 5) = 81;
                    *(ref @struct + 8) = 16;
                    *(ref @struct + 10) = 0;
                    Struct28 struct3;
                    if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct3), &num2, 16U, 1, &gstruct) != null)
                    {
                        result = 0;
                    }
                    else
                    {

                        _Module.memset((void*)(&@struct), 0, 12U);
                        @struct = 253;
                        *(ref @struct + 1) = 4;
                        *(ref @struct + 2) = 66;
                        *(ref @struct + 3) = 69;
                        *(ref @struct + 4) = 78;
                        *(ref @struct + 5) = 81;
                        *(ref @struct + 8) = 20;
                        *(ref @struct + 10) = 2;
                        Struct42 struct4;
                        if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct4), &num2, 20U, 1, &gstruct) != null)
                        {
                            result = 0;
                        }
                        else
                        {

                            _Module.memset((void*)(&@struct), 0, 12U);
                            @struct = 253;
                            *(ref @struct + 1) = 4;
                            *(ref @struct + 2) = 66;
                            *(ref @struct + 3) = 69;
                            *(ref @struct + 4) = 78;
                            *(ref @struct + 5) = 81;
                            *(ref @struct + 8) = 2;
                            *(ref @struct + 10) = 18;
                            Struct60 struct5;
                            if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct5), &num2, 2U, 1, &gstruct) != null)
                            {
                                result = 0;
                            }
                            else
                            {

                                _Module.memset((void*)(&@struct), 0, 12U);
                                @struct = 253;
                                *(ref @struct + 1) = 4;
                                *(ref @struct + 2) = 66;
                                *(ref @struct + 3) = 69;
                                *(ref @struct + 4) = 78;
                                *(ref @struct + 5) = 81;
                                *(ref @struct + 8) = 2;
                                *(ref @struct + 10) = 20;
                                Struct60 struct6;
                                if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct6), &num2, 2U, 1, &gstruct) != null)
                                {
                                    result = 0;
                                }
                                else
                                {
                                    Struct31 struct7;

                                    _Module.memset((void*)(&struct7), 255, 80U);
                                    byte* ptr = ref struct2 + 42;

                                    _Module.memcpy((void*)(&struct7), (void*)ptr, 20U);
                                    byte* ptr2 = ref struct7 + 24;

                                    _Module.memcpy((void*)ptr2, (void*)(&struct3), 16U);
                                    ptr2 = ref struct7 + 40;

                                    _Module.memcpy((void*)ptr2, (void*)(&struct5), 2U);
                                    ptr2 = ref struct7 + 44;

                                    _Module.memcpy((void*)ptr2, (void*)(&struct4), 20U);
                                    ptr2 = ref struct7 + 76;

                                    _Module.memcpy((void*)ptr2, (void*)(&struct6), 2U);

                                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 2028, (void*)(&struct7), 80U);
                                    this.method_5((byte*)(&struct7), 80U, 0U);
                                    this.textBox6.AppendText(this.string_0 + "\r\n");
                                    if (this.checkBox8.CheckState == CheckState.Unchecked)
                                    {
                                        if (this.bool_2)
                                        {
                                            string text = this.string_10 + "\\Serial.bin";
                                            if (!File.Exists(text))
                                            {
                                                IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                                                IntPtr value = intPtr;
                                                sbyte* pSbyte_ = (sbyte*)((void*)value);
                                                this.string_13 = text;
                                                GStruct5* ptr3 = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                                                if (ptr3 != null)
                                                {

                                                    _Module.fwrite(*(ref _Module.struct123_0 + 8) + 2028, 80U, 1U, ptr3);

                                                    _Module.fclose(ptr3);
                                                    this.textBox6.AppendText("\r\n" + "Serial String saved to " + text + "\r\n");
                                                    return 1;
                                                }

                                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                                MessageBox.Show(text, "Can't open file", MessageBoxButtons.OK);

                                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                            }
                                        }
                                        SaveFileDialog saveFileDialog = new SaveFileDialog();
                                        saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
                                        saveFileDialog.DefaultExt = ".bin";
                                        saveFileDialog.FileName = "Serial.bin";
                                        saveFileDialog.RestoreDirectory = false;
                                        if (this.bool_2)
                                        {
                                            saveFileDialog.InitialDirectory = this.string_10;
                                        }
                                        if (saveFileDialog.ShowDialog() == DialogResult.OK)
                                        {
                                            string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                                            IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(fullPath);
                                            IntPtr value2 = intPtr2;
                                            sbyte* pSbyte_2 = (sbyte*)((void*)value2);
                                            GStruct5* ptr3 = _Module.fopen((sbyte*)pSbyte_2, (sbyte*)(&_Module.struct18_5));
                                            if (ptr3 == null)
                                            {

                                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                                MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);

                                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                                return 0;
                                            }
                                            this.textBox6.AppendText("Serial String saved to " + saveFileDialog.FileName + "\r\n\r\n");

                                            _Module.fwrite(*(ref _Module.struct123_0 + 8) + 2028, 80U, 1U, ptr3);

                                            _Module.fclose(ptr3);
                                        }
                                    }
                                    result = 1;
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x0600022F RID: 559 RVA: 0x0011EF64 File Offset: 0x0011EF64
        private unsafe int method_68()
        {
            Struct86 @struct;

            _Module.memcpy((void*)(&@struct), *(ref _Module.struct123_0 + 8) + 2028, 224U);
            *(ref @struct + 20) = byte.MaxValue;
            *(ref @struct + 21) = byte.MaxValue;
            *(ref @struct + 22) = byte.MaxValue;
            *(ref @struct + 23) = byte.MaxValue;

            _Module.memcpy(*(ref _Module.struct123_0 + 8) + 2028, (void*)(&@struct), 80U);
            this.method_5((byte*)(&@struct), 80U, 0U);
            this.textBox6.AppendText(this.string_0 + "\r\n");
            if (this.checkBox8.CheckState == CheckState.Unchecked)
            {
                if (this.bool_2)
                {
                    string text = this.string_10 + "\\Serial.bin";
                    if (!File.Exists(text))
                    {
                        IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                        IntPtr value = intPtr;
                        sbyte* pSbyte_ = (sbyte*)((void*)value);
                        this.string_13 = text;
                        GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                        if (ptr != null)
                        {

                            _Module.fwrite(*(ref _Module.struct123_0 + 8) + 2028, 224U, 1U, ptr);

                            _Module.fclose(ptr);
                            this.textBox6.AppendText("\r\n" + "Serial String saved to " + text + "\r\n");
                            return 1;
                        }

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show(text, "Can't open file", MessageBoxButtons.OK);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    }
                }
                SaveFileDialog saveFileDialog = new SaveFileDialog();
                saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
                saveFileDialog.DefaultExt = ".bin";
                saveFileDialog.FileName = "Serial.bin";
                saveFileDialog.RestoreDirectory = false;
                if (this.bool_2)
                {
                    saveFileDialog.InitialDirectory = this.string_10;
                }
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                    IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(fullPath);
                    IntPtr value2 = intPtr2;
                    sbyte* pSbyte_2 = (sbyte*)((void*)value2);
                    GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_2, (sbyte*)(&_Module.struct18_5));
                    if (ptr == null)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        return 0;
                    }
                    this.textBox6.AppendText("Serial String saved to " + saveFileDialog.FileName + "\r\n\r\n");

                    _Module.fwrite(*(ref _Module.struct123_0 + 8) + 2028, 224U, 1U, ptr);

                    _Module.fclose(ptr);
                }
            }
            return 1;
        }

        // Token: 0x06000230 RID: 560 RVA: 0x0011F1F0 File Offset: 0x0011F1F0
        private unsafe int method_69()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72U + 4));
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 1000U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 18;
                *(ref @struct + 1) = 0;
                *(ref @struct + 2) = 0;
                *(ref @struct + 3) = 0;
                *(ref @struct + 4) = 96;
                *(ref @struct + 5) = 192;
                Struct29 struct2;
                uint num2;
                if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct2), &num2, 96U, 1, &gstruct) != null)
                {
                    result = 0;
                }
                else
                {
                    Struct42 struct3;

                    _Module.memset((void*)(&struct3), 255, 20U);
                    byte* ptr = ref struct2 + 42;

                    _Module.memcpy((void*)(&struct3), (void*)ptr, 20U);

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 2028, (void*)(&struct3), 20U);
                    this.method_5((byte*)(&struct3), 20U, 0U);
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x06000231 RID: 561 RVA: 0x0011F300 File Offset: 0x0011F300
        private unsafe int method_70()
        {
            Struct68 @struct = 0;
            initblk(ref @struct + 1, 0, 259);
            string text = "";

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));
            int num = 0;
            Struct55 struct2 = 83;
            *(ref struct2 + 1) = 108;
            *(ref struct2 + 2) = 105;
            *(ref struct2 + 3) = 109;
            *(ref struct2 + 4) = 75;
            *(ref struct2 + 5) = 101;
            *(ref struct2 + 6) = 121;
            *(ref struct2 + 7) = 32;
            *(ref struct2 + 8) = 69;
            *(ref struct2 + 9) = 120;
            *(ref struct2 + 10) = 116;
            *(ref struct2 + 11) = 114;
            *(ref struct2 + 12) = 97;
            *(ref struct2 + 13) = 99;
            *(ref struct2 + 14) = 116;
            *(ref struct2 + 15) = 32;
            *(ref struct2 + 16) = 0;
            *(ref struct2 + 17) = 0;
            *(ref struct2 + 18) = 0;
            *(ref struct2 + 19) = 0;
            *(ref struct2 + 20) = 0;
            *(ref struct2 + 21) = 0;
            *(ref struct2 + 22) = 0;
            *(ref struct2 + 23) = 0;
            *(ref struct2 + 24) = 0;
            *(ref struct2 + 25) = 0;
            *(ref struct2 + 26) = 0;
            *(ref struct2 + 27) = 0;
            *(ref struct2 + 28) = 0;
            *(ref struct2 + 29) = 0;
            *(ref struct2 + 30) = 0;
            *(ref struct2 + 31) = 0;
            this.Cursor = Cursors.WaitCursor;
            this.method_82();
            this.method_84();

            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num2 = (int)MessageBox.Show("Do you wish to send Unlock to Slim", "SlimKey", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);

            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            if (num2 == 6)
            {
                Struct28 struct3;
                this.method_85((byte*)(&struct3));
                if (this.method_87((byte*)(&struct3)) == 0)
                {
                    this.Cursor = Cursors.Arrow;

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    num2 = (int)MessageBox.Show("Unlock failed", "SlimKey", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 0;
                }
            }
            else if (num2 == 2)
            {
                this.Cursor = Cursors.Arrow;
                return 0;
            }
            int result;
            if (this.method_200() == 0)
            {
                this.Cursor = Cursors.Arrow;
                result = 0;
            }
            else
            {
                Application.DoEvents();
                if (this.method_256() == 0U)
                {
                    this.method_259();
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {
                    for (int i = 0; i < 16; i++)
                    {

                        _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct10_20), ref @struct, *(*(ref _Module.struct123_0 + 8) + 280 + i));
                    }
                    text += new string((sbyte*)(&@struct));
                    Application.DoEvents();
                    this.method_259();
                    this.Cursor = Cursors.WaitCursor;
                    for (int j = 0; j < 12; j++)
                    {

                        _Module.Sleep(250);
                        this.textBox6.AppendText(".");
                    }
                    if (this.method_107(*(ref _Module.struct123_0 + 8) + 280) == 1)
                    {
                        this.textBox6.AppendText("\r\n" + "Key: " + text + " is verified, Thanks C4eva" + "\r\n");
                        this.Cursor = Cursors.WaitCursor;
                        this.textBox6.AppendText("\r\n" + "Grabbing Key sector: ");
                        Struct28 struct4;
                        Struct87 struct5;
                        for (int k = 0; k < 16; k++)
                        {
                            int i = 0;
                            while (i < 256)
                            {
                                if (this.method_91(0, (byte)k, (byte)i, (byte*)(&struct4)) == 0)
                                {
                                    return 0;
                                }

                                _Module.memcpy(ref struct5 + num, (void*)(&struct4), 16U);
                                i += 16;
                                num += 16;
                            }
                            this.textBox6.AppendText(".");
                            Application.DoEvents();
                        }
                        this.textBox6.AppendText("\r\n");

                        _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct5), 4096U);
                        num = 0;
                        if (this.method_71() == 1)
                        {
                            this.textBox6.AppendText("Key Sector verified." + "\r\n");
                        }
                        else if (this.method_73() == 1)
                        {
                            this.textBox6.AppendText("Key Sector verified." + "\r\n");
                        }
                        else if (this.method_75() == 1)
                        {
                            this.textBox6.AppendText("Key Sector verified." + "\r\n");
                        }
                        else
                        {
                            if (this.method_77() != 1)
                            {
                                this.textBox6.AppendText("Key Sector NOT verified !" + "\r\n");
                                return 0;
                            }
                            this.textBox6.AppendText("Key Sector verified." + "\r\n");
                        }
                        this.textBox6.AppendText("Grabbing Serial info: ");
                        for (int k = 8; k < 10; k++)
                        {
                            int i = 0;
                            while (i < 256)
                            {
                                if (this.method_91(3, (byte)k, (byte)(i + 6), (byte*)(&struct4)) == 0)
                                {
                                    return 0;
                                }

                                _Module.memcpy(ref struct5 + num, (void*)(&struct4), 16U);
                                if (i % 64 == 0)
                                {
                                    this.textBox6.AppendText(".");
                                    Application.DoEvents();
                                }
                                i += 16;
                                num += 16;
                            }
                        }
                        this.textBox6.AppendText("\r\n");

                        _Module.memset(*(ref _Module.struct123_0 + 8) + 2028, 255, 224U);

                        _Module.memcpy(*(ref _Module.struct123_0 + 8) + 2028, ref struct5 + 208, 80U);

                        _Module.memcpy(*(ref _Module.struct123_0 + 8) + 2156, ref struct5 + 320, 96U);
                        this.textBox6.AppendText(string.Concat("\r\n"));

                        _Module.memcpy(*(ref _Module.struct123_0 + 8) + 2348, (void*)(&struct2), 32U);
                        this.method_177();
                        this.Cursor = Cursors.Arrow;
                        result = 1;
                    }
                    else
                    {
                        this.textBox6.AppendText("\r\n" + "Key: " + text + " verification failed !" + "\r\n");
                        result = 0;
                    }
                }
            }
            return result;
        }

        // Token: 0x06000232 RID: 562 RVA: 0x0011F8AC File Offset: 0x0011F8AC
        private unsafe int method_71()
        {
            Struct33 @struct;

            _Module.memcpy((void*)(&@struct), *(ref _Module.struct121_0 + 7172), 4096U);
            Struct28 struct2;

            _Module.memcpy((void*)(&struct2), *(ref _Module.struct123_0 + 8) + 280, 16U);
            Struct28 struct3 = *(ref @struct + 312);
            *(ref struct3 + 1) = *(ref @struct + 2796);
            *(ref struct3 + 2) = *(ref @struct + 1858);
            *(ref struct3 + 3) = *(ref @struct + 1664);
            *(ref struct3 + 4) = *(ref @struct + 3789);
            *(ref struct3 + 5) = *(ref @struct + 2868);
            *(ref struct3 + 6) = *(ref @struct + 2111);
            *(ref struct3 + 7) = *(ref @struct + 1829);
            *(ref struct3 + 8) = *(ref @struct + 1322);
            *(ref struct3 + 9) = *(ref @struct + 513);
            *(ref struct3 + 10) = *(ref @struct + 2527);
            *(ref struct3 + 11) = *(ref @struct + 35);
            *(ref struct3 + 12) = *(ref @struct + 1184);
            *(ref struct3 + 13) = *(ref @struct + 1434);
            *(ref struct3 + 14) = *(ref @struct + 1022);
            *(ref struct3 + 15) = *(ref @struct + 3913);
            return (_Module.memcmp((void*)(&struct3), (void*)(&struct2), 16U) != null) ? 0 : 1;
        }

        // Token: 0x06000233 RID: 563 RVA: 0x0011F9E0 File Offset: 0x0011F9E0
        private unsafe int method_72()
        {
            Struct33 @struct;

            _Module.memcpy((void*)(&@struct), *(ref _Module.struct121_0 + 2388) + 172032, 4096U);
            Struct28 struct2;

            _Module.memcpy((void*)(&struct2), *(ref _Module.struct121_0 + 2388) + 41008, 16U);
            Struct28 struct3 = *(ref @struct + 312);
            *(ref struct3 + 1) = *(ref @struct + 2796);
            *(ref struct3 + 2) = *(ref @struct + 1858);
            *(ref struct3 + 3) = *(ref @struct + 1664);
            *(ref struct3 + 4) = *(ref @struct + 3789);
            *(ref struct3 + 5) = *(ref @struct + 2868);
            *(ref struct3 + 6) = *(ref @struct + 2111);
            *(ref struct3 + 7) = *(ref @struct + 1829);
            *(ref struct3 + 8) = *(ref @struct + 1322);
            *(ref struct3 + 9) = *(ref @struct + 513);
            *(ref struct3 + 10) = *(ref @struct + 2527);
            *(ref struct3 + 11) = *(ref @struct + 35);
            *(ref struct3 + 12) = *(ref @struct + 1184);
            *(ref struct3 + 13) = *(ref @struct + 1434);
            *(ref struct3 + 14) = *(ref @struct + 1022);
            *(ref struct3 + 15) = *(ref @struct + 3913);
            return (_Module.memcmp((void*)(&struct3), (void*)(&struct2), 16U) != null) ? 0 : 1;
        }

        // Token: 0x06000234 RID: 564 RVA: 0x0011FB20 File Offset: 0x0011FB20
        private unsafe int method_73()
        {
            Struct28 @struct = 195;
            *(ref @struct + 1) = 220;
            *(ref @struct + 2) = 18;
            *(ref @struct + 3) = 91;
            *(ref @struct + 4) = 110;
            *(ref @struct + 5) = 85;
            *(ref @struct + 6) = 183;
            *(ref @struct + 7) = 56;
            *(ref @struct + 8) = 43;
            *(ref @struct + 9) = 206;
            *(ref @struct + 10) = 241;
            *(ref @struct + 11) = 190;
            *(ref @struct + 12) = 19;
            *(ref @struct + 13) = 54;
            *(ref @struct + 14) = 68;
            *(ref @struct + 15) = 30;
            Struct28 struct2 = 0;
            initblk(ref struct2 + 1, 0, 15);
            Struct33 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 7172), 4096U);
            Struct28 struct4;

            _Module.memcpy((void*)(&struct4), *(ref _Module.struct123_0 + 8) + 665, 16U);
            Struct28 struct5;

            _Module.memcpy((void*)(&struct5), *(ref _Module.struct123_0 + 8) + 280, 16U);
            Struct28 struct6;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct6 + i) = (*(ref struct4 + i) ^ *(ref @struct + i));
            }
            Struct28 struct7;
            this.method_89((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct2), (byte*)(&struct7));
            Struct28 struct8;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct8 + i) = (byte)((*(ref struct7 + i) & 15) << 4);
            }
            Struct28 struct9;
            this.method_89((byte*)(&struct6), (byte*)(&struct7), (byte*)(&struct2), (byte*)(&struct9));
            Struct28 struct10;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct10 + i) = (byte)((*(ref struct9 + i) & 240) >> 4);
            }
            Struct28 struct11;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct11 + i) = (*(ref struct10 + i) | *(ref struct8 + i));
            }
            Struct28 struct12;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct12 + i) = *(ref struct11 + i);
                if ((*(ref struct11 + i) & 15) == 15)
                {
                    *(ref struct12 + i) = *(ref struct12 + i) - 1;
                }
            }
            Struct88 struct13;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct13 + i * 2) = (short)((int)(*(ref struct12 + i)) << 4 | i);
            }
            Struct28 struct14;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct14 + i) = *(ref struct3 + *(ref struct13 + i * 2));
            }
            Struct28 struct15;
            this.method_90((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct14), (byte*)(&struct15));
            return (_Module.memcmp((void*)(&struct5), (void*)(&struct15), 16U) != null) ? 0 : 1;
        }

        // Token: 0x06000235 RID: 565 RVA: 0x0011FD34 File Offset: 0x0011FD34
        private unsafe int method_74()
        {
            Struct28 @struct = 195;
            *(ref @struct + 1) = 220;
            *(ref @struct + 2) = 18;
            *(ref @struct + 3) = 91;
            *(ref @struct + 4) = 110;
            *(ref @struct + 5) = 85;
            *(ref @struct + 6) = 183;
            *(ref @struct + 7) = 56;
            *(ref @struct + 8) = 43;
            *(ref @struct + 9) = 206;
            *(ref @struct + 10) = 241;
            *(ref @struct + 11) = 190;
            *(ref @struct + 12) = 19;
            *(ref @struct + 13) = 54;
            *(ref @struct + 14) = 68;
            *(ref @struct + 15) = 30;
            Struct28 struct2 = 0;
            initblk(ref struct2 + 1, 0, 15);
            Struct33 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 2388) + 172032, 4096U);
            Struct28 struct4;

            _Module.memcpy((void*)(&struct4), *(ref _Module.struct121_0 + 2388) + 130817, 16U);
            Struct28 struct5;

            _Module.memcpy((void*)(&struct5), *(ref _Module.struct121_0 + 2388) + 41008, 16U);
            Struct28 struct6;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct6 + i) = (*(ref struct4 + i) ^ *(ref @struct + i));
            }
            Struct28 struct7;
            this.method_89((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct2), (byte*)(&struct7));
            Struct28 struct8;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct8 + i) = (byte)((*(ref struct7 + i) & 15) << 4);
            }
            Struct28 struct9;
            this.method_89((byte*)(&struct6), (byte*)(&struct7), (byte*)(&struct2), (byte*)(&struct9));
            Struct28 struct10;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct10 + i) = (byte)((*(ref struct9 + i) & 240) >> 4);
            }
            Struct28 struct11;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct11 + i) = (*(ref struct10 + i) | *(ref struct8 + i));
            }
            Struct28 struct12;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct12 + i) = *(ref struct11 + i);
                if ((*(ref struct11 + i) & 15) == 15)
                {
                    *(ref struct12 + i) = *(ref struct12 + i) - 1;
                }
            }
            Struct88 struct13;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct13 + i * 2) = (short)((int)(*(ref struct12 + i)) << 4 | i);
            }
            Struct28 struct14;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct14 + i) = *(ref struct3 + *(ref struct13 + i * 2));
            }
            Struct28 struct15;
            this.method_90((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct14), (byte*)(&struct15));
            return (_Module.memcmp((void*)(&struct5), (void*)(&struct15), 16U) != null) ? 0 : 1;
        }

        // Token: 0x06000236 RID: 566 RVA: 0x0011FF58 File Offset: 0x0011FF58
        private unsafe int method_75()
        {
            Struct28 @struct = 17;
            *(ref @struct + 1) = 177;
            *(ref @struct + 2) = 97;
            *(ref @struct + 3) = 5;
            *(ref @struct + 4) = 252;
            *(ref @struct + 5) = 42;
            *(ref @struct + 6) = 67;
            *(ref @struct + 7) = 32;
            *(ref @struct + 8) = 202;
            *(ref @struct + 9) = 129;
            *(ref @struct + 10) = 184;
            *(ref @struct + 11) = 79;
            *(ref @struct + 12) = 181;
            *(ref @struct + 13) = 92;
            *(ref @struct + 14) = 234;
            *(ref @struct + 15) = 122;
            Struct28 struct2 = 0;
            initblk(ref struct2 + 1, 0, 15);
            Struct33 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 7172), 4096U);
            Struct28 struct4;

            _Module.memcpy((void*)(&struct4), *(ref _Module.struct123_0 + 8) + 665, 16U);
            Struct28 struct5;

            _Module.memcpy((void*)(&struct5), *(ref _Module.struct123_0 + 8) + 280, 16U);
            Struct28 struct6;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct6 + i) = (*(ref struct4 + i) ^ *(ref @struct + i));
            }
            Struct28 struct7;
            this.method_89((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct2), (byte*)(&struct7));
            Struct28 struct8;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct8 + i) = (byte)((*(ref struct7 + i) & 15) << 4);
            }
            Struct28 struct9;
            this.method_89((byte*)(&struct6), (byte*)(&struct7), (byte*)(&struct2), (byte*)(&struct9));
            Struct28 struct10;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct10 + i) = (byte)((*(ref struct9 + i) & 240) >> 4);
            }
            Struct28 struct11;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct11 + i) = (*(ref struct10 + i) | *(ref struct8 + i));
            }
            Struct28 struct12;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct12 + i) = *(ref struct11 + i);
                if ((*(ref struct11 + i) & 15) == 15)
                {
                    *(ref struct12 + i) = *(ref struct12 + i) - 1;
                }
            }
            Struct88 struct13;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct13 + i * 2) = (short)((int)(*(ref struct12 + i)) << 4 | i);
            }
            Struct28 struct14;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct14 + i) = *(ref struct3 + *(ref struct13 + i * 2));
            }
            Struct28 struct15;
            this.method_90((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct14), (byte*)(&struct15));
            return (_Module.memcmp((void*)(&struct5), (void*)(&struct15), 16U) != null) ? 0 : 1;
        }

        // Token: 0x06000237 RID: 567 RVA: 0x00120170 File Offset: 0x00120170
        private unsafe int method_76()
        {
            Struct28 @struct = 17;
            *(ref @struct + 1) = 177;
            *(ref @struct + 2) = 97;
            *(ref @struct + 3) = 5;
            *(ref @struct + 4) = 252;
            *(ref @struct + 5) = 42;
            *(ref @struct + 6) = 67;
            *(ref @struct + 7) = 32;
            *(ref @struct + 8) = 202;
            *(ref @struct + 9) = 129;
            *(ref @struct + 10) = 184;
            *(ref @struct + 11) = 79;
            *(ref @struct + 12) = 181;
            *(ref @struct + 13) = 92;
            *(ref @struct + 14) = 234;
            *(ref @struct + 15) = 122;
            Struct28 struct2 = 0;
            initblk(ref struct2 + 1, 0, 15);
            Struct33 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 2388) + 172032, 4096U);
            Struct28 struct4;

            _Module.memcpy((void*)(&struct4), *(ref _Module.struct121_0 + 2388) + 130817, 16U);
            Struct28 struct5;

            _Module.memcpy((void*)(&struct5), *(ref _Module.struct121_0 + 2388) + 41008, 16U);
            Struct28 struct6;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct6 + i) = (*(ref struct4 + i) ^ *(ref @struct + i));
            }
            Struct28 struct7;
            this.method_89((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct2), (byte*)(&struct7));
            Struct28 struct8;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct8 + i) = (byte)((*(ref struct7 + i) & 15) << 4);
            }
            Struct28 struct9;
            this.method_89((byte*)(&struct6), (byte*)(&struct7), (byte*)(&struct2), (byte*)(&struct9));
            Struct28 struct10;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct10 + i) = (byte)((*(ref struct9 + i) & 240) >> 4);
            }
            Struct28 struct11;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct11 + i) = (*(ref struct10 + i) | *(ref struct8 + i));
            }
            Struct28 struct12;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct12 + i) = *(ref struct11 + i);
                if ((*(ref struct11 + i) & 15) == 15)
                {
                    *(ref struct12 + i) = *(ref struct12 + i) - 1;
                }
            }
            Struct88 struct13;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct13 + i * 2) = (short)((int)(*(ref struct12 + i)) << 4 | i);
            }
            Struct28 struct14;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct14 + i) = *(ref struct3 + *(ref struct13 + i * 2));
            }
            Struct28 struct15;
            this.method_90((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct14), (byte*)(&struct15));
            return (_Module.memcmp((void*)(&struct5), (void*)(&struct15), 16U) != null) ? 0 : 1;
        }

        // Token: 0x06000238 RID: 568 RVA: 0x00120394 File Offset: 0x00120394
        private unsafe int method_77()
        {
            Struct28 @struct = 237;
            *(ref @struct + 1) = 88;
            *(ref @struct + 2) = 152;
            *(ref @struct + 3) = 52;
            *(ref @struct + 4) = 81;
            *(ref @struct + 5) = 5;
            *(ref @struct + 6) = 89;
            *(ref @struct + 7) = 91;
            *(ref @struct + 8) = 177;
            *(ref @struct + 9) = 227;
            *(ref @struct + 10) = 223;
            *(ref @struct + 11) = 230;
            *(ref @struct + 12) = 15;
            *(ref @struct + 13) = 229;
            *(ref @struct + 14) = 172;
            *(ref @struct + 15) = 28;
            Struct28 struct2 = 0;
            initblk(ref struct2 + 1, 0, 15);
            Struct33 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 7172), 4096U);
            Struct28 struct4;

            _Module.memcpy((void*)(&struct4), *(ref _Module.struct123_0 + 8) + 665, 16U);
            Struct28 struct5;

            _Module.memcpy((void*)(&struct5), *(ref _Module.struct123_0 + 8) + 280, 16U);
            Struct28 struct6;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct6 + i) = (*(ref struct4 + i) ^ *(ref @struct + i));
            }
            Struct28 struct7;
            this.method_89((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct2), (byte*)(&struct7));
            Struct28 struct8;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct8 + i) = (byte)((*(ref struct7 + i) & 15) << 4);
            }
            Struct28 struct9;
            this.method_89((byte*)(&struct6), (byte*)(&struct7), (byte*)(&struct2), (byte*)(&struct9));
            Struct28 struct10;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct10 + i) = (byte)((*(ref struct9 + i) & 240) >> 4);
            }
            Struct28 struct11;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct11 + i) = (*(ref struct10 + i) | *(ref struct8 + i));
            }
            Struct28 struct12;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct12 + i) = *(ref struct11 + i);
                if ((*(ref struct11 + i) & 15) == 15)
                {
                    *(ref struct12 + i) = *(ref struct12 + i) - 1;
                }
            }
            Struct88 struct13;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct13 + i * 2) = (short)((int)(*(ref struct12 + i)) << 4 | i);
            }
            Struct28 struct14;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct14 + i) = *(ref struct3 + *(ref struct13 + i * 2));
            }
            Struct28 struct15;
            this.method_90((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct14), (byte*)(&struct15));
            return (_Module.memcmp((void*)(&struct5), (void*)(&struct15), 16U) != null) ? 0 : 1;
        }

        // Token: 0x06000239 RID: 569 RVA: 0x001205AC File Offset: 0x001205AC
        private unsafe int method_78()
        {
            Struct28 @struct = 237;
            *(ref @struct + 1) = 88;
            *(ref @struct + 2) = 152;
            *(ref @struct + 3) = 52;
            *(ref @struct + 4) = 81;
            *(ref @struct + 5) = 5;
            *(ref @struct + 6) = 89;
            *(ref @struct + 7) = 91;
            *(ref @struct + 8) = 177;
            *(ref @struct + 9) = 227;
            *(ref @struct + 10) = 223;
            *(ref @struct + 11) = 230;
            *(ref @struct + 12) = 15;
            *(ref @struct + 13) = 229;
            *(ref @struct + 14) = 172;
            *(ref @struct + 15) = 28;
            Struct28 struct2 = 0;
            initblk(ref struct2 + 1, 0, 15);
            Struct33 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 2388) + 172032, 4096U);
            Struct28 struct4;

            _Module.memcpy((void*)(&struct4), *(ref _Module.struct121_0 + 2388) + 130817, 16U);
            Struct28 struct5;

            _Module.memcpy((void*)(&struct5), *(ref _Module.struct121_0 + 2388) + 41008, 16U);
            Struct28 struct6;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct6 + i) = (*(ref struct4 + i) ^ *(ref @struct + i));
            }
            Struct28 struct7;
            this.method_89((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct2), (byte*)(&struct7));
            Struct28 struct8;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct8 + i) = (byte)((*(ref struct7 + i) & 15) << 4);
            }
            Struct28 struct9;
            this.method_89((byte*)(&struct6), (byte*)(&struct7), (byte*)(&struct2), (byte*)(&struct9));
            Struct28 struct10;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct10 + i) = (byte)((*(ref struct9 + i) & 240) >> 4);
            }
            Struct28 struct11;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct11 + i) = (*(ref struct10 + i) | *(ref struct8 + i));
            }
            Struct28 struct12;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct12 + i) = *(ref struct11 + i);
                if ((*(ref struct11 + i) & 15) == 15)
                {
                    *(ref struct12 + i) = *(ref struct12 + i) - 1;
                }
            }
            Struct88 struct13;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct13 + i * 2) = (short)((int)(*(ref struct12 + i)) << 4 | i);
            }
            Struct28 struct14;
            for (int i = 0; i < 16; i++)
            {
                *(ref struct14 + i) = *(ref struct3 + *(ref struct13 + i * 2));
            }
            Struct28 struct15;
            this.method_90((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct14), (byte*)(&struct15));
            return (_Module.memcmp((void*)(&struct5), (void*)(&struct15), 16U) != null) ? 0 : 1;
        }

        // Token: 0x0600023A RID: 570 RVA: 0x001207D4 File Offset: 0x001207D4
        private unsafe int method_79(int int_16)
        {
            Struct28 @struct = 195;
            *(ref @struct + 1) = 220;
            *(ref @struct + 2) = 18;
            *(ref @struct + 3) = 91;
            *(ref @struct + 4) = 110;
            *(ref @struct + 5) = 85;
            *(ref @struct + 6) = 183;
            *(ref @struct + 7) = 56;
            *(ref @struct + 8) = 43;
            *(ref @struct + 9) = 206;
            *(ref @struct + 10) = 241;
            *(ref @struct + 11) = 190;
            *(ref @struct + 12) = 19;
            *(ref @struct + 13) = 54;
            *(ref @struct + 14) = 68;
            *(ref @struct + 15) = 30;
            Struct28 struct2 = 0;
            initblk(ref struct2 + 1, 0, 15);
            Struct33 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + int_16 * 2392 + 2388) + 172032, 4096U);
            Struct28 struct4;

            _Module.memcpy((void*)(&struct4), *(ref _Module.struct121_0 + int_16 * 2392 + 2388) + 130817, 16U);
            Struct33 struct5;

            _Module.memset((void*)(&struct5), 255, 4096U);
            int result;
            if (_Module.memcmp((void*)(&struct3), (void*)(&struct5), 4096U) == null)
            {

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(&struct5), 16U);
                result = 1;
            }
            else
            {
                Struct28 struct6;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct6 + i) = (*(ref struct4 + i) ^ *(ref @struct + i));
                }
                Struct28 struct7;
                this.method_89((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct2), (byte*)(&struct7));
                Struct28 struct8;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct8 + i) = (byte)((*(ref struct7 + i) & 15) << 4);
                }
                Struct28 struct9;
                this.method_89((byte*)(&struct6), (byte*)(&struct7), (byte*)(&struct2), (byte*)(&struct9));
                Struct28 struct10;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct10 + i) = (byte)((*(ref struct9 + i) & 240) >> 4);
                }
                Struct28 struct11;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct11 + i) = (*(ref struct10 + i) | *(ref struct8 + i));
                }
                Struct28 struct12;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct12 + i) = *(ref struct11 + i);
                    if ((*(ref struct11 + i) & 15) == 15)
                    {
                        *(ref struct12 + i) = *(ref struct12 + i) - 1;
                    }
                }
                Struct88 struct13;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct13 + i * 2) = (short)((int)(*(ref struct12 + i)) << 4 | i);
                }
                Struct28 struct14;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct14 + i) = *(ref struct3 + *(ref struct13 + i * 2));
                }
                Struct28 struct15;
                this.method_90((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct14), (byte*)(&struct15));

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(&struct15), 16U);
                result = 1;
            }
            return result;
        }

        // Token: 0x0600023B RID: 571 RVA: 0x00120A38 File Offset: 0x00120A38
        private unsafe int method_80(int int_16)
        {
            Struct28 @struct = 17;
            *(ref @struct + 1) = 177;
            *(ref @struct + 2) = 97;
            *(ref @struct + 3) = 5;
            *(ref @struct + 4) = 252;
            *(ref @struct + 5) = 42;
            *(ref @struct + 6) = 67;
            *(ref @struct + 7) = 32;
            *(ref @struct + 8) = 202;
            *(ref @struct + 9) = 129;
            *(ref @struct + 10) = 184;
            *(ref @struct + 11) = 79;
            *(ref @struct + 12) = 181;
            *(ref @struct + 13) = 92;
            *(ref @struct + 14) = 234;
            *(ref @struct + 15) = 122;
            Struct28 struct2 = 0;
            initblk(ref struct2 + 1, 0, 15);
            Struct33 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + int_16 * 2392 + 2388) + 172032, 4096U);
            Struct28 struct4;

            _Module.memcpy((void*)(&struct4), *(ref _Module.struct121_0 + int_16 * 2392 + 2388) + 130817, 16U);
            Struct33 struct5;

            _Module.memset((void*)(&struct5), 255, 4096U);
            int result;
            if (_Module.memcmp((void*)(&struct3), (void*)(&struct5), 4096U) == null)
            {

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(&struct5), 16U);
                result = 1;
            }
            else
            {
                Struct28 struct6;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct6 + i) = (*(ref struct4 + i) ^ *(ref @struct + i));
                }
                Struct28 struct7;
                this.method_89((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct2), (byte*)(&struct7));
                Struct28 struct8;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct8 + i) = (byte)((*(ref struct7 + i) & 15) << 4);
                }
                Struct28 struct9;
                this.method_89((byte*)(&struct6), (byte*)(&struct7), (byte*)(&struct2), (byte*)(&struct9));
                Struct28 struct10;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct10 + i) = (byte)((*(ref struct9 + i) & 240) >> 4);
                }
                Struct28 struct11;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct11 + i) = (*(ref struct10 + i) | *(ref struct8 + i));
                }
                Struct28 struct12;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct12 + i) = *(ref struct11 + i);
                    if ((*(ref struct11 + i) & 15) == 15)
                    {
                        *(ref struct12 + i) = *(ref struct12 + i) - 1;
                    }
                }
                Struct88 struct13;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct13 + i * 2) = (short)((int)(*(ref struct12 + i)) << 4 | i);
                }
                Struct28 struct14;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct14 + i) = *(ref struct3 + *(ref struct13 + i * 2));
                }
                Struct28 struct15;
                this.method_90((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct14), (byte*)(&struct15));

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(&struct15), 16U);
                result = 1;
            }
            return result;
        }

        // Token: 0x0600023C RID: 572 RVA: 0x00120C9C File Offset: 0x00120C9C
        private unsafe int method_81(int int_16)
        {
            Struct28 @struct = 237;
            *(ref @struct + 1) = 88;
            *(ref @struct + 2) = 152;
            *(ref @struct + 3) = 52;
            *(ref @struct + 4) = 81;
            *(ref @struct + 5) = 5;
            *(ref @struct + 6) = 89;
            *(ref @struct + 7) = 91;
            *(ref @struct + 8) = 177;
            *(ref @struct + 9) = 227;
            *(ref @struct + 10) = 223;
            *(ref @struct + 11) = 230;
            *(ref @struct + 12) = 15;
            *(ref @struct + 13) = 229;
            *(ref @struct + 14) = 172;
            *(ref @struct + 15) = 28;
            Struct28 struct2 = 0;
            initblk(ref struct2 + 1, 0, 15);
            Struct33 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + int_16 * 2392 + 2388) + 172032, 4096U);
            Struct28 struct4;

            _Module.memcpy((void*)(&struct4), *(ref _Module.struct121_0 + int_16 * 2392 + 2388) + 130817, 16U);
            Struct33 struct5;

            _Module.memset((void*)(&struct5), 255, 4096U);
            int result;
            if (_Module.memcmp((void*)(&struct3), (void*)(&struct5), 4096U) == null)
            {

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(&struct5), 16U);
                result = 1;
            }
            else
            {
                Struct28 struct6;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct6 + i) = (*(ref struct4 + i) ^ *(ref @struct + i));
                }
                Struct28 struct7;
                this.method_89((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct2), (byte*)(&struct7));
                Struct28 struct8;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct8 + i) = (byte)((*(ref struct7 + i) & 15) << 4);
                }
                Struct28 struct9;
                this.method_89((byte*)(&struct6), (byte*)(&struct7), (byte*)(&struct2), (byte*)(&struct9));
                Struct28 struct10;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct10 + i) = (byte)((*(ref struct9 + i) & 240) >> 4);
                }
                Struct28 struct11;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct11 + i) = (*(ref struct10 + i) | *(ref struct8 + i));
                }
                Struct28 struct12;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct12 + i) = *(ref struct11 + i);
                    if ((*(ref struct11 + i) & 15) == 15)
                    {
                        *(ref struct12 + i) = *(ref struct12 + i) - 1;
                    }
                }
                Struct88 struct13;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct13 + i * 2) = (short)((int)(*(ref struct12 + i)) << 4 | i);
                }
                Struct28 struct14;
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct14 + i) = *(ref struct3 + *(ref struct13 + i * 2));
                }
                Struct28 struct15;
                this.method_90((byte*)(&struct6), (byte*)(&@struct), (byte*)(&struct14), (byte*)(&struct15));

                _Module.memcpy(*(ref _Module.struct123_0 + int_16 * 4) + 280, (void*)(&struct15), 16U);
                result = 1;
            }
            return result;
        }

        // Token: 0x0600023D RID: 573 RVA: 0x00120F04 File Offset: 0x00120F04
        private unsafe int method_82()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 18;
                *(ref @struct + 1) = 0;
                *(ref @struct + 2) = 0;
                *(ref @struct + 3) = 0;
                *(ref @struct + 4) = 116;
                *(ref @struct + 5) = 192;
                Struct85 struct2;
                uint num2;
                if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct2), &num2, 116U, 1, &gstruct) != null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Inquiry command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    result = 0;
                }
                else
                {
                    this.method_5((byte*)(&struct2), 116U, 0U);
                    this.textBox6.AppendText("\r\n\r\n" + this.string_0 + "\r\n");

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 568, (void*)(&struct2), 116U);
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x0600023E RID: 574 RVA: 0x00121044 File Offset: 0x00121044
        private unsafe int method_83(byte* pByte_0)
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 18;
                *(ref @struct + 1) = 0;
                *(ref @struct + 2) = 0;
                *(ref @struct + 3) = 0;
                *(ref @struct + 4) = 116;
                *(ref @struct + 5) = 192;
                Struct85 struct2;
                uint num2;
                if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct2), &num2, 116U, 1, &gstruct) != null)
                {
                    result = 0;
                }
                else
                {

                    _Module.memcpy((void*)pByte_0, ref struct2 + 96, 20U);
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x0600023F RID: 575 RVA: 0x00121110 File Offset: 0x00121110
        private unsafe int method_84()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct30 @struct;
                uint num2;
                if (_Module.smethod_12(161, (byte)num, null, null, 64, (void*)(&@struct), &num2, 512U, 512U, 1, &gstruct) != null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Identify command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    result = 0;
                }
                else
                {
                    this.method_5((byte*)(&@struct), 512U, 0U);
                    this.textBox6.AppendText(this.string_0 + "\r\n");

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 780, (void*)(&@struct), 180U);
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x06000240 RID: 576 RVA: 0x00121224 File Offset: 0x00121224
        private unsafe int method_85(byte* pByte_0)
        {
            Struct28 @struct = 220;
            *(ref @struct + 1) = 175;
            *(ref @struct + 2) = 11;
            *(ref @struct + 3) = 192;
            *(ref @struct + 4) = 251;
            *(ref @struct + 5) = 44;
            *(ref @struct + 6) = 246;
            *(ref @struct + 7) = 3;
            *(ref @struct + 8) = 131;
            *(ref @struct + 9) = 13;
            *(ref @struct + 10) = 10;
            *(ref @struct + 11) = 150;
            *(ref @struct + 12) = 197;
            *(ref @struct + 13) = 165;
            *(ref @struct + 14) = 62;
            *(ref @struct + 15) = 217;
            Struct28 struct2 = 16;
            *(ref struct2 + 1) = 17;
            *(ref struct2 + 2) = 18;
            *(ref struct2 + 3) = 19;
            *(ref struct2 + 4) = 20;
            *(ref struct2 + 5) = 21;
            *(ref struct2 + 6) = 22;
            *(ref struct2 + 7) = 23;
            *(ref struct2 + 8) = 24;
            *(ref struct2 + 9) = 25;
            *(ref struct2 + 10) = 26;
            *(ref struct2 + 11) = 27;
            *(ref struct2 + 12) = 28;
            *(ref struct2 + 13) = 29;
            *(ref struct2 + 14) = 30;
            *(ref struct2 + 15) = 31;
            Struct28 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct123_0 + 8) + 664, 16U);
            Struct28 struct4;
            this.method_89((byte*)(&@struct), (byte*)(&struct2), (byte*)(&struct3), (byte*)(&struct4));

            _Module.memcpy((void*)pByte_0, (void*)(&struct4), 16U);
            return 1;
        }

        // Token: 0x06000241 RID: 577 RVA: 0x0012136C File Offset: 0x0012136C
        private unsafe int method_86(byte* pByte_0)
        {
            Struct28 @struct = 247;
            *(ref @struct + 1) = 179;
            *(ref @struct + 2) = 204;
            *(ref @struct + 3) = 214;
            *(ref @struct + 4) = 232;
            *(ref @struct + 5) = 33;
            *(ref @struct + 6) = 206;
            *(ref @struct + 7) = 197;
            *(ref @struct + 8) = 112;
            *(ref @struct + 9) = 252;
            *(ref @struct + 10) = 170;
            *(ref @struct + 11) = 134;
            *(ref @struct + 12) = 45;
            *(ref @struct + 13) = 47;
            *(ref @struct + 14) = 101;
            *(ref @struct + 15) = 7;
            Struct28 struct2 = 16;
            *(ref struct2 + 1) = 17;
            *(ref struct2 + 2) = 18;
            *(ref struct2 + 3) = 19;
            *(ref struct2 + 4) = 20;
            *(ref struct2 + 5) = 21;
            *(ref struct2 + 6) = 22;
            *(ref struct2 + 7) = 23;
            *(ref struct2 + 8) = 24;
            *(ref struct2 + 9) = 25;
            *(ref struct2 + 10) = 26;
            *(ref struct2 + 11) = 27;
            *(ref struct2 + 12) = 28;
            *(ref struct2 + 13) = 29;
            *(ref struct2 + 14) = 30;
            *(ref struct2 + 15) = 31;
            Struct28 struct3;

            _Module.memset((void*)(&struct3), 32, 16U);
            Struct28 struct4;

            _Module.memcpy((void*)(&struct4), *(ref _Module.struct123_0 + 8) + 664, 16U);
            if (_Module.memcmp((void*)(&struct3), (void*)(&struct4), 16U) == null)
            {

                _Module.memset((void*)(&struct4), 255, 16U);
            }
            Struct28 struct5;
            this.method_89((byte*)(&@struct), (byte*)(&struct2), (byte*)(&struct4), (byte*)(&struct5));

            _Module.memcpy((void*)pByte_0, (void*)(&struct5), 16U);
            return 1;
        }

        // Token: 0x06000242 RID: 578 RVA: 0x001214DC File Offset: 0x001214DC
        private unsafe int method_87(byte* pByte_0)
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 1000U);
                Struct28 @struct;

                _Module.memset((void*)(&@struct), 0, 16U);

                _Module.memcpy((void*)(&@struct), (void*)pByte_0, 16U);
                Struct52 struct2;

                _Module.memset((void*)(&struct2), 0, 12U);
                struct2 = 253;
                *(ref struct2 + 1) = 15;
                *(ref struct2 + 2) = 80;
                *(ref struct2 + 3) = 76;
                *(ref struct2 + 4) = 68;
                *(ref struct2 + 5) = 83;
                *(ref struct2 + 6) = 119;
                *(ref struct2 + 7) = 0;
                *(ref struct2 + 8) = 16;
                this.textBox6.AppendText("Sending Password to Drive on port " + this.label123.Text + "\r\n");
                uint num2;
                if (_Module.smethod_17((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&@struct), &num2, 16U, 1, &gstruct) != null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Slim-Un-Lock command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    result = 0;
                }
                else
                {
                    this.textBox6.AppendText("Done!" + "\r\n");
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x06000243 RID: 579 RVA: 0x00121644 File Offset: 0x00121644
        private unsafe int method_88(byte* pByte_0)
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 1000U);
                Struct28 @struct;

                _Module.memset((void*)(&@struct), 0, 16U);

                _Module.memcpy((void*)(&@struct), (void*)pByte_0, 16U);
                Struct52 struct2;

                _Module.memset((void*)(&struct2), 0, 12U);
                struct2 = 253;
                *(ref struct2 + 1) = 15;
                *(ref struct2 + 2) = 80;
                *(ref struct2 + 3) = 76;
                *(ref struct2 + 4) = 68;
                *(ref struct2 + 5) = 83;
                *(ref struct2 + 6) = 0;
                *(ref struct2 + 7) = 0;
                *(ref struct2 + 8) = 16;
                this.textBox6.AppendText("Sending Password to Drive on port " + this.label123.Text + "\r\n");
                uint num2;
                if (_Module.smethod_17((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&@struct), &num2, 16U, 1, &gstruct) != null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Slim-Un-Lock command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    result = 0;
                }
                else
                {
                    this.textBox6.AppendText("Done!" + "\r\n");
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x06000244 RID: 580 RVA: 0x001217AC File Offset: 0x001217AC
        private unsafe void method_89(byte* pByte_0, byte* pByte_1, byte* pByte_2, byte* pByte_3)
        {
            Struct28 @struct;

            _Module.memcpy((void*)(&@struct), (void*)pByte_0, 16U);
            Struct28 struct2;

            _Module.memcpy((void*)(&struct2), (void*)pByte_1, 16U);
            Struct28 struct3;

            _Module.memcpy((void*)(&struct3), (void*)pByte_2, 16U);
            for (int i = 0; i < 16; i++)
            {
                *(ref struct3 + i) = (*(ref struct3 + i) ^ *(ref struct2 + i));
            }
            Struct89 struct4;
            int int_ = _Module.smethod_142((uint*)(&struct4), (byte*)(&@struct), 128);
            Struct28 struct5;

            _Module.smethod_144((uint*)(&struct4), int_, (byte*)(&struct3), (byte*)(&struct5));

            _Module.memcpy((void*)pByte_3, (void*)(&struct5), 16U);
        }

        // Token: 0x06000245 RID: 581 RVA: 0x00121820 File Offset: 0x00121820
        private unsafe void method_90(byte* pByte_0, byte* pByte_1, byte* pByte_2, byte* pByte_3)
        {
            Struct28 @struct;

            _Module.memcpy((void*)(&@struct), (void*)pByte_0, 16U);
            Struct28 struct2;

            _Module.memcpy((void*)(&struct2), (void*)pByte_1, 16U);
            Struct28 struct3;

            _Module.memcpy((void*)(&struct3), (void*)pByte_2, 16U);
            Struct89 struct4;
            int int_ = _Module.smethod_143((uint*)(&struct4), (byte*)(&@struct), 128);
            Struct28 struct5;

            _Module.smethod_145((uint*)(&struct4), int_, (byte*)(&struct3), (byte*)(&struct5));
            for (int i = 0; i < 16; i++)
            {
                *(ref struct5 + i) = (*(ref struct5 + i) ^ *(ref struct2 + i));
            }

            _Module.memcpy((void*)pByte_3, (void*)(&struct5), 16U);
        }

        // Token: 0x06000246 RID: 582 RVA: 0x00121894 File Offset: 0x00121894
        private unsafe int method_91(byte byte_0, byte byte_1, byte byte_2, byte* pByte_0)
        {
            Struct28 @struct = 74;
            *(ref @struct + 1) = 117;
            *(ref @struct + 2) = 110;
            *(ref @struct + 3) = 103;
            *(ref @struct + 4) = 108;
            *(ref @struct + 5) = 101;
            *(ref @struct + 6) = 32;
            *(ref @struct + 7) = 70;
            *(ref @struct + 8) = 108;
            *(ref @struct + 9) = 97;
            *(ref @struct + 10) = 115;
            *(ref @struct + 11) = 104;
            *(ref @struct + 12) = 101;
            *(ref @struct + 13) = 114;
            *(ref @struct + 14) = 32;
            *(ref @struct + 15) = 0;
            Struct28 struct2 = 0;
            *(ref struct2 + 1) = 1;
            *(ref struct2 + 2) = 2;
            *(ref struct2 + 3) = 3;
            *(ref struct2 + 4) = 4;
            *(ref struct2 + 5) = 5;
            *(ref struct2 + 6) = 6;
            *(ref struct2 + 7) = 7;
            *(ref struct2 + 8) = 8;
            *(ref struct2 + 9) = 9;
            *(ref struct2 + 10) = 10;
            *(ref struct2 + 11) = 11;
            *(ref struct2 + 12) = 12;
            *(ref struct2 + 13) = 13;
            *(ref struct2 + 14) = 14;
            *(ref struct2 + 15) = 15;
            Struct28 struct3 = 67;
            *(ref struct3 + 1) = 111;
            *(ref struct3 + 2) = 109;
            *(ref struct3 + 3) = 109;
            *(ref struct3 + 4) = 97;
            *(ref struct3 + 5) = 100;
            *(ref struct3 + 6) = 111;
            *(ref struct3 + 7) = 114;
            *(ref struct3 + 8) = 101;
            *(ref struct3 + 9) = 32;
            *(ref struct3 + 10) = 52;
            *(ref struct3 + 11) = 32;
            *(ref struct3 + 12) = 101;
            *(ref struct3 + 13) = 118;
            *(ref struct3 + 14) = 101;
            *(ref struct3 + 15) = 114;
            Struct28 struct4 = 4;
            *(ref struct4 + 1) = 0;
            *(ref struct4 + 2) = 0;
            *(ref struct4 + 3) = 0;
            *(ref struct4 + 4) = 0;
            *(ref struct4 + 5) = 0;
            *(ref struct4 + 6) = 0;
            *(ref struct4 + 7) = 0;
            *(ref struct4 + 8) = 0;
            *(ref struct4 + 9) = 0;
            *(ref struct4 + 10) = 0;
            *(ref struct4 + 11) = 16;
            *(ref struct4 + 12) = 0;
            *(ref struct4 + 13) = 0;
            *(ref struct4 + 14) = 0;
            *(ref struct4 + 15) = 0;
            Struct28 struct5 = 0;
            initblk(ref struct5 + 1, 0, 15);
            Struct28 struct6 = 0;
            initblk(ref struct6 + 1, 0, 15);

            _Module.memset((void*)(&struct5), 0, 16U);

            _Module.memset((void*)(&struct6), 255, 16U);
            Struct28 struct7 = 0;
            initblk(ref struct7 + 1, 0, 15);
            Struct4 struct8 = 0;
            *(ref struct8 + 1) = 56;
            *(ref struct8 + 2) = 0;
            *(ref struct8 + 3) = 0;
            *(ref struct8 + 4) = 0;
            *(ref struct8 + 5) = 0;
            *(ref struct8 + 6) = 0;
            *(ref struct8 + 7) = 0;
            *(ref struct8 + 8) = 33;
            *(ref struct8 + 9) = 48;
            *(ref struct8 + 10) = 0;
            *(ref struct8 + 11) = 0;
            *(ref struct8 + 12) = 0;
            *(ref struct8 + 13) = 0;
            *(ref struct8 + 14) = 0;
            *(ref struct8 + 15) = 0;
            *(ref struct8 + 16) = 0;
            *(ref struct8 + 17) = 0;
            *(ref struct8 + 18) = 0;
            *(ref struct8 + 19) = 0;
            *(ref struct8 + 20) = 0;
            *(ref struct8 + 21) = 0;
            *(ref struct8 + 22) = 0;
            *(ref struct8 + 23) = 0;
            *(ref struct8 + 24) = 0;
            *(ref struct8 + 25) = 0;
            *(ref struct8 + 26) = 0;
            *(ref struct8 + 27) = 0;
            *(ref struct8 + 28) = 0;
            *(ref struct8 + 29) = 0;
            *(ref struct8 + 30) = 0;
            *(ref struct8 + 31) = 0;
            *(ref struct8 + 32) = 0;
            *(ref struct8 + 33) = 0;
            *(ref struct8 + 34) = 0;
            *(ref struct8 + 35) = 0;
            *(ref struct8 + 36) = 0;
            *(ref struct8 + 37) = 0;
            *(ref struct8 + 38) = 0;
            *(ref struct8 + 39) = 0;
            *(ref struct8 + 40) = 0;
            *(ref struct8 + 41) = 0;
            *(ref struct8 + 42) = 0;
            *(ref struct8 + 43) = 0;
            *(ref struct8 + 44) = 0;
            *(ref struct8 + 45) = 0;
            *(ref struct8 + 46) = 0;
            *(ref struct8 + 47) = 0;
            *(ref struct8 + 48) = 0;
            *(ref struct8 + 49) = 0;
            *(ref struct8 + 50) = 0;
            *(ref struct8 + 51) = 0;
            *(ref struct8 + 52) = 0;
            *(ref struct8 + 53) = 0;
            *(ref struct8 + 54) = 0;
            *(ref struct8 + 55) = 0;
            *(ref struct8 + 56) = 0;
            *(ref struct8 + 57) = 0;
            *(ref struct8 + 58) = 0;
            *(ref struct8 + 59) = 0;
            *(ref struct8 + 60) = 0;
            *(ref struct8 + 61) = 0;
            *(ref struct8 + 62) = 0;
            *(ref struct8 + 63) = 0;
            *(ref struct4 + 5) = byte_0;
            *(ref struct4 + 6) = byte_1;
            *(ref struct4 + 7) = byte_2;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                int selectedIndex = this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72);
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72 + 4));
                uint num2;
                if (num == 160U)
                {
                    num2 = 0U;
                }
                else
                {
                    num2 = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                this.method_89((byte*)(&@struct), (byte*)(&struct2), (byte*)(&@struct), ref struct8 + 10);
                this.method_89((byte*)(&@struct), ref struct8 + 10, (byte*)(&struct5), ref struct8 + 26);
                this.method_89((byte*)(&@struct), ref struct8 + 26, (byte*)(&struct4), ref struct8 + 42);
                Struct52 struct9;

                _Module.memset((void*)(&struct9), 0, 12U);
                Struct90 struct10;

                _Module.memcpy((void*)(&struct10), (void*)(&struct8), 58U);
                struct9 = 85;
                *(ref struct9 + 8) = 58;
                uint num3;
                if (_Module.smethod_17((byte*)(&struct9), 12U, (byte)num2, 512, (void*)(&struct10), &num3, 58U, 1, &gstruct) != null && _Module.smethod_17((byte*)(&struct9), 12U, (byte)num2, 512, (void*)(&struct10), &num3, 58U, 1, &gstruct) != null)
                {
                    this.textBox6.AppendText("\r\n" + "Stage 1 failed" + "\r\n");
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {

                    _Module.Sleep(1);
                    if (*(ref _Module.struct38_0 + selectedIndex * 72) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72 + 3) == 1)
                    {
                        this.method_424(88);
                    }
                    Struct90 struct11;

                    _Module.memset((void*)(&struct11), 0, 58U);

                    _Module.memset((void*)(&struct9), 0, 12U);
                    struct9 = 90;
                    *(ref struct9 + 2) = 33;
                    *(ref struct9 + 8) = 58;
                    if (_Module.smethod_16((byte*)(&struct9), 12U, (byte)num2, 512, (void*)(&struct11), &num3, 58U, 1, &gstruct) != null && _Module.smethod_16((byte*)(&struct9), 12U, (byte)num2, 512, (void*)(&struct11), &num3, 58U, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Stage 2 failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        result = 0;
                    }
                    else
                    {
                        Struct31 struct12;
                        this.method_90((byte*)(&@struct), (byte*)(&struct2), ref struct11 + 10, (byte*)(&struct12));
                        this.method_90((byte*)(&@struct), ref struct11 + 10, ref struct11 + 26, ref struct12 + 16);
                        this.method_90((byte*)(&@struct), ref struct11 + 26, ref struct11 + 42, ref struct12 + 32);
                        this.method_90((byte*)(&@struct), (byte*)(&struct6), ref struct12 + 16, ref struct12 + 48);
                        this.method_90((byte*)(&@struct), (byte*)(&struct5), ref struct12 + 48, ref struct12 + 64);
                        if (_Module.memcmp((void*)(&struct12), (void*)(&@struct), 16U) == null)
                        {

                            _Module.memcpy((void*)pByte_0, ref struct12 + 64, 16U);
                            result = 1;
                        }
                        else
                        {
                            result = 0;
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x06000247 RID: 583 RVA: 0x00121ECC File Offset: 0x00121ECC
        private unsafe int method_92(byte byte_0, byte byte_1, byte byte_2, byte* pByte_0)
        {
            Struct28 @struct = 74;
            *(ref @struct + 1) = 117;
            *(ref @struct + 2) = 110;
            *(ref @struct + 3) = 103;
            *(ref @struct + 4) = 108;
            *(ref @struct + 5) = 101;
            *(ref @struct + 6) = 32;
            *(ref @struct + 7) = 70;
            *(ref @struct + 8) = 108;
            *(ref @struct + 9) = 97;
            *(ref @struct + 10) = 115;
            *(ref @struct + 11) = 104;
            *(ref @struct + 12) = 101;
            *(ref @struct + 13) = 114;
            *(ref @struct + 14) = 32;
            *(ref @struct + 15) = 0;
            Struct28 struct2 = 0;
            *(ref struct2 + 1) = 1;
            *(ref struct2 + 2) = 2;
            *(ref struct2 + 3) = 3;
            *(ref struct2 + 4) = 4;
            *(ref struct2 + 5) = 5;
            *(ref struct2 + 6) = 6;
            *(ref struct2 + 7) = 7;
            *(ref struct2 + 8) = 8;
            *(ref struct2 + 9) = 9;
            *(ref struct2 + 10) = 10;
            *(ref struct2 + 11) = 11;
            *(ref struct2 + 12) = 12;
            *(ref struct2 + 13) = 13;
            *(ref struct2 + 14) = 14;
            *(ref struct2 + 15) = 15;
            Struct28 struct3 = 67;
            *(ref struct3 + 1) = 111;
            *(ref struct3 + 2) = 109;
            *(ref struct3 + 3) = 109;
            *(ref struct3 + 4) = 97;
            *(ref struct3 + 5) = 100;
            *(ref struct3 + 6) = 111;
            *(ref struct3 + 7) = 114;
            *(ref struct3 + 8) = 101;
            *(ref struct3 + 9) = 32;
            *(ref struct3 + 10) = 52;
            *(ref struct3 + 11) = 32;
            *(ref struct3 + 12) = 101;
            *(ref struct3 + 13) = 118;
            *(ref struct3 + 14) = 101;
            *(ref struct3 + 15) = 114;
            Struct28 struct4 = 0;
            *(ref struct4 + 1) = 0;
            *(ref struct4 + 2) = 0;
            *(ref struct4 + 3) = 0;
            *(ref struct4 + 4) = 0;
            *(ref struct4 + 5) = 0;
            *(ref struct4 + 6) = 0;
            *(ref struct4 + 7) = 0;
            *(ref struct4 + 8) = 0;
            *(ref struct4 + 9) = 0;
            *(ref struct4 + 10) = 0;
            *(ref struct4 + 11) = 0;
            *(ref struct4 + 12) = 0;
            *(ref struct4 + 13) = 16;
            *(ref struct4 + 14) = 1;
            *(ref struct4 + 15) = 0;
            Struct28 struct5 = 0;
            initblk(ref struct5 + 1, 0, 15);
            Struct28 struct6 = 0;
            initblk(ref struct6 + 1, 0, 15);

            _Module.memset((void*)(&struct5), 0, 16U);

            _Module.memset((void*)(&struct6), 255, 16U);
            Struct28 struct7 = 0;
            initblk(ref struct7 + 1, 0, 15);
            Struct4 struct8 = 0;
            *(ref struct8 + 1) = 56;
            *(ref struct8 + 2) = 0;
            *(ref struct8 + 3) = 0;
            *(ref struct8 + 4) = 0;
            *(ref struct8 + 5) = 0;
            *(ref struct8 + 6) = 0;
            *(ref struct8 + 7) = 0;
            *(ref struct8 + 8) = 36;
            *(ref struct8 + 9) = 48;
            *(ref struct8 + 10) = 0;
            *(ref struct8 + 11) = 0;
            *(ref struct8 + 12) = 0;
            *(ref struct8 + 13) = 0;
            *(ref struct8 + 14) = 0;
            *(ref struct8 + 15) = 0;
            *(ref struct8 + 16) = 0;
            *(ref struct8 + 17) = 0;
            *(ref struct8 + 18) = 0;
            *(ref struct8 + 19) = 0;
            *(ref struct8 + 20) = 0;
            *(ref struct8 + 21) = 0;
            *(ref struct8 + 22) = 0;
            *(ref struct8 + 23) = 0;
            *(ref struct8 + 24) = 0;
            *(ref struct8 + 25) = 0;
            *(ref struct8 + 26) = 0;
            *(ref struct8 + 27) = 0;
            *(ref struct8 + 28) = 0;
            *(ref struct8 + 29) = 0;
            *(ref struct8 + 30) = 0;
            *(ref struct8 + 31) = 0;
            *(ref struct8 + 32) = 0;
            *(ref struct8 + 33) = 0;
            *(ref struct8 + 34) = 0;
            *(ref struct8 + 35) = 0;
            *(ref struct8 + 36) = 0;
            *(ref struct8 + 37) = 0;
            *(ref struct8 + 38) = 0;
            *(ref struct8 + 39) = 0;
            *(ref struct8 + 40) = 0;
            *(ref struct8 + 41) = 0;
            *(ref struct8 + 42) = 0;
            *(ref struct8 + 43) = 0;
            *(ref struct8 + 44) = 0;
            *(ref struct8 + 45) = 0;
            *(ref struct8 + 46) = 0;
            *(ref struct8 + 47) = 0;
            *(ref struct8 + 48) = 0;
            *(ref struct8 + 49) = 0;
            *(ref struct8 + 50) = 0;
            *(ref struct8 + 51) = 0;
            *(ref struct8 + 52) = 0;
            *(ref struct8 + 53) = 0;
            *(ref struct8 + 54) = 0;
            *(ref struct8 + 55) = 0;
            *(ref struct8 + 56) = 0;
            *(ref struct8 + 57) = 0;
            *(ref struct8 + 58) = 0;
            *(ref struct8 + 59) = 0;
            *(ref struct8 + 60) = 0;
            *(ref struct8 + 61) = 0;
            *(ref struct8 + 62) = 0;
            *(ref struct8 + 63) = 0;
            *(ref struct4 + 5) = byte_0;
            *(ref struct4 + 6) = byte_1;
            *(ref struct4 + 7) = byte_2;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                int selectedIndex = this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72);
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72 + 4));
                uint num2;
                if (num == 160U)
                {
                    num2 = 0U;
                }
                else
                {
                    num2 = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                this.method_89((byte*)(&@struct), (byte*)(&struct2), (byte*)(&@struct), ref struct8 + 10);
                this.method_89((byte*)(&@struct), ref struct8 + 10, (byte*)(&struct5), ref struct8 + 26);
                this.method_89((byte*)(&@struct), ref struct8 + 26, (byte*)(&struct4), ref struct8 + 42);
                Struct52 struct9;

                _Module.memset((void*)(&struct9), 0, 12U);
                Struct90 struct10;

                _Module.memcpy((void*)(&struct10), (void*)(&struct8), 58U);
                struct9 = 85;
                *(ref struct9 + 8) = 58;
                uint num3;
                if (_Module.smethod_17((byte*)(&struct9), 12U, (byte)num2, 512, (void*)(&struct10), &num3, 58U, 1, &gstruct) != null && _Module.smethod_17((byte*)(&struct9), 12U, (byte)num2, 512, (void*)(&struct10), &num3, 58U, 1, &gstruct) != null)
                {
                    this.textBox6.AppendText("\r\n" + "Stage 1 failed" + "\r\n");
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {

                    _Module.Sleep(1);
                    if (*(ref _Module.struct38_0 + selectedIndex * 72) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72 + 3) == 1)
                    {
                        this.method_424(88);
                    }
                    Struct90 struct11;

                    _Module.memset((void*)(&struct11), 0, 58U);

                    _Module.memset((void*)(&struct9), 0, 12U);
                    struct9 = 90;
                    *(ref struct9 + 2) = 33;
                    *(ref struct9 + 8) = 58;
                    if (_Module.smethod_16((byte*)(&struct9), 12U, (byte)num2, 512, (void*)(&struct11), &num3, 58U, 1, &gstruct) != null && _Module.smethod_16((byte*)(&struct9), 12U, (byte)num2, 512, (void*)(&struct11), &num3, 58U, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Stage 2 failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        result = 0;
                    }
                    else
                    {
                        Struct31 struct12;
                        this.method_90((byte*)(&@struct), (byte*)(&struct2), ref struct11 + 10, (byte*)(&struct12));
                        this.method_90((byte*)(&@struct), ref struct11 + 10, ref struct11 + 26, ref struct12 + 16);
                        this.method_90((byte*)(&@struct), ref struct11 + 26, ref struct11 + 42, ref struct12 + 32);
                        this.method_90((byte*)(&@struct), (byte*)(&struct6), ref struct12 + 16, ref struct12 + 48);
                        this.method_90((byte*)(&@struct), (byte*)(&struct5), ref struct12 + 48, ref struct12 + 64);

                        _Module.memcpy((void*)pByte_0, ref struct12 + 64, 16U);
                        if (_Module.memcmp((void*)(&struct12), (void*)(&@struct), 16U) == null)
                        {

                            _Module.memcpy((void*)pByte_0, ref struct12 + 64, 16U);
                            result = 1;
                        }
                        else
                        {
                            result = 0;
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x06000248 RID: 584 RVA: 0x00122510 File Offset: 0x00122510
        private unsafe int method_93(byte byte_0, byte byte_1, byte byte_2, byte* pByte_0)
        {
            Struct28 @struct = 74;
            *(ref @struct + 1) = 117;
            *(ref @struct + 2) = 110;
            *(ref @struct + 3) = 103;
            *(ref @struct + 4) = 108;
            *(ref @struct + 5) = 101;
            *(ref @struct + 6) = 32;
            *(ref @struct + 7) = 70;
            *(ref @struct + 8) = 108;
            *(ref @struct + 9) = 97;
            *(ref @struct + 10) = 115;
            *(ref @struct + 11) = 104;
            *(ref @struct + 12) = 101;
            *(ref @struct + 13) = 114;
            *(ref @struct + 14) = 32;
            *(ref @struct + 15) = 0;
            Struct28 struct2 = 0;
            *(ref struct2 + 1) = 1;
            *(ref struct2 + 2) = 2;
            *(ref struct2 + 3) = 3;
            *(ref struct2 + 4) = 4;
            *(ref struct2 + 5) = 5;
            *(ref struct2 + 6) = 6;
            *(ref struct2 + 7) = 7;
            *(ref struct2 + 8) = 8;
            *(ref struct2 + 9) = 9;
            *(ref struct2 + 10) = 10;
            *(ref struct2 + 11) = 11;
            *(ref struct2 + 12) = 12;
            *(ref struct2 + 13) = 13;
            *(ref struct2 + 14) = 14;
            *(ref struct2 + 15) = 15;
            Struct28 struct3 = 67;
            *(ref struct3 + 1) = 111;
            *(ref struct3 + 2) = 109;
            *(ref struct3 + 3) = 109;
            *(ref struct3 + 4) = 97;
            *(ref struct3 + 5) = 100;
            *(ref struct3 + 6) = 111;
            *(ref struct3 + 7) = 114;
            *(ref struct3 + 8) = 101;
            *(ref struct3 + 9) = 32;
            *(ref struct3 + 10) = 52;
            *(ref struct3 + 11) = 32;
            *(ref struct3 + 12) = 101;
            *(ref struct3 + 13) = 118;
            *(ref struct3 + 14) = 101;
            *(ref struct3 + 15) = 114;
            Struct28 struct4 = 0;
            *(ref struct4 + 1) = 0;
            *(ref struct4 + 2) = 0;
            *(ref struct4 + 3) = 0;
            *(ref struct4 + 4) = 0;
            *(ref struct4 + 5) = 0;
            *(ref struct4 + 6) = 0;
            *(ref struct4 + 7) = 0;
            *(ref struct4 + 8) = 0;
            *(ref struct4 + 9) = 0;
            *(ref struct4 + 10) = 0;
            *(ref struct4 + 11) = 0;
            *(ref struct4 + 12) = 0;
            *(ref struct4 + 13) = 2;
            *(ref struct4 + 14) = 1;
            *(ref struct4 + 15) = 0;
            Struct28 struct5 = 0;
            initblk(ref struct5 + 1, 0, 15);
            Struct28 struct6 = 0;
            initblk(ref struct6 + 1, 0, 15);

            _Module.memset((void*)(&struct5), 0, 16U);

            _Module.memset((void*)(&struct6), 255, 16U);
            Struct28 struct7 = 0;
            initblk(ref struct7 + 1, 0, 15);
            Struct4 struct8 = 0;
            *(ref struct8 + 1) = 56;
            *(ref struct8 + 2) = 0;
            *(ref struct8 + 3) = 0;
            *(ref struct8 + 4) = 0;
            *(ref struct8 + 5) = 0;
            *(ref struct8 + 6) = 0;
            *(ref struct8 + 7) = 0;
            *(ref struct8 + 8) = 36;
            *(ref struct8 + 9) = 48;
            *(ref struct8 + 10) = 0;
            *(ref struct8 + 11) = 0;
            *(ref struct8 + 12) = 0;
            *(ref struct8 + 13) = 0;
            *(ref struct8 + 14) = 0;
            *(ref struct8 + 15) = 0;
            *(ref struct8 + 16) = 0;
            *(ref struct8 + 17) = 0;
            *(ref struct8 + 18) = 0;
            *(ref struct8 + 19) = 0;
            *(ref struct8 + 20) = 0;
            *(ref struct8 + 21) = 0;
            *(ref struct8 + 22) = 0;
            *(ref struct8 + 23) = 0;
            *(ref struct8 + 24) = 0;
            *(ref struct8 + 25) = 0;
            *(ref struct8 + 26) = 0;
            *(ref struct8 + 27) = 0;
            *(ref struct8 + 28) = 0;
            *(ref struct8 + 29) = 0;
            *(ref struct8 + 30) = 0;
            *(ref struct8 + 31) = 0;
            *(ref struct8 + 32) = 0;
            *(ref struct8 + 33) = 0;
            *(ref struct8 + 34) = 0;
            *(ref struct8 + 35) = 0;
            *(ref struct8 + 36) = 0;
            *(ref struct8 + 37) = 0;
            *(ref struct8 + 38) = 0;
            *(ref struct8 + 39) = 0;
            *(ref struct8 + 40) = 0;
            *(ref struct8 + 41) = 0;
            *(ref struct8 + 42) = 0;
            *(ref struct8 + 43) = 0;
            *(ref struct8 + 44) = 0;
            *(ref struct8 + 45) = 0;
            *(ref struct8 + 46) = 0;
            *(ref struct8 + 47) = 0;
            *(ref struct8 + 48) = 0;
            *(ref struct8 + 49) = 0;
            *(ref struct8 + 50) = 0;
            *(ref struct8 + 51) = 0;
            *(ref struct8 + 52) = 0;
            *(ref struct8 + 53) = 0;
            *(ref struct8 + 54) = 0;
            *(ref struct8 + 55) = 2;
            *(ref struct8 + 56) = 1;
            *(ref struct8 + 57) = 0;
            *(ref struct8 + 58) = 0;
            *(ref struct8 + 59) = 0;
            *(ref struct8 + 60) = 0;
            *(ref struct8 + 61) = 0;
            *(ref struct8 + 62) = 0;
            *(ref struct8 + 63) = 0;
            *(ref struct4 + 14) = byte_2;
            *(ref struct4 + 13) = byte_1;
            *(ref struct8 + 8) = byte_0;
            *(ref struct8 + 55) = byte_1;
            *(ref struct8 + 56) = byte_2;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                int selectedIndex = this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72);
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72 + 4));
                uint num2;
                if (num == 160U)
                {
                    num2 = 0U;
                }
                else
                {
                    num2 = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);

                _Module.memcpy(ref struct8 + 10, (void*)(&@struct), 16U);

                _Module.memcpy(ref struct8 + 26, (void*)(&struct5), 16U);

                _Module.memcpy(ref struct8 + 42, (void*)(&struct4), 16U);
                this.method_89((byte*)(&@struct), (byte*)(&struct2), (byte*)(&@struct), ref struct8 + 10);
                this.method_89((byte*)(&@struct), ref struct8 + 10, (byte*)(&struct5), ref struct8 + 26);
                this.method_89((byte*)(&@struct), ref struct8 + 26, (byte*)(&struct4), ref struct8 + 42);
                Struct52 struct9;

                _Module.memset((void*)(&struct9), 0, 12U);
                Struct90 struct10;

                _Module.memcpy((void*)(&struct10), (void*)(&struct8), 58U);
                struct9 = 85;
                *(ref struct9 + 8) = 58;

                _Module.clock();
                uint num3;
                if (_Module.smethod_17((byte*)(&struct9), 12U, (byte)num2, 512, (void*)(&struct10), &num3, 58U, 1, &gstruct) != null && _Module.smethod_17((byte*)(&struct9), 12U, (byte)num2, 512, (void*)(&struct10), &num3, 58U, 1, &gstruct) != null)
                {
                    this.textBox6.AppendText("\r\n" + "Stage 1 failed" + "\r\n");
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {

                    _Module.Sleep(1);
                    if (*(ref _Module.struct38_0 + selectedIndex * 72) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72 + 3) == 1)
                    {
                        this.method_424(88);
                    }
                    Struct90 struct11;

                    _Module.memset((void*)(&struct11), 0, 58U);

                    _Module.memset((void*)(&struct9), 0, 12U);
                    struct9 = 90;
                    *(ref struct9 + 2) = byte_0;
                    *(ref struct9 + 8) = 58;
                    if (_Module.smethod_16((byte*)(&struct9), 12U, (byte)num2, 512, (void*)(&struct11), &num3, 58U, 1, &gstruct) != null && _Module.smethod_16((byte*)(&struct9), 12U, (byte)num2, 512, (void*)(&struct11), &num3, 58U, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Stage 2 failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        result = 0;
                    }
                    else
                    {

                        _Module.clock();
                        Struct31 struct12;
                        this.method_90((byte*)(&@struct), (byte*)(&struct2), ref struct11 + 10, (byte*)(&struct12));
                        this.method_90((byte*)(&@struct), ref struct11 + 10, ref struct11 + 26, ref struct12 + 16);
                        this.method_90((byte*)(&@struct), ref struct11 + 26, ref struct11 + 42, ref struct12 + 32);
                        this.method_90((byte*)(&@struct), (byte*)(&struct6), ref struct12 + 16, ref struct12 + 48);
                        this.method_90((byte*)(&@struct), (byte*)(&struct5), ref struct12 + 48, ref struct12 + 64);
                        if (_Module.memcmp((void*)(&struct12), (void*)(&@struct), 16U) == null)
                        {

                            _Module.memcpy((void*)pByte_0, ref struct12 + 64, 16U);
                            result = 1;
                        }
                        else
                        {
                            result = 0;
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x06000249 RID: 585 RVA: 0x00122BA4 File Offset: 0x00122BA4
        private unsafe int method_94(byte* pByte_0)
        {
            Struct28 @struct = 239;
            *(ref @struct + 1) = 180;
            *(ref @struct + 2) = 134;
            *(ref @struct + 3) = 14;
            *(ref @struct + 4) = 51;
            *(ref @struct + 5) = 186;
            *(ref @struct + 6) = 40;
            *(ref @struct + 7) = 88;
            *(ref @struct + 8) = 99;
            *(ref @struct + 9) = 52;
            *(ref @struct + 10) = 85;
            *(ref @struct + 11) = 115;
            *(ref @struct + 12) = 79;
            *(ref @struct + 13) = 173;
            *(ref @struct + 14) = 24;
            *(ref @struct + 15) = 147;
            Struct28 struct2 = 233;
            *(ref struct2 + 1) = 143;
            *(ref struct2 + 2) = 129;
            *(ref struct2 + 3) = 159;
            *(ref struct2 + 4) = 139;
            *(ref struct2 + 5) = 28;
            *(ref struct2 + 6) = 132;
            *(ref struct2 + 7) = 131;
            *(ref struct2 + 8) = 143;
            *(ref struct2 + 9) = 225;
            *(ref struct2 + 10) = 194;
            *(ref struct2 + 11) = 44;
            *(ref struct2 + 12) = 49;
            *(ref struct2 + 13) = 73;
            *(ref struct2 + 14) = 107;
            *(ref struct2 + 15) = 185;
            Struct28 struct3 = 112;
            *(ref struct3 + 1) = 39;
            *(ref struct3 + 2) = 166;
            *(ref struct3 + 3) = 0;
            *(ref struct3 + 4) = 5;
            *(ref struct3 + 5) = 69;
            *(ref struct3 + 6) = 82;
            *(ref struct3 + 7) = 29;
            *(ref struct3 + 8) = 10;
            *(ref struct3 + 9) = 126;
            *(ref struct3 + 10) = 243;
            *(ref struct3 + 11) = 59;
            *(ref struct3 + 12) = 5;
            *(ref struct3 + 13) = 138;
            *(ref struct3 + 14) = 187;
            *(ref struct3 + 15) = 127;
            Struct28 struct4 = 178;
            *(ref struct4 + 1) = 65;
            *(ref struct4 + 2) = 6;
            *(ref struct4 + 3) = 55;
            *(ref struct4 + 4) = 12;
            *(ref struct4 + 5) = 241;
            *(ref struct4 + 6) = 202;
            *(ref struct4 + 7) = 107;
            *(ref struct4 + 8) = 168;
            *(ref struct4 + 9) = 68;
            *(ref struct4 + 10) = 235;
            *(ref struct4 + 11) = 11;
            *(ref struct4 + 12) = 39;
            *(ref struct4 + 13) = 121;
            *(ref struct4 + 14) = 40;
            *(ref struct4 + 15) = 246;
            Struct28 struct5 = 36;
            *(ref struct5 + 1) = 213;
            *(ref struct5 + 2) = 165;
            *(ref struct5 + 3) = 239;
            *(ref struct5 + 4) = 251;
            *(ref struct5 + 5) = 64;
            *(ref struct5 + 6) = 87;
            *(ref struct5 + 7) = 131;
            *(ref struct5 + 8) = 252;
            *(ref struct5 + 9) = 60;
            *(ref struct5 + 10) = 35;
            *(ref struct5 + 11) = 73;
            *(ref struct5 + 12) = 167;
            *(ref struct5 + 13) = 178;
            *(ref struct5 + 14) = 185;
            *(ref struct5 + 15) = 12;
            Struct28 struct6 = 50;
            *(ref struct6 + 1) = 135;
            *(ref struct6 + 2) = 14;
            *(ref struct6 + 3) = 221;
            *(ref struct6 + 4) = 144;
            *(ref struct6 + 5) = 47;
            *(ref struct6 + 6) = 221;
            *(ref struct6 + 7) = 3;
            *(ref struct6 + 8) = 226;
            *(ref struct6 + 9) = 142;
            *(ref struct6 + 10) = 17;
            *(ref struct6 + 11) = 138;
            *(ref struct6 + 12) = 183;
            *(ref struct6 + 13) = 75;
            *(ref struct6 + 14) = 133;
            *(ref struct6 + 15) = 251;
            Struct28 struct7 = 235;
            *(ref struct7 + 1) = 178;
            *(ref struct7 + 2) = 137;
            *(ref struct7 + 3) = 94;
            *(ref struct7 + 4) = 135;
            *(ref struct7 + 5) = 147;
            *(ref struct7 + 6) = 66;
            *(ref struct7 + 7) = 83;
            *(ref struct7 + 8) = 29;
            *(ref struct7 + 9) = 21;
            *(ref struct7 + 10) = 165;
            *(ref struct7 + 11) = 55;
            *(ref struct7 + 12) = 127;
            *(ref struct7 + 13) = 212;
            *(ref struct7 + 14) = 104;
            *(ref struct7 + 15) = 80;
            Struct28 struct8 = 83;
            *(ref struct8 + 1) = 214;
            *(ref struct8 + 2) = 249;
            *(ref struct8 + 3) = 171;
            *(ref struct8 + 4) = 241;
            *(ref struct8 + 5) = 114;
            *(ref struct8 + 6) = 63;
            *(ref struct8 + 7) = 51;
            *(ref struct8 + 8) = 64;
            *(ref struct8 + 9) = 125;
            *(ref struct8 + 10) = 176;
            *(ref struct8 + 11) = 211;
            *(ref struct8 + 12) = 170;
            *(ref struct8 + 13) = 11;
            *(ref struct8 + 14) = 5;
            *(ref struct8 + 15) = 49;
            Struct28 struct9 = 75;
            *(ref struct9 + 1) = 62;
            *(ref struct9 + 2) = 39;
            *(ref struct9 + 3) = 96;
            *(ref struct9 + 4) = 125;
            *(ref struct9 + 5) = 197;
            *(ref struct9 + 6) = 254;
            *(ref struct9 + 7) = 90;
            *(ref struct9 + 8) = 149;
            *(ref struct9 + 9) = 145;
            *(ref struct9 + 10) = 107;
            *(ref struct9 + 11) = 238;
            *(ref struct9 + 12) = 41;
            *(ref struct9 + 13) = 226;
            *(ref struct9 + 14) = 110;
            *(ref struct9 + 15) = 123;
            Struct28 struct10 = 229;
            *(ref struct10 + 1) = 122;
            *(ref struct10 + 2) = 224;
            *(ref struct10 + 3) = 171;
            *(ref struct10 + 4) = 193;
            *(ref struct10 + 5) = 43;
            *(ref struct10 + 6) = 7;
            *(ref struct10 + 7) = 212;
            *(ref struct10 + 8) = 136;
            *(ref struct10 + 9) = 184;
            *(ref struct10 + 10) = 101;
            *(ref struct10 + 11) = 76;
            *(ref struct10 + 12) = 154;
            *(ref struct10 + 13) = 21;
            *(ref struct10 + 14) = 175;
            *(ref struct10 + 15) = 152;
            Struct28 struct11 = 2;
            *(ref struct11 + 1) = 178;
            *(ref struct11 + 2) = 203;
            *(ref struct11 + 3) = 235;
            *(ref struct11 + 4) = 45;
            *(ref struct11 + 5) = 39;
            *(ref struct11 + 6) = 191;
            *(ref struct11 + 7) = 244;
            *(ref struct11 + 8) = 48;
            *(ref struct11 + 9) = 157;
            *(ref struct11 + 10) = 1;
            *(ref struct11 + 11) = 109;
            *(ref struct11 + 12) = 157;
            *(ref struct11 + 13) = 140;
            *(ref struct11 + 14) = 205;
            *(ref struct11 + 15) = 55;
            Struct28 struct12 = 92;
            *(ref struct12 + 1) = 0;
            *(ref struct12 + 2) = 69;
            *(ref struct12 + 3) = 25;
            *(ref struct12 + 4) = 167;
            *(ref struct12 + 5) = 129;
            *(ref struct12 + 6) = 184;
            *(ref struct12 + 7) = 182;
            *(ref struct12 + 8) = 93;
            *(ref struct12 + 9) = 126;
            *(ref struct12 + 10) = 202;
            *(ref struct12 + 11) = 161;
            *(ref struct12 + 12) = 8;
            *(ref struct12 + 13) = 217;
            *(ref struct12 + 14) = 157;
            *(ref struct12 + 15) = 233;
            Struct28 struct13 = 52;
            *(ref struct13 + 1) = 69;
            *(ref struct13 + 2) = 177;
            *(ref struct13 + 3) = 214;
            *(ref struct13 + 4) = 227;
            *(ref struct13 + 5) = 148;
            *(ref struct13 + 6) = 233;
            *(ref struct13 + 7) = 64;
            *(ref struct13 + 8) = 198;
            *(ref struct13 + 9) = 228;
            *(ref struct13 + 10) = 212;
            *(ref struct13 + 11) = 253;
            *(ref struct13 + 12) = 219;
            *(ref struct13 + 13) = 73;
            *(ref struct13 + 14) = 84;
            *(ref struct13 + 15) = 20;
            Struct28 struct14 = 173;
            *(ref struct14 + 1) = 93;
            *(ref struct14 + 2) = 213;
            *(ref struct14 + 3) = 175;
            *(ref struct14 + 4) = 36;
            *(ref struct14 + 5) = 62;
            *(ref struct14 + 6) = 179;
            *(ref struct14 + 7) = 178;
            *(ref struct14 + 8) = 139;
            *(ref struct14 + 9) = 110;
            *(ref struct14 + 10) = 252;
            *(ref struct14 + 11) = 111;
            *(ref struct14 + 12) = 210;
            *(ref struct14 + 13) = 75;
            *(ref struct14 + 14) = 191;
            *(ref struct14 + 15) = 112;
            Struct28 struct15 = 229;
            *(ref struct15 + 1) = 199;
            *(ref struct15 + 2) = 107;
            *(ref struct15 + 3) = 241;
            *(ref struct15 + 4) = 35;
            *(ref struct15 + 5) = 14;
            *(ref struct15 + 6) = 218;
            *(ref struct15 + 7) = 59;
            *(ref struct15 + 8) = 82;
            *(ref struct15 + 9) = 225;
            *(ref struct15 + 10) = 248;
            *(ref struct15 + 11) = 4;
            *(ref struct15 + 12) = 138;
            *(ref struct15 + 13) = 176;
            *(ref struct15 + 14) = 62;
            *(ref struct15 + 15) = 112;
            Struct28 struct16 = 195;
            *(ref struct16 + 1) = 149;
            *(ref struct16 + 2) = 97;
            *(ref struct16 + 3) = 101;
            *(ref struct16 + 4) = 48;
            *(ref struct16 + 5) = 144;
            *(ref struct16 + 6) = 153;
            *(ref struct16 + 7) = 252;
            *(ref struct16 + 8) = 145;
            *(ref struct16 + 9) = 83;
            *(ref struct16 + 10) = 39;
            *(ref struct16 + 11) = 204;
            *(ref struct16 + 12) = 227;
            *(ref struct16 + 13) = 129;
            *(ref struct16 + 14) = 240;
            *(ref struct16 + 15) = 107;
            Struct28 struct17 = 231;
            *(ref struct17 + 1) = 122;
            *(ref struct17 + 2) = 74;
            *(ref struct17 + 3) = 110;
            *(ref struct17 + 4) = 2;
            *(ref struct17 + 5) = 125;
            *(ref struct17 + 6) = 184;
            *(ref struct17 + 7) = 96;
            *(ref struct17 + 8) = 97;
            *(ref struct17 + 9) = 86;
            *(ref struct17 + 10) = 249;
            *(ref struct17 + 11) = 101;
            *(ref struct17 + 12) = 18;
            *(ref struct17 + 13) = 24;
            *(ref struct17 + 14) = 107;
            *(ref struct17 + 15) = 236;
            Struct28 struct18 = 26;
            *(ref struct18 + 1) = 194;
            *(ref struct18 + 2) = 56;
            *(ref struct18 + 3) = 208;
            *(ref struct18 + 4) = 231;
            *(ref struct18 + 5) = 48;
            *(ref struct18 + 6) = 102;
            *(ref struct18 + 7) = 115;
            *(ref struct18 + 8) = 147;
            *(ref struct18 + 9) = 121;
            *(ref struct18 + 10) = 237;
            *(ref struct18 + 11) = 217;
            *(ref struct18 + 12) = 109;
            *(ref struct18 + 13) = 141;
            *(ref struct18 + 14) = 64;
            *(ref struct18 + 15) = 46;
            Struct28 struct19 = 130;
            *(ref struct19 + 1) = 169;
            *(ref struct19 + 2) = 87;
            *(ref struct19 + 3) = 96;
            *(ref struct19 + 4) = 56;
            *(ref struct19 + 5) = 254;
            *(ref struct19 + 6) = 223;
            *(ref struct19 + 7) = 204;
            *(ref struct19 + 8) = 149;
            *(ref struct19 + 9) = 49;
            *(ref struct19 + 10) = 16;
            *(ref struct19 + 11) = 145;
            *(ref struct19 + 12) = 156;
            *(ref struct19 + 13) = 56;
            *(ref struct19 + 14) = 197;
            *(ref struct19 + 15) = 99;
            Struct28 struct20 = 234;
            *(ref struct20 + 1) = 75;
            *(ref struct20 + 2) = 126;
            *(ref struct20 + 3) = 134;
            *(ref struct20 + 4) = 13;
            *(ref struct20 + 5) = 199;
            *(ref struct20 + 6) = 205;
            *(ref struct20 + 7) = 69;
            *(ref struct20 + 8) = 98;
            *(ref struct20 + 9) = 27;
            *(ref struct20 + 10) = 97;
            *(ref struct20 + 11) = 234;
            *(ref struct20 + 12) = 28;
            *(ref struct20 + 13) = 138;
            *(ref struct20 + 14) = 129;
            *(ref struct20 + 15) = 3;
            Struct28 struct21 = 36;
            *(ref struct21 + 1) = 129;
            *(ref struct21 + 2) = 232;
            *(ref struct21 + 3) = 172;
            *(ref struct21 + 4) = 230;
            *(ref struct21 + 5) = 99;
            *(ref struct21 + 6) = 190;
            *(ref struct21 + 7) = 40;
            *(ref struct21 + 8) = 100;
            *(ref struct21 + 9) = 118;
            *(ref struct21 + 10) = 254;
            *(ref struct21 + 11) = 233;
            *(ref struct21 + 12) = 226;
            *(ref struct21 + 13) = 5;
            *(ref struct21 + 14) = 144;
            *(ref struct21 + 15) = 7;
            Struct28 struct22 = 64;
            *(ref struct22 + 1) = 116;
            *(ref struct22 + 2) = 220;
            *(ref struct22 + 3) = 208;
            *(ref struct22 + 4) = 84;
            *(ref struct22 + 5) = 22;
            *(ref struct22 + 6) = 95;
            *(ref struct22 + 7) = 210;
            *(ref struct22 + 8) = 63;
            *(ref struct22 + 9) = 201;
            *(ref struct22 + 10) = 208;
            *(ref struct22 + 11) = 33;
            *(ref struct22 + 12) = 129;
            *(ref struct22 + 13) = 190;
            *(ref struct22 + 14) = 153;
            *(ref struct22 + 15) = 53;
            Struct28 struct23 = 12;
            *(ref struct23 + 1) = 37;
            *(ref struct23 + 2) = 172;
            *(ref struct23 + 3) = 125;
            *(ref struct23 + 4) = 201;
            *(ref struct23 + 5) = 43;
            *(ref struct23 + 6) = 141;
            *(ref struct23 + 7) = 206;
            *(ref struct23 + 8) = 3;
            *(ref struct23 + 9) = 123;
            *(ref struct23 + 10) = 180;
            *(ref struct23 + 11) = 186;
            *(ref struct23 + 12) = 87;
            *(ref struct23 + 13) = 158;
            *(ref struct23 + 14) = 141;
            *(ref struct23 + 15) = 62;
            Struct28 struct24 = 239;
            *(ref struct24 + 1) = 38;
            *(ref struct24 + 2) = 68;
            *(ref struct24 + 3) = 173;
            *(ref struct24 + 4) = 46;
            *(ref struct24 + 5) = 160;
            *(ref struct24 + 6) = 197;
            *(ref struct24 + 7) = 217;
            *(ref struct24 + 8) = 54;
            *(ref struct24 + 9) = 174;
            *(ref struct24 + 10) = 13;
            *(ref struct24 + 11) = 174;
            *(ref struct24 + 12) = 201;
            *(ref struct24 + 13) = 203;
            *(ref struct24 + 14) = 23;
            *(ref struct24 + 15) = 143;
            Struct28 struct25 = 229;
            *(ref struct25 + 1) = 237;
            *(ref struct25 + 2) = 58;
            *(ref struct25 + 3) = 120;
            *(ref struct25 + 4) = 25;
            *(ref struct25 + 5) = 100;
            *(ref struct25 + 6) = 69;
            *(ref struct25 + 7) = 147;
            *(ref struct25 + 8) = 144;
            *(ref struct25 + 9) = 83;
            *(ref struct25 + 10) = 138;
            *(ref struct25 + 11) = 18;
            *(ref struct25 + 12) = 101;
            *(ref struct25 + 13) = 207;
            *(ref struct25 + 14) = 238;
            *(ref struct25 + 15) = 11;
            Struct28 struct26 = 197;
            *(ref struct26 + 1) = 202;
            *(ref struct26 + 2) = 102;
            *(ref struct26 + 3) = 58;
            *(ref struct26 + 4) = 174;
            *(ref struct26 + 5) = 1;
            *(ref struct26 + 6) = 96;
            *(ref struct26 + 7) = 167;
            *(ref struct26 + 8) = 57;
            *(ref struct26 + 9) = 182;
            *(ref struct26 + 10) = 239;
            *(ref struct26 + 11) = 239;
            *(ref struct26 + 12) = 27;
            *(ref struct26 + 13) = 168;
            *(ref struct26 + 14) = 143;
            *(ref struct26 + 15) = 202;
            Struct28 struct27 = 84;
            *(ref struct27 + 1) = 36;
            *(ref struct27 + 2) = 74;
            *(ref struct27 + 3) = 35;
            *(ref struct27 + 4) = 212;
            *(ref struct27 + 5) = 213;
            *(ref struct27 + 6) = 145;
            *(ref struct27 + 7) = 69;
            *(ref struct27 + 8) = 222;
            *(ref struct27 + 9) = 79;
            *(ref struct27 + 10) = 103;
            *(ref struct27 + 11) = 68;
            *(ref struct27 + 12) = 43;
            *(ref struct27 + 13) = 227;
            *(ref struct27 + 14) = 5;
            *(ref struct27 + 15) = 141;
            Struct28 struct28 = 86;
            *(ref struct28 + 1) = 44;
            *(ref struct28 + 2) = 199;
            *(ref struct28 + 3) = 238;
            *(ref struct28 + 4) = 98;
            *(ref struct28 + 5) = 227;
            *(ref struct28 + 6) = 25;
            *(ref struct28 + 7) = 133;
            *(ref struct28 + 8) = 98;
            *(ref struct28 + 9) = 179;
            *(ref struct28 + 10) = 71;
            *(ref struct28 + 11) = 81;
            *(ref struct28 + 12) = 47;
            *(ref struct28 + 13) = 101;
            *(ref struct28 + 14) = 242;
            *(ref struct28 + 15) = 39;
            Struct28 struct29 = 123;
            *(ref struct29 + 1) = 0;
            *(ref struct29 + 2) = 74;
            *(ref struct29 + 3) = 89;
            *(ref struct29 + 4) = 0;
            *(ref struct29 + 5) = 11;
            *(ref struct29 + 6) = 221;
            *(ref struct29 + 7) = 131;
            *(ref struct29 + 8) = 180;
            *(ref struct29 + 9) = 196;
            *(ref struct29 + 10) = 36;
            *(ref struct29 + 11) = 121;
            *(ref struct29 + 12) = 111;
            *(ref struct29 + 13) = 65;
            *(ref struct29 + 14) = 168;
            *(ref struct29 + 15) = 106;
            Struct28 struct30 = 158;
            *(ref struct30 + 1) = 124;
            *(ref struct30 + 2) = 239;
            *(ref struct30 + 3) = 181;
            *(ref struct30 + 4) = 247;
            *(ref struct30 + 5) = 242;
            *(ref struct30 + 6) = 162;
            *(ref struct30 + 7) = 36;
            *(ref struct30 + 8) = 240;
            *(ref struct30 + 9) = 220;
            *(ref struct30 + 10) = 10;
            *(ref struct30 + 11) = 40;
            *(ref struct30 + 12) = 57;
            *(ref struct30 + 13) = 85;
            *(ref struct30 + 14) = 231;
            *(ref struct30 + 15) = 228;
            Struct28 struct31 = 72;
            *(ref struct31 + 1) = 86;
            *(ref struct31 + 2) = 6;
            *(ref struct31 + 3) = 205;
            *(ref struct31 + 4) = 148;
            *(ref struct31 + 5) = 92;
            *(ref struct31 + 6) = 126;
            *(ref struct31 + 7) = 53;
            *(ref struct31 + 8) = 228;
            *(ref struct31 + 9) = 245;
            *(ref struct31 + 10) = 122;
            *(ref struct31 + 11) = 232;
            *(ref struct31 + 12) = 228;
            *(ref struct31 + 13) = 195;
            *(ref struct31 + 14) = 175;
            *(ref struct31 + 15) = 16;
            Struct28 struct32 = 24;
            *(ref struct32 + 1) = 75;
            *(ref struct32 + 2) = 102;
            *(ref struct32 + 3) = 215;
            *(ref struct32 + 4) = 233;
            *(ref struct32 + 5) = 244;
            *(ref struct32 + 6) = 199;
            *(ref struct32 + 7) = 163;
            *(ref struct32 + 8) = 59;
            *(ref struct32 + 9) = 48;
            *(ref struct32 + 10) = 40;
            *(ref struct32 + 11) = 178;
            *(ref struct32 + 12) = 71;
            *(ref struct32 + 13) = 115;
            *(ref struct32 + 14) = 214;
            *(ref struct32 + 15) = 54;
            Struct28 struct33 = 202;
            *(ref struct33 + 1) = 158;
            *(ref struct33 + 2) = 240;
            *(ref struct33 + 3) = 173;
            *(ref struct33 + 4) = 239;
            *(ref struct33 + 5) = 113;
            *(ref struct33 + 6) = 190;
            *(ref struct33 + 7) = 172;
            *(ref struct33 + 8) = 3;
            *(ref struct33 + 9) = 134;
            *(ref struct33 + 10) = 232;
            *(ref struct33 + 11) = 1;
            *(ref struct33 + 12) = 182;
            *(ref struct33 + 13) = 96;
            *(ref struct33 + 14) = 65;
            *(ref struct33 + 15) = 156;
            Struct28 struct34 = 73;
            *(ref struct34 + 1) = 183;
            *(ref struct34 + 2) = 194;
            *(ref struct34 + 3) = 34;
            *(ref struct34 + 4) = 8;
            *(ref struct34 + 5) = 131;
            *(ref struct34 + 6) = 14;
            *(ref struct34 + 7) = 85;
            *(ref struct34 + 8) = 143;
            *(ref struct34 + 9) = 114;
            *(ref struct34 + 10) = 15;
            *(ref struct34 + 11) = 209;
            *(ref struct34 + 12) = 70;
            *(ref struct34 + 13) = 187;
            *(ref struct34 + 14) = 54;
            *(ref struct34 + 15) = 147;
            Struct28 struct35 = 238;
            *(ref struct35 + 1) = 246;
            *(ref struct35 + 2) = 212;
            *(ref struct35 + 3) = 253;
            *(ref struct35 + 4) = 87;
            *(ref struct35 + 5) = 19;
            *(ref struct35 + 6) = 172;
            *(ref struct35 + 7) = 212;
            *(ref struct35 + 8) = 45;
            *(ref struct35 + 9) = 180;
            *(ref struct35 + 10) = 159;
            *(ref struct35 + 11) = 185;
            *(ref struct35 + 12) = 1;
            *(ref struct35 + 13) = 246;
            *(ref struct35 + 14) = 5;
            *(ref struct35 + 15) = 253;
            Struct43 struct36;

            _Module.memcpy((void*)(&struct36), (void*)pByte_0, 256U);
            *(*(ref _Module.struct121_0 + 7172) + 258048) = byte.MaxValue;
            *(*(ref _Module.struct121_0 + 7172) + 258049) = byte.MaxValue;
            *(*(ref _Module.struct121_0 + 7172) + 258050) = byte.MaxValue;
            *(*(ref _Module.struct121_0 + 7172) + 258051) = byte.MaxValue;
            *(*(ref _Module.struct121_0 + 7172) + 258052) = byte.MaxValue;
            *(*(ref _Module.struct121_0 + 7172) + 258053) = byte.MaxValue;
            if (_Module.memcmp((void*)(&struct36), (void*)(&@struct), 16U) == null)
            {
                *(*(ref _Module.struct121_0 + 7172) + 258048) = byte.MaxValue;
                if (_Module.memcmp(ref struct36 + 16, (void*)(&struct2), 16U) != null)
                {
                    this.textBox6.AppendText("Unknown Hash 1" + "\r\n");
                    return 0;
                }
                *(*(ref _Module.struct121_0 + 7172) + 258049) = byte.MaxValue;
                if (_Module.memcmp(ref struct36 + 32, (void*)(&struct3), 16U) != null)
                {
                    this.textBox6.AppendText("Unknown Hash 2" + "\r\n");
                    return 0;
                }
                *(*(ref _Module.struct121_0 + 7172) + 258050) = byte.MaxValue;
                if (_Module.memcmp(ref struct36 + 48, (void*)(&struct4), 16U) != null)
                {
                    this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
                    return 0;
                }
                *(*(ref _Module.struct121_0 + 7172) + 258051) = byte.MaxValue;
            }
            else if (_Module.memcmp((void*)(&struct36), (void*)(&struct5), 16U) == null)
            {
                *(*(ref _Module.struct121_0 + 7172) + 258048) = byte.MaxValue;
                *(*(ref _Module.struct121_0 + 7172) + 126976) = 96;
                if (_Module.memcmp(ref struct36 + 16, (void*)(&struct6), 16U) != null)
                {
                    this.textBox6.AppendText("Unknown Hash 1" + "\r\n");
                    return 0;
                }
                *(*(ref _Module.struct121_0 + 7172) + 258049) = byte.MaxValue;
                if (_Module.memcmp(ref struct36 + 32, (void*)(&struct7), 16U) != null)
                {
                    this.textBox6.AppendText("Unknown Hash 2" + "\r\n");
                    return 0;
                }
                *(*(ref _Module.struct121_0 + 7172) + 258050) = byte.MaxValue;
                if (_Module.memcmp(ref struct36 + 48, (void*)(&struct8), 16U) != null)
                {
                    this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
                    return 0;
                }
                *(*(ref _Module.struct121_0 + 7172) + 258051) = byte.MaxValue;
            }
            else if (_Module.memcmp((void*)(&struct36), (void*)(&struct13), 16U) == null)
            {
                *(*(ref _Module.struct121_0 + 7172) + 258048) = 187;
                if (_Module.memcmp(ref struct36 + 16, (void*)(&struct14), 16U) != null)
                {
                    this.textBox6.AppendText("Unknown Hash 1" + "\r\n");
                    return 0;
                }
                *(*(ref _Module.struct121_0 + 7172) + 258049) = 1;
                if (_Module.memcmp(ref struct36 + 32, (void*)(&struct7), 16U) == null)
                {
                    *(*(ref _Module.struct121_0 + 7172) + 258050) = byte.MaxValue;
                    if (_Module.memcmp(ref struct36 + 48, (void*)(&struct8), 16U) != null)
                    {
                        this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
                        return 0;
                    }
                    *(*(ref _Module.struct121_0 + 7172) + 258051) = byte.MaxValue;
                }
                else
                {
                    if (_Module.memcmp(ref struct36 + 32, (void*)(&struct15), 16U) != null)
                    {
                        this.textBox6.AppendText("Unknown Hash 2" + "\r\n");
                        return 0;
                    }
                    *(*(ref _Module.struct121_0 + 7172) + 258050) = 187;
                    if (_Module.memcmp(ref struct36 + 48, (void*)(&struct8), 16U) == null)
                    {
                        *(*(ref _Module.struct121_0 + 7172) + 258051) = byte.MaxValue;
                    }
                    else if (_Module.memcmp(ref struct36 + 48, (void*)(&struct16), 16U) == null)
                    {
                        *(*(ref _Module.struct121_0 + 7172) + 258051) = 127;
                    }
                    else
                    {
                        if (_Module.memcmp(ref struct36 + 48, (void*)(&struct17), 16U) != null)
                        {
                            this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
                            return 0;
                        }
                        *(*(ref _Module.struct121_0 + 7172) + 258051) = 63;
                    }
                }
            }
            else if (_Module.memcmp((void*)(&struct36), (void*)(&struct22), 16U) == null)
            {
                *(*(ref _Module.struct121_0 + 7172) + 258048) = 187;
                if (_Module.memcmp(ref struct36 + 16, (void*)(&struct23), 16U) != null)
                {
                    this.textBox6.AppendText("Unknown Hash 1" + "\r\n");
                    return 0;
                }
                *(*(ref _Module.struct121_0 + 7172) + 258049) = 1;
                if (_Module.memcmp(ref struct36 + 32, (void*)(&struct24), 16U) == null)
                {
                    *(*(ref _Module.struct121_0 + 7172) + 258050) = byte.MaxValue;
                    if (_Module.memcmp(ref struct36 + 48, (void*)(&struct26), 16U) != null)
                    {
                        this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
                        return 0;
                    }
                    *(*(ref _Module.struct121_0 + 7172) + 258051) = byte.MaxValue;
                }
                else
                {
                    if (_Module.memcmp(ref struct36 + 32, (void*)(&struct25), 16U) != null)
                    {
                        this.textBox6.AppendText("Unknown Hash 2" + "\r\n");
                        return 0;
                    }
                    *(*(ref _Module.struct121_0 + 7172) + 258050) = 187;
                    if (_Module.memcmp(ref struct36 + 48, (void*)(&struct26), 16U) == null)
                    {
                        *(*(ref _Module.struct121_0 + 7172) + 258051) = byte.MaxValue;
                    }
                    else if (_Module.memcmp(ref struct36 + 48, (void*)(&struct27), 16U) == null)
                    {
                        *(*(ref _Module.struct121_0 + 7172) + 258051) = 63;
                    }
                    else
                    {
                        if (_Module.memcmp(ref struct36 + 48, (void*)(&struct28), 16U) != null)
                        {
                            this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
                            return 0;
                        }
                        *(*(ref _Module.struct121_0 + 7172) + 258051) = 127;
                    }
                }
            }
            else if (_Module.memcmp((void*)(&struct36), (void*)(&struct18), 16U) == null)
            {
                *(*(ref _Module.struct121_0 + 7172) + 258048) = byte.MaxValue;
                if (_Module.memcmp(ref struct36 + 16, (void*)(&struct19), 16U) != null)
                {
                    this.textBox6.AppendText("Unknown Hash 1" + "\r\n");
                    return 0;
                }
                *(*(ref _Module.struct121_0 + 7172) + 258049) = byte.MaxValue;
                if (_Module.memcmp(ref struct36 + 32, (void*)(&struct20), 16U) != null)
                {
                    this.textBox6.AppendText("Unknown Hash 2" + "\r\n");
                    return 0;
                }
                *(*(ref _Module.struct121_0 + 7172) + 258050) = byte.MaxValue;
                if (_Module.memcmp(ref struct36 + 48, (void*)(&struct21), 16U) != null)
                {
                    this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
                    return 0;
                }
                *(*(ref _Module.struct121_0 + 7172) + 258051) = byte.MaxValue;
            }
            else
            {
                if (_Module.memcmp((void*)(&struct36), (void*)(&struct29), 16U) != null)
                {
                    this.textBox6.AppendText("Unknown Hash 0" + "\r\n");
                    return 0;
                }
                *(*(ref _Module.struct121_0 + 7172) + 258048) = 187;
                if (_Module.memcmp(ref struct36 + 16, (void*)(&struct30), 16U) != null)
                {
                    this.textBox6.AppendText("Unknown Hash 1" + "\r\n");
                    return 0;
                }
                *(*(ref _Module.struct121_0 + 7172) + 258049) = 1;
                if (_Module.memcmp(ref struct36 + 32, (void*)(&struct31), 16U) == null)
                {
                    *(*(ref _Module.struct121_0 + 7172) + 258050) = byte.MaxValue;
                    if (_Module.memcmp(ref struct36 + 48, (void*)(&struct33), 16U) != null)
                    {
                        this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
                        return 0;
                    }
                    *(*(ref _Module.struct121_0 + 7172) + 258051) = byte.MaxValue;
                }
                else
                {
                    if (_Module.memcmp(ref struct36 + 32, (void*)(&struct32), 16U) != null)
                    {
                        this.textBox6.AppendText("Unknown Hash 2" + "\r\n");
                        return 0;
                    }
                    *(*(ref _Module.struct121_0 + 7172) + 258050) = 187;
                    if (_Module.memcmp(ref struct36 + 48, (void*)(&struct33), 16U) == null)
                    {
                        *(*(ref _Module.struct121_0 + 7172) + 258051) = byte.MaxValue;
                    }
                    else if (_Module.memcmp(ref struct36 + 48, (void*)(&struct34), 16U) == null)
                    {
                        *(*(ref _Module.struct121_0 + 7172) + 258051) = 63;
                    }
                    else
                    {
                        if (_Module.memcmp(ref struct36 + 48, (void*)(&struct35), 16U) != null)
                        {
                            this.textBox6.AppendText("Unknown Hash 3" + "\r\n");
                            return 0;
                        }
                        *(*(ref _Module.struct121_0 + 7172) + 258051) = 127;
                    }
                }
            }
            this.textBox6.AppendText("\r\n");
            return 1;
        }

        // Token: 0x0600024A RID: 586 RVA: 0x00124858 File Offset: 0x00124858
        private void button38_Click(object sender, EventArgs e)
        {
            this.method_18();
            this.method_95();
            this.method_19();
        }

        // Token: 0x0600024B RID: 587 RVA: 0x00124878 File Offset: 0x00124878
        private unsafe void method_95()
        {
            this.label88.Text = "";
            this.label87.Text = "";
            Application.DoEvents();
            this.method_172();
            if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
            {
                this.textBox6.AppendText("\r\n" + "No Drive Detected! DVDkey files extraction aborted! " + "\r\n\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("        No Drive Detected!" + "\n" + "PhatKey extraction aborted! ", "PhatKey", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
            {
                this.textBox6.AppendText("\r\n" + "Drive in Vendor Mode! DVDkey files extraction aborted! " + "\r\n\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("        Drive in Vendor Mode!" + "\n" + "PhatKey extraction aborted! ", "PhatKey", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else if (this.method_96() == 0U)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("PhatKey failed!", "PhatKey", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.textBox6.AppendText("\r\n" + "PhatKey extraction failed!" + "\r\n\r\n");
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else
            {
                if (this.checkBox8.CheckState == CheckState.Unchecked)
                {
                    this.method_116();
                }
                if (this.method_63() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "PhatKey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else if (this.method_65() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "PhatKey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else if (this.method_66() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "PhatKey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else if (this.method_67() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "PhatKey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else
                {
                    this.method_117();
                    this.Cursor = Cursors.Arrow;
                    if (this.bool_2 && this.method_107(*(ref _Module.struct123_0 + 4) + 280) == 1)
                    {
                        this.tabControl5.SelectedTab = this.Benq;
                        this.pictureBox5.Visible = true;
                        this.pictureBox7.Visible = false;
                        this.pictureBox2.Visible = true;
                        this.pictureBox6.Visible = false;
                        this.label133.Text = "Verified";
                        this.label131.Text = "Verified";
                        this.textBox6.AppendText("Target Key verified, thanks C4eva !" + "\r\n" + "Proceeding with LO-Erase" + "\r\n");
                        this.method_14();
                        this.method_207();
                        this.method_15();
                    }
                }
            }
        }

        // Token: 0x0600024C RID: 588 RVA: 0x00124CB4 File Offset: 0x00124CB4
        private unsafe uint method_96()
        {
            Struct28 @struct = 0;
            initblk(ref @struct + 1, 0, 15);
            Struct43 struct2 = 0;
            initblk(ref struct2 + 1, 0, 255);
            Struct55 struct3 = 80;
            *(ref struct3 + 1) = 104;
            *(ref struct3 + 2) = 97;
            *(ref struct3 + 3) = 116;
            *(ref struct3 + 4) = 75;
            *(ref struct3 + 5) = 101;
            *(ref struct3 + 6) = 121;
            *(ref struct3 + 7) = 32;
            *(ref struct3 + 8) = 69;
            *(ref struct3 + 9) = 120;
            *(ref struct3 + 10) = 116;
            *(ref struct3 + 11) = 114;
            *(ref struct3 + 12) = 97;
            *(ref struct3 + 13) = 99;
            *(ref struct3 + 14) = 116;
            *(ref struct3 + 15) = 32;
            *(ref struct3 + 16) = 0;
            *(ref struct3 + 17) = 0;
            *(ref struct3 + 18) = 0;
            *(ref struct3 + 19) = 0;
            *(ref struct3 + 20) = 0;
            *(ref struct3 + 21) = 0;
            *(ref struct3 + 22) = 0;
            *(ref struct3 + 23) = 0;
            *(ref struct3 + 24) = 0;
            *(ref struct3 + 25) = 0;
            *(ref struct3 + 26) = 0;
            *(ref struct3 + 27) = 0;
            *(ref struct3 + 28) = 0;
            *(ref struct3 + 29) = 0;
            *(ref struct3 + 30) = 0;
            *(ref struct3 + 31) = 0;
            uint result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0U;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
                ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);

                _Module.smethod_2(num + 6, byte_);

                _Module.Sleep(250);
                if (this.method_203() == 0)
                {
                    result = 0U;
                }
                else
                {
                    if (num == 0)
                    {
                        this.method_268(82, (byte*)(&struct2));
                    }
                    else
                    {
                        for (int i = 0; i < 256; i++)
                        {

                            _Module.smethod_2(num + 6, byte_);

                            _Module.smethod_2(num + 2, 0);

                            _Module.smethod_2(num + 3, 42);

                            _Module.smethod_2(num + 4, (byte)i);

                            _Module.smethod_2(num + 5, 0);

                            _Module.Sleep(1);

                            _Module.smethod_2(num + 7, 0);

                            _Module.Sleep(2);

                            _Module.smethod_2(num + 6, byte_);
                            *(ref struct2 + i) = _Module.smethod_1(num + 3);

                            _Module.Sleep(1);
                        }
                    }

                    _Module.memcpy((void*)(&@struct), ref struct2 + 97, 16U);
                    if (this.method_130() == 1)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Extract complete !\r\n\r\n" + "CK3i has powered off your drive." + "Before you continue, remove Probe 3... then press OK" + "\r\n" + "... CK3i will power on your the drive.  ", "PhatKey", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        this.method_129();
                        for (int i = 0; i < 8; i++)
                        {

                            _Module.Sleep(250);
                            this.textBox6.AppendText(".");
                        }
                    }
                    else
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Extract complete !\r\n\r\n" + "To continue, you must:\r\n" + "Ensure probe is removed.. Power Off Drive... Wait 5 seconds..." + "\r\n" + "Power On...  then press OK", "PhatKey", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    }
                    if (this.method_107((byte*)(&@struct)) != 1)
                    {

                        _Module.memcpy((void*)(&@struct), ref struct2 + 98, 16U);
                        if (this.method_107((byte*)(&@struct)) != 1)
                        {
                            this.textBox6.AppendText("\r\n" + "Extracted drive key failed Verification !" + "\r\n\r\n");
                            this.Cursor = Cursors.Arrow;
                            this.label87.Text = "";
                            this.label88.Text = "bad";
                            return 0U;
                        }
                    }
                    this.textBox6.AppendText("\r\n" + "Extracted drive key passed Verification !" + "\r\n\r\n");
                    this.method_6((byte*)(&@struct), 16U, 0U);
                    this.textBox6.AppendText("key returned: " + this.string_0 + "\r\n");
                    this.label87.Text = this.string_0;
                    this.label88.Text = "Good";

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 280, (void*)(&@struct), 16U);

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 2348, (void*)(&struct3), 32U);
                    Application.DoEvents();
                    result = 1U;
                }
            }
            return result;
        }

        // Token: 0x0600024D RID: 589 RVA: 0x001250C8 File Offset: 0x001250C8
        private void button39_Click(object sender, EventArgs e)
        {
            this.method_18();
            this.method_97();
            this.method_19();
        }

        // Token: 0x0600024E RID: 590 RVA: 0x001250E8 File Offset: 0x001250E8
        private unsafe void method_97()
        {
            this.label88.Text = "";
            this.label87.Text = "";
            Application.DoEvents();
            this.method_172();
            if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
            {
                this.textBox6.AppendText("\r\n" + "No Drive Detected! DVDkey files extraction aborted! " + "\r\n\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("        No Drive Detected!" + "\n" + "SlimKey extraction aborted! ", "SlimKey", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
            {
                this.textBox6.AppendText("\r\n" + "Drive in Vendor Mode! DVDkey files extraction aborted! " + "\r\n\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("        Drive in Vendor Mode!" + "\n" + "SlimKey extraction aborted! ", "SlimKey", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else if (this.method_70() == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("SlimKey failed!", "SlimKey", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.textBox6.AppendText("\r\n" + "SlimKey extraction failed!" + "\r\n\r\n");
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else
            {
                if (this.checkBox8.CheckState == CheckState.Unchecked)
                {
                    this.method_116();
                }
                if (this.method_64() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "SlimKey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else if (this.method_66() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "SlimKey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else
                {
                    this.method_68();
                    this.textBox6.AppendText(string.Concat("Hashing Drive: "));
                    Struct43 @struct;
                    for (int i = 0; i < 16; i++)
                    {
                        if (this.method_93(35, 16, (byte)i, ref @struct + i * 16) != 1)
                        {
                            this.textBox6.AppendText("x");
                            break;
                        }
                        this.textBox6.AppendText(".");
                    }
                    this.method_94((byte*)(&@struct));
                    if (*(*(ref _Module.struct121_0 + 7172) + 126976) == 96 && *(ref _Module.struct121_0 + 6815) == 54)
                    {
                        *(*(ref _Module.struct121_0 + 7172) + 126976) = 125;
                    }
                    this.method_118();
                    this.Cursor = Cursors.Arrow;
                }
            }
        }

        // Token: 0x0600024F RID: 591 RVA: 0x0012547C File Offset: 0x0012547C
        private void menuItem_14_Click(object sender, EventArgs e)
        {
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            registryKey.SetValue("Delay32", "0");
            registryKey.Close();
            this.menuItem_14.Enabled = false;
            this.menuItem_15.Enabled = true;
            this.menuItem_16.Enabled = true;
            this.menuItem_17.Enabled = true;
            this.menuItem_18.Enabled = true;
        }

        // Token: 0x06000250 RID: 592 RVA: 0x001254F0 File Offset: 0x001254F0
        private void menuItem_15_Click(object sender, EventArgs e)
        {
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            registryKey.SetValue("Delay32", "5");
            registryKey.Close();
            this.menuItem_14.Enabled = true;
            this.menuItem_15.Enabled = false;
            this.menuItem_16.Enabled = true;
            this.menuItem_17.Enabled = true;
            this.menuItem_18.Enabled = true;
        }

        // Token: 0x06000251 RID: 593 RVA: 0x00125564 File Offset: 0x00125564
        private void menuItem_16_Click(object sender, EventArgs e)
        {
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            registryKey.SetValue("Delay32", "10");
            registryKey.Close();
            this.menuItem_14.Enabled = true;
            this.menuItem_15.Enabled = true;
            this.menuItem_16.Enabled = false;
            this.menuItem_17.Enabled = true;
            this.menuItem_18.Enabled = true;
        }

        // Token: 0x06000252 RID: 594 RVA: 0x001255D8 File Offset: 0x001255D8
        private void menuItem_17_Click(object sender, EventArgs e)
        {
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            registryKey.SetValue("Delay32", "15");
            registryKey.Close();
            this.menuItem_14.Enabled = true;
            this.menuItem_15.Enabled = true;
            this.menuItem_16.Enabled = true;
            this.menuItem_17.Enabled = false;
            this.menuItem_18.Enabled = true;
        }

        // Token: 0x06000253 RID: 595 RVA: 0x0012564C File Offset: 0x0012564C
        private void menuItem_18_Click(object sender, EventArgs e)
        {
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            registryKey.SetValue("Delay32", "20");
            registryKey.Close();
            this.menuItem_14.Enabled = true;
            this.menuItem_15.Enabled = true;
            this.menuItem_16.Enabled = true;
            this.menuItem_17.Enabled = true;
            this.menuItem_18.Enabled = false;
        }

        // Token: 0x06000254 RID: 596 RVA: 0x001256C0 File Offset: 0x001256C0
        private void button28_Click(object sender, EventArgs e)
        {
            this.method_18();
            this.method_98();
            this.method_19();
        }

        // Token: 0x06000255 RID: 597 RVA: 0x001256E0 File Offset: 0x001256E0
        private unsafe void method_98()
        {
            this.label88.Text = "";
            this.label87.Text = "";
            Application.DoEvents();
            this.method_172();
            if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
            {
                this.textBox6.AppendText("\r\n" + "No Drive Detected! DVDkey files extraction aborted! " + "\r\n\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("        No Drive Detected!" + "\n" + "DVDkey files extraction aborted! ", "Dummy from iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
            {
                this.textBox6.AppendText("\r\n" + "Drive in Vendor Mode! DVDkey files extraction aborted! " + "\r\n\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("        Drive in Vendor Mode!" + "\n" + "DVDkey files extraction aborted! ", "Dummy from iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else if (this.method_99() == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("iXtreme DVDkey extraction failed!" + "\n" + "Power drive with tray half open. ", "Dummy from iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.textBox6.AppendText("\r\n" + "iXtreme DVDkey extraction failed!" + "\r\n\r\n");
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else
            {
                if (this.checkBox8.CheckState == CheckState.Unchecked)
                {
                    this.method_116();
                }
                if (this.method_63() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else if (this.method_65() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else if (this.method_66() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else if (this.method_67() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else
                {
                    this.method_117();
                    if (this.bool_2 && this.method_107(*(ref _Module.struct123_0 + 4) + 280) == 1)
                    {
                        this.tabControl5.SelectedTab = this.Benq;
                        this.pictureBox5.Visible = true;
                        this.pictureBox7.Visible = false;
                        this.pictureBox2.Visible = true;
                        this.pictureBox6.Visible = false;
                        this.label133.Text = "Verified";
                        this.label131.Text = "Verified";
                        this.textBox6.AppendText("Target Key verified, thanks C4eva !" + "\r\n" + "Proceeding with LO-Erase" + "\r\n");
                        this.method_14();
                        this.method_207();
                        this.method_15();
                    }
                }
            }
        }

        // Token: 0x06000256 RID: 598 RVA: 0x00125B20 File Offset: 0x00125B20
        private unsafe int method_99()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72U + 4));
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                int selectedIndex2 = this.comboBox10.SelectedIndex;
                if (this.method_128() == 1)
                {

                    _Module.Sleep(500);
                }
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                this.textBox6.AppendText("Sending iXtreme DVDkey request to port " + this.label123.Text + "\r\n");
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 18;
                *(ref @struct + 4) = 36;
                *(ref @struct + 9) = 73;
                *(ref @struct + 10) = 88;
                *(ref @struct + 11) = 1;
                Struct34 struct2;
                uint num2;
                if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct2), &num2, 48U, 1, &gstruct) != null)
                {
                    result = 0;
                }
                else if (struct2 == 5 && *(ref struct2 + 1) == 128 && *(ref struct2 + 2) == 0 && *(ref struct2 + 3) == 50)
                {
                    result = 0;
                }
                else
                {

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 280, (void*)(&struct2), 16U);

                    _Module.memset(*(ref _Module.struct123_0 + 8) + 2348, 0, 32U);

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 2348, ref struct2 + 16, 18U);
                    this.method_6((byte*)(&struct2), 16U, 0U);
                    this.label88.Text = "Good";
                    this.label87.Text = this.string_0;
                    this.textBox6.AppendText("\r\n" + "Extracted drive key " + this.string_0 + "\r\n\r\n");
                    this.method_9(ref struct2 + 16, 18U);
                    this.textBox6.AppendText(this.string_0 + "\r\n\r\n");
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x06000257 RID: 599 RVA: 0x00125D18 File Offset: 0x00125D18
        private void method_100()
        {
            this.label88.Text = "";
            this.label87.Text = "";
            Application.DoEvents();
            this.method_172();
            if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
            {
                this.textBox6.AppendText("\r\n" + "No Drive Detected! DVDkey files extraction aborted! " + "\r\n\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("        No Drive Detected!" + "\n" + "DVDkey files extraction aborted! ", "Dummy from iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
            {
                this.textBox6.AppendText("\r\n" + "Drive in Vendor Mode! DVDkey files extraction aborted! " + "\r\n\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("        Drive in Vendor Mode!" + "\n" + "DVDkey files extraction aborted! ", "Dummy from iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else if (this.method_63() == 0)
            {
                this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else
            {
                this.method_65();
                if (this.method_66() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "DVDkey files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else
                {
                    this.method_67();
                    this.method_117();
                }
            }
        }

        // Token: 0x06000258 RID: 600 RVA: 0x00125F5C File Offset: 0x00125F5C
        private void button1_Click(object sender, EventArgs e)
        {
            this.method_18();
            this.method_101();
            this.method_19();
        }

        // Token: 0x06000259 RID: 601 RVA: 0x00125F7C File Offset: 0x00125F7C
        private void button4_Click(object sender, EventArgs e)
        {
            this.method_18();
            this.method_119();
            this.method_19();
        }

        // Token: 0x0600025A RID: 602 RVA: 0x003C24C0 File Offset: 0x0030A4C0
        private unsafe void method_101()
        {
            this.label88.Text = "";
            this.label87.Text = "";
            Application.DoEvents();
            this.method_172();
            if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
            {
                this.textBox6.AppendText("\r\n" + "No Drive Detected! LO83info extraction aborted! " + "\r\n\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("        No Drive Detected!" + "\n" + "LO83info extraction aborted! ", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
            {
                this.textBox6.AppendText("\r\n" + "Drive in Vendor Mode! LO83info extraction aborted! " + "\r\n\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("        Drive in Vendor Mode!" + "\n" + "LO83info extraction aborted! ", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else
            {
                this.method_65();
                if (_Module.memcmp(*(ref _Module.struct123_0 + 8) + 684, (void*)(&_Module.struct29_17), 96U) == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive responds as Lite-On 83 version 2" + "\n\n" + "LO83info is only for Lite-On 83 version 1", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else if (_Module.memcmp(*(ref _Module.struct123_0 + 8) + 684, (void*)(&_Module.struct29_32), 96U) == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("LO83info is only for Lite-On 83 version 1" + "\n\n           " + "Drive is not Lite-On 83", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {
                    RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
                    if (registryKey.GetValue("Nforce590") == null)
                    {
                        if (this.method_103() == 0)
                        {
                            this.textBox6.AppendText("\r\n" + "LO83info extraction Failed! " + "\r\n\r\n");
                            this.label88.Text = " ";
                            this.label87.Text = " ";
                            return;
                        }
                    }
                    else if (this.method_104() == 0)
                    {
                        this.textBox6.AppendText("\r\n" + "LO83info extraction Failed! " + "\r\n\r\n");
                        this.label88.Text = " ";
                        this.label87.Text = " ";
                        return;
                    }
                    registryKey.Close();
                    if (this.method_63() == 0)
                    {
                        this.textBox6.AppendText("\r\n" + "LO83info extraction aborted! " + "\r\n\r\n");
                        this.label88.Text = " ";
                        this.label87.Text = " ";
                    }
                    else if (this.method_65() == 0)
                    {
                        this.textBox6.AppendText("\r\n" + "LO83info extraction aborted! " + "\r\n\r\n");
                        this.label88.Text = " ";
                        this.label87.Text = " ";
                    }
                    else if (_Module.memcmp(*(ref _Module.struct123_0 + 8) + 600, (void*)(&_Module.struct10_23), 6U) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "LO83info extraction Failed! " + "\r\n\r\n");
                    }
                    else if (this.method_66() == 0)
                    {
                        this.textBox6.AppendText("\r\n" + "LO83info extraction Failed! " + "\r\n\r\n");
                        this.label88.Text = " ";
                        this.label87.Text = " ";
                    }
                    else if (this.method_67() == 0)
                    {
                        this.textBox6.AppendText("\r\n" + "LO83info extraction Failed! " + "\r\n\r\n");
                        this.label88.Text = " ";
                        this.label87.Text = " ";
                    }
                    else if (*(*(ref _Module.struct123_0 + 8) + 625) != *(*(ref _Module.struct123_0 + 8) + 2043))
                    {
                        this.textBox6.AppendText("\r\n" + "LO83info extraction Failed! " + "\r\n\r\n");
                    }
                    else if (this.method_105() == 0)
                    {
                        this.textBox6.AppendText("\r\n" + "LO83info extraction Failed! " + "\r\n\r\n");
                    }
                    else
                    {
                        if (this.checkBox8.CheckState == CheckState.Unchecked)
                        {
                            this.method_116();
                        }
                        this.method_117();
                        if (this.bool_2 && this.method_107(*(ref _Module.struct123_0 + 4) + 280) == 1)
                        {
                            this.tabControl5.SelectedTab = this.Benq;
                            this.pictureBox5.Visible = true;
                            this.pictureBox7.Visible = false;
                            this.pictureBox2.Visible = true;
                            this.pictureBox6.Visible = false;
                            this.label133.Text = "Verified";
                            this.label131.Text = "Verified";
                            this.textBox6.AppendText("Target Key verified, thanks C4eva !" + "\r\n" + "Proceeding with LO-Erase" + "\r\n");
                            this.method_14();
                            this.method_207();
                            this.method_15();
                        }
                    }
                }
            }
        }

        // Token: 0x0600025B RID: 603 RVA: 0x00126594 File Offset: 0x00126594
        private void button32_Click(object sender, EventArgs e)
        {
            this.method_18();
            this.method_102();
            this.method_19();
        }

        // Token: 0x0600025C RID: 604 RVA: 0x001265B4 File Offset: 0x001265B4
        private unsafe void method_102()
        {
            this.label88.Text = "";
            this.label87.Text = "";
            Application.DoEvents();
            int num = this.method_173();
            if (num == 2)
            {
                this.textBox6.AppendText("\r\n" + "Lite-On barcode found, key verified, thanks C4eva ! " + "\r\n");
            }
            else
            {
                if (num != 1)
                {
                    return;
                }

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num2 = (int)MessageBox.Show("Lite-On barcode not found in KeyDB !" + "\n" + "Do you wish to try all DB keys for a match." + "\n" + "This could take a while", "Dummy from KeyDB", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                if (num2 == 7)
                {
                    return;
                }
                if (this.method_115() == 0)
                {
                    return;
                }
                this.textBox6.AppendText("\r\n");
            }
            Struct28 @struct;
            for (int i = 0; i < 32; i += 2)
            {
                string s = this.string_14.Substring(i, 2);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(s);
                IntPtr value = intPtr;
                sbyte* pSbyte_ = (sbyte*)((void*)value);
                byte b;
                this.method_10((void*)(&b), pSbyte_, 2);
                *(ref @struct + i / 2) = b;
            }

            _Module.memcpy(*(ref _Module.struct123_0 + 8) + 280, (void*)(&@struct), 16U);
            if (this.method_183() != 0)
            {
                if (this.method_65() == 0)
                {
                    this.textBox6.AppendText("\r\n" + "Dummy from KeyDB files extraction aborted! " + "\r\n\r\n");
                    this.label88.Text = " ";
                    this.label87.Text = " ";
                }
                else
                {
                    if (this.checkBox8.CheckState == CheckState.Unchecked)
                    {
                        this.method_116();
                    }
                    if (this.method_63() == 0)
                    {
                        this.textBox6.AppendText("\r\n" + "Dummy from KeyDB files extraction aborted! " + "\r\n\r\n");
                        this.label88.Text = " ";
                        this.label87.Text = " ";
                    }
                    else if (this.method_66() == 0)
                    {
                        this.textBox6.AppendText("\r\n" + "Dummy from KeyDB files extraction aborted! " + "\r\n\r\n");
                        this.label88.Text = " ";
                        this.label87.Text = " ";
                    }
                    else if (this.method_67() == 0)
                    {
                        this.textBox6.AppendText("\r\n" + "Dummy from KeyDB files extraction aborted! " + "\r\n\r\n");
                        this.label88.Text = " ";
                        this.label87.Text = " ";
                    }
                    else
                    {
                        this.method_117();
                        if (this.bool_2 && this.method_107(*(ref _Module.struct123_0 + 4) + 280) == 1)
                        {
                            this.tabControl5.SelectedTab = this.Benq;
                            this.pictureBox5.Visible = true;
                            this.pictureBox7.Visible = false;
                            this.pictureBox2.Visible = true;
                            this.pictureBox6.Visible = false;
                            this.label133.Text = "Verified";
                            this.label131.Text = "Verified";
                            this.textBox6.AppendText("Target Key verified, thanks C4eva !" + "\r\n" + "Proceeding with LO-Erase" + "\r\n");
                            this.method_14();
                            this.method_207();
                            this.method_15();
                        }
                    }
                }
            }
        }

        // Token: 0x0600025D RID: 605 RVA: 0x003C2AB8 File Offset: 0x0030AAB8
        private unsafe int method_103()
        {
            Struct55 @struct = 76;
            *(ref @struct + 1) = 79;
            *(ref @struct + 2) = 56;
            *(ref @struct + 3) = 51;
            *(ref @struct + 4) = 105;
            *(ref @struct + 5) = 110;
            *(ref @struct + 6) = 102;
            *(ref @struct + 7) = 111;
            *(ref @struct + 8) = 32;
            *(ref @struct + 9) = 69;
            *(ref @struct + 10) = 120;
            *(ref @struct + 11) = 116;
            *(ref @struct + 12) = 114;
            *(ref @struct + 13) = 97;
            *(ref @struct + 14) = 99;
            *(ref @struct + 15) = 116;
            *(ref @struct + 16) = 0;
            *(ref @struct + 17) = 0;
            *(ref @struct + 18) = 0;
            *(ref @struct + 19) = 0;
            *(ref @struct + 20) = 0;
            *(ref @struct + 21) = 0;
            *(ref @struct + 22) = 0;
            *(ref @struct + 23) = 0;
            *(ref @struct + 24) = 0;
            *(ref @struct + 25) = 0;
            *(ref @struct + 26) = 0;
            *(ref @struct + 27) = 0;
            *(ref @struct + 28) = 0;
            *(ref @struct + 29) = 0;
            *(ref @struct + 30) = 0;
            *(ref @struct + 31) = 0;
            Struct52 struct2 = 168;
            *(ref struct2 + 1) = 0;
            *(ref struct2 + 2) = 0;
            *(ref struct2 + 3) = 0;
            *(ref struct2 + 4) = 0;
            *(ref struct2 + 5) = 0;
            *(ref struct2 + 6) = 0;
            *(ref struct2 + 7) = 0;
            *(ref struct2 + 8) = 0;
            *(ref struct2 + 9) = 0;
            *(ref struct2 + 10) = 0;
            *(ref struct2 + 11) = 0;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72U + 4));
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                int selectedIndex2 = this.comboBox10.SelectedIndex;
                Struct91 struct3 = 253;
                *(ref struct3 + 1) = 14;
                *(ref struct3 + 2) = 66;
                *(ref struct3 + 3) = 69;
                *(ref struct3 + 4) = 78;
                *(ref struct3 + 5) = 81;
                *(ref struct3 + 6) = 0;
                *(ref struct3 + 7) = 0;
                *(ref struct3 + 8) = 253;
                *(ref struct3 + 9) = 14;
                *(ref struct3 + 10) = 66;
                *(ref struct3 + 11) = 69;
                *(ref struct3 + 12) = 78;
                *(ref struct3 + 13) = 81;
                *(ref struct3 + 14) = 0;
                *(ref struct3 + 15) = 0;
                *(ref struct3 + 16) = 253;
                *(ref struct3 + 17) = 14;
                *(ref struct3 + 18) = 66;
                *(ref struct3 + 19) = 69;
                *(ref struct3 + 20) = 78;
                *(ref struct3 + 21) = 81;
                *(ref struct3 + 22) = 0;
                *(ref struct3 + 23) = 0;
                *(ref struct3 + 24) = 253;
                *(ref struct3 + 25) = 14;
                *(ref struct3 + 26) = 66;
                *(ref struct3 + 27) = 69;
                *(ref struct3 + 28) = 78;
                *(ref struct3 + 29) = 81;
                *(ref struct3 + 30) = 0;
                *(ref struct3 + 31) = 0;
                *(ref struct3 + 32) = 253;
                *(ref struct3 + 33) = 14;
                *(ref struct3 + 34) = 66;
                *(ref struct3 + 35) = 69;
                *(ref struct3 + 36) = 78;
                *(ref struct3 + 37) = 81;
                *(ref struct3 + 38) = 0;
                *(ref struct3 + 39) = 0;
                *(ref struct3 + 40) = 253;
                *(ref struct3 + 41) = 14;
                *(ref struct3 + 42) = 66;
                *(ref struct3 + 43) = 69;
                *(ref struct3 + 44) = 78;
                *(ref struct3 + 45) = 81;
                *(ref struct3 + 46) = 0;
                *(ref struct3 + 47) = 0;
                *(ref struct3 + 48) = 253;
                *(ref struct3 + 49) = 14;
                *(ref struct3 + 50) = 66;
                *(ref struct3 + 51) = 69;
                *(ref struct3 + 52) = 78;
                *(ref struct3 + 53) = 81;
                *(ref struct3 + 54) = 0;
                *(ref struct3 + 55) = 0;
                *(ref struct3 + 56) = 253;
                *(ref struct3 + 57) = 14;
                *(ref struct3 + 58) = 66;
                *(ref struct3 + 59) = 69;
                *(ref struct3 + 60) = 78;
                *(ref struct3 + 61) = 81;
                *(ref struct3 + 62) = 0;
                *(ref struct3 + 63) = 0;
                *(ref struct3 + 64) = 253;
                *(ref struct3 + 65) = 14;
                *(ref struct3 + 66) = 66;
                *(ref struct3 + 67) = 69;
                *(ref struct3 + 68) = 78;
                *(ref struct3 + 69) = 81;
                *(ref struct3 + 70) = 0;
                *(ref struct3 + 71) = 0;
                *(ref struct3 + 72) = 253;
                *(ref struct3 + 73) = 14;
                *(ref struct3 + 74) = 66;
                *(ref struct3 + 75) = 69;
                *(ref struct3 + 76) = 78;
                *(ref struct3 + 77) = 81;
                *(ref struct3 + 78) = 0;
                *(ref struct3 + 79) = 0;
                *(ref struct3 + 80) = 253;
                *(ref struct3 + 81) = 14;
                *(ref struct3 + 82) = 66;
                *(ref struct3 + 83) = 69;
                *(ref struct3 + 84) = 78;
                *(ref struct3 + 85) = 81;
                *(ref struct3 + 86) = 0;
                *(ref struct3 + 87) = 0;
                *(ref struct3 + 88) = 253;
                *(ref struct3 + 89) = 14;
                *(ref struct3 + 90) = 66;
                *(ref struct3 + 91) = 69;
                *(ref struct3 + 92) = 78;
                *(ref struct3 + 93) = 81;
                *(ref struct3 + 94) = 0;
                *(ref struct3 + 95) = 0;
                *(ref struct3 + 96) = 253;
                *(ref struct3 + 97) = 14;
                *(ref struct3 + 98) = 66;
                *(ref struct3 + 99) = 69;
                *(ref struct3 + 100) = 78;
                *(ref struct3 + 101) = 81;
                *(ref struct3 + 102) = 0;
                *(ref struct3 + 103) = 0;
                *(ref struct3 + 104) = 253;
                *(ref struct3 + 105) = 14;
                *(ref struct3 + 106) = 66;
                *(ref struct3 + 107) = 69;
                *(ref struct3 + 108) = 78;
                *(ref struct3 + 109) = 81;
                *(ref struct3 + 110) = 0;
                *(ref struct3 + 111) = 0;
                this.textBox6.AppendText("Sending LO83info request to I/O port " + this.label123.Text + "\r\n\r\n");
                this.label88.Text = " ";
                this.label87.Text = " ";
                this.Cursor = Cursors.WaitCursor;
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);

                _Module.smethod_2(*(ref gstruct + 14), (byte)num);

                _Module.smethod_2(*(ref gstruct + 18), 8);
                while ((_Module.smethod_0(*(ref gstruct + 16)) & 128) != null)
                {
                }
                if (this.method_128() == 1)
                {

                    _Module.Sleep(500);
                }
                else
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Power on drive with tray half open.", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                for (uint num2 = 0U; num2 < 768U; num2 += 1U)
                {
                    if (gstruct == null)
                    {
                        this.method_424(9);
                    }
                    else
                    {
                        while ((_Module.smethod_0(*(ref gstruct + 16)) & 128) != null)
                        {
                        }

                        _Module.smethod_2(*(ref gstruct + 14), (byte)num);
                        while ((_Module.smethod_0(*(ref gstruct + 16)) & 128) != null)
                        {
                        }

                        _Module.smethod_2(*(ref gstruct + 18), 160);
                        while ((_Module.smethod_0(*(ref gstruct + 16)) & 128) != null)
                        {
                        }

                        _Module.smethod_3(gstruct, 168);

                        _Module.smethod_3(gstruct, 0);

                        _Module.smethod_3(gstruct, 0);

                        _Module.smethod_3(gstruct, 0);

                        _Module.smethod_3(gstruct, 0);

                        _Module.smethod_3(gstruct, 0);
                    }
                    if (num2 % 64U == 0U)
                    {
                        this.textBox6.AppendText(".");
                    }
                    Application.DoEvents();
                }
                this.textBox6.AppendText("\r\n");
                if (this.method_127() == 1)
                {

                    _Module.Sleep(250);
                    this.method_126();

                    _Module.Sleep(500);
                }
                else
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Move drive tray to the full open position.", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                Struct91 struct4;

                _Module.memset((void*)(&struct4), 0, 112U);
                Struct91 struct5;

                _Module.memset((void*)(&struct5), 0, 112U);
                uint num3;
                if (num == 160U)
                {
                    num3 = 0U;
                }
                else
                {
                    num3 = 16U;
                }
                for (uint num2 = 0U; num2 < 256U; num2 += 1U)
                {
                    Struct52 struct6;

                    _Module.memset((void*)(&struct6), 0, 12U);
                    struct6 = 253;
                    *(ref struct6 + 1) = 14;
                    *(ref struct6 + 2) = 66;
                    *(ref struct6 + 3) = 69;
                    *(ref struct6 + 4) = 78;
                    *(ref struct6 + 5) = 81;
                    uint num4;
                    if (_Module.smethod_16((byte*)(&struct6), 12U, (byte)num3, 512, (void*)(&struct4), &num4, 112U, 1, &gstruct) == null)
                    {
                        break;
                    }
                    if (num2 % 16U == 0U)
                    {
                        this.textBox6.AppendText(".");
                    }
                    Application.DoEvents();
                }
                this.method_5((byte*)(&struct4), 112U, 0U);
                this.textBox6.AppendText("\r\n" + this.string_0 + "\r\n");
                if (_Module.memcmp((void*)(&struct4), (void*)(&struct5), 112U) == null)
                {
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else if (_Module.memcmp((void*)(&struct4), (void*)(&struct3), 112U) == null)
                {
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else if (_Module.memcmp((void*)(&struct4), (void*)(&struct5), 8U) == null)
                {
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {
                    this.label88.Text = "";
                    this.label87.Text = "";

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 964, (void*)(&struct4), 112U);

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 2348, (void*)(&@struct), 32U);
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x0600025E RID: 606 RVA: 0x003C3384 File Offset: 0x0030B384
        private unsafe int method_104()
        {
            Struct55 @struct = 76;
            *(ref @struct + 1) = 79;
            *(ref @struct + 2) = 56;
            *(ref @struct + 3) = 51;
            *(ref @struct + 4) = 105;
            *(ref @struct + 5) = 110;
            *(ref @struct + 6) = 102;
            *(ref @struct + 7) = 111;
            *(ref @struct + 8) = 32;
            *(ref @struct + 9) = 69;
            *(ref @struct + 10) = 120;
            *(ref @struct + 11) = 116;
            *(ref @struct + 12) = 114;
            *(ref @struct + 13) = 97;
            *(ref @struct + 14) = 99;
            *(ref @struct + 15) = 116;
            *(ref @struct + 16) = 0;
            *(ref @struct + 17) = 0;
            *(ref @struct + 18) = 0;
            *(ref @struct + 19) = 0;
            *(ref @struct + 20) = 0;
            *(ref @struct + 21) = 0;
            *(ref @struct + 22) = 0;
            *(ref @struct + 23) = 0;
            *(ref @struct + 24) = 0;
            *(ref @struct + 25) = 0;
            *(ref @struct + 26) = 0;
            *(ref @struct + 27) = 0;
            *(ref @struct + 28) = 0;
            *(ref @struct + 29) = 0;
            *(ref @struct + 30) = 0;
            *(ref @struct + 31) = 0;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72U + 4));
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                int selectedIndex2 = this.comboBox10.SelectedIndex;
                Struct91 struct2 = 253;
                *(ref struct2 + 1) = 14;
                *(ref struct2 + 2) = 66;
                *(ref struct2 + 3) = 69;
                *(ref struct2 + 4) = 78;
                *(ref struct2 + 5) = 81;
                *(ref struct2 + 6) = 0;
                *(ref struct2 + 7) = 0;
                *(ref struct2 + 8) = 253;
                *(ref struct2 + 9) = 14;
                *(ref struct2 + 10) = 66;
                *(ref struct2 + 11) = 69;
                *(ref struct2 + 12) = 78;
                *(ref struct2 + 13) = 81;
                *(ref struct2 + 14) = 0;
                *(ref struct2 + 15) = 0;
                *(ref struct2 + 16) = 253;
                *(ref struct2 + 17) = 14;
                *(ref struct2 + 18) = 66;
                *(ref struct2 + 19) = 69;
                *(ref struct2 + 20) = 78;
                *(ref struct2 + 21) = 81;
                *(ref struct2 + 22) = 0;
                *(ref struct2 + 23) = 0;
                *(ref struct2 + 24) = 253;
                *(ref struct2 + 25) = 14;
                *(ref struct2 + 26) = 66;
                *(ref struct2 + 27) = 69;
                *(ref struct2 + 28) = 78;
                *(ref struct2 + 29) = 81;
                *(ref struct2 + 30) = 0;
                *(ref struct2 + 31) = 0;
                *(ref struct2 + 32) = 253;
                *(ref struct2 + 33) = 14;
                *(ref struct2 + 34) = 66;
                *(ref struct2 + 35) = 69;
                *(ref struct2 + 36) = 78;
                *(ref struct2 + 37) = 81;
                *(ref struct2 + 38) = 0;
                *(ref struct2 + 39) = 0;
                *(ref struct2 + 40) = 253;
                *(ref struct2 + 41) = 14;
                *(ref struct2 + 42) = 66;
                *(ref struct2 + 43) = 69;
                *(ref struct2 + 44) = 78;
                *(ref struct2 + 45) = 81;
                *(ref struct2 + 46) = 0;
                *(ref struct2 + 47) = 0;
                *(ref struct2 + 48) = 253;
                *(ref struct2 + 49) = 14;
                *(ref struct2 + 50) = 66;
                *(ref struct2 + 51) = 69;
                *(ref struct2 + 52) = 78;
                *(ref struct2 + 53) = 81;
                *(ref struct2 + 54) = 0;
                *(ref struct2 + 55) = 0;
                *(ref struct2 + 56) = 253;
                *(ref struct2 + 57) = 14;
                *(ref struct2 + 58) = 66;
                *(ref struct2 + 59) = 69;
                *(ref struct2 + 60) = 78;
                *(ref struct2 + 61) = 81;
                *(ref struct2 + 62) = 0;
                *(ref struct2 + 63) = 0;
                *(ref struct2 + 64) = 253;
                *(ref struct2 + 65) = 14;
                *(ref struct2 + 66) = 66;
                *(ref struct2 + 67) = 69;
                *(ref struct2 + 68) = 78;
                *(ref struct2 + 69) = 81;
                *(ref struct2 + 70) = 0;
                *(ref struct2 + 71) = 0;
                *(ref struct2 + 72) = 253;
                *(ref struct2 + 73) = 14;
                *(ref struct2 + 74) = 66;
                *(ref struct2 + 75) = 69;
                *(ref struct2 + 76) = 78;
                *(ref struct2 + 77) = 81;
                *(ref struct2 + 78) = 0;
                *(ref struct2 + 79) = 0;
                *(ref struct2 + 80) = 253;
                *(ref struct2 + 81) = 14;
                *(ref struct2 + 82) = 66;
                *(ref struct2 + 83) = 69;
                *(ref struct2 + 84) = 78;
                *(ref struct2 + 85) = 81;
                *(ref struct2 + 86) = 0;
                *(ref struct2 + 87) = 0;
                *(ref struct2 + 88) = 253;
                *(ref struct2 + 89) = 14;
                *(ref struct2 + 90) = 66;
                *(ref struct2 + 91) = 69;
                *(ref struct2 + 92) = 78;
                *(ref struct2 + 93) = 81;
                *(ref struct2 + 94) = 0;
                *(ref struct2 + 95) = 0;
                *(ref struct2 + 96) = 253;
                *(ref struct2 + 97) = 14;
                *(ref struct2 + 98) = 66;
                *(ref struct2 + 99) = 69;
                *(ref struct2 + 100) = 78;
                *(ref struct2 + 101) = 81;
                *(ref struct2 + 102) = 0;
                *(ref struct2 + 103) = 0;
                *(ref struct2 + 104) = 253;
                *(ref struct2 + 105) = 14;
                *(ref struct2 + 106) = 66;
                *(ref struct2 + 107) = 69;
                *(ref struct2 + 108) = 78;
                *(ref struct2 + 109) = 81;
                *(ref struct2 + 110) = 0;
                *(ref struct2 + 111) = 0;
                this.textBox6.AppendText("Sending LO83info request to I/O port " + this.label123.Text + "\r\n\r\n");
                this.label88.Text = " ";
                this.label87.Text = " ";
                this.Cursor = Cursors.WaitCursor;
                GStruct3 ushort_2;

                _Module.smethod_21(&ushort_2, ushort_, 0, 1, 10000U);

                _Module.smethod_2(*(ref ushort_2 + 14), (byte)num);

                _Module.smethod_2(*(ref ushort_2 + 18), 8);
                while ((_Module.smethod_0(*(ref ushort_2 + 16)) & 128) != null)
                {
                }
                if (this.method_128() == 1)
                {

                    _Module.Sleep(500);
                }
                else
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Power on drive with tray half open.", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                for (uint num2 = 0U; num2 < 768U; num2 += 1U)
                {
                    while ((_Module.smethod_0(*(ref ushort_2 + 16)) & 128) != null)
                    {
                    }

                    _Module.smethod_2(*(ref ushort_2 + 14), (byte)num);
                    while ((_Module.smethod_0(*(ref ushort_2 + 16)) & 128) != null)
                    {
                    }

                    _Module.smethod_2(*(ref ushort_2 + 18), 160);
                    while ((_Module.smethod_0(*(ref ushort_2 + 16)) & 128) != null)
                    {
                    }

                    _Module.smethod_3(ushort_2, 168);

                    _Module.smethod_3(ushort_2, 0);

                    _Module.smethod_3(ushort_2, 0);

                    _Module.smethod_3(ushort_2, 0);

                    _Module.smethod_3(ushort_2, 0);

                    _Module.smethod_3(ushort_2, 0);
                    if (num2 % 64U == 0U)
                    {
                        this.textBox6.AppendText(".");
                    }
                    Application.DoEvents();
                }
                this.textBox6.AppendText("\r\n");
                if (this.method_127() == 1)
                {

                    _Module.Sleep(250);
                    this.method_126();

                    _Module.Sleep(500);
                }
                else
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Move drive tray to the full open position.", "LO83info", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                Struct92 struct3;

                _Module.memset((void*)(&struct3), 0, 120U);
                Struct91 struct4;

                _Module.memset((void*)(&struct4), 0, 112U);
                uint num3;
                if (num == 160U)
                {
                    num3 = 0U;
                }
                else
                {
                    num3 = 16U;
                }
                for (uint num2 = 0U; num2 < 256U; num2 += 1U)
                {
                    Struct28 struct5;

                    _Module.memset((void*)(&struct5), 0, 16U);
                    struct5 = 253;
                    *(ref struct5 + 1) = 14;
                    *(ref struct5 + 2) = 66;
                    *(ref struct5 + 3) = 69;
                    *(ref struct5 + 4) = 78;
                    *(ref struct5 + 5) = 81;
                    uint num4;
                    if (_Module.smethod_16((byte*)(&struct5), 16U, (byte)num3, 512, (void*)(&struct3), &num4, 120U, 1, &ushort_2) == null)
                    {
                        break;
                    }
                    if (num2 % 16U == 0U)
                    {
                        this.textBox6.AppendText(".");
                    }
                    Application.DoEvents();

                    _Module.smethod_1(ushort_2);

                    _Module.smethod_1(ushort_2);

                    _Module.smethod_1(ushort_2);

                    _Module.smethod_1(ushort_2);
                }
                this.method_5(ref struct3 + 8, 112U, 0U);
                this.textBox6.AppendText("\r\n" + this.string_0 + "\r\n");
                if (_Module.memcmp(ref struct3 + 8, (void*)(&struct4), 112U) == null)
                {
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else if (_Module.memcmp(ref struct3 + 8, (void*)(&struct2), 112U) == null)
                {
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else if (_Module.memcmp(ref struct3 + 8, (void*)(&struct4), 8U) == null)
                {
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else if (_Module.memcmp(ref struct3 + 112, (void*)(&struct4), 8U) == null)
                {
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {
                    this.label88.Text = "";
                    this.label87.Text = "";

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 964, ref struct3 + 8, 112U);

                    _Module.memcpy(*(ref _Module.struct123_0 + 8) + 2348, (void*)(&@struct), 32U);
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x0600025F RID: 607 RVA: 0x00127A8C File Offset: 0x00127A8C
        private unsafe int method_105()
        {
            Struct28 @struct = 0;
            initblk(ref @struct + 1, 0, 15);
            byte b = *(*(ref _Module.struct123_0 + 8) + 625) / 2 % 5 * 16;
            Struct28 struct2;

            _Module.memcpy((void*)(&struct2), *(ref _Module.struct123_0 + 8) + 1060, 16U);
            Struct28 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct123_0 + 8) + 964 + (int)b, 16U);
            Struct28 struct4;

            _Module.memcpy((void*)(&struct4), *(ref _Module.struct123_0 + 8) + 1044, 16U);
            Struct89 struct5;
            int int_ = _Module.smethod_143((uint*)(&struct5), (byte*)(&struct3), 128);
            Struct28 struct6;

            _Module.smethod_145((uint*)(&struct5), int_, (byte*)(&struct2), (byte*)(&struct6));
            for (int i = 0; i < 16; i++)
            {
                *(ref struct6 + i) = (*(ref struct6 + i) ^ *(ref struct4 + i));
            }

            _Module.memcpy(*(ref _Module.struct123_0 + 8) + 280, (void*)(&struct6), 16U);
            int result;
            if (this.method_107((byte*)(&struct6)) != 1)
            {
                this.textBox6.AppendText("\r\n" + "Extracted drive key failed Verification !" + "\r\n\r\n");
                result = 0;
            }
            else
            {
                this.method_6((byte*)(&struct6), 16U, 0U);
                this.label88.Text = "Good";
                this.label87.Text = this.string_0;
                this.textBox6.AppendText("\r\n" + "Extracted drive key " + this.string_0 + "\r\n");
                this.textBox6.AppendText("Extracted drive key Passed Verification !" + "\r\n\r\n");
                this.Cursor = Cursors.Arrow;
                result = 1;
            }
            return result;
        }

        // Token: 0x06000260 RID: 608 RVA: 0x00127C04 File Offset: 0x00127C04
        private unsafe int method_106(byte* pByte_0)
        {
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            return (registryKey.GetValue("Nforce590") != null) ? ((this.method_114(pByte_0) != 0) ? 1 : 0) : ((this.method_107(pByte_0) != 0) ? 1 : 0);
        }

        // Token: 0x06000261 RID: 609 RVA: 0x00127C50 File Offset: 0x00127C50
        private unsafe int method_107(byte* pByte_0)
        {
            if (string.Compare(this.label109.Text, 0, "DG-16D5S", 0, 8) == 0)
            {
                if (this.method_109(pByte_0) == 1)
                {
                    return 1;
                }
            }
            else if (this.method_108(pByte_0) == 1)
            {
                return 1;
            }
            return 0;
        }

        // Token: 0x06000262 RID: 610 RVA: 0x003C3C40 File Offset: 0x0030BC40
        private unsafe int method_108(byte* pByte_0)
        {
            Struct28 @struct = 67;
            *(ref @struct + 1) = 111;
            *(ref @struct + 2) = 109;
            *(ref @struct + 3) = 109;
            *(ref @struct + 4) = 97;
            *(ref @struct + 5) = 100;
            *(ref @struct + 6) = 111;
            *(ref @struct + 7) = 114;
            *(ref @struct + 8) = 101;
            *(ref @struct + 9) = 32;
            *(ref @struct + 10) = 52;
            *(ref @struct + 11) = 32;
            *(ref @struct + 12) = 101;
            *(ref @struct + 13) = 118;
            *(ref @struct + 14) = 101;
            *(ref @struct + 15) = 114;
            Struct28 struct2 = 74;
            *(ref struct2 + 1) = 117;
            *(ref struct2 + 2) = 110;
            *(ref struct2 + 3) = 103;
            *(ref struct2 + 4) = 108;
            *(ref struct2 + 5) = 101;
            *(ref struct2 + 6) = 32;
            *(ref struct2 + 7) = 70;
            *(ref struct2 + 8) = 108;
            *(ref struct2 + 9) = 97;
            *(ref struct2 + 10) = 115;
            *(ref struct2 + 11) = 104;
            *(ref struct2 + 12) = 101;
            *(ref struct2 + 13) = 114;
            *(ref struct2 + 14) = 32;
            *(ref struct2 + 15) = 0;
            Struct28 struct3 = 0;
            *(ref struct3 + 1) = 1;
            *(ref struct3 + 2) = 2;
            *(ref struct3 + 3) = 3;
            *(ref struct3 + 4) = 4;
            *(ref struct3 + 5) = 5;
            *(ref struct3 + 6) = 6;
            *(ref struct3 + 7) = 7;
            *(ref struct3 + 8) = 8;
            *(ref struct3 + 9) = 9;
            *(ref struct3 + 10) = 10;
            *(ref struct3 + 11) = 11;
            *(ref struct3 + 12) = 12;
            *(ref struct3 + 13) = 13;
            *(ref struct3 + 14) = 14;
            *(ref struct3 + 15) = 15;
            Struct28 struct4 = 0;
            initblk(ref struct4 + 1, 0, 15);
            Struct28 struct5 = 0;
            initblk(ref struct5 + 1, 0, 15);
            Struct90 struct6 = 0;
            initblk(ref struct6 + 1, 0, 57);
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                int selectedIndex = this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72);
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72 + 4));
                uint num2;
                if (num == 160U)
                {
                    num2 = 0U;
                }
                else
                {
                    num2 = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                this.Cursor = Cursors.WaitCursor;
                *(ref struct6 + 8) = 59;
                *(ref struct6 + 9) = 48;
                this.method_89(pByte_0, (byte*)(&struct3), (byte*)(&struct2), ref struct6 + 10);
                this.method_89(pByte_0, ref struct6 + 10, (byte*)(&@struct), ref struct6 + 26);

                _Module.memcpy(ref struct6 + 42, (void*)(&struct3), 16U);
                Struct52 struct7;

                _Module.memset((void*)(&struct7), 0, 12U);
                struct7 = 85;
                *(ref struct7 + 8) = 58;
                uint num3;
                if (_Module.smethod_17((byte*)(&struct7), 12U, (byte)num2, 512, (void*)(&struct6), &num3, 58U, 1, &gstruct) != null && _Module.smethod_17((byte*)(&struct7), 12U, (byte)num2, 512, (void*)(&struct6), &num3, 58U, 1, &gstruct) != null)
                {
                    this.textBox6.AppendText("\r\n" + "Stage 1 failed" + "\r\n");
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {
                    if (*(ref _Module.struct38_0 + selectedIndex * 72) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72 + 3) == 1)
                    {
                        this.method_424(88);
                    }
                    Struct90 struct8;

                    _Module.memset((void*)(&struct8), 0, 58U);

                    _Module.memset((void*)(&struct7), 0, 12U);
                    struct7 = 90;
                    *(ref struct7 + 2) = 59;
                    *(ref struct7 + 8) = 58;
                    if (_Module.smethod_16((byte*)(&struct7), 12U, (byte)num2, 512, (void*)(&struct8), &num3, 58U, 1, &gstruct) != null && _Module.smethod_16((byte*)(&struct7), 12U, (byte)num2, 512, (void*)(&struct8), &num3, 58U, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Stage 2 failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        result = 0;
                    }
                    else
                    {
                        this.method_90((byte*)(&struct2), (byte*)(&struct3), ref struct8 + 10, (byte*)(&struct4));
                        if (_Module.memcmp((void*)(&struct5), (void*)(&struct4), 16U) != null)
                        {
                            this.Cursor = Cursors.Arrow;
                            result = 0;
                        }
                        else
                        {
                            this.method_90((byte*)(&struct2), ref struct8 + 10, ref struct8 + 26, (byte*)(&struct4));
                            if (_Module.memcmp((void*)(&@struct), (void*)(&struct4), 16U) != null)
                            {
                                this.Cursor = Cursors.Arrow;
                                result = 0;
                            }
                            else
                            {
                                this.Cursor = Cursors.Arrow;
                                result = 1;
                            }
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x06000263 RID: 611 RVA: 0x003C4018 File Offset: 0x0030C018
        private unsafe int method_109(byte* pByte_0)
        {
            Struct28 @struct = 67;
            *(ref @struct + 1) = 111;
            *(ref @struct + 2) = 109;
            *(ref @struct + 3) = 109;
            *(ref @struct + 4) = 97;
            *(ref @struct + 5) = 100;
            *(ref @struct + 6) = 111;
            *(ref @struct + 7) = 114;
            *(ref @struct + 8) = 101;
            *(ref @struct + 9) = 32;
            *(ref @struct + 10) = 52;
            *(ref @struct + 11) = 32;
            *(ref @struct + 12) = 101;
            *(ref @struct + 13) = 118;
            *(ref @struct + 14) = 101;
            *(ref @struct + 15) = 114;
            Struct28 struct2 = 74;
            *(ref struct2 + 1) = 117;
            *(ref struct2 + 2) = 110;
            *(ref struct2 + 3) = 103;
            *(ref struct2 + 4) = 108;
            *(ref struct2 + 5) = 101;
            *(ref struct2 + 6) = 32;
            *(ref struct2 + 7) = 70;
            *(ref struct2 + 8) = 108;
            *(ref struct2 + 9) = 97;
            *(ref struct2 + 10) = 115;
            *(ref struct2 + 11) = 104;
            *(ref struct2 + 12) = 101;
            *(ref struct2 + 13) = 114;
            *(ref struct2 + 14) = 32;
            *(ref struct2 + 15) = 0;
            Struct28 struct3 = 0;
            *(ref struct3 + 1) = 1;
            *(ref struct3 + 2) = 2;
            *(ref struct3 + 3) = 3;
            *(ref struct3 + 4) = 4;
            *(ref struct3 + 5) = 5;
            *(ref struct3 + 6) = 6;
            *(ref struct3 + 7) = 7;
            *(ref struct3 + 8) = 8;
            *(ref struct3 + 9) = 9;
            *(ref struct3 + 10) = 10;
            *(ref struct3 + 11) = 11;
            *(ref struct3 + 12) = 12;
            *(ref struct3 + 13) = 13;
            *(ref struct3 + 14) = 14;
            *(ref struct3 + 15) = 15;
            Struct28 struct4 = 0;
            initblk(ref struct4 + 1, 0, 15);
            Struct28 struct5 = 0;
            initblk(ref struct5 + 1, 0, 15);
            Struct28 struct6 = 0;
            initblk(ref struct6 + 1, 0, 15);
            Struct28 struct7 = 71;
            *(ref struct7 + 1) = 69;
            *(ref struct7 + 2) = 78;
            *(ref struct7 + 3) = 85;
            *(ref struct7 + 4) = 73;
            *(ref struct7 + 5) = 78;
            *(ref struct7 + 6) = 69;
            *(ref struct7 + 7) = 32;
            *(ref struct7 + 8) = 88;
            *(ref struct7 + 9) = 66;
            *(ref struct7 + 10) = 79;
            *(ref struct7 + 11) = 88;
            *(ref struct7 + 12) = 32;
            *(ref struct7 + 13) = 79;
            *(ref struct7 + 14) = 68;
            *(ref struct7 + 15) = 68;
            Struct28 struct8 = 0;
            initblk(ref struct8 + 1, 0, 15);
            Struct28 struct9 = 0;
            initblk(ref struct9 + 1, 0, 15);
            Struct93 struct10 = 0;
            initblk(ref struct10 + 1, 0, 75);
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                int selectedIndex = this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72);
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72 + 4));
                uint num2;
                if (num == 160U)
                {
                    num2 = 0U;
                }
                else
                {
                    num2 = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                this.Cursor = Cursors.WaitCursor;
                *(ref struct10 + 8) = 40;
                *(ref struct10 + 9) = 64;

                _Module.memcpy((void*)(&struct9), (void*)(&struct3), 16U);
                this.method_110(pByte_0, (byte*)(&struct9), (byte*)(&struct6));
                this.method_89((byte*)(&struct6), (byte*)(&struct3), (byte*)(&struct2), ref struct10 + 10);
                this.method_89((byte*)(&struct6), ref struct10 + 10, (byte*)(&@struct), ref struct10 + 26);

                _Module.memcpy(ref struct10 + 42, (void*)(&struct3), 16U);
                this.method_112((byte*)(&struct7), ref struct10 + 10, (byte*)(&struct8));
                this.method_110((byte*)(&struct6), (byte*)(&struct8), ref struct10 + 58);
                Struct52 struct11;

                _Module.memset((void*)(&struct11), 0, 12U);
                struct11 = 85;
                *(ref struct11 + 8) = 74;
                uint num3;
                if (_Module.smethod_17((byte*)(&struct11), 12U, (byte)num2, 512, (void*)(&struct10), &num3, 74U, 1, &gstruct) != null && _Module.smethod_17((byte*)(&struct11), 12U, (byte)num2, 512, (void*)(&struct10), &num3, 74U, 1, &gstruct) != null)
                {
                    this.textBox6.AppendText("\r\n" + "Stage 1 failed" + "\r\n");
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {
                    Struct90 struct12;

                    _Module.memset((void*)(&struct12), 0, 58U);

                    _Module.memset((void*)(&struct11), 0, 12U);
                    struct11 = 90;
                    *(ref struct11 + 2) = 40;
                    *(ref struct11 + 8) = 58;
                    if (_Module.smethod_16((byte*)(&struct11), 12U, (byte)num2, 512, (void*)(&struct12), &num3, 58U, 1, &gstruct) != null && _Module.smethod_16((byte*)(&struct11), 12U, (byte)num2, 512, (void*)(&struct12), &num3, 58U, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Stage 2 failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        result = 0;
                    }
                    else
                    {
                        this.method_90((byte*)(&struct2), (byte*)(&struct3), ref struct12 + 10, (byte*)(&struct4));
                        if (_Module.memcmp((void*)(&struct5), (void*)(&struct4), 16U) != null)
                        {
                            this.Cursor = Cursors.Arrow;
                            result = 0;
                        }
                        else
                        {
                            this.method_90((byte*)(&struct2), ref struct12 + 10, ref struct12 + 26, (byte*)(&struct4));
                            if (_Module.memcmp((void*)(&@struct), (void*)(&struct4), 16U) != null)
                            {
                                this.Cursor = Cursors.Arrow;
                                result = 0;
                            }
                            else
                            {
                                this.Cursor = Cursors.Arrow;
                                result = 1;
                            }
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x06000264 RID: 612 RVA: 0x001284E0 File Offset: 0x001284E0
        private unsafe int method_110(byte* pByte_0, byte* pByte_1, byte* pByte_2)
        {
            Struct28 @struct = 0;
            initblk(ref @struct + 1, 0, 15);
            Struct28 struct2 = 0;
            initblk(ref struct2 + 1, 0, 15);
            Struct28 struct3 = 0;
            initblk(ref struct3 + 1, 0, 15);
            Struct71 struct4 = 0;
            initblk(ref struct4 + 1, 0, 15);
            *(ref @struct + 15) = 1;

            _Module.memcpy((void*)pByte_2, (void*)pByte_0, 16U);
            for (int i = 128; i > 0; i--)
            {
                this.method_113((byte*)(&@struct));
                byte b = *(ref @struct + 15);
                byte b2 = *pByte_1;
                b2 = (byte)(b2 >> 7);
                b2 |= b;
                *(ref @struct + 15) = (b2 & byte.MaxValue);
                this.method_113(pByte_1);
                this.method_89(pByte_2, (byte*)(&struct2), (byte*)(&@struct), (byte*)(&struct3));

                _Module.memcpy((void*)pByte_2, (void*)(&struct3), 16U);
            }
            return 1;
        }

        // Token: 0x06000265 RID: 613 RVA: 0x00128590 File Offset: 0x00128590
        private unsafe int method_111(byte* pByte_0, byte* pByte_1)
        {
            Struct28 @struct = 0;
            initblk(ref @struct + 1, 0, 15);
            Struct28 struct2 = 0;
            initblk(ref struct2 + 1, 0, 15);
            Struct28 struct3 = 0;
            initblk(ref struct3 + 1, 0, 15);
            Struct28 struct4 = 0;
            initblk(ref struct4 + 1, 0, 15);
            Struct71 struct5 = 0;
            initblk(ref struct5 + 1, 0, 15);
            *(ref @struct + 15) = 1;

            _Module.memcpy((void*)(&struct4), (void*)pByte_0, 16U);
            for (int i = 128; i > 0; i--)
            {
                this.method_113((byte*)(&@struct));
                byte b = *(ref @struct + 15);
                byte b2 = *pByte_1;
                b2 = (byte)(b2 >> 7);
                b2 |= b;
                *(ref @struct + 15) = (b2 & byte.MaxValue);
                this.method_113(pByte_1);
                this.method_89((byte*)(&struct4), (byte*)(&struct2), (byte*)(&@struct), (byte*)(&struct3));

                _Module.memcpy((void*)(&struct4), (void*)(&struct3), 16U);
            }
            string text = "";

            _Module.sprintf((sbyte*)(&struct5), (sbyte*)(&_Module.struct19_0));
            for (int i = 0; i < 16; i++)
            {

                _Module.sprintf((sbyte*)(&struct5), (sbyte*)(&_Module.struct10_20), ref struct5, *(ref struct4 + i));
            }
            text += new string((sbyte*)(&struct5));
            this.textBox6.AppendText("New drive key is: " + text + "\r\n");
            return 1;
        }

        // Token: 0x06000266 RID: 614 RVA: 0x001286BC File Offset: 0x001286BC
        private unsafe void method_112(byte* pByte_0, byte* pByte_1, byte* pByte_2)
        {
            Struct28 @struct = 0;
            initblk(ref @struct + 1, 0, 15);
            Struct28 struct2 = 0;
            initblk(ref struct2 + 1, 0, 15);
            Struct28 struct3 = 0;
            initblk(ref struct3 + 1, 0, 15);

            _Module.memcpy((void*)(&@struct), (void*)pByte_0, 16U);
            this.method_89(pByte_1, (byte*)(&struct3), (byte*)(&@struct), (byte*)(&struct2));
            for (int i = 0; i < 16; i++)
            {
                *(ref @struct + i) = (*(ref @struct + i) ^ *(ref struct2 + i));
            }
            this.method_89(pByte_1 + 16, (byte*)(&struct3), (byte*)(&@struct), (byte*)(&struct2));
            for (int i = 0; i < 16; i++)
            {
                *(ref @struct + i) = (*(ref @struct + i) ^ *(ref struct2 + i));
            }

            _Module.memcpy((void*)pByte_2, (void*)(&@struct), 16U);
        }

        // Token: 0x06000267 RID: 615 RVA: 0x00128764 File Offset: 0x00128764
        private unsafe void method_113(byte* pByte_0)
        {
            Struct28 @struct = 0;
            initblk(ref @struct + 1, 0, 15);
            *(ref @struct + 15) = (byte)((int)pByte_0[15] << 1 & 254);
            *(ref @struct + 14) = (byte)(((int)pByte_0[14] << 1 & 254) | (pByte_0[15] >> 7 & 1));
            *(ref @struct + 13) = (byte)(((int)pByte_0[13] << 1 & 254) | (pByte_0[14] >> 7 & 1));
            *(ref @struct + 12) = (byte)(((int)pByte_0[12] << 1 & 254) | (pByte_0[13] >> 7 & 1));
            *(ref @struct + 11) = (byte)(((int)pByte_0[11] << 1 & 254) | (pByte_0[12] >> 7 & 1));
            *(ref @struct + 10) = (byte)(((int)pByte_0[10] << 1 & 254) | (pByte_0[11] >> 7 & 1));
            *(ref @struct + 9) = (byte)(((int)pByte_0[9] << 1 & 254) | (pByte_0[10] >> 7 & 1));
            *(ref @struct + 8) = (byte)(((int)pByte_0[8] << 1 & 254) | (pByte_0[9] >> 7 & 1));
            *(ref @struct + 7) = (byte)(((int)pByte_0[7] << 1 & 254) | (pByte_0[8] >> 7 & 1));
            *(ref @struct + 6) = (byte)(((int)pByte_0[6] << 1 & 254) | (pByte_0[7] >> 7 & 1));
            *(ref @struct + 5) = (byte)(((int)pByte_0[5] << 1 & 254) | (pByte_0[6] >> 7 & 1));
            *(ref @struct + 4) = (byte)(((int)pByte_0[4] << 1 & 254) | (pByte_0[5] >> 7 & 1));
            *(ref @struct + 3) = (byte)(((int)pByte_0[3] << 1 & 254) | (pByte_0[4] >> 7 & 1));
            *(ref @struct + 2) = (byte)(((int)pByte_0[2] << 1 & 254) | (pByte_0[3] >> 7 & 1));
            *(ref @struct + 1) = (byte)(((int)pByte_0[1] << 1 & 254) | (pByte_0[2] >> 7 & 1));
            @struct = (((int)(*pByte_0) << 1 & 254) | (pByte_0[1] >> 7 & 1));

            _Module.memcpy((void*)pByte_0, (void*)(&@struct), 16U);
        }

        // Token: 0x06000268 RID: 616 RVA: 0x00128934 File Offset: 0x00128934
        private unsafe int method_114(byte* pByte_0)
        {
            Struct28 @struct = 67;
            *(ref @struct + 1) = 111;
            *(ref @struct + 2) = 109;
            *(ref @struct + 3) = 109;
            *(ref @struct + 4) = 97;
            *(ref @struct + 5) = 100;
            *(ref @struct + 6) = 111;
            *(ref @struct + 7) = 114;
            *(ref @struct + 8) = 101;
            *(ref @struct + 9) = 32;
            *(ref @struct + 10) = 52;
            *(ref @struct + 11) = 32;
            *(ref @struct + 12) = 101;
            *(ref @struct + 13) = 118;
            *(ref @struct + 14) = 101;
            *(ref @struct + 15) = 114;
            Struct28 struct2 = 74;
            *(ref struct2 + 1) = 117;
            *(ref struct2 + 2) = 110;
            *(ref struct2 + 3) = 103;
            *(ref struct2 + 4) = 108;
            *(ref struct2 + 5) = 101;
            *(ref struct2 + 6) = 32;
            *(ref struct2 + 7) = 70;
            *(ref struct2 + 8) = 108;
            *(ref struct2 + 9) = 97;
            *(ref struct2 + 10) = 115;
            *(ref struct2 + 11) = 104;
            *(ref struct2 + 12) = 101;
            *(ref struct2 + 13) = 114;
            *(ref struct2 + 14) = 32;
            *(ref struct2 + 15) = 0;
            Struct28 struct3 = 0;
            *(ref struct3 + 1) = 1;
            *(ref struct3 + 2) = 2;
            *(ref struct3 + 3) = 3;
            *(ref struct3 + 4) = 4;
            *(ref struct3 + 5) = 5;
            *(ref struct3 + 6) = 6;
            *(ref struct3 + 7) = 7;
            *(ref struct3 + 8) = 8;
            *(ref struct3 + 9) = 9;
            *(ref struct3 + 10) = 10;
            *(ref struct3 + 11) = 11;
            *(ref struct3 + 12) = 12;
            *(ref struct3 + 13) = 13;
            *(ref struct3 + 14) = 14;
            *(ref struct3 + 15) = 15;
            Struct28 struct4 = 0;
            initblk(ref struct4 + 1, 0, 15);
            Struct28 struct5 = 0;
            initblk(ref struct5 + 1, 0, 15);
            Struct4 struct6 = 0;
            *(ref struct6 + 1) = 0;
            *(ref struct6 + 2) = 0;
            *(ref struct6 + 3) = 0;
            *(ref struct6 + 4) = 0;
            *(ref struct6 + 5) = 0;
            *(ref struct6 + 6) = 0;
            *(ref struct6 + 7) = 0;
            *(ref struct6 + 8) = 59;
            *(ref struct6 + 9) = 48;
            *(ref struct6 + 10) = 0;
            *(ref struct6 + 11) = 0;
            *(ref struct6 + 12) = 0;
            *(ref struct6 + 13) = 0;
            *(ref struct6 + 14) = 0;
            *(ref struct6 + 15) = 0;
            *(ref struct6 + 16) = 0;
            *(ref struct6 + 17) = 0;
            *(ref struct6 + 18) = 0;
            *(ref struct6 + 19) = 0;
            *(ref struct6 + 20) = 0;
            *(ref struct6 + 21) = 0;
            *(ref struct6 + 22) = 0;
            *(ref struct6 + 23) = 0;
            *(ref struct6 + 24) = 0;
            *(ref struct6 + 25) = 0;
            *(ref struct6 + 26) = 0;
            *(ref struct6 + 27) = 0;
            *(ref struct6 + 28) = 0;
            *(ref struct6 + 29) = 0;
            *(ref struct6 + 30) = 0;
            *(ref struct6 + 31) = 0;
            *(ref struct6 + 32) = 0;
            *(ref struct6 + 33) = 0;
            *(ref struct6 + 34) = 0;
            *(ref struct6 + 35) = 0;
            *(ref struct6 + 36) = 0;
            *(ref struct6 + 37) = 0;
            *(ref struct6 + 38) = 0;
            *(ref struct6 + 39) = 0;
            *(ref struct6 + 40) = 0;
            *(ref struct6 + 41) = 0;
            *(ref struct6 + 42) = 0;
            *(ref struct6 + 43) = 0;
            *(ref struct6 + 44) = 0;
            *(ref struct6 + 45) = 0;
            *(ref struct6 + 46) = 0;
            *(ref struct6 + 47) = 0;
            *(ref struct6 + 48) = 0;
            *(ref struct6 + 49) = 0;
            *(ref struct6 + 50) = 0;
            *(ref struct6 + 51) = 0;
            *(ref struct6 + 52) = 0;
            *(ref struct6 + 53) = 0;
            *(ref struct6 + 54) = 0;
            *(ref struct6 + 55) = 0;
            *(ref struct6 + 56) = 0;
            *(ref struct6 + 57) = 0;
            *(ref struct6 + 58) = 0;
            *(ref struct6 + 59) = 0;
            *(ref struct6 + 60) = 0;
            *(ref struct6 + 61) = 0;
            *(ref struct6 + 62) = 0;
            *(ref struct6 + 63) = 0;
            Struct28 struct7;

            _Module.memcpy((void*)(&struct7), (void*)pByte_0, 16U);
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                int selectedIndex = this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72);
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72 + 4));
                uint num2;
                if (num == 160U)
                {
                    num2 = 0U;
                }
                else
                {
                    num2 = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                this.Cursor = Cursors.WaitCursor;
                this.method_5((byte*)(&struct7), 16U, 0U);
                this.method_5((byte*)(&struct3), 16U, 0U);
                Struct28 struct8;

                _Module.memcpy((void*)(&struct8), (void*)(&struct2), 16U);
                this.method_5((byte*)(&struct8), 16U, 0U);
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct8 + i) = (*(ref struct8 + i) ^ *(ref struct3 + i));
                }
                Struct89 struct9;
                int int_ = _Module.smethod_142((uint*)(&struct9), (byte*)(&struct7), 128);

                _Module.smethod_144((uint*)(&struct9), int_, (byte*)(&struct8), (byte*)(&struct4));
                this.method_5((byte*)(&struct4), 16U, 0U);
                Struct4 struct10;

                _Module.memcpy((void*)(&struct10), (void*)(&struct6), 64U);

                _Module.memcpy(ref struct10 + 10, (void*)(&struct4), 16U);

                _Module.memcpy(ref struct10 + 42, (void*)(&struct3), 16U);

                _Module.memcpy((void*)(&struct3), (void*)(&struct4), 16U);

                _Module.memcpy((void*)(&struct8), (void*)(&@struct), 16U);
                this.method_5((byte*)(&struct8), 16U, 0U);
                for (int i = 0; i < 16; i++)
                {
                    *(ref struct8 + i) = (*(ref struct8 + i) ^ *(ref struct3 + i));
                }
                int_ = _Module.smethod_142((uint*)(&struct9), (byte*)(&struct7), 128);

                _Module.smethod_144((uint*)(&struct9), int_, (byte*)(&struct8), (byte*)(&struct4));
                this.method_5((byte*)(&struct4), 16U, 0U);

                _Module.memcpy(ref struct10 + 26, (void*)(&struct4), 16U);
                Struct28 struct11;

                _Module.memset((void*)(&struct11), 0, 16U);
                struct11 = 85;
                *(ref struct11 + 8) = 58;
                uint num3;
                if (_Module.smethod_17((byte*)(&struct11), 16U, (byte)num2, 512, (void*)(&struct10), &num3, 64U, 1, &gstruct) != null && _Module.smethod_17((byte*)(&struct11), 16U, (byte)num2, 512, (void*)(&struct10), &num3, 64U, 1, &gstruct) != null)
                {
                    this.textBox6.AppendText("\r\n" + "Stage 1 failed" + "\r\n");
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {
                    Struct94 struct12;

                    _Module.memset((void*)(&struct12), 0, 68U);

                    _Module.memset((void*)(&struct11), 0, 16U);
                    struct11 = 90;
                    *(ref struct11 + 2) = 59;
                    *(ref struct11 + 8) = 58;
                    if (_Module.smethod_16((byte*)(&struct11), 16U, (byte)num2, 512, (void*)(&struct12), &num3, 68U, 1, &gstruct) != null && _Module.smethod_16((byte*)(&struct11), 16U, (byte)num2, 512, (void*)(&struct12), &num3, 68U, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Stage 2 failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        result = 0;
                    }
                    else
                    {
                        byte* ptr = ref struct12 + 8;
                        this.method_5(ptr, 58U, 0U);

                        _Module.memcpy((void*)(&struct7), (void*)(&struct2), 16U);

                        _Module.memcpy((void*)(&struct3), (void*)(ptr + 42), 16U);

                        _Module.memcpy((void*)(&struct8), (void*)(ptr + 10), 16U);
                        int_ = _Module.smethod_143((uint*)(&struct9), (byte*)(&struct7), 128);

                        _Module.smethod_145((uint*)(&struct9), int_, (byte*)(&struct8), (byte*)(&struct4));
                        for (int i = 0; i < 16; i++)
                        {
                            *(ref struct4 + i) = (*(ref struct4 + i) ^ *(ref struct3 + i));
                        }
                        this.method_5((byte*)(&struct4), 16U, 0U);
                        if (_Module.memcmp((void*)(&struct5), (void*)(&struct4), 16U) != null)
                        {
                            this.Cursor = Cursors.Arrow;
                            result = 0;
                        }
                        else
                        {

                            _Module.memcpy((void*)(&struct3), (void*)(ptr + 10), 16U);

                            _Module.memcpy((void*)(&struct8), (void*)(ptr + 26), 16U);
                            int_ = _Module.smethod_143((uint*)(&struct9), (byte*)(&struct7), 128);

                            _Module.smethod_145((uint*)(&struct9), int_, (byte*)(&struct8), (byte*)(&struct4));
                            for (int i = 0; i < 16; i++)
                            {
                                *(ref struct4 + i) = (*(ref struct4 + i) ^ *(ref struct3 + i));
                            }
                            this.method_5((byte*)(&struct4), 16U, 0U);
                            this.Cursor = Cursors.Arrow;
                            result = ((_Module.memcmp((void*)(&@struct), (void*)(&struct4), 16U) == null) ? 1 : 0);
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x06000269 RID: 617 RVA: 0x00129018 File Offset: 0x00129018
        private unsafe int method_115()
        {
            string text = null;
            string text2 = null;
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB");
            int result;
            if (registryKey.GetValue("Index") != null)
            {
                string text3 = registryKey.GetValue("Index").ToString();
                int num = (int)Convert.ToInt16(text3);
                num++;
                this.Cursor = Cursors.WaitCursor;
                this.textBox6.AppendText("Scanning KeyDB and testing " + text3 + " keys" + "\r\n");
                this.pictureBox5.Visible = false;
                this.pictureBox7.Visible = true;
                this.pictureBox2.Visible = false;
                this.pictureBox6.Visible = true;
                this.menuItem_21.Enabled = false;
                this.menuItem_22.Enabled = false;
                this.menuItem_23.Enabled = false;
                this.menuItem_24.Enabled = false;
                this.label133.Text = "Not Found";
                this.label131.Text = "Not Found";
                this.string_14 = "";
                this.string_15 = "";
                this.string_16 = "";
                this.string_17 = "";
                this.toolTip_0.SetToolTip(this.pictureBox5, null);
                this.toolTip_0.SetToolTip(this.pictureBox2, null);
                for (int i = 1; i < num; i++)
                {
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 0;
                    }
                    Application.DoEvents();
                    registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + Convert.ToString(i));
                    this.textBox6.AppendText(".");
                    if (registryKey.GetValue("Key") != null)
                    {
                        text = registryKey.GetValue("Key").ToString();
                    }
                    if (registryKey.GetValue("JobName") != null)
                    {
                        text2 = registryKey.GetValue("JobName").ToString();
                    }
                    string text4;
                    if (registryKey.GetValue("WorkingDir") != null)
                    {
                        text4 = registryKey.GetValue("WorkingDir").ToString();
                    }
                    else
                    {
                        text4 = "";
                    }
                    string strA;
                    if (registryKey.GetValue("LastFile") != null)
                    {
                        strA = registryKey.GetValue("LastFile").ToString();
                    }
                    else
                    {
                        strA = "";
                    }
                    Struct28 @struct;
                    for (int j = 0; j < 32; j += 2)
                    {
                        string s = text.Substring(j, 2);
                        IntPtr intPtr = Marshal.StringToHGlobalAnsi(s);
                        IntPtr value = intPtr;
                        sbyte* pSbyte_ = (sbyte*)((void*)value);
                        byte b;
                        this.method_10((void*)(&b), pSbyte_, 2);
                        *(ref @struct + j / 2) = b;
                    }
                    if (this.method_107((byte*)(&@struct)) == 1)
                    {
                        this.toolTip_0.SetToolTip(this.pictureBox5, "Drive Key found in KeyDB (" + Convert.ToString(i) + " - " + text2 + ")" + Environment.NewLine + "Key is: " + text);
                        this.toolTip_0.SetToolTip(this.pictureBox2, "Drive Key found in KeyDB (" + Convert.ToString(i) + " - " + text2 + ")" + Environment.NewLine + "Key is: " + text);
                        this.pictureBox5.Visible = true;
                        this.pictureBox7.Visible = false;
                        this.pictureBox2.Visible = true;
                        this.pictureBox6.Visible = false;
                        if (string.Compare(strA, "") != 0)
                        {
                            this.menuItem_21.Enabled = true;
                        }
                        this.menuItem_22.Enabled = true;
                        this.menuItem_23.Enabled = true;
                        this.menuItem_24.Enabled = true;
                        this.string_14 = text;
                        this.string_15 = Convert.ToString(i);
                        this.string_16 = strA;
                        this.string_17 = text4;
                        this.label133.Text = "Verified";
                        this.label131.Text = "Verified";
                        registryKey.Close();
                        this.Cursor = Cursors.Arrow;
                        this.textBox6.AppendText("\r\n" + "Key found in KeyDB at record (" + Convert.ToString(i) + " - " + text2 + ")" + "\r\n" + "Key is: " + text + "\r\n" + "Key has been tested and verified, thanks C4eva ! " + "\r\n");
                        return 1;
                    }
                }
                this.textBox6.AppendText("\r\n" + "Key was not found" + "\r\n");
                registryKey.Close();
                this.Cursor = Cursors.Arrow;
                result = 0;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        // Token: 0x0600026A RID: 618 RVA: 0x0012947C File Offset: 0x0012947C
        private void menuItem_21_Click(object sender, EventArgs e)
        {
            if (File.Exists(this.string_16))
            {
                this.method_36(this.string_16, 0);
            }
            else
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("LastFile was not found in the specified location.", "Load Last File", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
        }

        // Token: 0x0600026B RID: 619 RVA: 0x001294E8 File Offset: 0x001294E8
        private void menuItem_22_Click(object sender, EventArgs e)
        {
            if (Directory.Exists(Path.GetDirectoryName(this.string_17)))
            {
                OpenFileDialog openFileDialog = new OpenFileDialog();
                openFileDialog.Filter = "Firmware file (*.bin)|*.bin|All Files (*.*)|*.*";
                openFileDialog.FileName = "ix16.bin";
                openFileDialog.DefaultExt = ".bin";
                openFileDialog.CheckFileExists = true;
                openFileDialog.CheckPathExists = true;
                openFileDialog.RestoreDirectory = false;
                openFileDialog.InitialDirectory = this.string_17;
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    string fullPath = Path.GetFullPath(openFileDialog.FileName);
                    this.method_36(fullPath, 0);
                }
            }
            else
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("Job Folder was not found.", "Open Job Folder", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
        }

        // Token: 0x0600026C RID: 620 RVA: 0x001295B4 File Offset: 0x001295B4
        private void menuItem_23_Click(object sender, EventArgs e)
        {
            int num = this.method_22(this.string_14);
            new Job_history
            {
                int_0 = num
            }.ShowDialog(this);
        }

        // Token: 0x0600026D RID: 621 RVA: 0x001295E8 File Offset: 0x001295E8
        private void menuItem_24_Click(object sender, EventArgs e)
        {
            DataBaseView dataBaseView = new DataBaseView();
            dataBaseView.int_0 = this.method_22(this.string_14);
            if (dataBaseView.ShowDialog(this) == DialogResult.OK)
            {
                this.string_10 = Path.GetDirectoryName(dataBaseView.textBox15.Text);
                this.string_9 = dataBaseView.textBox2.Text;
            }
        }

        // Token: 0x0600026E RID: 622 RVA: 0x00129640 File Offset: 0x00129640
        private unsafe void method_116()
        {
            if (this.bool_2)
            {
                string text = this.string_10 + "\\Key.bin";
                if (!File.Exists(text))
                {
                    IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                    IntPtr value = intPtr;
                    sbyte* pSbyte_ = (sbyte*)((void*)value);
                    this.string_13 = text;
                    GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                    if (ptr != null)
                    {

                        _Module.fwrite(*(ref _Module.struct123_0 + 8) + 280, 16U, 1U, ptr);

                        _Module.fclose(ptr);
                        this.textBox6.AppendText("\r\n" + "Key data saved to " + text + "\r\n");
                        return;
                    }

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(text, "Can't open file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
            }
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
            saveFileDialog.DefaultExt = ".bin";
            saveFileDialog.FileName = "Key.bin";
            saveFileDialog.RestoreDirectory = false;
            if (this.bool_2)
            {
                saveFileDialog.InitialDirectory = this.string_10;
            }
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(fullPath);
                IntPtr value2 = intPtr2;
                sbyte* pSbyte_2 = (sbyte*)((void*)value2);
                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_2, (sbyte*)(&_Module.struct18_5));
                if (ptr == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(saveFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {
                    this.textBox6.AppendText("Key data saved to " + saveFileDialog.FileName + "\r\n\r\n");

                    _Module.fwrite(*(ref _Module.struct123_0 + 8) + 280, 16U, 1U, ptr);

                    _Module.fclose(ptr);
                }
            }
        }

        // Token: 0x0600026F RID: 623 RVA: 0x0012982C File Offset: 0x0012982C
        private unsafe void method_117()
        {
            Struct34 @struct = 127;
            *(ref @struct + 1) = byte.MaxValue;
            *(ref @struct + 2) = byte.MaxValue;
            *(ref @struct + 3) = byte.MaxValue;
            *(ref @struct + 4) = byte.MaxValue;
            *(ref @struct + 5) = byte.MaxValue;
            *(ref @struct + 6) = byte.MaxValue;
            *(ref @struct + 7) = byte.MaxValue;
            *(ref @struct + 8) = byte.MaxValue;
            *(ref @struct + 9) = byte.MaxValue;
            *(ref @struct + 10) = byte.MaxValue;
            *(ref @struct + 11) = byte.MaxValue;
            *(ref @struct + 12) = byte.MaxValue;
            *(ref @struct + 13) = byte.MaxValue;
            *(ref @struct + 14) = byte.MaxValue;
            *(ref @struct + 15) = byte.MaxValue;
            *(ref @struct + 16) = byte.MaxValue;
            *(ref @struct + 17) = byte.MaxValue;
            *(ref @struct + 18) = byte.MaxValue;
            *(ref @struct + 19) = byte.MaxValue;
            *(ref @struct + 20) = byte.MaxValue;
            *(ref @struct + 21) = byte.MaxValue;
            *(ref @struct + 22) = byte.MaxValue;
            *(ref @struct + 23) = byte.MaxValue;
            *(ref @struct + 24) = byte.MaxValue;
            *(ref @struct + 25) = byte.MaxValue;
            *(ref @struct + 26) = byte.MaxValue;
            *(ref @struct + 27) = byte.MaxValue;
            *(ref @struct + 28) = byte.MaxValue;
            *(ref @struct + 29) = byte.MaxValue;
            *(ref @struct + 30) = byte.MaxValue;
            *(ref @struct + 31) = byte.MaxValue;
            *(ref @struct + 32) = 0;
            *(ref @struct + 33) = 17;
            *(ref @struct + 34) = 34;
            *(ref @struct + 35) = 51;
            *(ref @struct + 36) = 68;
            *(ref @struct + 37) = 85;
            *(ref @struct + 38) = 102;
            *(ref @struct + 39) = 119;
            *(ref @struct + 40) = 136;
            *(ref @struct + 41) = 153;
            *(ref @struct + 42) = 170;
            *(ref @struct + 43) = 187;
            *(ref @struct + 44) = 204;
            *(ref @struct + 45) = 221;
            *(ref @struct + 46) = 238;
            *(ref @struct + 47) = 250;
            Struct28 struct2 = 68;
            *(ref struct2 + 1) = 86;
            *(ref struct2 + 2) = 68;
            *(ref struct2 + 3) = 75;
            *(ref struct2 + 4) = 101;
            *(ref struct2 + 5) = 121;
            *(ref struct2 + 6) = 51;
            *(ref struct2 + 7) = 50;
            *(ref struct2 + 8) = 32;
            *(ref struct2 + 9) = 101;
            *(ref struct2 + 10) = 120;
            *(ref struct2 + 11) = 116;
            *(ref struct2 + 12) = 114;
            *(ref struct2 + 13) = 97;
            *(ref struct2 + 14) = 99;
            *(ref struct2 + 15) = 116;
            Struct30 struct3;

            _Module.memset((void*)(&struct3), 0, 512U);

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct123_0 + 8) + 780, 180U);
            for (int i = 46; i < 93; i += 2)
            {
                *(ref struct3 + i) = *(*(ref _Module.struct123_0 + 8) + 780 + (i + 1));
                *(ref struct3 + (i + 1)) = *(*(ref _Module.struct123_0 + 8) + 780 + i);
            }
            Struct32 struct4;

            _Module.memset((void*)(&struct4), 0, 262144U);
            Struct33 struct5;

            _Module.memset((void*)(&struct5), 255, 4096U);
            byte* ptr = ref struct4 + 11264;

            _Module.memcpy((void*)ptr, (void*)(&struct3), 512U);
            ptr = ref struct4 + 11776;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 8) + 568, 116U);
            ptr = ref struct4 + 12032;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 8) + 684, 96U);
            ptr = ref struct4 + 24512;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 8) + 2348, 32U);
            ptr = ref struct4 + 40960;

            _Module.memcpy((void*)ptr, (void*)(&struct5), 4096U);
            ptr = ref struct4 + 40960;

            _Module.memcpy((void*)ptr, (void*)(&@struct), 48U);
            ptr = ref struct4 + 41008;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 8) + 280, 16U);
            ptr = ref struct4 + 130816;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 8) + 2028, 80U);

            _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct4), 262144U);
            this.method_121();
        }

        // Token: 0x06000270 RID: 624 RVA: 0x00129C24 File Offset: 0x00129C24
        private unsafe void method_118()
        {
            Struct34 @struct = 127;
            *(ref @struct + 1) = byte.MaxValue;
            *(ref @struct + 2) = byte.MaxValue;
            *(ref @struct + 3) = byte.MaxValue;
            *(ref @struct + 4) = byte.MaxValue;
            *(ref @struct + 5) = byte.MaxValue;
            *(ref @struct + 6) = byte.MaxValue;
            *(ref @struct + 7) = byte.MaxValue;
            *(ref @struct + 8) = byte.MaxValue;
            *(ref @struct + 9) = byte.MaxValue;
            *(ref @struct + 10) = byte.MaxValue;
            *(ref @struct + 11) = byte.MaxValue;
            *(ref @struct + 12) = byte.MaxValue;
            *(ref @struct + 13) = byte.MaxValue;
            *(ref @struct + 14) = byte.MaxValue;
            *(ref @struct + 15) = byte.MaxValue;
            *(ref @struct + 16) = byte.MaxValue;
            *(ref @struct + 17) = byte.MaxValue;
            *(ref @struct + 18) = byte.MaxValue;
            *(ref @struct + 19) = byte.MaxValue;
            *(ref @struct + 20) = byte.MaxValue;
            *(ref @struct + 21) = byte.MaxValue;
            *(ref @struct + 22) = byte.MaxValue;
            *(ref @struct + 23) = byte.MaxValue;
            *(ref @struct + 24) = byte.MaxValue;
            *(ref @struct + 25) = byte.MaxValue;
            *(ref @struct + 26) = byte.MaxValue;
            *(ref @struct + 27) = byte.MaxValue;
            *(ref @struct + 28) = byte.MaxValue;
            *(ref @struct + 29) = byte.MaxValue;
            *(ref @struct + 30) = byte.MaxValue;
            *(ref @struct + 31) = byte.MaxValue;
            *(ref @struct + 32) = 0;
            *(ref @struct + 33) = 17;
            *(ref @struct + 34) = 34;
            *(ref @struct + 35) = 51;
            *(ref @struct + 36) = 68;
            *(ref @struct + 37) = 85;
            *(ref @struct + 38) = 102;
            *(ref @struct + 39) = 119;
            *(ref @struct + 40) = 136;
            *(ref @struct + 41) = 153;
            *(ref @struct + 42) = 170;
            *(ref @struct + 43) = 187;
            *(ref @struct + 44) = 204;
            *(ref @struct + 45) = 221;
            *(ref @struct + 46) = 238;
            *(ref @struct + 47) = 250;
            Struct28 struct2 = 68;
            *(ref struct2 + 1) = 86;
            *(ref struct2 + 2) = 68;
            *(ref struct2 + 3) = 75;
            *(ref struct2 + 4) = 101;
            *(ref struct2 + 5) = 121;
            *(ref struct2 + 6) = 51;
            *(ref struct2 + 7) = 50;
            *(ref struct2 + 8) = 32;
            *(ref struct2 + 9) = 101;
            *(ref struct2 + 10) = 120;
            *(ref struct2 + 11) = 116;
            *(ref struct2 + 12) = 114;
            *(ref struct2 + 13) = 97;
            *(ref struct2 + 14) = 99;
            *(ref struct2 + 15) = 116;
            Struct30 struct3;

            _Module.memset((void*)(&struct3), 0, 512U);

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct123_0 + 8) + 780, 180U);
            for (int i = 46; i < 93; i += 2)
            {
                *(ref struct3 + i) = *(*(ref _Module.struct123_0 + 8) + 780 + (i + 1));
                *(ref struct3 + (i + 1)) = *(*(ref _Module.struct123_0 + 8) + 780 + i);
            }
            Struct32 struct4;

            _Module.memset((void*)(&struct4), 0, 262144U);

            _Module.memcpy(ref struct4 + 172032, *(ref _Module.struct121_0 + 7172), 4096U);
            *(ref struct4 + 258048) = *(*(ref _Module.struct121_0 + 7172) + 258048);
            *(ref struct4 + 258049) = *(*(ref _Module.struct121_0 + 7172) + 258049);
            if (*(ref struct4 + 258050) != 229)
            {
                *(ref struct4 + 258050) = *(*(ref _Module.struct121_0 + 7172) + 258050);
                *(ref struct4 + 258051) = *(*(ref _Module.struct121_0 + 7172) + 258051);
            }
            *(ref struct4 + 126976) = *(*(ref _Module.struct121_0 + 7172) + 126976);
            Struct33 struct5;

            _Module.memset((void*)(&struct5), 255, 4096U);
            byte* ptr = ref struct4 + 11264;

            _Module.memcpy((void*)ptr, (void*)(&struct3), 512U);
            ptr = ref struct4 + 11776;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 8) + 568, 116U);
            ptr = ref struct4 + 12032;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 8) + 684, 96U);
            ptr = ref struct4 + 24512;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 8) + 2348, 32U);
            ptr = ref struct4 + 40960;

            _Module.memcpy((void*)ptr, (void*)(&struct5), 4096U);
            ptr = ref struct4 + 40960;

            _Module.memcpy((void*)ptr, (void*)(&@struct), 48U);
            ptr = ref struct4 + 41008;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 8) + 280, 16U);
            ptr = ref struct4 + 130816;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 8) + 2028, 224U);

            _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct4), 262144U);
            this.method_121();
        }

        // Token: 0x06000271 RID: 625 RVA: 0x0012A0D8 File Offset: 0x0012A0D8
        private void textBox11_TextChanged(object sender, EventArgs e)
        {
            if (string.Compare(this.textBox11.Text, "140F0F1011B5223D79587717FFD9EC3A") == 0)
            {

                _Module.pGstruct14_9 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, null, _Module.GetCurrentThreadId());
                MessageBox.Show("This key is from a bad LO83info file, try redumping.", "Spoofing iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_9);
                this.method_43();
            }
            if (string.Compare(this.textBox11.Text, "A79A2F73EC6B1F204BAECB0E8B763018") == 0)
            {

                _Module.pGstruct14_9 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, null, _Module.GetCurrentThreadId());
                MessageBox.Show("This key is from a bad LO83info file, try redumping.", "Spoofing iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_9);
                this.method_43();
            }
        }

        // Token: 0x06000272 RID: 626 RVA: 0x0012A188 File Offset: 0x0012A188
        private unsafe void method_119()
        {
            Struct91 @struct;

            _Module.memset((void*)(&@struct), 0, 112U);
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "LO83info file (*.key)|*.key|All Files (*.*)|*.*";
            openFileDialog.FileName = "[barcode].bin.key";
            openFileDialog.DefaultExt = ".key";
            openFileDialog.CheckFileExists = true;
            openFileDialog.CheckPathExists = true;
            openFileDialog.RestoreDirectory = false;
            if (this.bool_2)
            {
                openFileDialog.InitialDirectory = this.string_10;
            }
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(openFileDialog.FileName);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(fullPath);
                IntPtr value = intPtr;
                sbyte* pSbyte_ = (sbyte*)((void*)value);
                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_4));
                if (ptr == null)
                {

                    _Module.pGstruct14_9 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, null, _Module.GetCurrentThreadId());
                    MessageBox.Show(openFileDialog.FileName.ToString(), "Can't open file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_9);
                }
                else
                {

                    _Module.fseek(ptr, 0, 2);
                    int num = _Module.ftell(ptr);

                    _Module.rewind(ptr);
                    Struct95 struct2;
                    if (num != 304)
                    {

                        _Module.pGstruct14_9 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, null, _Module.GetCurrentThreadId());
                        MessageBox.Show("LO83info file should be 304 bytes", "Loading File", MessageBoxButtons.OK);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_9);

                        _Module.fclose(ptr);
                    }
                    else if (_Module.fread((void*)(&struct2), 304U, 1U, ptr) != 1)
                    {

                        _Module.pGstruct14_9 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, null, _Module.GetCurrentThreadId());
                        MessageBox.Show("LO83info file should be 304 bytes", "Loading File", MessageBoxButtons.OK);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_9);

                        _Module.fclose(ptr);
                    }
                    else if (_Module.memcmp((void*)(&@struct), (void*)(&struct2), 16U) == null)
                    {

                        _Module.pGstruct14_9 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, null, _Module.GetCurrentThreadId());
                        MessageBox.Show("LO83info file looks incorrect, try redumping.", "Loading File", MessageBoxButtons.OK);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_9);
                    }
                    else
                    {

                        _Module.memcpy(*(ref _Module.struct123_0 + 8) + 964, (void*)(&struct2), 304U);
                        this.method_120();
                    }
                }
            }
        }

        // Token: 0x06000273 RID: 627 RVA: 0x0012A378 File Offset: 0x0012A378
        private unsafe void method_120()
        {
            Struct34 @struct = 127;
            *(ref @struct + 1) = byte.MaxValue;
            *(ref @struct + 2) = byte.MaxValue;
            *(ref @struct + 3) = byte.MaxValue;
            *(ref @struct + 4) = byte.MaxValue;
            *(ref @struct + 5) = byte.MaxValue;
            *(ref @struct + 6) = byte.MaxValue;
            *(ref @struct + 7) = byte.MaxValue;
            *(ref @struct + 8) = byte.MaxValue;
            *(ref @struct + 9) = byte.MaxValue;
            *(ref @struct + 10) = byte.MaxValue;
            *(ref @struct + 11) = byte.MaxValue;
            *(ref @struct + 12) = byte.MaxValue;
            *(ref @struct + 13) = byte.MaxValue;
            *(ref @struct + 14) = byte.MaxValue;
            *(ref @struct + 15) = byte.MaxValue;
            *(ref @struct + 16) = byte.MaxValue;
            *(ref @struct + 17) = byte.MaxValue;
            *(ref @struct + 18) = byte.MaxValue;
            *(ref @struct + 19) = byte.MaxValue;
            *(ref @struct + 20) = byte.MaxValue;
            *(ref @struct + 21) = byte.MaxValue;
            *(ref @struct + 22) = byte.MaxValue;
            *(ref @struct + 23) = byte.MaxValue;
            *(ref @struct + 24) = byte.MaxValue;
            *(ref @struct + 25) = byte.MaxValue;
            *(ref @struct + 26) = byte.MaxValue;
            *(ref @struct + 27) = byte.MaxValue;
            *(ref @struct + 28) = byte.MaxValue;
            *(ref @struct + 29) = byte.MaxValue;
            *(ref @struct + 30) = byte.MaxValue;
            *(ref @struct + 31) = byte.MaxValue;
            *(ref @struct + 32) = 0;
            *(ref @struct + 33) = 17;
            *(ref @struct + 34) = 34;
            *(ref @struct + 35) = 51;
            *(ref @struct + 36) = 68;
            *(ref @struct + 37) = 85;
            *(ref @struct + 38) = 102;
            *(ref @struct + 39) = 119;
            *(ref @struct + 40) = 136;
            *(ref @struct + 41) = 153;
            *(ref @struct + 42) = 170;
            *(ref @struct + 43) = 187;
            *(ref @struct + 44) = 204;
            *(ref @struct + 45) = 221;
            *(ref @struct + 46) = 238;
            *(ref @struct + 47) = 250;
            Struct55 struct2 = 68;
            *(ref struct2 + 1) = 117;
            *(ref struct2 + 2) = 109;
            *(ref struct2 + 3) = 109;
            *(ref struct2 + 4) = 121;
            *(ref struct2 + 5) = 32;
            *(ref struct2 + 6) = 102;
            *(ref struct2 + 7) = 114;
            *(ref struct2 + 8) = 111;
            *(ref struct2 + 9) = 109;
            *(ref struct2 + 10) = 32;
            *(ref struct2 + 11) = 76;
            *(ref struct2 + 12) = 79;
            *(ref struct2 + 13) = 56;
            *(ref struct2 + 14) = 51;
            *(ref struct2 + 15) = 105;
            *(ref struct2 + 16) = 110;
            *(ref struct2 + 17) = 102;
            *(ref struct2 + 18) = 111;
            *(ref struct2 + 19) = 46;
            *(ref struct2 + 20) = 98;
            *(ref struct2 + 21) = 105;
            *(ref struct2 + 22) = 110;
            *(ref struct2 + 23) = 46;
            *(ref struct2 + 24) = 107;
            *(ref struct2 + 25) = 101;
            *(ref struct2 + 26) = 121;
            *(ref struct2 + 27) = 0;
            *(ref struct2 + 28) = 0;
            *(ref struct2 + 29) = 0;
            *(ref struct2 + 30) = 0;
            *(ref struct2 + 31) = 0;
            Struct30 struct3;

            _Module.memset((void*)(&struct3), 0, 512U);

            _Module.memcpy((void*)(&struct3), (void*)(&_Module.struct46_3), 180U);

            _Module.memcpy(ref struct3 + 20, *(ref _Module.struct123_0 + 8) + 1172, 20U);
            Struct30 struct4;

            _Module.memcpy((void*)(&struct4), (void*)(&struct3), 512U);
            for (int i = 46; i < 93; i += 2)
            {
                *(ref struct3 + i) = *(ref struct4 + (i + 1));
                *(ref struct3 + (i + 1)) = *(ref struct4 + i);
            }
            Struct32 struct5;

            _Module.memset((void*)(&struct5), 0, 262144U);
            Struct33 struct6;

            _Module.memset((void*)(&struct6), 255, 4096U);
            byte* ptr = ref struct5 + 11264;

            _Module.memcpy((void*)ptr, (void*)(&struct3), 512U);
            ptr = ref struct5 + 11776;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 8) + 1076, 96U);
            ptr = ref struct5 + 12032;

            _Module.memcpy((void*)ptr, (void*)(&_Module.struct29_26), 96U);
            ptr = ref struct5 + 24512;

            _Module.memcpy((void*)ptr, (void*)(&struct2), 32U);
            ptr = ref struct5 + 40960;

            _Module.memcpy((void*)ptr, (void*)(&struct6), 4096U);
            ptr = ref struct5 + 40960;

            _Module.memcpy((void*)ptr, (void*)(&@struct), 48U);
            ptr = ref struct5 + 41008;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 8) + 1252, 16U);
            ptr = ref struct5 + 130816;

            _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 8) + 1172, 80U);

            _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct5), 262144U);
            this.method_121();
        }

        // Token: 0x06000274 RID: 628 RVA: 0x0012A7DC File Offset: 0x0012A7DC
        private unsafe void method_121()
        {
            if (this.bool_2)
            {
                string text = this.string_10 + "\\Dummy.bin";
                for (int i = 1; i < 10; i++)
                {
                    if (!File.Exists(text))
                    {
                        IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                        IntPtr value = intPtr;
                        sbyte* pSbyte_ = (sbyte*)((void*)value);
                        GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                        if (ptr != null)
                        {

                            _Module.fwrite(*(ref _Module.struct121_0 + 7172), 262144U, 1U, ptr);

                            _Module.fclose(ptr);
                            this.textBox6.AppendText("\r\n" + "Dummy.bin file saved to " + text + "\r\n");
                            this.method_37(text, 0, *(ref _Module.struct121_0 + 7172));
                            return;
                        }
                    }
                    else
                    {
                        text = this.string_10 + "\\Dummy_" + Convert.ToString(i) + ".bin";
                    }
                }
            }
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
            saveFileDialog.DefaultExt = ".bin";
            saveFileDialog.FileName = "Dummy.bin";
            saveFileDialog.RestoreDirectory = false;
            if (this.bool_2)
            {
                saveFileDialog.InitialDirectory = this.string_10;
            }
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                string fileName = Path.GetFileName(saveFileDialog.FileName);
                IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(fullPath);
                IntPtr value2 = intPtr2;
                sbyte* pSbyte_2 = (sbyte*)((void*)value2);
                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_2, (sbyte*)(&_Module.struct18_5));
                if (ptr == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {

                    _Module.fwrite(*(ref _Module.struct121_0 + 7172), 262144U, 1U, ptr);

                    _Module.fclose(ptr);
                    this.textBox6.AppendText("\r\n" + "Dummy.bin file saved to " + fileName + "\r\n");
                    this.method_37(fullPath, 0, *(ref _Module.struct121_0 + 7172));
                }
            }
            else
            {
                this.method_37("", 0, *(ref _Module.struct121_0 + 7172));
            }
        }

        // Token: 0x06000275 RID: 629 RVA: 0x003C449C File Offset: 0x0030C49C
        private unsafe void method_122()
        {
            uint selectedIndex = (uint)this.comboBox10.SelectedIndex;
            Struct84 @struct;

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct10_22), Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex * 324U)));
            this.pVoid_0 = _Module.CreateFileA((sbyte*)(&@struct), -1073741824, 0, null, 3, 1073741952, null);
            if (this.pVoid_0 == -1)
            {
                this.textBox6.AppendText("Failed to open com port " + Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex * 324U)) + "\r\n");
            }
            else if (_Module.SetCommMask(this.pVoid_0, 256) == null)
            {
                this.textBox6.AppendText("SetCommMask failed with error " + Convert.ToString(_Module.GetLastError()) + "\r\n");
            }
            else
            {
                GStruct95 gstruct;
                *(ref gstruct + 16) = _Module.CreateEventA(null, 1, 0, null);
                gstruct = 0;
                *(ref gstruct + 4) = 0;
                *(ref gstruct + 8) = 0;
                *(ref gstruct + 12) = 0;
                if (*(ref gstruct + 16) == 0)
                {

                    _Module._assert((sbyte*)(&_Module.struct24_8), (sbyte*)(&_Module.struct96_0), 20114U);
                }
                uint num;
                if (_Module.WaitCommEvent(this.pVoid_0, (uint*)(&num), &gstruct) != null)
                {
                    if ((num & 256U) != 0U)
                    {
                        this.textBox6.AppendText("Switch Detected, Sending DVDKey_32" + "\r\n");
                        if (this.pVoid_0 != null)
                        {

                            _Module.CloseHandle(this.pVoid_0);
                        }
                    }
                }
                else
                {
                    uint lastError = _Module.GetLastError();
                    if (997U == lastError)
                    {
                        this.textBox6.AppendText("USB Xtractor switch enabled" + "\r\n");
                        Application.DoEvents();

                        _Module.WaitForSingleObject(*(ref gstruct + 16), -1);
                        if ((num & 256U) != 0U)
                        {
                            this.textBox6.AppendText("USB Xtractor switch Detected, Sending DVDKey_32" + "\r\n");

                            _Module.CloseHandle(this.pVoid_0);
                            GStruct11* ptr = _Module.FindWindowExA(this.pGstruct11_0, null, null, (sbyte*)(&_Module.struct16_1));
                            IntPtr intPtr = Marshal.StringToHGlobalAnsi("DoDVDKey");
                            IntPtr value = intPtr;

                            _Module.SendMessageA(ptr, 12U, 0U, (void*)value);
                        }
                        else
                        {
                            this.textBox6.AppendText("USB Xtractor switch disabled" + "\r\n");
                            while (this.pVoid_0 != null)
                            {

                                _Module.CloseHandle(this.pVoid_0);
                            }
                        }
                    }
                    else
                    {
                        this.textBox6.AppendText("Wait failed with error " + Convert.ToString(_Module.GetLastError()) + "\r\n");
                    }
                }
            }
        }

        // Token: 0x06000276 RID: 630 RVA: 0x0012AC6C File Offset: 0x0012AC6C
        private void method_123()
        {
            Thread thread = new Thread(new ThreadStart(this.method_122));
            thread.Start();
        }

        // Token: 0x06000277 RID: 631 RVA: 0x0012AC94 File Offset: 0x0012AC94
        private unsafe void method_124()
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            if (this.pVoid_0 != null)
            {

                _Module.SetCommMask(this.pVoid_0, 64);
            }
            if (this.checkBox9.CheckState == CheckState.Checked && *(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 2)
            {
                if (this.method_146() == 1)
                {
                    this.textBox6.AppendText("USB Xtractor Found on " + Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex * 324)) + "\r\n");
                    this.method_123();
                }
                else
                {
                    this.textBox6.AppendText(Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex * 324)) + " could not be opened" + "\r\n");
                }
            }
        }

        // Token: 0x06000278 RID: 632 RVA: 0x0012AD5C File Offset: 0x0012AD5C
        private unsafe void tabControl5_SelectedIndexChanged(object sender, EventArgs e)
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            uint count = (uint)this.comboBox1.Items.Count;
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            if (this.tabControl5.SelectedTab != this.DVDKey32 && this.pVoid_0 != null)
            {

                _Module.SetCommMask(this.pVoid_0, 64);
            }
            if (this.tabControl5.SelectedTab == this.Hitachi && this.radioButton17.Checked && num == 0 && count != 0U && !this.bool_9)
            {
                this.method_424(1);
                this.bool_9 = true;

                _Module.Sleep(10);
                this.method_424(5);

                _Module.Sleep(25);
                this.method_424(7);
            }
        }

        // Token: 0x06000279 RID: 633 RVA: 0x0012AE18 File Offset: 0x0012AE18
        private unsafe int method_125(byte byte_0)
        {
            Struct77 @struct = 79;
            *(ref @struct + 1) = 75;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 48;
            *(ref @struct + 4) = 49;
            *(ref @struct + 5) = 0;
            GStruct95 gstruct = 0;
            initblk(ref gstruct + 4, 0, 16);
            GStruct95 gstruct2 = 0;
            initblk(ref gstruct2 + 4, 0, 16);
            GStruct96 gstruct3 = 0;
            initblk(ref gstruct3 + 4, 0, 24);
            gstruct3 = 28;
            uint selectedIndex = (uint)this.comboBox10.SelectedIndex;
            *(ref @struct + 3) = (byte)(((byte_0 & 240) >> 4) + 48);
            *(ref @struct + 4) = (byte_0 & 15) + 48;
            if (byte_0 == 1)
            {
                this.label135.Text = "xt2: Opening";
                Application.DoEvents();
            }
            if (byte_0 == 2)
            {
                this.label135.Text = "xt2: Closing";
                Application.DoEvents();
            }
            if (byte_0 == 3)
            {
                this.label135.Text = "xt2: Half Tray";
                Application.DoEvents();
            }
            if (byte_0 == 10)
            {
                *(ref @struct + 4) = 65;
                this.label135.Text = "xt2: Power Off";
                Application.DoEvents();
            }
            if (byte_0 == 11)
            {
                *(ref @struct + 4) = 66;
                this.label135.Text = "xt2: Power On";
                Application.DoEvents();
            }
            if (byte_0 == 12)
            {
                *(ref @struct + 4) = 67;
                this.label135.Text = "xt2: Power Cycle";
                Application.DoEvents();
            }
            Thread thread = new Thread(new ThreadStart(this.method_165));
            thread.Start();
            Struct84 struct2;

            _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct10_22), Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex * 324U)));
            void* ptr = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 0, null, 3, 1073741952, null);
            int result;
            if (ptr == -1)
            {
                this.textBox6.AppendText("Failed to open com port " + Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex * 324U)) + "\r\n");
                result = 0;
            }
            else
            {

                _Module.GetCommState(ptr, &gstruct3);
                *(ref gstruct3 + 4) = 19200;
                *(ref gstruct3 + 18) = 8;
                *(ref gstruct3 + 19) = 0;
                *(ref gstruct3 + 20) = 0;
                *(ref gstruct3 + 8) = ((*(ref gstruct3 + 8) & -49) | 16);
                *(ref gstruct3 + 8) = ((*(ref gstruct3 + 8) & -12289) | 4096);
                *(ref gstruct3 + 8) = (*(ref gstruct3 + 8) & -257);
                *(ref gstruct3 + 8) = (*(ref gstruct3 + 8) & -513);

                _Module.SetCommState(ptr, &gstruct3);
                GStruct94 gstruct4 = 100;
                *(ref gstruct4 + 8) = 10;
                *(ref gstruct4 + 4) = 100;
                *(ref gstruct4 + 16) = 10;
                *(ref gstruct4 + 12) = 100;

                _Module.SetCommTimeouts(ptr, &gstruct4);
                Struct63 struct3;

                _Module.memset((void*)(&struct3), 0, 4U);
                Struct77 struct4;

                _Module.memset((void*)(&struct4), 0, 6U);
                struct3 = 64;
                *(ref struct3 + 1) = 85;
                *(ref struct3 + 2) = byte_0;
                *(ref struct3 + 3) = 64;
                *(ref gstruct + 16) = _Module.CreateEventA(null, 1, 0, null);
                *(ref gstruct2 + 16) = _Module.CreateEventA(null, 1, 0, null);
                uint num;

                _Module.WriteFile(ptr, (void*)(&struct3), 4, (uint*)(&num), &gstruct2);

                _Module.GetOverlappedResult(ptr, &gstruct2, (uint*)(&num), 1);
                uint num2;

                _Module.ReadFile(ptr, (void*)(&struct4), 6, (uint*)(&num2), &gstruct);

                _Module.GetOverlappedResult(ptr, &gstruct, (uint*)(&num2), 1);
                if (_Module.memcmp((void*)(&struct4), (void*)(&@struct), 6U) == null)
                {
                    if (ptr != -1)
                    {

                        _Module.CloseHandle(ptr);
                    }
                    result = 1;
                }
                else if (_Module.memcmp(ref struct4 + 1, (void*)(&@struct), 5U) == null)
                {
                    if (ptr != -1)
                    {

                        _Module.CloseHandle(ptr);
                    }
                    result = 1;
                }
                else
                {
                    if (ptr != -1)
                    {

                        _Module.CloseHandle(ptr);
                    }
                    result = 0;
                }
            }
            return result;
        }

        // Token: 0x0600027A RID: 634 RVA: 0x0012B144 File Offset: 0x0012B144
        private void menuItem_25_Click(object sender, EventArgs e)
        {
            this.method_126();
        }

        // Token: 0x0600027B RID: 635 RVA: 0x0012B158 File Offset: 0x0012B158
        private void menuItem_26_Click(object sender, EventArgs e)
        {
            this.method_127();
        }

        // Token: 0x0600027C RID: 636 RVA: 0x0012B16C File Offset: 0x0012B16C
        private void menuItem_27_Click(object sender, EventArgs e)
        {
            this.method_128();
        }

        // Token: 0x0600027D RID: 637 RVA: 0x0012B180 File Offset: 0x0012B180
        private void menuItem_28_Click(object sender, EventArgs e)
        {
            this.method_129();
        }

        // Token: 0x0600027E RID: 638 RVA: 0x0012B194 File Offset: 0x0012B194
        private void menuItem_30_Click(object sender, EventArgs e)
        {
            this.method_130();
        }

        // Token: 0x0600027F RID: 639 RVA: 0x0012B1A8 File Offset: 0x0012B1A8
        private void menuItem_31_Click(object sender, EventArgs e)
        {
            this.method_131();
        }

        // Token: 0x06000280 RID: 640 RVA: 0x0012B1BC File Offset: 0x0012B1BC
        private void button43_Click(object sender, EventArgs e)
        {
            this.method_129();
        }

        // Token: 0x06000281 RID: 641 RVA: 0x0012B1D0 File Offset: 0x0012B1D0
        private void button44_Click(object sender, EventArgs e)
        {
            this.method_130();
        }

        // Token: 0x06000282 RID: 642 RVA: 0x0012B1E4 File Offset: 0x0012B1E4
        private void button45_Click(object sender, EventArgs e)
        {
            this.method_131();
        }

        // Token: 0x06000283 RID: 643 RVA: 0x0012B1F8 File Offset: 0x0012B1F8
        private void button46_Click(object sender, EventArgs e)
        {
            this.method_126();
        }

        // Token: 0x06000284 RID: 644 RVA: 0x0012B20C File Offset: 0x0012B20C
        private void button47_Click(object sender, EventArgs e)
        {
            this.method_127();
        }

        // Token: 0x06000285 RID: 645 RVA: 0x0012B220 File Offset: 0x0012B220
        private void button48_Click(object sender, EventArgs e)
        {
            this.method_128();
        }

        // Token: 0x06000286 RID: 646 RVA: 0x0012B234 File Offset: 0x0012B234
        private void menuItem_35_Click(object sender, EventArgs e)
        {
            string text = null;
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            if (registryKey.GetValue("HalfTrayDelay") != null)
            {
                text = registryKey.GetValue("HalfTrayDelay").ToString();
            }
            else if (registryKey.GetValue("HalfTrayDelay") == null)
            {
                registryKey.SetValue("HalfTrayDelay", "250");
                text = "250";
            }
            text = Convert.ToString(Convert.ToInt32(text) + 50);
            registryKey.SetValue("HalfTrayDelay", text);
            this.menuItem_34.Text = text + "mS";
        }

        // Token: 0x06000287 RID: 647 RVA: 0x0012B2CC File Offset: 0x0012B2CC
        private void menuItem_36_Click(object sender, EventArgs e)
        {
            string text = null;
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            if (registryKey.GetValue("HalfTrayDelay") != null)
            {
                text = registryKey.GetValue("HalfTrayDelay").ToString();
            }
            else if (registryKey.GetValue("HalfTrayDelay") == null)
            {
                registryKey.SetValue("HalfTrayDelay", "250");
                text = "250";
            }
            text = Convert.ToString(Convert.ToInt32(text) - 50);
            registryKey.SetValue("HalfTrayDelay", text);
            this.menuItem_34.Text = text + "mS";
        }

        // Token: 0x06000288 RID: 648 RVA: 0x0012B364 File Offset: 0x0012B364
        private unsafe int method_126()
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            int result;
            if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_125(33);
                this.method_125(1);
                this.method_125(32);
                result = 1;
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_164(1U);
                result = 1;
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 9 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_135();
                this.method_143();
                this.method_138();
                result = 1;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        // Token: 0x06000289 RID: 649 RVA: 0x0012B424 File Offset: 0x0012B424
        private unsafe int method_127()
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            int result;
            if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_125(33);
                this.method_125(2);
                this.method_125(32);
                result = 1;
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_164(2U);
                result = 1;
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 9 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_135();
                this.method_144();
                this.method_138();
                result = 1;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        // Token: 0x0600028A RID: 650 RVA: 0x0012B4E4 File Offset: 0x0012B4E4
        private unsafe int method_128()
        {
            string value = null;
            int selectedIndex = this.comboBox10.SelectedIndex;
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            if (registryKey.GetValue("HalfTrayDelay") != null)
            {
                value = registryKey.GetValue("HalfTrayDelay").ToString();
            }
            else if (registryKey.GetValue("HalfTrayDelay") == null)
            {
                registryKey.SetValue("HalfTrayDelay", "250");
                value = "250";
            }
            int result;
            if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_125(33);
                this.method_125(1);

                _Module.Sleep(Convert.ToInt32(value));
                this.method_125(12);
                this.method_125(32);
                result = 1;
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_164(1U);

                _Module.Sleep(Convert.ToInt32(value));
                this.method_164(10U);

                _Module.Sleep(250);
                this.method_164(11U);
                result = 1;
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 9 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_135();
                this.method_143();

                _Module.Sleep(Convert.ToInt32(value));
                this.method_142();

                _Module.Sleep(250);
                this.method_141();
                this.method_138();
                result = 1;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        // Token: 0x0600028B RID: 651 RVA: 0x0012B658 File Offset: 0x0012B658
        private unsafe int method_129()
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            int result;
            if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_125(33);
                this.method_125(11);
                this.method_125(32);
                result = 1;
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_164(11U);
                result = 1;
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 9 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_135();
                this.method_141();
                this.method_138();
                result = 1;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        // Token: 0x0600028C RID: 652 RVA: 0x0012B718 File Offset: 0x0012B718
        private unsafe int method_130()
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            int result;
            if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_125(33);
                this.method_125(10);
                this.method_125(32);
                result = 1;
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_164(10U);
                result = 1;
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 9 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_135();
                this.method_142();
                this.method_138();
                result = 1;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        // Token: 0x0600028D RID: 653 RVA: 0x0012B7D8 File Offset: 0x0012B7D8
        private unsafe int method_131()
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            int result;
            if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_125(33);
                this.method_125(12);
                this.method_125(32);
                result = 1;
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_164(10U);

                _Module.Sleep(250);
                this.method_164(11U);
                result = 1;
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 9 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_135();
                this.method_142();

                _Module.Sleep(250);
                this.method_141();
                this.method_138();
                result = 1;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        // Token: 0x0600028E RID: 654 RVA: 0x0012B8BC File Offset: 0x0012B8BC
        private unsafe void method_132()
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
            {

                _Module.Sleep(250);
                this.method_125(33);
                this.method_125(11);
                this.method_125(32);
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
            {

                _Module.Sleep(250);
                this.method_164(11U);
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 9 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_135();

                _Module.Sleep(250);
                this.method_141();
                this.method_138();
            }
        }

        // Token: 0x0600028F RID: 655 RVA: 0x0012B994 File Offset: 0x0012B994
        private unsafe void method_133()
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 8 && this.checkBox9.CheckState == CheckState.Checked)
            {

                _Module.Sleep(250);
                this.method_125(33);
                this.method_125(10);

                _Module.Sleep(500);
                this.method_125(11);
                this.method_125(32);
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 6 && this.checkBox9.CheckState == CheckState.Checked)
            {
                this.method_164(10U);

                _Module.Sleep(500);
                this.method_164(11U);
            }
            else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 9 && this.checkBox9.CheckState == CheckState.Checked)
            {

                _Module.Sleep(250);
                this.method_135();
                this.method_142();

                _Module.Sleep(500);
                this.method_141();
                this.method_138();
            }
        }

        // Token: 0x06000290 RID: 656 RVA: 0x0012BA98 File Offset: 0x0012BA98
        private unsafe int method_134()
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            return (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) != 8 || this.checkBox9.CheckState != CheckState.Checked) ? ((*(ref _Module.struct122_0 + selectedIndex * 324 + 8) != 6 || this.checkBox9.CheckState != CheckState.Checked) ? ((*(ref _Module.struct122_0 + selectedIndex * 324 + 8) != 9 || this.checkBox9.CheckState != CheckState.Checked) ? 0 : 1) : 1) : 1;
        }

        // Token: 0x06000291 RID: 657 RVA: 0x0012BB24 File Offset: 0x0012BB24
        private unsafe int method_135()
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 9)
            {
                Struct84 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct10_22), Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex * 324)));
                this.pVoid_1 = _Module.CreateFileA((sbyte*)(&@struct), -1073741824, 0, null, 3, 1073741952, null);
            }
            int result;
            if (this.pVoid_1 == -1)
            {
                this.textBox6.AppendText("Failed to open com port " + Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex * 324)) + "\r\n");
                result = 0;
            }
            else
            {
                result = 1;
            }
            return result;
        }

        // Token: 0x06000292 RID: 658 RVA: 0x0012BBD0 File Offset: 0x0012BBD0
        private void method_136()
        {

            _Module.smethod_135(this.pVoid_1, 1);
            this.method_141();
            this.method_139();
        }

        // Token: 0x06000293 RID: 659 RVA: 0x0012BBF8 File Offset: 0x0012BBF8
        private void method_137()
        {

            _Module.smethod_135(this.pVoid_1, 0);
            this.method_142();
            this.method_140();
        }

        // Token: 0x06000294 RID: 660 RVA: 0x0012BC20 File Offset: 0x0012BC20
        private void method_138()
        {
            if (this.pVoid_1 != null)
            {

                _Module.CloseHandle(this.pVoid_1);
            }
            this.pVoid_1 = null;
        }

        // Token: 0x06000295 RID: 661 RVA: 0x0012BC48 File Offset: 0x0012BC48
        private unsafe void method_139()
        {
            byte b;

            _Module.smethod_139(this.pVoid_1, &b);
            if (b == 0)
            {
                b = 0;
            }
            else if (b == 1)
            {
                b = 0;
            }
            else if (b == 2)
            {
                b = 2;
            }
            else if (b == 3)
            {
                b = 2;
            }

            _Module.smethod_138(this.pVoid_1, b);
        }

        // Token: 0x06000296 RID: 662 RVA: 0x0012BC90 File Offset: 0x0012BC90
        private unsafe void method_140()
        {
            byte b;

            _Module.smethod_139(this.pVoid_1, &b);
            if (b == 0)
            {
                b = 1;
            }
            else if (b == 1)
            {
                b = 1;
            }
            else if (b == 2)
            {
                b = 3;
            }
            else if (b == 3)
            {
                b = 3;
            }

            _Module.smethod_138(this.pVoid_1, b);
        }

        // Token: 0x06000297 RID: 663 RVA: 0x0012BCD8 File Offset: 0x0012BCD8
        private unsafe void method_141()
        {
            byte b;

            _Module.smethod_139(this.pVoid_1, &b);
            if (b == 0)
            {
                b = 0;
            }
            else if (b == 1)
            {
                b = 1;
            }
            else if (b == 2)
            {
                b = 0;
            }
            else if (b == 3)
            {
                b = 1;
            }

            _Module.smethod_138(this.pVoid_1, b);
        }

        // Token: 0x06000298 RID: 664 RVA: 0x0012BD20 File Offset: 0x0012BD20
        private unsafe void method_142()
        {
            byte b;

            _Module.smethod_139(this.pVoid_1, &b);
            if (b == 0)
            {
                b = 2;
            }
            else if (b == 1)
            {
                b = 3;
            }
            else if (b == 2)
            {
                b = 2;
            }
            else if (b == 3)
            {
                b = 3;
            }

            _Module.smethod_138(this.pVoid_1, b);
        }

        // Token: 0x06000299 RID: 665 RVA: 0x0012BD68 File Offset: 0x0012BD68
        private void method_143()
        {

            _Module.smethod_137(this.pVoid_1, 1);
        }

        // Token: 0x0600029A RID: 666 RVA: 0x0012BD84 File Offset: 0x0012BD84
        private void method_144()
        {

            _Module.smethod_137(this.pVoid_1, 0);
        }

        // Token: 0x0600029B RID: 667 RVA: 0x0012BDA0 File Offset: 0x0012BDA0
        private unsafe int method_145()
        {
            this.int_0 = 0;
            int num = _Module.smethod_118((GStruct99*)(&_Module.struct122_0), 0, 32);

            _Module.smethod_131();
            this.comboBox10.Items.Clear();
            int result;
            if (num == 0)
            {
                result = 0;
            }
            else
            {
                for (int i = 0; i < num; i++)
                {
                    if (*(ref _Module.struct122_0 + i * 324 + 8) == 7)
                    {
                        *(ref _Module.struct122_0 + i * 324 + 8) = 7;
                    }
                    else if (*(ref _Module.struct122_0 + i * 324 + 8) == 6)
                    {
                        *(ref _Module.struct122_0 + i * 324 + 8) = 6;
                    }
                    else if (*(ref _Module.struct122_0 + i * 324 + 8) == 9)
                    {
                        *(ref _Module.struct122_0 + i * 324 + 8) = 9;
                    }
                    else if (*(ref _Module.struct122_0 + i * 324 + 8) == 4)
                    {
                        if (*(ref _Module.struct122_0 + i * 324 + 320) == 2)
                        {
                            for (int j = 0; j < num; j++)
                            {
                                if (*(ref _Module.struct122_0 + j * 324 + 8) == 7 && *(ref _Module.struct122_0 + i * 324 + 316) == *(ref _Module.struct122_0 + j * 324 + 316))
                                {
                                    *(ref _Module.struct122_0 + i * 324 + 8) = 6;
                                }
                            }
                        }
                        else if (_Module.memcmp(ref _Module.struct122_0 + i * 324 + 193, (void*)(&_Module.struct66_1), 19U) == null)
                        {
                            *(ref _Module.struct122_0 + i * 324 + 8) = 5;
                        }
                        else if (_Module.memcmp(ref _Module.struct122_0 + i * 324 + 193, (void*)(&_Module.struct13_2), 20U) == null)
                        {
                            *(ref _Module.struct122_0 + i * 324 + 8) = 5;
                        }
                        else
                        {
                            *(ref _Module.struct122_0 + i * 324 + 8) = 0;
                        }
                    }
                    else if (_Module.memcmp(ref _Module.struct122_0 + i * 324 + 193, (void*)(&_Module.struct15_6), 12U) == null)
                    {
                        *(ref _Module.struct122_0 + i * 324 + 8) = 2;
                    }
                    else if (_Module.memcmp(ref _Module.struct122_0 + i * 324 + 193, (void*)(&_Module.struct65_9), 14U) == null)
                    {
                        *(ref _Module.struct122_0 + i * 324 + 8) = 8;
                    }
                    else if (_Module.memcmp(ref _Module.struct122_0 + i * 324 + 193, (void*)(&_Module.struct15_7), 12U) == null)
                    {
                        *(ref _Module.struct122_0 + i * 324 + 8) = 3;
                    }
                    else if (_Module.memcmp(ref _Module.struct122_0 + i * 324 + 193, (void*)(&_Module.struct74_4), 10U) == null)
                    {
                        *(ref _Module.struct122_0 + i * 324 + 8) = 20;
                    }
                }
                for (int i = 0; i < num; i++)
                {
                    this.comboBox10.Items.Add(Convert.ToString(new string(ref _Module.struct122_0 + i * 324)));
                }
                result = num;
            }
            return result;
        }

        // Token: 0x0600029C RID: 668 RVA: 0x0012C090 File Offset: 0x0012C090
        private unsafe int method_146()
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            string s = Convert.ToString(this.comboBox10.Text);
            IntPtr intPtr = Marshal.StringToHGlobalAnsi(s);
            IntPtr value = intPtr;
            sbyte* ptr = (sbyte*)((void*)value);
            Struct84 @struct;

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct10_22), ptr);
            this.label103.Text = "Checking.";
            Application.DoEvents();
            void* ptr2 = _Module.CreateFileA((sbyte*)(&@struct), -1073741824, 0, null, 3, 1073741952, null);
            int result;
            if (ptr2 == -1)
            {
                this.label103.Text = "Checking..";
                Application.DoEvents();
                this.label103.Text = "Checking...";
                Application.DoEvents();
                *(ref _Module.struct122_0 + selectedIndex * 324 + 72) = 0;

                _Module.CloseHandle(ptr2);
                this.label103.Text = "Not available";
                result = 0;
            }
            else
            {
                this.label103.Text = "Checking..";
                Application.DoEvents();
                this.label103.Text = "Checking...";
                Application.DoEvents();
                *(ref _Module.struct122_0 + selectedIndex * 324 + 72) = 1;
                if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 10)
                {
                    this.label103.Text = "Fax Modem Detected:";
                    Application.DoEvents();

                    _Module.Sleep(1000);
                    this.label103.Text = "Auto-Dialing 911..";
                    Application.DoEvents();

                    _Module.Sleep(500);
                    this.label103.Text = "Auto-Dialing 911....";
                    Application.DoEvents();

                    _Module.Sleep(500);
                    this.label103.Text = "Auto-Dialing 911......";
                    Application.DoEvents();

                    _Module.Sleep(500);
                }

                _Module.CloseHandle(ptr2);
                this.label103.Text = "Ready";
                result = 1;
            }
            return result;
        }

        // Token: 0x0600029D RID: 669 RVA: 0x0012C250 File Offset: 0x0012C250
        private unsafe int method_147()
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            string s = Convert.ToString(this.comboBox10.Text);
            IntPtr intPtr = Marshal.StringToHGlobalAnsi(s);
            IntPtr value = intPtr;
            sbyte* ptr = (sbyte*)((void*)value);
            Struct84 @struct;

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct10_22), ptr);
            void* ptr2 = _Module.CreateFileA((sbyte*)(&@struct), -1073741824, 0, null, 3, 1073741952, null);
            int result;
            if (ptr2 == -1)
            {

                _Module.CloseHandle(ptr2);
                *(ref _Module.struct122_0 + selectedIndex * 324 + 72) = 0;
                result = 0;
            }
            else
            {

                _Module.CloseHandle(ptr2);
                *(ref _Module.struct122_0 + selectedIndex * 324 + 72) = 1;
                result = 1;
            }
            return result;
        }

        // Token: 0x0600029E RID: 670 RVA: 0x0012C2F0 File Offset: 0x0012C2F0
        private void comboBox10_SelectedIndexChanged(object sender, EventArgs e)
        {
            this.label135.Text = "";
            this.method_148();
        }

        // Token: 0x0600029F RID: 671 RVA: 0x0012C314 File Offset: 0x0012C314
        private unsafe void method_148()
        {
            string strA = null;
            if (this.comboBox10.Items.Count == 0)
            {
                this.label102.Text = new string((sbyte*)(&_Module.struct19_0));
                this.label103.Text = new string((sbyte*)(&_Module.struct19_0));
                this.label104.Text = new string((sbyte*)(&_Module.struct19_0));
                this.label105.Text = new string((sbyte*)(&_Module.struct19_0));
                this.checkBox9.Enabled = false;
            }
            else
            {
                int selectedIndex = this.comboBox10.SelectedIndex;
                if (this.pVoid_0 != null)
                {

                    _Module.SetCommMask(this.pVoid_0, 64);
                }
                RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
                if (registryKey.GetValue(Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex * 324))) != null)
                {
                    strA = registryKey.GetValue(Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex * 324))).ToString();
                }
                registryKey.Close();
                if (string.Compare(strA, "XT2") == 0)
                {
                    *(ref _Module.struct122_0 + selectedIndex * 324 + 8) = 8;
                }
                else if (string.Compare(strA, "CK3CP") == 0)
                {
                    *(ref _Module.struct122_0 + selectedIndex * 324 + 8) = 6;
                }
                this.label102.Text = Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex * 324));
                if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 0)
                {
                    this.label104.Text = new string((sbyte*)(&_Module.struct25_10));
                    this.checkBox9.Enabled = false;
                }
                else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 1)
                {
                    this.label104.Text = new string((sbyte*)(&_Module.struct24_9));
                    this.checkBox9.Enabled = false;
                }
                else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 2)
                {
                    this.label104.Text = new string((sbyte*)(&_Module.struct97_0));
                    this.checkBox9.Enabled = true;
                }
                else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 3)
                {
                    this.label104.Text = new string((sbyte*)(&_Module.struct97_1));
                    this.checkBox9.Enabled = false;
                }
                else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 4)
                {
                    this.label104.Text = new string((sbyte*)(&_Module.struct98_0));
                    this.checkBox9.Enabled = false;
                }
                else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 5)
                {
                    this.label104.Text = new string((sbyte*)(&_Module.struct1_4));
                    this.checkBox9.Enabled = false;
                }
                else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 6)
                {
                    this.label104.Text = new string((sbyte*)(&_Module.struct66_2));
                    this.checkBox9.Enabled = true;
                }
                else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 7)
                {
                    this.label104.Text = new string((sbyte*)(&_Module.struct66_3));
                    this.checkBox9.Enabled = false;
                }
                else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 8)
                {
                    this.label104.Text = new string((sbyte*)(&_Module.struct99_0));
                    this.checkBox9.Enabled = true;
                }
                else if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 9)
                {
                    this.label104.Text = new string((sbyte*)(&_Module.struct15_8));
                    this.checkBox9.Enabled = true;
                }
                this.label105.Text = Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex * 324 + 12));
                if (this.tabControl5.SelectedTab == this.DVDKey32)
                {
                    this.method_146();
                    if (this.checkBox9.CheckState == CheckState.Checked)
                    {
                        if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 2)
                        {
                            this.textBox6.AppendText("USB Xtractor Found on " + Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex * 324)) + "\r\n");
                            this.method_123();
                        }
                        if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 6)
                        {
                            this.method_166(17U);
                        }
                        if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 9)
                        {
                            this.method_150();
                            this.label135.Text = "CK3i: Enabled";
                            Thread thread = new Thread(new ThreadStart(this.method_165));
                            thread.Start();
                            if (this.method_135() == 1)
                            {
                                this.method_136();
                                this.method_138();
                            }
                        }
                        if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 8)
                        {
                            this.label135.Text = "xt2: Enabled";
                            Thread thread2 = new Thread(new ThreadStart(this.method_165));
                            thread2.Start();
                        }
                    }
                }
            }
        }

        // Token: 0x060002A0 RID: 672 RVA: 0x003C4700 File Offset: 0x0030C700
        private unsafe void button8_Click(object sender, EventArgs e)
        {
            if (this.method_145() != 0)
            {
                this.textBox6.AppendText("Found " + Convert.ToString(this.comboBox10.Items.Count) + " Com Ports.");
                this.textBox6.AppendText("\r\n");
                if (Convert.ToInt16(this.string_12) == -1 && this.comboBox10.Items.Count > 0)
                {
                    this.comboBox10.SelectedIndex = 0;
                    this.method_148();
                }
                else if ((int)Convert.ToInt16(this.string_12) > this.comboBox10.Items.Count - 1)
                {
                    this.comboBox10.SelectedIndex = 0;
                    this.method_148();
                }
                else
                {
                    this.comboBox10.SelectedIndex = 0;
                    this.comboBox10.SelectedIndex = (int)Convert.ToInt16(this.string_12);
                }
            }
            else
            {
                this.comboBox10.Text = new string((sbyte*)(&_Module.struct19_0));
                this.label102.Text = new string((sbyte*)(&_Module.struct19_0));
                this.label103.Text = new string((sbyte*)(&_Module.struct19_0));
                this.label104.Text = new string((sbyte*)(&_Module.struct19_0));
                this.label105.Text = new string((sbyte*)(&_Module.struct19_0));
                this.checkBox9.Enabled = false;

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No comports were found during enumeration!", "JungleFlasher", MessageBoxButtons.OK);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.textBox6.AppendText("Found 0 Com Ports." + "\r\n");
            }
        }

        // Token: 0x060002A1 RID: 673 RVA: 0x003C48BC File Offset: 0x0030C8BC
        private unsafe void method_149(object sender, EventArgs e)
        {
            if (this.method_145() != 0)
            {
                this.textBox6.AppendText("Found " + Convert.ToString(this.comboBox10.Items.Count) + " Com Ports.");
                this.textBox6.AppendText("\r\n");
                if (Convert.ToInt16(this.string_12) == -1 && this.comboBox10.Items.Count > 0)
                {
                    this.comboBox10.SelectedIndex = 0;
                    this.method_148();
                }
                else if ((int)Convert.ToInt16(this.string_12) > this.comboBox10.Items.Count - 1)
                {
                    this.comboBox10.SelectedIndex = 0;
                    this.method_148();
                }
                else
                {
                    this.comboBox10.SelectedIndex = 0;
                    this.comboBox10.SelectedIndex = (int)Convert.ToInt16(this.string_12);
                }
            }
            else
            {
                this.comboBox10.Text = new string((sbyte*)(&_Module.struct19_0));
                this.label102.Text = new string((sbyte*)(&_Module.struct19_0));
                this.label103.Text = new string((sbyte*)(&_Module.struct19_0));
                this.label104.Text = new string((sbyte*)(&_Module.struct19_0));
                this.label105.Text = new string((sbyte*)(&_Module.struct19_0));
                this.checkBox9.Enabled = false;
                this.textBox6.AppendText("Found 0 Com Ports." + "\r\n");
            }
        }

        // Token: 0x060002A2 RID: 674 RVA: 0x003C4A38 File Offset: 0x0030CA38
        private unsafe void checkBox9_CheckedChanged(object sender, EventArgs e)
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            if (this.pVoid_0 != null)
            {

                _Module.SetCommMask(this.pVoid_0, 64);
            }
            if (this.checkBox9.CheckState == CheckState.Checked)
            {
                if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 2)
                {
                    if (this.method_146() == 1)
                    {
                        this.label135.Text = "X-USB: Enabled";
                        this.method_123();
                    }
                    else
                    {
                        this.textBox6.AppendText(Convert.ToString(new string(ref _Module.struct122_0 + selectedIndex * 324)) + " could not be opened" + "\r\n");
                    }
                }
                else
                {
                    this.menuItem_25.Enabled = true;
                    this.menuItem_26.Enabled = true;
                    this.menuItem_27.Enabled = true;
                    this.menuItem_28.Enabled = true;
                    this.menuItem_30.Enabled = true;
                    this.menuItem_31.Enabled = true;
                    this.method_150();
                    if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 6)
                    {
                        this.method_166(17U);
                    }
                    if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 8)
                    {
                        this.label135.Text = "xt2: Enabled";
                        Thread thread = new Thread(new ThreadStart(this.method_165));
                        thread.Start();
                    }
                    if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 9)
                    {
                        this.label135.Text = "CK3i: Enabled";
                        this.method_135();
                        this.method_136();
                        this.method_138();
                        Thread thread2 = new Thread(new ThreadStart(this.method_165));
                        thread2.Start();
                    }
                }
            }
            else
            {
                this.menuItem_25.Enabled = false;
                this.menuItem_26.Enabled = false;
                this.menuItem_27.Enabled = false;
                this.menuItem_28.Enabled = false;
                this.menuItem_30.Enabled = false;
                this.menuItem_31.Enabled = false;
                this.groupBox18.Visible = false;
                if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 6)
                {
                    this.method_166(18U);
                }
                if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 8)
                {
                    this.label135.Text = "xt2: Disabled";
                    Thread thread3 = new Thread(new ThreadStart(this.method_165));
                    thread3.Start();
                }
                if (*(ref _Module.struct122_0 + selectedIndex * 324 + 8) == 9)
                {
                    this.label135.Text = "CK3i: Disabled";
                    this.method_135();
                    this.method_137();
                    this.method_138();
                    Thread thread4 = new Thread(new ThreadStart(this.method_165));
                    thread4.Start();
                }
            }
        }

        // Token: 0x060002A3 RID: 675 RVA: 0x0012CDCC File Offset: 0x0012CDCC
        private void checkBox9_EnabledChanged(object sender, EventArgs e)
        {
            if (this.checkBox9.Enabled)
            {
                this.menuItem_25.Visible = true;
                this.menuItem_26.Visible = true;
                this.menuItem_27.Visible = true;
                this.menuItem_28.Visible = true;
                this.menuItem_29.Visible = true;
                this.menuItem_30.Visible = true;
                this.menuItem_31.Visible = true;
            }
            else if (!this.checkBox9.Enabled)
            {
                this.menuItem_25.Visible = false;
                this.menuItem_26.Visible = false;
                this.menuItem_27.Visible = false;
                this.menuItem_28.Visible = false;
                this.menuItem_29.Visible = false;
                this.menuItem_30.Visible = false;
                this.menuItem_31.Visible = false;
            }
        }

        // Token: 0x060002A4 RID: 676 RVA: 0x0012CEA0 File Offset: 0x0012CEA0
        private void method_150()
        {
            string str = null;
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            this.groupBox18.Visible = true;
            if (this.method_135() == 1)
            {
                this.method_136();
                this.method_138();
            }
            if (registryKey.GetValue("HalfTrayDelay") != null)
            {
                str = registryKey.GetValue("HalfTrayDelay").ToString();
            }
            else if (registryKey.GetValue("HalfTrayDelay") == null)
            {
                registryKey.SetValue("HalfTrayDelay", "250");
                str = "250";
            }
            this.menuItem_34.Text = str + "mS";
            registryKey.Close();
        }

        // Token: 0x060002A5 RID: 677 RVA: 0x0012CF44 File Offset: 0x0012CF44
        private unsafe void method_151()
        {
            this.int_1 = 0;
            this.int_2 = 1;
            this.int_3 = 1;
            this.int_7 = 0;
            this.int_8 = 0;
            GStruct96 gstruct = 0;
            initblk(ref gstruct + 4, 0, 24);
            IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.string_1);
            IntPtr value = intPtr;
            sbyte* ptr = (sbyte*)((void*)value);
            Struct84 @struct;

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct10_22), ptr);
            this.pVoid_2 = _Module.CreateFileA((sbyte*)(&@struct), -1073741824, 0, null, 3, 1073741952, null);
            if (this.pVoid_2 == -1)
            {
                this.textBox6.AppendText(this.string_1 + ": Not Available" + "\r\n");
            }
            else
            {
                gstruct = 28;

                _Module.GetCommState(this.pVoid_2, &gstruct);
                *(ref gstruct + 4) = 9600;
                *(ref gstruct + 18) = 8;
                *(ref gstruct + 19) = 0;
                *(ref gstruct + 20) = 0;

                _Module.SetCommState(this.pVoid_2, &gstruct);
                GStruct94 gstruct2 = 20;
                *(ref gstruct2 + 8) = 20;
                *(ref gstruct2 + 4) = 20;
                *(ref gstruct2 + 16) = 20;
                *(ref gstruct2 + 12) = 20;

                _Module.SetCommTimeouts(this.pVoid_2, &gstruct2);
                RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
                if (registryKey.GetValue("CK3CP_Cont") != null)
                {
                    this.string_6 = registryKey.GetValue("CK3CP_Cont").ToString();
                }
                else if (registryKey.GetValue("CK3CP_Cont") == null)
                {
                    registryKey.SetValue("CK3CP_Cont", "0");
                    this.string_6 = "0";
                }
                if (registryKey.GetValue("CK3CP_Back") != null)
                {
                    this.string_7 = registryKey.GetValue("CK3CP_Back").ToString();
                }
                else if (registryKey.GetValue("CK3CP_Back") == null)
                {
                    registryKey.SetValue("CK3CP_Back", "75");
                    this.string_7 = "75";
                }
                registryKey.Close();
                this.method_159((uint)Convert.ToInt16(this.string_7));
                this.method_160((uint)Convert.ToInt16(this.string_6));
                this.string_2 = "Jungle Flasher";
                this.string_3 = "Ver 0.1.96 (323)";
                this.thread_0 = new Thread(new ThreadStart(this.method_161));
                this.thread_0.Start();
                this.thread_1 = new Thread(new ThreadStart(this.method_163));
                this.thread_1.Start();
            }
        }

        // Token: 0x060002A6 RID: 678 RVA: 0x0012D18C File Offset: 0x0012D18C
        private void method_152()
        {
            this.method_166(18U);
            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
            registryKey.SetValue("CK3CP_Cont", this.string_6);
            registryKey.SetValue("CK3CP_Back", this.string_7);
            registryKey.Close();
            this.string_2 = "";
            this.string_3 = "";
            this.string_2 = " XECUTER CK3-CP ";

            _Module.Sleep(400);
            while (this.int_7 == 1)
            {
            }
            while (this.int_8 == 1)
            {

                _Module.SetCommMask(this.pVoid_2, 64);
            }

            _Module.Sleep(400);
            try
            {
                this.thread_0.Abort();
            }
            catch (Exception ex)
            {
                string message = ex.Message;
            }
            try
            {
                this.thread_1.Abort();
            }
            catch (Exception ex2)
            {
                string message2 = ex2.Message;
            }
            if (this.pVoid_2 != null)
            {
                try
                {

                    _Module.CloseHandle(this.pVoid_2);
                }
                catch (Exception ex3)
                {
                    string message3 = ex3.Message;
                    MessageBox.Show(message3, "Closing Com Handle", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                }
            }
        }

        // Token: 0x060002A7 RID: 679 RVA: 0x0012D2F0 File Offset: 0x0012D2F0
        private unsafe void method_153()
        {
            if (this.pVoid_2 != null)
            {
                GStruct95 gstruct = 0;
                initblk(ref gstruct + 4, 0, 16);
                Struct100 @struct;

                _Module.memset((void*)(&@struct), 32, 36U);
                @struct = 254;
                *(ref @struct + 1) = 0;
                *(ref @struct + 18) = byte.MaxValue;
                *(ref @struct + 19) = 192;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.string_2);
                IntPtr value = intPtr;
                sbyte* pSbyte_ = (sbyte*)((void*)value);
                IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(this.string_3);
                IntPtr value2 = intPtr2;
                sbyte* pSbyte_2 = (sbyte*)((void*)value2);

                _Module.memcpy(ref @struct + 2, (void*)pSbyte_, _Module.strlen((sbyte*)pSbyte_));

                _Module.memcpy(ref @struct + 20, (void*)pSbyte_2, _Module.strlen((sbyte*)pSbyte_2));
                *(ref gstruct + 16) = _Module.CreateEventA(null, 1, 0, null);
                uint num;

                _Module.WriteFile(this.pVoid_2, (void*)(&@struct), 36, (uint*)(&num), &gstruct);

                _Module.GetOverlappedResult(this.pVoid_2, &gstruct, (uint*)(&num), 1);
            }
        }

        // Token: 0x060002A8 RID: 680 RVA: 0x0012D3CC File Offset: 0x0012D3CC
        private unsafe int method_154()
        {
            Struct60 @struct = 254;
            *(ref @struct + 1) = 10;
            GStruct95 gstruct = 0;
            initblk(ref gstruct + 4, 0, 16);
            *(ref gstruct + 16) = _Module.CreateEventA(null, 1, 0, null);
            Struct101 struct2;
            uint num;

            _Module.ReadFile(this.pVoid_2, (void*)(&struct2), 10, (uint*)(&num), &gstruct);

            _Module.GetOverlappedResult(this.pVoid_2, &gstruct, (uint*)(&num), 1);
            int result;
            if ((struct2 & 1) != null)
            {
                this.method_167(3U);
                result = 1;
            }
            else if ((struct2 & 2) != null)
            {
                this.method_167(4U);
                result = 1;
            }
            else if ((struct2 & 4) != null)
            {
                this.method_167(1U);
                result = 1;
            }
            else if ((struct2 & 8) != null)
            {
                this.method_167(2U);
                result = 1;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        // Token: 0x060002A9 RID: 681 RVA: 0x0012D470 File Offset: 0x0012D470
        private unsafe void method_155()
        {
            Struct60 @struct = 254;
            *(ref @struct + 1) = 10;
            GStruct95 gstruct = 0;
            initblk(ref gstruct + 4, 0, 16);
            *(ref gstruct + 16) = _Module.CreateEventA(null, 1, 0, null);
            uint num;

            _Module.WriteFile(this.pVoid_2, (void*)(&@struct), 2, (uint*)(&num), &gstruct);

            _Module.GetOverlappedResult(this.pVoid_2, &gstruct, (uint*)(&num), 1);
        }

        // Token: 0x060002AA RID: 682 RVA: 0x0012D4CC File Offset: 0x0012D4CC
        private unsafe void method_156()
        {
            Struct60 @struct = 254;
            *(ref @struct + 1) = 5;
            GStruct95 gstruct = 0;
            initblk(ref gstruct + 4, 0, 16);
            GStruct95 gstruct2 = 0;
            initblk(ref gstruct2 + 4, 0, 16);
            *(ref gstruct + 16) = _Module.CreateEventA(null, 1, 0, null);
            *(ref gstruct2 + 16) = _Module.CreateEventA(null, 1, 0, null);
            Struct101 struct2;
            uint num;

            _Module.ReadFile(this.pVoid_2, (void*)(&struct2), 10, (uint*)(&num), &gstruct);
            uint num2;

            _Module.WriteFile(this.pVoid_2, (void*)(&@struct), 2, (uint*)(&num2), &gstruct2);

            _Module.GetOverlappedResult(this.pVoid_2, &gstruct, (uint*)(&num), 1);
            this.string_2 = "" + new string((sbyte*)(&struct2));
            this.string_3 = "";
        }

        // Token: 0x060002AB RID: 683 RVA: 0x0012D57C File Offset: 0x0012D57C
        private unsafe void method_157()
        {
            Struct60 @struct = 254;
            *(ref @struct + 1) = 4;
            GStruct95 gstruct = 0;
            initblk(ref gstruct + 4, 0, 16);
            GStruct95 gstruct2 = 0;
            initblk(ref gstruct2 + 4, 0, 16);
            *(ref gstruct + 16) = _Module.CreateEventA(null, 1, 0, null);
            *(ref gstruct2 + 16) = _Module.CreateEventA(null, 1, 0, null);
            Struct101 value;
            uint num;

            _Module.ReadFile(this.pVoid_2, (void*)(&value), 10, (uint*)(&num), &gstruct);
            uint num2;

            _Module.WriteFile(this.pVoid_2, (void*)(&@struct), 2, (uint*)(&num2), &gstruct2);

            _Module.GetOverlappedResult(this.pVoid_2, &gstruct, (uint*)(&num), 1);
            this.string_7 = "" + Convert.ToString(value);
        }

        // Token: 0x060002AC RID: 684 RVA: 0x0012D620 File Offset: 0x0012D620
        private unsafe void method_158()
        {
            Struct60 @struct = 254;
            *(ref @struct + 1) = 3;
            GStruct95 gstruct = 0;
            initblk(ref gstruct + 4, 0, 16);
            GStruct95 gstruct2 = 0;
            initblk(ref gstruct2 + 4, 0, 16);
            *(ref gstruct + 16) = _Module.CreateEventA(null, 1, 0, null);
            *(ref gstruct2 + 16) = _Module.CreateEventA(null, 1, 0, null);
            Struct101 value;
            uint num;

            _Module.ReadFile(this.pVoid_2, (void*)(&value), 10, (uint*)(&num), &gstruct);
            uint num2;

            _Module.WriteFile(this.pVoid_2, (void*)(&@struct), 2, (uint*)(&num2), &gstruct2);

            _Module.GetOverlappedResult(this.pVoid_2, &gstruct, (uint*)(&num), 1);
            this.string_6 = "" + Convert.ToString(value);
        }

        // Token: 0x060002AD RID: 685 RVA: 0x0012D6C4 File Offset: 0x0012D6C4
        private unsafe void method_159(uint uint_0)
        {
            Struct102 @struct = 254;
            *(ref @struct + 1) = 2;
            *(ref @struct + 2) = 0;
            GStruct95 gstruct = 0;
            initblk(ref gstruct + 4, 0, 16);
            *(ref @struct + 2) = (byte)uint_0;
            *(ref gstruct + 16) = _Module.CreateEventA(null, 1, 0, null);
            uint num;

            _Module.WriteFile(this.pVoid_2, (void*)(&@struct), 3, (uint*)(&num), &gstruct);

            _Module.GetOverlappedResult(this.pVoid_2, &gstruct, (uint*)(&num), 1);
        }

        // Token: 0x060002AE RID: 686 RVA: 0x0012D72C File Offset: 0x0012D72C
        private unsafe void method_160(uint uint_0)
        {
            Struct102 @struct = 254;
            *(ref @struct + 1) = 1;
            *(ref @struct + 2) = 0;
            GStruct95 gstruct = 0;
            initblk(ref gstruct + 4, 0, 16);
            *(ref @struct + 2) = (byte)uint_0;
            *(ref gstruct + 16) = _Module.CreateEventA(null, 1, 0, null);
            uint num;

            _Module.WriteFile(this.pVoid_2, (void*)(&@struct), 3, (uint*)(&num), &gstruct);

            _Module.GetOverlappedResult(this.pVoid_2, &gstruct, (uint*)(&num), 1);
        }

        // Token: 0x060002AF RID: 687 RVA: 0x0012D794 File Offset: 0x0012D794
        private unsafe void method_161()
        {
            if (_Module.SetCommMask(this.pVoid_2, 1) == null)
            {
                this.textBox6.AppendText("SetCommMask failed with error: " + Convert.ToString(_Module.GetLastError()) + "\r\n");
            }
            else
            {
                GStruct95 gstruct;
                *(ref gstruct + 16) = _Module.CreateEventA(null, 1, 0, null);
                if (*(ref gstruct + 16) == 0)
                {

                    _Module._assert((sbyte*)(&_Module.struct72_5), (sbyte*)(&_Module.struct96_0), 21557U);
                }
                for (; ; )
                {
                    uint num;
                    if (_Module.WaitCommEvent(this.pVoid_2, (uint*)(&num), &gstruct) == null)
                    {
                        uint lastError = _Module.GetLastError();
                        if (997U == lastError)
                        {

                            _Module.WaitForSingleObject(*(ref gstruct + 16), -1);
                            uint num2;

                            _Module.GetOverlappedResult(this.pVoid_2, &gstruct, (uint*)(&num2), 1);
                            if ((num & 64U) != 0U)
                            {
                                break;
                            }
                            if ((num & 1U) != 0U)
                            {
                                while (this.method_154() == 1)
                                {

                                    _Module.Sleep(200);
                                    this.method_155();
                                }
                            }
                        }
                    }

                    _Module.Sleep(200);
                }
                this.int_8 = 0;
            }
        }

        // Token: 0x060002B0 RID: 688 RVA: 0x0012D888 File Offset: 0x0012D888
        private void method_162()
        {
            string strA = this.string_2;

            _Module.Sleep(1500);
            if (string.Compare(strA, this.string_2) == 0)
            {
                this.string_2 = "Jungle Flasher";
                this.string_3 = "Ver 0.1.96 (323)";
            }
        }

        // Token: 0x060002B1 RID: 689 RVA: 0x0012D8CC File Offset: 0x0012D8CC
        private void method_163()
        {
            this.int_7 = 1;
            for (; ; )
            {

                _Module.Sleep(200);
                if (string.Compare(" XECUTER CK3-CP ", this.string_2) == 0)
                {
                    break;
                }
                if (string.Compare(this.string_2, this.string_4) != 0 || string.Compare(this.string_3, this.string_5) != 0)
                {
                    this.method_153();
                    this.string_4 = this.string_2;
                    this.string_5 = this.string_3;
                }
            }
            this.method_153();

            _Module.Sleep(200);
            this.int_7 = 0;
        }

        // Token: 0x060002B2 RID: 690 RVA: 0x0012D964 File Offset: 0x0012D964
        private unsafe void method_164(uint uint_0)
        {
            Struct102 @struct = 254;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            this.method_155();
            if (uint_0 == 1U)
            {
                this.label135.Text = "CK3-CP: Opening";
                Application.DoEvents();
                *(ref @struct + 1) = 7;
                *(ref @struct + 2) = 4;
            }
            else if (uint_0 == 2U)
            {
                this.label135.Text = "CK3-CP: Closing";
                Application.DoEvents();
                *(ref @struct + 1) = 6;
                *(ref @struct + 2) = 4;
            }
            else if (uint_0 == 10U)
            {
                this.label135.Text = "CK3-CP: Power Off";
                Application.DoEvents();
                *(ref @struct + 1) = 6;
                *(ref @struct + 2) = 3;
            }
            else
            {
                if (uint_0 != 11U)
                {
                    return;
                }
                this.label135.Text = "CK3-CP: Power On";
                Application.DoEvents();
                *(ref @struct + 1) = 7;
                *(ref @struct + 2) = 3;
            }
            GStruct95 gstruct = 0;
            initblk(ref gstruct + 4, 0, 16);
            *(ref gstruct + 16) = _Module.CreateEventA(null, 1, 0, null);
            uint num;

            _Module.WriteFile(this.pVoid_2, (void*)(&@struct), 3, (uint*)(&num), &gstruct);

            _Module.GetOverlappedResult(this.pVoid_2, &gstruct, (uint*)(&num), 1);
            Thread thread = new Thread(new ThreadStart(this.method_165));
            thread.Start();
        }

        // Token: 0x060002B3 RID: 691 RVA: 0x0012DA88 File Offset: 0x0012DA88
        private void method_165()
        {
            string text = this.label135.Text;

            _Module.Sleep(1500);
            if (string.Compare(text, this.label135.Text) == 0)
            {
                this.label135.Text = "";
            }
        }

        // Token: 0x060002B4 RID: 692 RVA: 0x0012DAD0 File Offset: 0x0012DAD0
        private unsafe void method_166(uint uint_0)
        {
            Struct60 @struct = 254;
            *(ref @struct + 1) = 11;
            if (uint_0 == 17U)
            {
                *(ref @struct + 1) = 11;
                this.label135.Text = "CK3-CP: Software Mode";
                Application.DoEvents();
            }
            else
            {
                if (uint_0 != 18U)
                {
                    return;
                }
                *(ref @struct + 1) = 12;
                this.label135.Text = "CK3-CP: Manual mode";
                Application.DoEvents();
            }
            GStruct95 gstruct = 0;
            initblk(ref gstruct + 4, 0, 16);
            *(ref gstruct + 16) = _Module.CreateEventA(null, 1, 0, null);
            uint num;

            _Module.WriteFile(this.pVoid_2, (void*)(&@struct), 2, (uint*)(&num), &gstruct);

            _Module.GetOverlappedResult(this.pVoid_2, &gstruct, (uint*)(&num), 1);
            Thread thread = new Thread(new ThreadStart(this.method_165));
            thread.Start();
        }

        // Token: 0x060002B5 RID: 693 RVA: 0x003C4CE4 File Offset: 0x0030CCE4
        private unsafe void method_167(uint uint_0)
        {
            string value = null;
            string str = "MTK-Flash";
            string str2 = "Benq-UnLock";
            string str3 = "Sammy-UnLock";
            string str4 = "LiteOn-Erase";
            string str5 = "Intro-DevID";
            string str6 = "Bad-Flash";
            string str7 = "Outro";
            string str8 = "DVD-Key32";
            string str9 = "DVD-Key";
            string str10 = "LO83info";
            string str11 = "dummy <- iX";
            string str12 = "dummy <- DB";
            string str13 = "Hitachi";
            string str14 = "Mode-B";
            string str15 = "79 Unlock";
            string str16 = "Restore";
            string str17 = "Flash-IX";
            string str18 = "CK3-CP";
            string str19 = "Backlight";
            string str20 = "Contrast";
            string str21 = "F/w Ver";
            string str22 = "Open Tray";
            string str23 = "Close Tray";
            string str24 = "Half Tray";
            string str25 = "Power On";
            string str26 = "Power Off";
            string str27 = "Power Cycle";
            if (uint_0 == 1U)
            {
                this.int_1--;
            }
            else if (uint_0 == 2U)
            {
                this.int_1++;
            }
            else if (uint_0 == 3U)
            {
                if (this.int_1 == 1)
                {
                    this.int_2--;
                }
                else if (this.int_1 == 2)
                {
                    this.int_3--;
                }
                else if (this.int_1 == 3 && this.int_2 == 4 && this.int_3 == 1)
                {
                    int num = (int)Convert.ToInt16(this.string_7);
                    num--;
                    if (num < 0)
                    {
                        num = 0;
                    }
                    this.string_7 = Convert.ToString(num);
                    this.method_159((uint)num);
                }
                else if (this.int_1 == 3 && this.int_2 == 4 && this.int_3 == 2)
                {
                    int num = Convert.ToInt32(this.string_6);
                    num--;
                    if (num < 0)
                    {
                        num = 0;
                    }
                    this.string_6 = Convert.ToString(num);
                    this.method_160((uint)num);
                }
            }
            else if (uint_0 == 4U)
            {
                if (this.int_1 == 1)
                {
                    this.int_2++;
                }
                else if (this.int_1 == 2)
                {
                    this.int_3++;
                }
                else
                {
                    if (this.int_1 == 3 && this.int_2 == 1 && this.int_3 == 1)
                    {
                        this.method_186();
                        this.int_1 = 0;
                        this.int_2 = 1;
                        this.int_3 = 1;
                        this.method_162();
                        return;
                    }
                    if (this.int_1 == 3 && this.int_2 == 1 && this.int_3 == 2)
                    {
                        this.method_191();
                        this.int_1 = 0;
                        this.int_2 = 1;
                        this.int_3 = 1;
                        this.method_162();
                        return;
                    }
                    if (this.int_1 == 3 && this.int_2 == 1 && this.int_3 == 3)
                    {
                        this.method_207();
                        this.int_1 = 0;
                        this.int_2 = 1;
                        this.int_3 = 1;
                        this.method_162();
                        return;
                    }
                    if (this.int_1 == 3 && this.int_2 == 1 && this.int_3 == 4)
                    {
                        this.method_202();
                        this.int_1 = 0;
                        this.int_2 = 1;
                        this.int_3 = 1;
                        this.method_162();
                        return;
                    }
                    if (this.int_1 == 3 && this.int_2 == 1 && this.int_3 == 5)
                    {
                        this.int_1 = 0;
                        this.int_2 = 1;
                        this.int_3 = 1;
                        GStruct11* ptr = _Module.FindWindowExA(this.pGstruct11_0, null, null, (sbyte*)(&_Module.struct16_1));
                        IntPtr intPtr = Marshal.StringToHGlobalAnsi("DoBadFlash");
                        IntPtr value2 = intPtr;

                        _Module.SendMessageA(ptr, 12U, 0U, (void*)value2);
                        this.method_162();
                        return;
                    }
                    if (this.int_1 == 3 && this.int_2 == 1 && this.int_3 == 6)
                    {
                        this.method_209();
                        this.int_1 = 0;
                        this.int_2 = 1;
                        this.int_3 = 1;
                        this.string_2 = this.label110.Text + " " + this.label106.Text;
                        this.string_3 = this.label109.Text;
                        this.method_162();
                        return;
                    }
                    if (this.int_1 == 3 && this.int_2 == 2 && this.int_3 == 1)
                    {
                        this.method_61();
                        this.int_1 = 0;
                        this.int_2 = 1;
                        this.int_3 = 1;
                        this.method_162();
                        return;
                    }
                    if (this.int_1 == 3 && this.int_2 == 2 && this.int_3 == 2)
                    {
                        this.method_101();
                        this.int_1 = 0;
                        this.int_2 = 1;
                        this.int_3 = 1;
                        this.method_162();
                        return;
                    }
                    if (this.int_1 == 3 && this.int_2 == 2 && this.int_3 == 3)
                    {
                        this.method_98();
                        this.int_1 = 0;
                        this.int_2 = 1;
                        this.int_3 = 1;
                        this.method_162();
                        return;
                    }
                    if (this.int_1 == 3 && this.int_2 == 2 && this.int_3 == 4)
                    {
                        this.method_102();
                        this.int_1 = 0;
                        this.int_2 = 1;
                        this.int_3 = 1;
                        this.method_162();
                        return;
                    }
                    if (this.int_1 == 3 && this.int_2 == 3 && this.int_3 == 1)
                    {
                        this.method_336();
                        this.int_1 = 0;
                        this.int_2 = 1;
                        this.int_3 = 1;
                        this.method_162();
                        return;
                    }
                    if (this.int_1 == 3 && this.int_2 == 3 && this.int_3 == 2)
                    {
                        this.method_379();
                        this.int_1 = 0;
                        this.int_2 = 1;
                        this.int_3 = 1;
                        this.method_162();
                        return;
                    }
                    if (this.int_1 == 3 && this.int_2 == 3 && this.int_3 == 3)
                    {
                        this.radioButton9.Checked = true;
                        this.method_364();
                        this.int_1 = 0;
                        this.int_2 = 1;
                        this.int_3 = 1;
                        this.method_162();
                        return;
                    }
                    if (this.int_1 == 3 && this.int_2 == 3 && this.int_3 == 4)
                    {
                        this.radioButton8.Checked = true;
                        this.method_364();
                        this.int_1 = 0;
                        this.int_2 = 1;
                        this.int_3 = 1;
                        this.method_162();
                        return;
                    }
                    if (this.int_1 == 3 && this.int_2 == 4 && this.int_3 == 1)
                    {
                        int num = (int)Convert.ToInt16(this.string_7);
                        num++;
                        if (num > 100)
                        {
                            num = 100;
                        }
                        this.string_7 = Convert.ToString(num);
                        this.method_159((uint)num);
                    }
                    else if (this.int_1 == 3 && this.int_2 == 4 && this.int_3 == 2)
                    {
                        int num = Convert.ToInt32(this.string_6);
                        num++;
                        if (num > 100)
                        {
                            num = 100;
                        }
                        this.string_6 = Convert.ToString(num);
                        this.method_160((uint)num);
                    }
                }
            }
            if (this.int_1 < 1)
            {
                this.int_1 = 0;
                this.int_2 = 1;
                this.int_3 = 1;
            }
            if (this.int_1 > 3)
            {
                this.int_1 = 3;
            }
            if (this.int_1 == 1)
            {
                if (this.int_2 < 1)
                {
                    this.int_2 = 4;
                }
                else if (this.int_2 > 4)
                {
                    this.int_2 = 1;
                }
                this.int_3 = 1;
            }
            if (this.int_1 == 2)
            {
                if (this.int_2 == 1)
                {
                    if (this.int_3 < 1)
                    {
                        this.int_3 = 6;
                    }
                    else if (this.int_3 > 6)
                    {
                        this.int_3 = 1;
                    }
                }
                if (this.int_2 == 2)
                {
                    if (this.int_3 < 1)
                    {
                        this.int_3 = 4;
                    }
                    else if (this.int_3 > 4)
                    {
                        this.int_3 = 1;
                    }
                }
                if (this.int_2 == 3)
                {
                    if (this.int_3 < 1)
                    {
                        this.int_3 = 4;
                    }
                    else if (this.int_3 > 4)
                    {
                        this.int_3 = 1;
                    }
                }
                if (this.int_2 == 4)
                {
                    if (this.int_3 < 1)
                    {
                        this.int_3 = 9;
                    }
                    else if (this.int_3 > 9)
                    {
                        this.int_3 = 1;
                    }
                }
            }
            if (this.int_1 == 0)
            {
                this.string_2 = "Jungle Flasher";
                this.string_3 = "Ver 0.1.96 (323)";
            }
            else if (this.int_1 == 1)
            {
                if (this.int_2 == 1)
                {
                    this.string_2 = "1." + str;
                    this.string_3 = "";
                }
                else if (this.int_2 == 2)
                {
                    this.string_2 = "2." + str8;
                    this.string_3 = "";
                }
                else if (this.int_2 == 3)
                {
                    this.string_2 = "3." + str13;
                    this.string_3 = "";
                }
                else if (this.int_2 == 4)
                {
                    this.string_2 = "4." + str18;
                    this.string_3 = "";
                }
            }
            else if (this.int_1 == 2)
            {
                if (this.int_2 == 1)
                {
                    if (this.int_3 == 1)
                    {
                        this.string_2 = "1." + str;
                        this.string_3 = " 1." + str2;
                    }
                    if (this.int_3 == 2)
                    {
                        this.string_2 = "1." + str;
                        this.string_3 = " 2." + str3;
                    }
                    if (this.int_3 == 3)
                    {
                        this.string_2 = "1." + str;
                        this.string_3 = " 3." + str4;
                    }
                    if (this.int_3 == 4)
                    {
                        this.string_2 = "1." + str;
                        this.string_3 = " 4." + str5;
                    }
                    if (this.int_3 == 5)
                    {
                        this.string_2 = "1." + str;
                        this.string_3 = " 5." + str6;
                    }
                    if (this.int_3 == 6)
                    {
                        this.string_2 = "1." + str;
                        this.string_3 = " 6." + str7;
                    }
                    this.tabControl5.SelectedTab = this.Benq;
                }
                else if (this.int_2 == 2)
                {
                    if (this.int_3 == 1)
                    {
                        this.string_2 = "2." + str8;
                        this.string_3 = " 1." + str9;
                    }
                    if (this.int_3 == 2)
                    {
                        this.string_2 = "2." + str8;
                        this.string_3 = " 2." + str10;
                    }
                    if (this.int_3 == 3)
                    {
                        this.string_2 = "2." + str8;
                        this.string_3 = " 3." + str11;
                    }
                    if (this.int_3 == 4)
                    {
                        this.string_2 = "2." + str8;
                        this.string_3 = " 4." + str12;
                    }
                    this.tabControl5.SelectedTab = this.DVDKey32;
                }
                else if (this.int_2 == 3)
                {
                    if (this.int_3 == 1)
                    {
                        this.string_2 = "3." + str13;
                        this.string_3 = " 1." + str14;
                    }
                    if (this.int_3 == 2)
                    {
                        this.string_2 = "3." + str13;
                        this.string_3 = " 2." + str15;
                    }
                    if (this.int_3 == 3)
                    {
                        this.string_2 = "3." + str13;
                        this.string_3 = " 3." + str16;
                    }
                    if (this.int_3 == 4)
                    {
                        this.string_2 = "3." + str13;
                        this.string_3 = " 4." + str17;
                    }
                    this.tabControl5.SelectedTab = this.Hitachi;
                }
                else if (this.int_2 == 4)
                {
                    if (this.int_3 == 1)
                    {
                        this.string_2 = "4." + str18;
                        this.string_3 = " 1." + str19;
                    }
                    if (this.int_3 == 2)
                    {
                        this.string_2 = "4." + str18;
                        this.string_3 = " 2." + str20;
                    }
                    if (this.int_3 == 3)
                    {
                        this.string_2 = "4." + str18;
                        this.string_3 = " 3." + str21;
                    }
                    if (this.int_3 == 4)
                    {
                        this.string_2 = "4." + str18;
                        this.string_3 = " 4." + str22;
                    }
                    if (this.int_3 == 5)
                    {
                        this.string_2 = "4." + str18;
                        this.string_3 = " 5." + str23;
                    }
                    if (this.int_3 == 6)
                    {
                        this.string_2 = "4." + str18;
                        this.string_3 = " 6." + str24;
                    }
                    if (this.int_3 == 7)
                    {
                        this.string_2 = "4." + str18;
                        this.string_3 = " 7." + str25;
                    }
                    if (this.int_3 == 8)
                    {
                        this.string_2 = "4." + str18;
                        this.string_3 = " 8." + str26;
                    }
                    if (this.int_3 == 9)
                    {
                        this.string_2 = "4." + str18;
                        this.string_3 = " 9." + str27;
                    }
                    this.tabControl5.SelectedTab = this.Firmtools;
                }
            }
            else if (this.int_1 == 3)
            {
                if (this.int_2 == 1)
                {
                    if (this.int_3 == 1)
                    {
                        this.string_2 = " 1." + str2;
                        this.string_3 = " ^ Quit    OK > ";
                    }
                    if (this.int_3 == 2)
                    {
                        this.string_2 = " 2." + str3;
                        this.string_3 = " ^ Quit    OK > ";
                    }
                    if (this.int_3 == 3)
                    {
                        this.string_2 = " 3." + str4;
                        this.string_3 = " ^ Quit    OK > ";
                    }
                    if (this.int_3 == 4)
                    {
                        this.string_2 = " 4." + str5;
                        this.string_3 = " ^ Quit    OK > ";
                    }
                    if (this.int_3 == 5)
                    {
                        this.string_2 = " 5." + str6;
                        this.string_3 = " ^ Quit    OK > ";
                    }
                    if (this.int_3 == 6)
                    {
                        this.string_2 = " 6." + str7;
                        this.string_3 = " ^ Quit    OK > ";
                    }
                }
                else if (this.int_2 == 2)
                {
                    if (this.int_3 == 1)
                    {
                        this.string_2 = " 1." + str9;
                        this.string_3 = " ^ Quit    OK > ";
                    }
                    if (this.int_3 == 2)
                    {
                        this.string_2 = " 2." + str10;
                        this.string_3 = " ^ Quit    OK > ";
                    }
                    if (this.int_3 == 3)
                    {
                        this.string_2 = " 3." + str11;
                        this.string_3 = " ^ Quit    OK > ";
                    }
                    if (this.int_3 == 4)
                    {
                        this.string_2 = " 4." + str12;
                        this.string_3 = " ^ Quit    OK > ";
                    }
                }
                else if (this.int_2 == 3)
                {
                    if (this.int_3 == 1)
                    {
                        this.string_2 = " 1." + str14;
                        this.string_3 = " ^ Quit    OK > ";
                    }
                    if (this.int_3 == 2)
                    {
                        this.string_2 = " 2." + str15;
                        this.string_3 = " ^ Quit    OK > ";
                    }
                    if (this.int_3 == 3)
                    {
                        this.string_2 = " 3." + str16;
                        this.string_3 = " ^ Quit    OK > ";
                    }
                    if (this.int_3 == 4)
                    {
                        this.string_2 = " 4." + str17;
                        this.string_3 = " ^ Quit    OK > ";
                    }
                }
                else if (this.int_2 == 4)
                {
                    if (this.int_3 == 1)
                    {
                        this.string_2 = " 1." + str19;
                        if (Convert.ToInt16(this.string_7) == 100)
                        {
                            this.string_3 = string.Concat("<<<   100    >>>");
                        }
                        else if (Convert.ToInt16(this.string_7) < 10)
                        {
                            this.string_3 = "<<<     " + this.string_7 + "    >>>";
                        }
                        else
                        {
                            this.string_3 = "<<<    " + this.string_7 + "    >>>";
                        }
                    }
                    if (this.int_3 == 2)
                    {
                        this.string_2 = " 2." + str20;
                        if (Convert.ToInt16(this.string_6) == 100)
                        {
                            this.string_3 = string.Concat("<<<   100    >>>");
                        }
                        else if (Convert.ToInt16(this.string_6) < 10)
                        {
                            this.string_3 = "<<<     " + this.string_6 + "    >>>";
                        }
                        else
                        {
                            this.string_3 = "<<<    " + this.string_6 + "    >>>";
                        }
                    }
                    if (this.int_3 == 3)
                    {
                        this.method_156();
                    }
                    if (this.int_3 == 4)
                    {
                        this.string_2 = " 4." + str22;
                        this.string_3 = string.Concat("  Opening");
                        this.method_164(1U);
                    }
                    if (this.int_3 == 5)
                    {
                        this.string_2 = " 5." + str23;
                        this.string_3 = string.Concat("  Closing");
                        this.method_164(2U);
                    }
                    if (this.int_3 == 6)
                    {
                        this.string_2 = " 5." + str24;
                        RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
                        if (registryKey.GetValue("HalfTrayDelay") != null)
                        {
                            value = registryKey.GetValue("HalfTrayDelay").ToString();
                        }
                        else if (registryKey.GetValue("HalfTrayDelay") == null)
                        {
                            registryKey.SetValue("HalfTrayDelay", "250");
                            value = "250";
                        }
                        this.string_3 = string.Concat("  Opening");
                        this.method_164(1U);

                        _Module.Sleep(Convert.ToInt32(value));
                        this.string_3 = string.Concat("  Power Off");
                        this.method_164(10U);

                        _Module.Sleep(250);
                        this.string_3 = string.Concat("  Power On");
                        this.method_164(11U);
                    }
                    if (this.int_3 == 7)
                    {
                        this.string_2 = " 5." + str25;
                        this.string_3 = string.Concat("  Power On");
                        this.method_164(11U);
                    }
                    if (this.int_3 == 8)
                    {
                        this.string_2 = " 5." + str26;
                        this.string_3 = string.Concat("  Power Off");
                        this.method_164(10U);
                    }
                    if (this.int_3 == 9)
                    {
                        this.string_2 = " 5." + str27;
                        this.string_3 = string.Concat("  Power Off");
                        this.method_164(10U);

                        _Module.Sleep(250);
                        this.string_3 = string.Concat("  Power On");
                        this.method_164(11U);
                    }
                }
            }
        }

        // Token: 0x060002B6 RID: 694 RVA: 0x0012EE6C File Offset: 0x0012EE6C
        private void checkBox2_CheckedChanged(object sender, EventArgs e)
        {
            if (this.bool_1)
            {
                this.checkBox11.CheckState = this.checkBox2.CheckState;
                Application.DoEvents();
                this.Cursor = Cursors.WaitCursor;
                if (_Module.struct38_0 == null && _Module.gstruct10_0 != null)
                {
                    this.method_422();
                }
                this.method_170();
                this.Cursor = Cursors.Arrow;
            }
        }

        // Token: 0x060002B7 RID: 695 RVA: 0x0012EED4 File Offset: 0x0012EED4
        private void checkBox4_CheckedChanged(object sender, EventArgs e)
        {
            if (this.bool_1)
            {
                this.checkBox10.CheckState = this.checkBox4.CheckState;
                if (this.checkBox4.CheckState == CheckState.Checked)
                {
                    this.checkBox10.CheckState = CheckState.Checked;
                    this.checkBox2.Enabled = false;
                    this.checkBox11.Enabled = false;
                    this.checkBox15.Enabled = false;
                    this.checkBox16.Enabled = false;
                    this.radioButton14.Checked = true;
                }
                else
                {
                    this.checkBox10.CheckState = CheckState.Unchecked;
                    this.checkBox2.Enabled = true;
                    this.checkBox11.Enabled = true;
                    if (this.bool_5)
                    {
                        this.checkBox15.Enabled = true;
                        this.checkBox16.Enabled = true;
                    }
                    this.radioButton18.Enabled = false;
                    this.radioButton17.Checked = true;
                }
                Application.DoEvents();
                this.Cursor = Cursors.WaitCursor;
                if (_Module.struct38_0 == null && _Module.gstruct10_0 != null)
                {
                    this.method_422();
                }
                this.method_170();
                if (this.checkBox4.CheckState == CheckState.Checked)
                {
                    this.method_168();
                }
                this.Cursor = Cursors.Arrow;
            }
        }

        // Token: 0x060002B8 RID: 696 RVA: 0x0012F008 File Offset: 0x0012F008
        private unsafe void checkBox15_CheckedChanged(object sender, EventArgs e)
        {
            if (this.bool_1)
            {
                this.checkBox16.CheckState = this.checkBox15.CheckState;
                if (this.checkBox15.CheckState == CheckState.Checked)
                {
                    this.checkBox16.CheckState = CheckState.Checked;
                    this.checkBox2.Enabled = false;
                    this.checkBox11.Enabled = false;
                    this.checkBox4.Enabled = false;
                    this.checkBox10.Enabled = false;
                    this.string_18 = "1";

                    _Module.smethod_150(*(ref _Module.gstruct101_0 + 4));

                    _Module.smethod_148((sbyte*)(&_Module.struct24_5));
                    this.textBox6.AppendText("PortIO unloaded." + "\r\n");
                    this.radioButton18.Enabled = true;
                    this.radioButton17.Checked = true;
                }
                else
                {
                    this.checkBox16.CheckState = CheckState.Unchecked;
                    this.checkBox2.Enabled = true;
                    this.checkBox11.Enabled = true;
                    this.checkBox4.Enabled = true;
                    this.checkBox10.Enabled = true;
                    this.string_18 = "0";
                    this.method_2();
                    this.radioButton18.Enabled = false;
                    this.radioButton17.Checked = true;
                }
                Application.DoEvents();
                this.Cursor = Cursors.WaitCursor;
                if (_Module.gstruct10_0 != null)
                {
                    this.method_422();
                }
                this.method_170();
                this.Cursor = Cursors.Arrow;
            }
        }

        // Token: 0x060002B9 RID: 697 RVA: 0x0012F174 File Offset: 0x0012F174
        private void checkBox16_CheckedChanged(object sender, EventArgs e)
        {
            this.checkBox15.CheckState = this.checkBox16.CheckState;
        }

        // Token: 0x060002BA RID: 698 RVA: 0x0012F198 File Offset: 0x0012F198
        private void checkBox10_CheckedChanged(object sender, EventArgs e)
        {
            this.checkBox4.CheckState = this.checkBox10.CheckState;
        }

        // Token: 0x060002BB RID: 699 RVA: 0x0012F1BC File Offset: 0x0012F1BC
        private void checkBox11_CheckedChanged(object sender, EventArgs e)
        {
            this.checkBox2.CheckState = this.checkBox11.CheckState;
        }

        // Token: 0x060002BC RID: 700 RVA: 0x0012F1E0 File Offset: 0x0012F1E0
        private unsafe void method_168()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            if (*(ref _Module.struct38_0 + selectedIndex * 72U + 68) == 0)
            {
                this.radioButton18.Enabled = false;
                this.radioButton17.Checked = true;
            }
            if (*(ref _Module.struct38_0 + selectedIndex * 72U + 68) == 39)
            {
                if (this.textBox6.TextLength > 0)
                {
                    this.textBox6.AppendText("Via Card with status (Code 39), Hitachi Port IO enabled!" + "\r\n");

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Via Card with status (Code 39), Hitachi Port IO enabled!", "Via Port Enumeration", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                this.radioButton18.Enabled = true;
            }
        }

        // Token: 0x060002BD RID: 701 RVA: 0x0012F2AC File Offset: 0x0012F2AC
        private unsafe void method_169()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            if (*(ref _Module.struct38_0 + selectedIndex * 72U + 68) == 0)
            {
                this.radioButton18.Enabled = false;
                this.radioButton17.Checked = true;
            }
            if (*(ref _Module.struct38_0 + selectedIndex * 72U + 68) == 39)
            {
                this.radioButton18.Enabled = true;
            }
        }

        // Token: 0x060002BE RID: 702 RVA: 0x0012F30C File Offset: 0x0012F30C
        private unsafe int method_170()
        {
            int num = 0;
            for (int i = 0; i < 32; i++)
            {

                _Module.memset(ref _Module.struct38_0 + i * 72, 0, 72U);
            }
            int num2;
            for (; ; )
            {
                this.comboBox1.Items.Clear();
                this.comboBox7.Items.Clear();
                this.comboBox13.Items.Clear();
                if (*(ref _Module.gstruct10_0 + 4) != 0)
                {
                    this.method_422();
                }
                if (*(ref _Module.gstruct10_0 + 8) != 0)
                {
                    this.method_423();
                }
                this.method_410();
                this.method_411();
                if (*(ref _Module.gstruct10_0 + 12) == 1)
                {
                    *(ref _Module.struct38_0 + num * 72) = 0;
                    *(ref _Module.struct38_0 + num * 72 + 2) = 2;
                    *(ref _Module.struct38_0 + num * 72 + 3) = 0;
                    *(ref _Module.struct38_0 + num * 72 + 4) = 160;

                    _Module.memcpy(ref _Module.struct38_0 + num * 72 + 5, (void*)(&_Module.struct67_2), 13U);
                    num++;
                }
                if (*(ref _Module.gstruct10_0 + 13) == 1)
                {
                    *(ref _Module.struct38_0 + num * 72) = 0;
                    *(ref _Module.struct38_0 + num * 72 + 2) = 2;
                    *(ref _Module.struct38_0 + num * 72 + 3) = 1;
                    *(ref _Module.struct38_0 + num * 72 + 4) = 160;

                    _Module.memcpy(ref _Module.struct38_0 + num * 72 + 5, (void*)(&_Module.struct0_3), 17U);
                    num++;
                }
                if (*(ref _Module.gstruct10_0 + 12) == 1)
                {
                    *(ref _Module.gstruct10_0 + 14) = 0;
                    this.checkBox16.Enabled = true;
                    this.checkBox15.Enabled = true;
                }
                else if (*(ref _Module.gstruct10_0 + 13) == 1)
                {
                    *(ref _Module.gstruct10_0 + 14) = 1;
                    this.checkBox16.Enabled = true;
                    this.checkBox15.Enabled = true;
                }
                else
                {
                    this.checkBox16.Enabled = false;
                    this.checkBox15.Enabled = false;
                }
                if (string.Compare(this.string_18, "1") == 0)
                {
                    if (num == 1)
                    {
                        this.comboBox1.Items.Add("0x0000");
                        this.comboBox7.Items.Add("0x0000");
                        this.comboBox13.Items.Add("0x0000");
                    }
                    if (num == 2)
                    {
                        this.comboBox1.Items.Add("0x0000");
                        this.comboBox7.Items.Add("0x0000");
                        this.comboBox13.Items.Add("0x0000");
                        this.comboBox1.Items.Add("0x0000");
                        this.comboBox7.Items.Add("0x0000");
                        this.comboBox13.Items.Add("0x0000");
                    }
                    if (num != 0)
                    {
                        break;
                    }
                    this.checkBox2.Enabled = true;
                    this.checkBox11.Enabled = true;
                    this.checkBox4.Enabled = true;
                    this.checkBox10.Enabled = true;
                }
                if (this.checkBox4.CheckState == CheckState.Checked)
                {
                    num2 = _Module.smethod_86((GStruct86*)(&_Module.struct38_0), 0, 32);
                }
                else
                {
                    num2 = _Module.smethod_85((GStruct86*)(&_Module.struct38_0), num, 32);
                }
                if (num2 != 0)
                {
                    goto IL_469;
                }
                if (this.checkBox4.CheckState == CheckState.Checked)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("No VIA ports were found!", "JungleFlasher", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    this.checkBox4.CheckState = CheckState.Unchecked;
                    this.checkBox10.CheckState = CheckState.Unchecked;
                }
                else
                {
                    if (this.checkBox2.CheckState != CheckState.Unchecked)
                    {
                        goto IL_463;
                    }

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("No VIA or SATA Class ports were found!", "JungleFlasher", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    this.checkBox2.CheckState = CheckState.Checked;
                    this.checkBox11.CheckState = CheckState.Checked;
                }
            }
            this.comboBox1.SelectedIndex = 0;
            this.comboBox7.SelectedIndex = 0;
            this.comboBox13.SelectedIndex = 0;
            this.checkBox2.Enabled = false;
            this.checkBox11.Enabled = false;
            this.checkBox4.Enabled = false;
            this.checkBox10.Enabled = false;
            this.radioButton18.Enabled = true;
            this.radioButton17.Checked = true;
            return 1;
        IL_463:
            return 0;
        IL_469:
            for (int j = 0; j < num2; j++)
            {
                Struct60 @struct;
                *(ref @struct + 1) = (byte)(*(ref _Module.struct38_0 + j * 72) & 255);
                @struct = (*(ref _Module.struct38_0 + j * 72) & 65280) >> 8;
                this.comboBox1.Items.Add(this.method_171((byte*)(&@struct), 2U, 0U));
                this.comboBox7.Items.Add(this.method_171((byte*)(&@struct), 2U, 0U));
                this.comboBox13.Items.Add(this.method_171((byte*)(&@struct), 2U, 0U));
                this.comboBox1.SelectedIndex = 0;
                this.comboBox7.SelectedIndex = 0;
                this.comboBox13.SelectedIndex = 0;
            }
            return num2;
        }

        // Token: 0x060002BF RID: 703 RVA: 0x0012F83C File Offset: 0x0012F83C
        private unsafe string method_171(byte* pByte_0, uint uint_0, uint uint_1)
        {
            string text = null;
            for (uint num = 0U; num < uint_0; num += 1U)
            {
                Struct62 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_121), pByte_0[num]);
                string text2 = new string((sbyte*)(&_Module.struct19_0));
                text2 += new string((sbyte*)(&@struct));
                text += text2;
            }
            return new string((sbyte*)(&_Module.struct18_10)) + text;
        }

        // Token: 0x060002C0 RID: 704 RVA: 0x0012F8A4 File Offset: 0x0012F8A4
        private unsafe int method_172()
        {
            string text = null;
            string text2 = null;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72U + 4));
                ushort num2 = *(ref _Module.struct38_0 + selectedIndex * 72U);
                this.Cursor = Cursors.WaitCursor;

                _Module.Sleep(100);
                uint num3 = 0U;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72U + 3) == 1)
                {
                    this.method_175();
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, num2, 0, 1, 1000U);

                _Module.smethod_2(*(ref gstruct + 18), (byte)num3);

                _Module.Sleep(1);

                _Module.smethod_2(*(ref gstruct + 14), (byte)num);

                _Module.Sleep(500);
                num3 = (uint)_Module.smethod_1(*(ref gstruct + 18));
                if (num3 == 112U | num3 == 114U | num3 == 115U)
                {
                    this.label110.Text = "Drive in Vendor Mode!";
                    this.label109.Text = "";
                    this.label106.Text = "";
                    this.label92.Text = "";
                    this.label72.Text = "Drive in Vendor Mode!";
                    this.label68.Text = "";
                    this.label61.Text = "";
                    this.label58.Text = "";
                    this.label100.Text = "Drive in Vendor Mode!";
                    this.label99.Text = "";
                    this.label98.Text = "";
                    this.label97.Text = "";
                    if (this.checkBox5.CheckState == CheckState.Checked)
                    {
                        this.method_205();
                    }
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {
                    if (num2 == 0)
                    {

                        _Module.smethod_2(*(ref gstruct + 4), 3);

                        _Module.Sleep(1);

                        _Module.smethod_2(*(ref gstruct + 6), 1);

                        _Module.Sleep(1);

                        _Module.smethod_2(*(ref gstruct + 18), 239);

                        _Module.Sleep(50);
                        num3 = (uint)_Module.smethod_1(*(ref gstruct + 18));
                    }
                    this.toolTip_0.SetToolTip(this.button42, "Lock/UnLock Slim Lite-On Spi ");
                    this.button42.Enabled = false;
                    this.button42.Text = "";
                    if (this.method_174() == 1)
                    {
                        this.Cursor = Cursors.Arrow;
                        result = 0;
                    }
                    else
                    {
                        uint num4;
                        if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                        {
                            num4 = 0U;
                        }
                        else
                        {
                            num4 = 16U;
                        }
                        Struct52 @struct;

                        _Module.memset((void*)(&@struct), 0, 12U);
                        @struct = 18;
                        *(ref @struct + 1) = 0;
                        *(ref @struct + 2) = 0;
                        *(ref @struct + 3) = 0;
                        *(ref @struct + 4) = 96;
                        *(ref @struct + 5) = 192;
                        Struct85 struct2;
                        uint num5;
                        if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num4, 512, (void*)(&struct2), &num5, 96U, 1, &gstruct) != null)
                        {
                            this.label110.Text = "No Drive Detected!";
                            this.label109.Text = "";
                            this.label106.Text = "";
                            this.label92.Text = "";
                            this.label72.Text = "No Drive Detected!";
                            this.label68.Text = "";
                            this.label61.Text = "";
                            this.label58.Text = "";
                            this.label100.Text = "No Drive Detected!";
                            this.label99.Text = "";
                            this.label98.Text = "";
                            this.label97.Text = "";
                            this.Cursor = Cursors.Arrow;
                            result = 0;
                        }
                        else
                        {
                            this.label110.Text = "";
                            this.label72.Text = "";
                            byte* pByte_ = ref struct2 + 8;
                            this.label110.Text = this.method_176(pByte_, 8U);
                            this.label72.Text = this.label110.Text;
                            this.label100.Text = this.label110.Text;
                            this.label109.Text = "";
                            this.label68.Text = "";
                            pByte_ = ref struct2 + 16;
                            this.label109.Text = this.method_176(pByte_, 16U);
                            this.label68.Text = this.label109.Text;
                            this.label99.Text = this.label109.Text;
                            this.label106.Text = "";
                            this.label61.Text = "";
                            pByte_ = ref struct2 + 32;
                            this.label106.Text = this.method_176(pByte_, 4U);
                            this.label61.Text = this.label106.Text;
                            this.label98.Text = this.label106.Text;
                            this.label92.Text = new string((sbyte*)(&_Module.struct19_0));
                            this.label58.Text = new string((sbyte*)(&_Module.struct19_0));
                            pByte_ = ref struct2 + 36;
                            this.label92.Text = this.method_176(pByte_, 20U);
                            this.label58.Text = this.label92.Text;
                            this.label97.Text = this.label92.Text;
                            Application.DoEvents();
                            if (*(ref struct2 + 8) == 0 | *(ref struct2 + 8) == 255)
                            {
                                this.label110.Text = "No Drive Detected!";
                                this.label109.Text = "";
                                this.label106.Text = "";
                                this.label92.Text = "";
                                this.label72.Text = "No Drive Detected!";
                                this.label68.Text = "";
                                this.label61.Text = "";
                                this.label58.Text = "";
                                this.label100.Text = "No Drive Detected!";
                                this.label99.Text = "";
                                this.label98.Text = "";
                                this.label97.Text = "";
                            }
                            if (*(ref struct2 + 8) == *(ref struct2 + 10) | *(ref struct2 + 8) == *(ref struct2 + 12) | *(ref struct2 + 8) == *(ref struct2 + 14) | *(ref struct2 + 8) == *(ref struct2 + 16))
                            {
                                this.label110.Text = "No Drive Detected!";
                                this.label109.Text = "";
                                this.label106.Text = "";
                                this.label92.Text = "";
                                this.label72.Text = "No Drive Detected!";
                                this.label68.Text = "";
                                this.label61.Text = "";
                                this.label58.Text = "";
                                this.label100.Text = "No Drive Detected!";
                                this.label99.Text = "";
                                this.label98.Text = "";
                                this.label97.Text = "";
                            }
                            if (*(ref struct2 + 32) == 48 & *(ref struct2 + 33) == 48)
                            {
                                if (*(ref struct2 + 34) == 53)
                                {
                                    this.radioButton4.Checked = true;
                                }
                                else if (*(ref struct2 + 34) == 55)
                                {
                                    this.radioButton5.Checked = true;
                                }
                                else if (*(ref struct2 + 34) == 52 & *(ref struct2 + 35) != 48)
                                {
                                    this.radioButton3.Checked = true;
                                }
                                else if (*(ref struct2 + 34) == 51 & *(ref struct2 + 35) == 54)
                                {
                                    this.radioButton2.Checked = true;
                                }
                                else
                                {
                                    this.radioButton1.Checked = true;
                                }
                            }
                            this.pictureBox5.Visible = false;
                            this.pictureBox7.Visible = true;
                            this.pictureBox2.Visible = false;
                            this.pictureBox6.Visible = true;
                            this.menuItem_21.Enabled = false;
                            this.menuItem_22.Enabled = false;
                            this.menuItem_23.Enabled = false;
                            this.menuItem_24.Enabled = false;
                            this.toolTip_0.SetToolTip(this.pictureBox5, null);
                            this.toolTip_0.SetToolTip(this.pictureBox2, null);
                            this.label133.Text = "Not Found";
                            this.label131.Text = "Not Found";
                            this.string_14 = "";
                            this.string_15 = "";
                            this.string_16 = "";
                            this.string_17 = "";
                            if (*(ref struct2 + 24) != 68 && *(ref struct2 + 25) != 76 && *(ref struct2 + 26) != 49 && *(ref struct2 + 27) != 48)
                            {
                                this.method_178();
                            }
                            string text3;
                            if (*(ref struct2 + 42) == 68 && *(ref struct2 + 43) == 54 && *(ref struct2 + 46) == 67 && *(ref struct2 + 47) == 71)
                            {
                                pByte_ = ref struct2 + 42;
                                text3 = this.method_176(pByte_, 17U);
                            }
                            else
                            {
                                if ((*(ref struct2 + 32) != 57 || *(ref struct2 + 33) != 53 || *(ref struct2 + 34) != 48 || *(ref struct2 + 35) != 52) && (*(ref struct2 + 32) != 48 || *(ref struct2 + 33) != 50 || *(ref struct2 + 34) != 50 || *(ref struct2 + 35) != 53) && (*(ref struct2 + 32) != 48 || *(ref struct2 + 33) != 50 || *(ref struct2 + 34) != 55 || *(ref struct2 + 35) != 50) && (*(ref struct2 + 32) != 48 || *(ref struct2 + 33) != 52 || *(ref struct2 + 34) != 48 || *(ref struct2 + 35) != 49) && (*(ref struct2 + 32) != 49 || *(ref struct2 + 33) != 48 || *(ref struct2 + 34) != 55 || *(ref struct2 + 35) != 49) && (*(ref struct2 + 32) != 49 || *(ref struct2 + 33) != 49 || *(ref struct2 + 34) != 55 || *(ref struct2 + 35) != 53) && (*(ref struct2 + 32) != 49 || *(ref struct2 + 33) != 53 || *(ref struct2 + 34) != 51 || *(ref struct2 + 35) != 50))
                                {
                                    this.Cursor = Cursors.Arrow;
                                    return 1;
                                }

                                _Module.memset((void*)(&@struct), 0, 12U);
                                @struct = 18;
                                *(ref @struct + 1) = 0;
                                *(ref @struct + 2) = 0;
                                *(ref @struct + 3) = 0;
                                *(ref @struct + 4) = 116;
                                *(ref @struct + 5) = 192;
                                if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num4, 512, (void*)(&struct2), &num5, 116U, 1, &gstruct) != null)
                                {
                                    this.Cursor = Cursors.Arrow;
                                    return 0;
                                }
                                if (*(ref struct2 + 96) == 255 && *(ref struct2 + 97) == 255)
                                {
                                    return 0;
                                }
                                pByte_ = ref struct2 + 96;
                                text3 = this.method_176(pByte_, 17U);
                            }
                            RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\SerList");
                            if (registryKey.GetValue(text3) != null)
                            {
                                string text4 = registryKey.GetValue(text3).ToString();
                                registryKey.Close();
                                registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + text4);
                                if (registryKey.GetValue("Key") != null)
                                {
                                    text = registryKey.GetValue("Key").ToString();
                                    this.string_14 = text;
                                }
                                if (registryKey.GetValue("JobName") != null)
                                {
                                    text2 = registryKey.GetValue("JobName").ToString();
                                }
                                string text5;
                                if (registryKey.GetValue("WorkingDir") != null)
                                {
                                    text5 = registryKey.GetValue("WorkingDir").ToString();
                                }
                                else
                                {
                                    text5 = "";
                                }
                                string strA;
                                if (registryKey.GetValue("LastFile") != null)
                                {
                                    strA = registryKey.GetValue("LastFile").ToString();
                                }
                                else
                                {
                                    strA = "";
                                }
                                Struct28 struct3;
                                for (int i = 0; i < 32; i += 2)
                                {
                                    string s = text.Substring(i, 2);
                                    IntPtr intPtr = Marshal.StringToHGlobalAnsi(s);
                                    IntPtr value = intPtr;
                                    sbyte* pSbyte_ = (sbyte*)((void*)value);
                                    this.method_10((void*)(&num5), pSbyte_, 2);
                                    *(ref struct3 + i / 2) = (byte)num5;
                                }
                                if (this.method_107((byte*)(&struct3)) == 1)
                                {
                                    this.toolTip_0.SetToolTip(this.pictureBox5, "Drive Barcode found in KeyDB (" + text4 + " - " + text2 + ")" + Environment.NewLine + "Barcode is: " + text3 + Environment.NewLine + "Key is: " + text);
                                    this.toolTip_0.SetToolTip(this.pictureBox2, "Drive Barcode found in KeyDB (" + text4 + " - " + text2 + ")" + Environment.NewLine + "Barcode is: " + text3 + Environment.NewLine + "Key is: " + text);
                                    this.pictureBox5.Visible = true;
                                    this.pictureBox7.Visible = false;
                                    this.pictureBox2.Visible = true;
                                    this.pictureBox6.Visible = false;
                                    if (string.Compare(strA, "") != 0)
                                    {
                                        this.menuItem_21.Enabled = true;
                                    }
                                    this.menuItem_22.Enabled = true;
                                    this.menuItem_23.Enabled = true;
                                    this.menuItem_24.Enabled = true;
                                    this.label133.Text = "Verified";
                                    this.label131.Text = "Verified";
                                    this.string_14 = text;
                                    this.string_15 = text4;
                                    this.string_16 = strA;
                                    this.string_17 = text5;
                                    registryKey.Close();
                                    this.Cursor = Cursors.Arrow;
                                    if (this.bool_1)
                                    {
                                        this.textBox6.AppendText("\r\n" + "Key found in KeyDB at record (" + text4 + " - " + text2 + ")" + "\r\n" + "Key is: " + text + "\r\n" + "Key has been tested and verified, thanks C4eva ! " + "\r\n");
                                    }
                                    result = 2;
                                }
                                else
                                {
                                    result = 1;
                                }
                            }
                            else
                            {
                                this.pictureBox5.Visible = false;
                                this.pictureBox7.Visible = true;
                                this.pictureBox2.Visible = false;
                                this.pictureBox6.Visible = true;
                                this.menuItem_21.Enabled = false;
                                this.menuItem_22.Enabled = false;
                                this.menuItem_23.Enabled = false;
                                this.menuItem_24.Enabled = false;
                                this.toolTip_0.SetToolTip(this.pictureBox5, null);
                                this.toolTip_0.SetToolTip(this.pictureBox2, null);
                                this.label133.Text = "Not Found";
                                this.label131.Text = "Not Found";
                                this.Cursor = Cursors.Arrow;
                                registryKey.Close();
                                result = 1;
                            }
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x060002C1 RID: 705 RVA: 0x00130714 File Offset: 0x00130714
        private unsafe int method_173()
        {
            string text = null;
            string text2 = null;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex * 72U + 4));
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                this.Cursor = Cursors.WaitCursor;

                _Module.Sleep(100);
                uint num2 = 0U;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72U + 3) == 1)
                {
                    this.method_175();
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 1000U);

                _Module.smethod_2(*(ref gstruct + 18), (byte)num2);

                _Module.Sleep(1);

                _Module.smethod_2(*(ref gstruct + 14), (byte)num);

                _Module.Sleep(500);
                num2 = (uint)_Module.smethod_1(*(ref gstruct + 18));
                if (num2 == 112U | num2 == 114U | num2 == 115U)
                {
                    this.label110.Text = "Drive in Vendor Mode!";
                    this.label109.Text = "";
                    this.label106.Text = "";
                    this.label92.Text = "";
                    this.label72.Text = "Drive in Vendor Mode!";
                    this.label68.Text = "";
                    this.label61.Text = "";
                    this.label58.Text = "";
                    this.label100.Text = "Drive in Vendor Mode!";
                    this.label99.Text = "";
                    this.label98.Text = "";
                    this.label97.Text = "";
                    if (this.checkBox5.CheckState == CheckState.Checked)
                    {
                        this.method_205();
                    }
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {
                    this.toolTip_0.SetToolTip(this.button42, "Lock/UnLock Slim Lite-On Spi ");
                    this.button42.Enabled = false;
                    this.button42.Text = "";
                    if (this.method_174() == 1)
                    {
                        this.Cursor = Cursors.Arrow;
                        result = 0;
                    }
                    else
                    {
                        uint num3;
                        if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                        {
                            num3 = 0U;
                        }
                        else
                        {
                            num3 = 16U;
                        }
                        Struct52 @struct;

                        _Module.memset((void*)(&@struct), 0, 12U);
                        @struct = 18;
                        *(ref @struct + 1) = 0;
                        *(ref @struct + 2) = 0;
                        *(ref @struct + 3) = 0;
                        *(ref @struct + 4) = 96;
                        *(ref @struct + 5) = 192;
                        Struct85 struct2;
                        uint num4;
                        if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num3, 512, (void*)(&struct2), &num4, 96U, 1, &gstruct) != null)
                        {
                            this.label110.Text = "No Drive Detected!";
                            this.label109.Text = "";
                            this.label106.Text = "";
                            this.label92.Text = "";
                            this.label72.Text = "No Drive Detected!";
                            this.label68.Text = "";
                            this.label61.Text = "";
                            this.label58.Text = "";
                            this.label100.Text = "No Drive Detected!";
                            this.label99.Text = "";
                            this.label98.Text = "";
                            this.label97.Text = "";
                            this.Cursor = Cursors.Arrow;
                            result = 0;
                        }
                        else
                        {
                            this.label110.Text = "";
                            this.label72.Text = "";
                            byte* pByte_ = ref struct2 + 8;
                            this.label110.Text = this.method_176(pByte_, 8U);
                            this.label72.Text = this.label110.Text;
                            this.label100.Text = this.label110.Text;
                            this.label109.Text = "";
                            this.label68.Text = "";
                            pByte_ = ref struct2 + 16;
                            this.label109.Text = this.method_176(pByte_, 16U);
                            this.label68.Text = this.label109.Text;
                            this.label99.Text = this.label109.Text;
                            this.label106.Text = "";
                            this.label61.Text = "";
                            pByte_ = ref struct2 + 32;
                            this.label106.Text = this.method_176(pByte_, 4U);
                            this.label61.Text = this.label106.Text;
                            this.label98.Text = this.label106.Text;
                            this.label92.Text = new string((sbyte*)(&_Module.struct19_0));
                            this.label58.Text = new string((sbyte*)(&_Module.struct19_0));
                            pByte_ = ref struct2 + 36;
                            this.label92.Text = this.method_176(pByte_, 20U);
                            this.label58.Text = this.label92.Text;
                            this.label97.Text = this.label92.Text;
                            Application.DoEvents();
                            if (*(ref struct2 + 8) == 0 | *(ref struct2 + 8) == 255)
                            {
                                this.label110.Text = "No Drive Detected!";
                                this.label109.Text = "";
                                this.label106.Text = "";
                                this.label92.Text = "";
                                this.label72.Text = "No Drive Detected!";
                                this.label68.Text = "";
                                this.label61.Text = "";
                                this.label58.Text = "";
                                this.label100.Text = "No Drive Detected!";
                                this.label99.Text = "";
                                this.label98.Text = "";
                                this.label97.Text = "";
                            }
                            if (*(ref struct2 + 8) == *(ref struct2 + 10) | *(ref struct2 + 8) == *(ref struct2 + 12) | *(ref struct2 + 8) == *(ref struct2 + 14) | *(ref struct2 + 8) == *(ref struct2 + 16))
                            {
                                this.label110.Text = "No Drive Detected!";
                                this.label109.Text = "";
                                this.label106.Text = "";
                                this.label92.Text = "";
                                this.label72.Text = "No Drive Detected!";
                                this.label68.Text = "";
                                this.label61.Text = "";
                                this.label58.Text = "";
                                this.label100.Text = "No Drive Detected!";
                                this.label99.Text = "";
                                this.label98.Text = "";
                                this.label97.Text = "";
                            }
                            if (*(ref struct2 + 32) == 48 & *(ref struct2 + 33) == 48)
                            {
                                if (*(ref struct2 + 34) == 53)
                                {
                                    this.radioButton4.Checked = true;
                                }
                                else if (*(ref struct2 + 34) == 55)
                                {
                                    this.radioButton5.Checked = true;
                                }
                                else if (*(ref struct2 + 34) == 52 & *(ref struct2 + 35) != 48)
                                {
                                    this.radioButton3.Checked = true;
                                }
                                else if (*(ref struct2 + 34) == 51 & *(ref struct2 + 35) == 54)
                                {
                                    this.radioButton2.Checked = true;
                                }
                                else
                                {
                                    this.radioButton1.Checked = true;
                                }
                            }
                            this.pictureBox5.Visible = false;
                            this.pictureBox7.Visible = true;
                            this.pictureBox2.Visible = false;
                            this.pictureBox6.Visible = true;
                            this.menuItem_21.Enabled = false;
                            this.menuItem_22.Enabled = false;
                            this.menuItem_23.Enabled = false;
                            this.menuItem_24.Enabled = false;
                            this.toolTip_0.SetToolTip(this.pictureBox5, null);
                            this.toolTip_0.SetToolTip(this.pictureBox2, null);
                            this.label133.Text = "Not Found";
                            this.label131.Text = "Not Found";
                            this.string_14 = "";
                            this.string_15 = "";
                            this.string_16 = "";
                            this.string_17 = "";
                            if (*(ref _Module.struct38_0 + selectedIndex * 72U) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72U + 3) == 1)
                            {
                                this.Cursor = Cursors.Arrow;
                                result = 1;
                            }
                            else
                            {
                                this.method_178();
                                string text3;
                                if (*(ref struct2 + 42) == 68 && *(ref struct2 + 43) == 54 && *(ref struct2 + 46) == 67 && *(ref struct2 + 47) == 71)
                                {
                                    pByte_ = ref struct2 + 42;
                                    text3 = this.method_176(pByte_, 17U);
                                }
                                else
                                {
                                    if ((*(ref struct2 + 32) != 57 || *(ref struct2 + 33) != 53 || *(ref struct2 + 34) != 48 || *(ref struct2 + 35) != 52) && (*(ref struct2 + 32) != 48 || *(ref struct2 + 33) != 50 || *(ref struct2 + 34) != 50 || *(ref struct2 + 35) != 53) && (*(ref struct2 + 32) != 48 || *(ref struct2 + 33) != 50 || *(ref struct2 + 34) != 55 || *(ref struct2 + 35) != 50) && (*(ref struct2 + 32) != 48 || *(ref struct2 + 33) != 52 || *(ref struct2 + 34) != 48 || *(ref struct2 + 35) != 49) && (*(ref struct2 + 32) != 49 || *(ref struct2 + 33) != 48 || *(ref struct2 + 34) != 55 || *(ref struct2 + 35) != 49))
                                    {
                                        this.Cursor = Cursors.Arrow;
                                        return 1;
                                    }

                                    _Module.memset((void*)(&@struct), 0, 12U);
                                    @struct = 18;
                                    *(ref @struct + 1) = 0;
                                    *(ref @struct + 2) = 0;
                                    *(ref @struct + 3) = 0;
                                    *(ref @struct + 4) = 116;
                                    *(ref @struct + 5) = 192;
                                    if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num3, 512, (void*)(&struct2), &num4, 116U, 1, &gstruct) != null)
                                    {
                                        this.Cursor = Cursors.Arrow;
                                        return 0;
                                    }
                                    if (*(ref struct2 + 96) == 255 && *(ref struct2 + 97) == 255)
                                    {
                                        return 0;
                                    }
                                    pByte_ = ref struct2 + 96;
                                    text3 = this.method_176(pByte_, 17U);
                                }
                                RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\SerList");
                                if (registryKey.GetValue(text3) != null)
                                {
                                    string text4 = registryKey.GetValue(text3).ToString();
                                    registryKey.Close();
                                    registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + text4);
                                    if (registryKey.GetValue("Key") != null)
                                    {
                                        text = registryKey.GetValue("Key").ToString();
                                        this.string_14 = text;
                                    }
                                    if (registryKey.GetValue("JobName") != null)
                                    {
                                        text2 = registryKey.GetValue("JobName").ToString();
                                    }
                                    string text5;
                                    if (registryKey.GetValue("WorkingDir") != null)
                                    {
                                        text5 = registryKey.GetValue("WorkingDir").ToString();
                                    }
                                    else
                                    {
                                        text5 = "";
                                    }
                                    string strA;
                                    if (registryKey.GetValue("LastFile") != null)
                                    {
                                        strA = registryKey.GetValue("LastFile").ToString();
                                    }
                                    else
                                    {
                                        strA = "";
                                    }
                                    Struct28 struct3;
                                    for (int i = 0; i < 32; i += 2)
                                    {
                                        string s = text.Substring(i, 2);
                                        IntPtr intPtr = Marshal.StringToHGlobalAnsi(s);
                                        IntPtr value = intPtr;
                                        sbyte* pSbyte_ = (sbyte*)((void*)value);
                                        this.method_10((void*)(&num4), pSbyte_, 2);
                                        *(ref struct3 + i / 2) = (byte)num4;
                                    }
                                    if (this.method_107((byte*)(&struct3)) == 1)
                                    {
                                        this.toolTip_0.SetToolTip(this.pictureBox5, "Drive Barcode found in KeyDB (" + text4 + " - " + text2 + ")" + Environment.NewLine + "Barcode is: " + text3 + Environment.NewLine + "Key is: " + text);
                                        this.toolTip_0.SetToolTip(this.pictureBox2, "Drive Barcode found in KeyDB (" + text4 + " - " + text2 + ")" + Environment.NewLine + "Barcode is: " + text3 + Environment.NewLine + "Key is: " + text);
                                        this.pictureBox5.Visible = true;
                                        this.pictureBox7.Visible = false;
                                        this.pictureBox2.Visible = true;
                                        this.pictureBox6.Visible = false;
                                        if (string.Compare(strA, "") != 0)
                                        {
                                            this.menuItem_21.Enabled = true;
                                        }
                                        this.menuItem_22.Enabled = true;
                                        this.menuItem_23.Enabled = true;
                                        this.menuItem_24.Enabled = true;
                                        this.label133.Text = "Verified";
                                        this.label131.Text = "Verified";
                                        this.string_14 = text;
                                        this.string_15 = text4;
                                        this.string_16 = strA;
                                        this.string_17 = text5;
                                        registryKey.Close();
                                        this.Cursor = Cursors.Arrow;
                                        if (this.bool_1)
                                        {
                                            this.textBox6.AppendText("\r\n" + "Key found in KeyDB at record (" + text4 + " - " + text2 + ")" + "\r\n" + "Key is: " + text + "\r\n" + "Key has been tested and verified, thanks C4eva ! " + "\r\n");
                                        }
                                        result = 2;
                                    }
                                    else
                                    {
                                        if (string.Compare(text3, "D608CG73880800348") == 0 && this.bool_1)
                                        {

                                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                            uint num5 = (uint)MessageBox.Show("Barcode is common to all Lite-On DG-16D2S following the 13146 System update" + "\n" + "Key DB entrys from before update may exist and match" + "\n" + "Click YES to manually enter and search for the Case Barcode.", "Dummy-From-KeyDB", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);

                                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                            if (num5 == 6U)
                                            {
                                                Common_Barcode common_Barcode = new Common_Barcode();
                                                if (common_Barcode.ShowDialog(this) == DialogResult.OK)
                                                {
                                                    text3 = common_Barcode.textBox3.Text;
                                                    text3 = text3.Substring(0, 17);
                                                    registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\SerList");
                                                    if (registryKey.GetValue(text3) == null)
                                                    {
                                                        this.pictureBox5.Visible = false;
                                                        this.pictureBox7.Visible = true;
                                                        this.pictureBox2.Visible = false;
                                                        this.pictureBox6.Visible = true;
                                                        this.menuItem_21.Enabled = false;
                                                        this.menuItem_22.Enabled = false;
                                                        this.menuItem_23.Enabled = false;
                                                        this.menuItem_24.Enabled = false;
                                                        this.toolTip_0.SetToolTip(this.pictureBox5, null);
                                                        this.toolTip_0.SetToolTip(this.pictureBox2, null);
                                                        this.label133.Text = "Not Found";
                                                        this.label131.Text = "Not Found";
                                                        this.Cursor = Cursors.Arrow;
                                                        registryKey.Close();
                                                        return 1;
                                                    }
                                                    text4 = registryKey.GetValue(text3).ToString();
                                                    registryKey.Close();
                                                }
                                            }
                                        }
                                        registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + text4);
                                        if (registryKey.GetValue("Key") != null)
                                        {
                                            text = registryKey.GetValue("Key").ToString();
                                            this.string_14 = text;
                                        }
                                        if (registryKey.GetValue("JobName") != null)
                                        {
                                            text2 = registryKey.GetValue("JobName").ToString();
                                        }
                                        if (registryKey.GetValue("WorkingDir") != null)
                                        {
                                            text5 = registryKey.GetValue("WorkingDir").ToString();
                                        }
                                        else
                                        {
                                            text5 = "";
                                        }
                                        if (registryKey.GetValue("LastFile") != null)
                                        {
                                            strA = registryKey.GetValue("LastFile").ToString();
                                        }
                                        else
                                        {
                                            strA = "";
                                        }
                                        for (int i = 0; i < 32; i += 2)
                                        {
                                            string s = text.Substring(i, 2);
                                            IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(s);
                                            IntPtr value2 = intPtr2;
                                            sbyte* pSbyte_ = (sbyte*)((void*)value2);
                                            this.method_10((void*)(&num4), pSbyte_, 2);
                                            *(ref struct3 + i / 2) = (byte)num4;
                                        }
                                        if (this.method_107((byte*)(&struct3)) == 1)
                                        {
                                            this.toolTip_0.SetToolTip(this.pictureBox5, "Drive Barcode found in KeyDB (" + text4 + " - " + text2 + ")" + Environment.NewLine + "Barcode is: " + text3 + Environment.NewLine + "Key is: " + text);
                                            this.toolTip_0.SetToolTip(this.pictureBox2, "Drive Barcode found in KeyDB (" + text4 + " - " + text2 + ")" + Environment.NewLine + "Barcode is: " + text3 + Environment.NewLine + "Key is: " + text);
                                            this.pictureBox5.Visible = true;
                                            this.pictureBox7.Visible = false;
                                            this.pictureBox2.Visible = true;
                                            this.pictureBox6.Visible = false;
                                            if (string.Compare(strA, "") != 0)
                                            {
                                                this.menuItem_21.Enabled = true;
                                            }
                                            this.menuItem_22.Enabled = true;
                                            this.menuItem_23.Enabled = true;
                                            this.menuItem_24.Enabled = true;
                                            this.label133.Text = "Verified";
                                            this.label131.Text = "Verified";
                                            this.string_14 = text;
                                            this.string_15 = text4;
                                            this.string_16 = strA;
                                            this.string_17 = text5;
                                            registryKey.Close();
                                            this.Cursor = Cursors.Arrow;
                                            if (this.bool_1)
                                            {
                                                this.textBox6.AppendText("\r\n" + "Key found in KeyDB at record (" + text4 + " - " + text2 + ")" + "\r\n" + "Key is: " + text + "\r\n" + "Key has been tested and verified, thanks C4eva ! " + "\r\n");
                                            }
                                            result = 2;
                                        }
                                        else
                                        {
                                            result = 1;
                                        }
                                    }
                                }
                                else
                                {
                                    this.pictureBox5.Visible = false;
                                    this.pictureBox7.Visible = true;
                                    this.pictureBox2.Visible = false;
                                    this.pictureBox6.Visible = true;
                                    this.menuItem_21.Enabled = false;
                                    this.menuItem_22.Enabled = false;
                                    this.menuItem_23.Enabled = false;
                                    this.menuItem_24.Enabled = false;
                                    this.toolTip_0.SetToolTip(this.pictureBox5, null);
                                    this.toolTip_0.SetToolTip(this.pictureBox2, null);
                                    this.label133.Text = "Not Found";
                                    this.label131.Text = "Not Found";
                                    this.Cursor = Cursors.Arrow;
                                    registryKey.Close();
                                    result = 1;
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x060002C2 RID: 706 RVA: 0x0013191C File Offset: 0x0013191C
        private unsafe int method_174()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                ushort selectedIndex = (ushort)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72 + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 1000U);
                Struct30 @struct;
                uint num2;
                if (_Module.smethod_12(236, (byte)num, null, null, 64, (void*)(&@struct), &num2, 512U, 512U, 1, &gstruct) != null)
                {
                    this.label110.Text = "No Drive Detected!";
                    this.label109.Text = "";
                    this.label106.Text = "";
                    this.label92.Text = "";
                    this.label72.Text = "No Drive Detected!";
                    this.label68.Text = "";
                    this.label61.Text = "";
                    this.label58.Text = "";
                    this.label100.Text = "No Drive Detected!";
                    this.label99.Text = "";
                    this.label98.Text = "";
                    this.label97.Text = "";
                    result = 0;
                }
                else
                {
                    Struct30 struct2;
                    for (uint num3 = 0U; num3 < 512U; num3 += 2U)
                    {
                        *(ref struct2 + num3) = *(ref @struct + (num3 + 1U));
                        *(ref struct2 + (num3 + 1U)) = *(ref @struct + num3);
                    }
                    byte* ptr = ref struct2 + 54;
                    Struct37 struct3;

                    _Module.memset((void*)(&struct3), 0, 40U);
                    Struct37 struct4;

                    _Module.memset((void*)(&struct4), 0, 40U);
                    Struct42 struct5;

                    _Module.memset((void*)(&struct5), 0, 20U);
                    uint num4;
                    for (num4 = 0U; num4 < 40U; num4 += 1U)
                    {
                        if (ptr[num4] == 32)
                        {
                            break;
                        }
                        *(ref struct3 + num4) = ptr[num4];
                    }
                    uint num5;
                    for (num5 = 0U; num5 < 40U - num4; num5 += 1U)
                    {
                        *(ref struct4 + num5) = ptr[num5 + num4 + 1U];
                    }
                    ptr = ref struct2 + 20;
                    for (num4 = 0U; num4 < 20U; num4 += 1U)
                    {
                        if (ptr[num4] != 32)
                        {
                            break;
                        }
                    }
                    for (num5 = 0U; num5 < 20U - num4; num5 += 1U)
                    {
                        *(ref struct5 + num5) = ptr[num5 + num4];
                    }
                    this.label110.Text = "";
                    this.label72.Text = "";
                    this.label100.Text = "";
                    this.label110.Text = this.method_176((byte*)(&struct3), num4);
                    this.label72.Text = this.label110.Text;
                    this.label100.Text = this.label110.Text;
                    this.label109.Text = "";
                    this.label68.Text = "";
                    this.label99.Text = "";
                    this.label109.Text = this.method_176((byte*)(&struct4), num5);
                    this.label68.Text = this.label109.Text;
                    this.label99.Text = this.label109.Text;
                    this.label106.Text = "";
                    this.label61.Text = "";
                    this.label98.Text = "";
                    this.label106.Text = this.method_176(ref struct2 + 46, 8U);
                    this.label61.Text = this.label106.Text;
                    this.label98.Text = this.label106.Text;
                    this.label92.Text = "";
                    this.label58.Text = "";
                    this.label97.Text = "";
                    this.label92.Text = this.method_176((byte*)(&struct5), 20U);
                    this.label58.Text = this.label92.Text;
                    this.label97.Text = this.label92.Text;
                    this.method_14();
                    this.method_18();
                    this.method_17();
                    this.checkBox6.CheckState = CheckState.Unchecked;
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x060002C3 RID: 707 RVA: 0x00131D28 File Offset: 0x00131D28
        private unsafe int method_175()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                ushort selectedIndex = (ushort)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72 + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 1000U);
                result = ((_Module.smethod_11(8, (byte)num, null, null, 64, 1, &gstruct) == null) ? 1 : 0);
            }
            return result;
        }

        // Token: 0x060002C4 RID: 708 RVA: 0x00131DA4 File Offset: 0x00131DA4
        private unsafe string method_176(byte* pByte_0, uint uint_0)
        {
            string text = null;
            for (uint num = 0U; num < uint_0; num += 1U)
            {
                if (pByte_0[num] >= 32 && pByte_0[num] <= 126)
                {
                    Struct20 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_0), pByte_0[num]);
                    string text2 = new string((sbyte*)(&_Module.struct19_0));
                    text2 += new string((sbyte*)(&@struct));
                    text += text2;
                }
                else
                {
                    text += " ";
                }
            }
            return text;
        }

        // Token: 0x060002C5 RID: 709 RVA: 0x00131E18 File Offset: 0x00131E18
        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            int selectedIndex = this.comboBox1.SelectedIndex;
            if (this.bool_1)
            {
                if (this.bool_1)
                {
                    this.method_177();
                }
                this.int_9 = this.comboBox1.SelectedIndex;
            }
        }

        // Token: 0x060002C6 RID: 710 RVA: 0x00131E5C File Offset: 0x00131E5C
        private void comboBox7_SelectedIndexChanged(object sender, EventArgs e)
        {
            uint selectedIndex = (uint)this.comboBox7.SelectedIndex;
            this.comboBox1.SelectedIndex = (int)selectedIndex;
            this.comboBox13.SelectedIndex = (int)selectedIndex;
        }

        // Token: 0x060002C7 RID: 711 RVA: 0x00131E90 File Offset: 0x00131E90
        private void comboBox13_SelectedIndexChanged(object sender, EventArgs e)
        {
            uint selectedIndex = (uint)this.comboBox13.SelectedIndex;
            this.comboBox1.SelectedIndex = (int)selectedIndex;
            this.comboBox7.SelectedIndex = (int)selectedIndex;
        }

        // Token: 0x060002C8 RID: 712 RVA: 0x003C5FD8 File Offset: 0x0030DFD8
        private unsafe void method_177()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            if (selectedIndex != 4294967295U)
            {
                this.comboBox7.SelectedIndex = (int)selectedIndex;
                this.comboBox13.SelectedIndex = (int)selectedIndex;
                this.label118.Text = "";
                this.label119.Text = "";
                this.label120.Text = "";
                this.label121.Text = "";
                this.label122.Text = "";
                this.label133.Text = "";
                this.label131.Text = "";
                if (*(ref _Module.gstruct10_0 + 4) != 0)
                {
                    this.method_422();
                }
                if (*(ref _Module.gstruct10_0 + 8) != 0)
                {
                    this.method_423();
                }
                if (*(ref _Module.struct38_0 + selectedIndex * 72U) == 0)
                {
                    if (*(ref _Module.struct38_0 + selectedIndex * 72U + 3) == 0)
                    {
                        *(ref _Module.gstruct10_0 + 14) = 0;
                        if (*(ref _Module.gstruct10_0 + 4) != 0)
                        {
                            this.method_422();
                        }
                        if (this.method_420() == 1)
                        {
                            this.label135.Text = "X360USB PRO: Opened";
                            Application.DoEvents();
                            Thread thread = new Thread(new ThreadStart(this.method_165));
                            thread.Start();
                        }
                    }
                    else
                    {
                        *(ref _Module.gstruct10_0 + 14) = 1;
                        if (*(ref _Module.gstruct10_0 + 8) != 0)
                        {
                            this.method_423();
                        }
                        if (this.method_421() == 1)
                        {
                            this.label135.Text = "X360USB BADASS: Opened";
                            Application.DoEvents();
                            Thread thread2 = new Thread(new ThreadStart(this.method_165));
                            thread2.Start();
                        }
                    }
                }
                else
                {
                    if (*(ref _Module.gstruct10_0 + 4) != 0)
                    {
                        this.method_424(1);
                        this.bool_9 = true;
                        this.method_422();
                        this.label135.Text = "X360USB PRO: Closed";
                        Application.DoEvents();
                        Thread thread3 = new Thread(new ThreadStart(this.method_165));
                        thread3.Start();
                    }
                    if (*(ref _Module.gstruct10_0 + 8) != 0)
                    {
                        this.method_423();
                        this.label135.Text = "X360USB BADASS: Closed";
                        Application.DoEvents();
                        Thread thread4 = new Thread(new ThreadStart(this.method_165));
                        thread4.Start();
                    }
                }
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 2) == 1)
                {
                    this.label117.Text = new string((sbyte*)(&_Module.struct35_126));
                    this.label83.Text = new string((sbyte*)(&_Module.struct35_126));
                }
                else if (*(ref _Module.struct38_0 + selectedIndex * 72U + 2) == 2)
                {
                    this.label117.Text = new string((sbyte*)(&_Module.struct35_127));
                    this.label83.Text = new string((sbyte*)(&_Module.struct35_127));
                }
                else
                {
                    this.label117.Text = new string((sbyte*)(&_Module.struct35_128));
                    this.label83.Text = new string((sbyte*)(&_Module.struct35_128));
                }
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 3) != 0)
                {
                    this.label116.Text = new string((sbyte*)(&_Module.struct7_5));
                    this.label81.Text = new string((sbyte*)(&_Module.struct7_5));
                }
                else
                {
                    this.label116.Text = new string((sbyte*)(&_Module.struct7_6));
                    this.label81.Text = new string((sbyte*)(&_Module.struct7_6));
                }
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    this.label115.Text = new string((sbyte*)(&_Module.struct10_24));
                    this.label76.Text = new string((sbyte*)(&_Module.struct10_24));
                }
                else
                {
                    this.label115.Text = new string((sbyte*)(&_Module.struct10_25));
                    this.label76.Text = new string((sbyte*)(&_Module.struct10_25));
                }
                if (*(ref _Module.struct38_0 + selectedIndex * 72U) == 0)
                {
                    if (*(ref _Module.struct38_0 + selectedIndex * 72U + 3) == 0)
                    {
                        this.label113.Text = "XECUTER X360USB PRO" + Environment.NewLine + "( Ver " + this.string_23 + " )";
                        this.label75.Text = "XECUTER X360USB PRO" + Environment.NewLine + "( Ver " + this.string_23 + " )";
                    }
                    else
                    {
                        this.label113.Text = "XECUTER X360USB BAD ASS" + Environment.NewLine + "( Ver " + this.string_24 + " )";
                        this.label75.Text = "XECUTER X360USB BAD ASS" + Environment.NewLine + "( Ver " + this.string_24 + " )";
                    }
                }
                else
                {
                    this.label113.Text = new string(ref _Module.struct38_0 + selectedIndex * 72U + 5);
                    this.label75.Text = new string(ref _Module.struct38_0 + selectedIndex * 72U + 5);
                }
                Struct60 @struct;
                *(ref @struct + 1) = (byte)(*(ref _Module.struct38_0 + selectedIndex * 72U) & 255);
                @struct = (*(ref _Module.struct38_0 + selectedIndex * 72U) & 65280) >> 8;
                this.label123.Text = this.method_171((byte*)(&@struct), 2U, 0U);
                this.label84.Text = this.method_171((byte*)(&@struct), 2U, 0U);
                this.method_15();
                this.method_19();
                this.method_16();
                this.pictureBox2.Visible = false;
                this.pictureBox5.Visible = false;
                this.menuItem_21.Enabled = false;
                this.menuItem_22.Enabled = false;
                this.menuItem_23.Enabled = false;
                this.menuItem_24.Enabled = false;
                Application.DoEvents();
                this.method_172();
            }
        }

        // Token: 0x060002C9 RID: 713 RVA: 0x00132420 File Offset: 0x00132420
        private void button9_Click(object sender, EventArgs e)
        {
            this.method_177();
        }

        // Token: 0x060002CA RID: 714 RVA: 0x00132434 File Offset: 0x00132434
        private void button10_Click(object sender, EventArgs e)
        {
            this.method_177();
        }

        // Token: 0x060002CB RID: 715 RVA: 0x00132448 File Offset: 0x00132448
        private unsafe void button25_Click(object sender, EventArgs e)
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            uint count = (uint)this.comboBox1.Items.Count;
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_177();
            if (this.radioButton17.Checked && num == 0 && count != 0U)
            {
                this.method_424(1);
                this.bool_9 = true;

                _Module.Sleep(10);
                this.method_424(5);

                _Module.Sleep(25);
                this.method_424(7);
            }
        }

        // Token: 0x060002CC RID: 716 RVA: 0x003C6540 File Offset: 0x0030E540
        private void method_178()
        {
            if (this.method_179() == 1)
            {
                if (this.bool_1)
                {
                    this.textBox6.AppendText("Drive is Hitachi.. " + "\r\n");
                }
            }
            else if (this.method_180() == 1)
            {
                if (this.bool_1)
                {
                    this.textBox6.AppendText("Drive is Hitachi.. 78/79 " + "\r\n");
                }
            }
            else if (this.method_181() == 1)
            {
                if (this.bool_1)
                {
                    this.textBox6.AppendText("Drive is Samsung.. " + "\r\n");
                }
                this.radioButton20.Checked = true;
            }
            else if (this.method_182() == 1)
            {
                if (this.bool_1)
                {
                    this.textBox6.AppendText("Drive is Benq.. " + "\r\n");
                }
                this.radioButton20.Checked = true;
            }
            else if (this.method_184() == 1)
            {
                if (this.bool_1)
                {
                    this.textBox6.AppendText("Drive is Slim Lite-On.. " + "\r\n");
                }
                if (this.radioButton21.Checked)
                {
                    this.radioButton19.Checked = true;
                }
            }
            else if (this.method_185() == 1)
            {
                if (this.bool_1)
                {
                    this.textBox6.AppendText("Drive is Slim Lite-On.. " + "\r\n");
                }
                if (this.radioButton21.Visible)
                {
                    this.radioButton21.Checked = true;
                }
            }
            else if (this.method_183() == 1)
            {
                if (this.bool_1)
                {
                    this.textBox6.AppendText("Drive is Lite-On.. " + "\r\n");
                }
                this.radioButton20.Checked = true;
            }
            else
            {
                this.textBox6.AppendText("Drive type Un-determined" + "\r\n");
            }
        }

        // Token: 0x060002CD RID: 717 RVA: 0x003C671C File Offset: 0x0030E71C
        private unsafe int method_179()
        {
            string text = null;
            string text2 = null;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 500U);
                Struct28 @struct;

                _Module.memset((void*)(&@struct), 0, 16U);
                Struct52 struct2;

                _Module.memset((void*)(&struct2), 0, 12U);
                struct2 = 231;
                *(ref struct2 + 1) = 72;
                *(ref struct2 + 2) = 73;
                *(ref struct2 + 3) = 84;
                *(ref struct2 + 4) = 1;
                *(ref struct2 + 6) = 145;
                *(ref struct2 + 7) = 0;
                *(ref struct2 + 8) = 79;
                *(ref struct2 + 9) = 0;
                *(ref struct2 + 10) = 0;
                *(ref struct2 + 11) = 16;
                uint num2;
                if (_Module.smethod_16((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&@struct), &num2, 16U, 1, &gstruct) != null)
                {
                    result = 0;
                }
                else
                {
                    this.method_6((byte*)(&@struct), 16U, 0U);
                    if (this.method_107((byte*)(&@struct)) == 1)
                    {
                        this.method_6((byte*)(&@struct), 16U, 0U);
                        if (this.bool_1)
                        {
                            this.textBox6.AppendText("Drive key " + this.string_0 + "\r\n");
                        }
                        RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\KeyList");
                        if (registryKey.GetValue(this.string_0) == null)
                        {
                            this.toolTip_0.SetToolTip(this.pictureBox5, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + this.string_0);
                            this.toolTip_0.SetToolTip(this.pictureBox2, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + this.string_0);
                            this.pictureBox5.Visible = true;
                            this.pictureBox7.Visible = false;
                            this.pictureBox2.Visible = true;
                            this.pictureBox6.Visible = false;
                            this.string_14 = text;
                            this.label133.Text = "Verified";
                            this.label131.Text = "Verified";
                            registryKey.Close();
                            this.Cursor = Cursors.Arrow;
                            if (this.bool_1)
                            {
                                this.textBox6.AppendText("\r\n" + "Key NOT in KeyDB " + "\r\n" + "Key is: " + this.string_0 + "\r\n" + "Key has been tested and verified, thanks C4eva ! " + "\r\n");
                            }
                            return 1;
                        }
                        string text3 = registryKey.GetValue(this.string_0).ToString();
                        registryKey.Close();
                        registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + text3);
                        if (registryKey.GetValue("JobName") != null)
                        {
                            text2 = registryKey.GetValue("JobName").ToString();
                        }
                        string text4;
                        if (registryKey.GetValue("WorkingDir") != null)
                        {
                            text4 = registryKey.GetValue("WorkingDir").ToString();
                        }
                        else
                        {
                            text4 = "";
                        }
                        string strA;
                        if (registryKey.GetValue("LastFile") != null)
                        {
                            strA = registryKey.GetValue("LastFile").ToString();
                        }
                        else
                        {
                            strA = "";
                        }
                        if (registryKey.GetValue("Index") != null)
                        {
                            text3 = registryKey.GetValue("Index").ToString();
                        }
                        this.toolTip_0.SetToolTip(this.pictureBox5, "Drive Key found in KeyDB (" + text3 + " - " + text2 + ")" + Environment.NewLine + "Key is: " + this.string_0);
                        this.toolTip_0.SetToolTip(this.pictureBox2, "Drive Key found in KeyDB (" + text3 + " - " + text2 + ")" + Environment.NewLine + "Key is: " + this.string_0);
                        this.pictureBox5.Visible = true;
                        this.pictureBox7.Visible = false;
                        this.pictureBox2.Visible = true;
                        this.pictureBox6.Visible = false;
                        if (string.Compare(strA, "") != 0)
                        {
                            this.menuItem_21.Enabled = true;
                        }
                        this.menuItem_22.Enabled = true;
                        this.menuItem_23.Enabled = true;
                        this.menuItem_24.Enabled = true;
                        this.string_14 = text;
                        this.string_15 = text3;
                        this.string_16 = strA;
                        this.string_17 = text4;
                        this.label133.Text = "Verified";
                        this.label131.Text = "Verified";
                        registryKey.Close();
                        this.Cursor = Cursors.Arrow;
                        if (this.bool_1)
                        {
                            this.textBox6.AppendText("\r\n" + "Key found in KeyDB at record (" + text3 + " - " + text2 + ")" + "\r\n" + "Key is: " + this.string_0 + "\r\n" + "Key has been tested and verified, thanks C4eva ! " + "\r\n");
                        }
                    }
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x060002CE RID: 718 RVA: 0x00132B48 File Offset: 0x00132B48
        private unsafe int method_180()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 250U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 231;
                *(ref @struct + 1) = 72;
                *(ref @struct + 2) = 73;
                *(ref @struct + 3) = 84;
                *(ref @struct + 4) = 48;
                *(ref @struct + 5) = 144;
                *(ref @struct + 6) = 144;
                *(ref @struct + 7) = 208;
                *(ref @struct + 8) = 1;
                result = ((_Module.smethod_15((byte*)(&@struct), 12U, (byte)num, 1, &gstruct) == null) ? 1 : 0);
            }
            return result;
        }

        // Token: 0x060002CF RID: 719 RVA: 0x003C6BCC File Offset: 0x0030EBCC
        private unsafe int method_181()
        {
            string text = null;
            string text2 = null;
            Struct28 @struct = 255;
            *(ref @struct + 1) = byte.MaxValue;
            *(ref @struct + 2) = byte.MaxValue;
            *(ref @struct + 3) = byte.MaxValue;
            *(ref @struct + 4) = byte.MaxValue;
            *(ref @struct + 5) = byte.MaxValue;
            *(ref @struct + 6) = byte.MaxValue;
            *(ref @struct + 7) = byte.MaxValue;
            *(ref @struct + 8) = byte.MaxValue;
            *(ref @struct + 9) = byte.MaxValue;
            *(ref @struct + 10) = byte.MaxValue;
            *(ref @struct + 11) = byte.MaxValue;
            *(ref @struct + 12) = byte.MaxValue;
            *(ref @struct + 13) = byte.MaxValue;
            *(ref @struct + 14) = byte.MaxValue;
            *(ref @struct + 15) = byte.MaxValue;
            uint uint_ = 12U;
            uint uint_2 = 16U;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 250U);
                Struct52 struct2;

                _Module.memset((void*)(&struct2), 0, 12U);
                Struct28 struct3;

                _Module.memset((void*)(&struct3), 0, 16U);
                struct2 = 255;
                *(ref struct2 + 1) = 8;
                *(ref struct2 + 2) = 5;
                *(ref struct2 + 4) = 5;
                *(ref struct2 + 5) = 1;
                *(ref struct2 + 6) = 3;
                *(ref struct2 + 8) = 4;
                *(ref struct2 + 9) = 7;
                uint num2;
                if (_Module.smethod_16((byte*)(&struct2), uint_, (byte)num, 512, (void*)(&struct3), &num2, uint_2, 1, &gstruct) != null)
                {
                    result = 0;
                }
                else
                {
                    if (this.method_107((byte*)(&struct3)) == 1)
                    {
                        this.method_6((byte*)(&struct3), 16U, 0U);
                        RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\KeyList");
                        if (registryKey.GetValue(this.string_0) == null)
                        {
                            this.toolTip_0.SetToolTip(this.pictureBox5, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + this.string_0);
                            this.toolTip_0.SetToolTip(this.pictureBox2, "Drive Key NOT in KeyDB " + Environment.NewLine + "Key is: " + this.string_0);
                            this.pictureBox5.Visible = true;
                            this.pictureBox7.Visible = false;
                            this.pictureBox2.Visible = true;
                            this.pictureBox6.Visible = false;
                            this.string_14 = text;
                            this.label133.Text = "Verified";
                            this.label131.Text = "Verified";
                            registryKey.Close();
                            this.Cursor = Cursors.Arrow;
                            if (this.bool_1)
                            {
                                this.textBox6.AppendText("\r\n" + "Key NOT in KeyDB " + "\r\n" + "Key is: " + this.string_0 + "\r\n" + "Key has been tested and verified, thanks C4eva ! " + "\r\n");
                            }
                            return 1;
                        }
                        string text3 = registryKey.GetValue(this.string_0).ToString();
                        registryKey.Close();
                        registryKey = Registry.CurrentUser.CreateSubKey("JF_KeyDB\\" + text3);
                        if (registryKey.GetValue("JobName") != null)
                        {
                            text2 = registryKey.GetValue("JobName").ToString();
                        }
                        string text4;
                        if (registryKey.GetValue("WorkingDir") != null)
                        {
                            text4 = registryKey.GetValue("WorkingDir").ToString();
                        }
                        else
                        {
                            text4 = "";
                        }
                        string strA;
                        if (registryKey.GetValue("LastFile") != null)
                        {
                            strA = registryKey.GetValue("LastFile").ToString();
                        }
                        else
                        {
                            strA = "";
                        }
                        if (registryKey.GetValue("Index") != null)
                        {
                            text3 = registryKey.GetValue("Index").ToString();
                        }
                        this.toolTip_0.SetToolTip(this.pictureBox5, "Drive Key found in KeyDB (" + text3 + " - " + text2 + ")" + Environment.NewLine + "Key is: " + this.string_0);
                        this.toolTip_0.SetToolTip(this.pictureBox2, "Drive Key found in KeyDB (" + text3 + " - " + text2 + ")" + Environment.NewLine + "Key is: " + this.string_0);
                        this.pictureBox5.Visible = true;
                        this.pictureBox7.Visible = false;
                        this.pictureBox2.Visible = true;
                        this.pictureBox6.Visible = false;
                        if (string.Compare(strA, "") != 0)
                        {
                            this.menuItem_21.Enabled = true;
                        }
                        this.menuItem_22.Enabled = true;
                        this.menuItem_23.Enabled = true;
                        this.menuItem_24.Enabled = true;
                        this.string_14 = text;
                        this.string_15 = text3;
                        this.string_16 = strA;
                        this.string_17 = text4;
                        this.label133.Text = "Verified";
                        this.label131.Text = "Verified";
                        registryKey.Close();
                        this.Cursor = Cursors.Arrow;
                        if (this.bool_1)
                        {
                            this.textBox6.AppendText("\r\n" + "Key found in KeyDB at record (" + text3 + " - " + text2 + ")" + "\r\n" + "Key is: " + this.string_0 + "\r\n" + "Key has been tested and verified, thanks C4eva ! " + "\r\n");
                        }
                    }
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x060002D0 RID: 720 RVA: 0x00133124 File Offset: 0x00133124
        private unsafe int method_182()
        {
            Struct28 @struct = 0;
            *(ref @struct + 1) = 1;
            *(ref @struct + 2) = 2;
            *(ref @struct + 3) = 3;
            *(ref @struct + 4) = 4;
            *(ref @struct + 5) = 5;
            *(ref @struct + 6) = 6;
            *(ref @struct + 7) = 7;
            *(ref @struct + 8) = 8;
            *(ref @struct + 9) = 9;
            *(ref @struct + 10) = 10;
            *(ref @struct + 11) = 11;
            *(ref @struct + 12) = 12;
            *(ref @struct + 13) = 13;
            *(ref @struct + 14) = 14;
            *(ref @struct + 15) = 15;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                if (*(ref _Module.struct38_0 + selectedIndex * 72U) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72U + 3) == 1)
                {
                    result = 0;
                }
                else
                {
                    uint num;
                    if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                    {
                        num = 0U;
                    }
                    else
                    {
                        num = 16U;
                    }
                    GStruct3 gstruct;

                    _Module.smethod_21(&gstruct, ushort_, 0, 1, 5000U);
                    Struct52 struct2;

                    _Module.memset((void*)(&struct2), 0, 12U);
                    struct2 = 253;
                    *(ref struct2 + 1) = 15;
                    *(ref struct2 + 2) = 66;
                    *(ref struct2 + 3) = 69;
                    *(ref struct2 + 4) = 78;
                    *(ref struct2 + 5) = 81;
                    *(ref struct2 + 6) = 0;
                    *(ref struct2 + 7) = 0;
                    *(ref struct2 + 8) = 16;
                    uint num2;
                    result = ((_Module.smethod_17((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&@struct), &num2, 16U, 1, &gstruct) == null) ? 1 : 0);
                }
            }
            return result;
        }

        // Token: 0x060002D1 RID: 721 RVA: 0x0013328C File Offset: 0x0013328C
        private unsafe int method_183()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 250U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 18;
                *(ref @struct + 1) = 0;
                *(ref @struct + 2) = 0;
                *(ref @struct + 3) = 0;
                *(ref @struct + 4) = 96;
                *(ref @struct + 5) = 192;
                *(ref @struct + 6) = 0;
                *(ref @struct + 7) = 0;
                *(ref @struct + 8) = 80;
                *(ref @struct + 9) = 76;
                *(ref @struct + 10) = 68;
                *(ref @struct + 11) = 83;
                Struct29 struct2;
                uint num2;
                if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct2), &num2, 96U, 1, &gstruct) != null)
                {
                    result = 0;
                }
                else
                {
                    if (*(ref struct2 + 8) == 80 && *(ref struct2 + 9) == 76 && *(ref struct2 + 10) == 68)
                    {
                        if (*(ref struct2 + 11) == 83)
                        {
                            return 1;
                        }
                    }
                    result = 0;
                }
            }
            return result;
        }

        // Token: 0x060002D2 RID: 722 RVA: 0x0013339C File Offset: 0x0013339C
        private unsafe int method_184()
        {
            Struct103 @struct = 68;
            *(ref @struct + 1) = 71;
            *(ref @struct + 2) = 45;
            *(ref @struct + 3) = 49;
            *(ref @struct + 4) = 54;
            *(ref @struct + 5) = 68;
            *(ref @struct + 6) = 52;
            *(ref @struct + 7) = 83;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 250U);
                Struct52 struct2;

                _Module.memset((void*)(&struct2), 0, 12U);
                struct2 = 18;
                *(ref struct2 + 1) = 0;
                *(ref struct2 + 2) = 0;
                *(ref struct2 + 3) = 0;
                *(ref struct2 + 4) = 116;
                *(ref struct2 + 5) = 192;
                Struct85 struct3;
                uint num2;
                result = ((_Module.smethod_16((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&struct3), &num2, 116U, 1, &gstruct) == null) ? ((_Module.memcmp(ref struct3 + 16, (void*)(&@struct), 8U) != null) ? 0 : 1) : 0);
            }
            return result;
        }

        // Token: 0x060002D3 RID: 723 RVA: 0x001334A0 File Offset: 0x001334A0
        private unsafe int method_185()
        {
            Struct103 @struct = 68;
            *(ref @struct + 1) = 71;
            *(ref @struct + 2) = 45;
            *(ref @struct + 3) = 49;
            *(ref @struct + 4) = 54;
            *(ref @struct + 5) = 68;
            *(ref @struct + 6) = 53;
            *(ref @struct + 7) = 83;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 250U);
                Struct52 struct2;

                _Module.memset((void*)(&struct2), 0, 12U);
                struct2 = 18;
                *(ref struct2 + 1) = 0;
                *(ref struct2 + 2) = 0;
                *(ref struct2 + 3) = 0;
                *(ref struct2 + 4) = 116;
                *(ref struct2 + 5) = 192;
                Struct85 struct3;
                uint num2;
                result = ((_Module.smethod_16((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&struct3), &num2, 116U, 1, &gstruct) == null) ? ((_Module.memcmp(ref struct3 + 16, (void*)(&@struct), 8U) != null) ? 0 : 1) : 0);
            }
            return result;
        }

        // Token: 0x060002D4 RID: 724 RVA: 0x001335A4 File Offset: 0x001335A4
        private void button18_Click(object sender, EventArgs e)
        {
            this.method_14();
            this.radioButton20.Checked = true;
            this.method_197();
            this.method_186();
            this.method_15();
        }

        // Token: 0x060002D5 RID: 725 RVA: 0x001335D8 File Offset: 0x001335D8
        private unsafe void method_186()
        {
            string str = null;
            this.method_172();
            if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No Drive Detected!" + "\n" + "Benq Un Lock aborted! ", "Benq Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("Drive in Vendor Mode!" + "\n" + "Benq Un Lock aborted!", "Benq Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
            }
            else if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 1000U);
                Struct28 @struct;

                _Module.memset((void*)(&@struct), 0, 16U);
                Struct52 struct2;

                _Module.memset((void*)(&struct2), 0, 12U);
                struct2 = 253;
                *(ref struct2 + 1) = 15;
                *(ref struct2 + 2) = 66;
                *(ref struct2 + 3) = 69;
                *(ref struct2 + 4) = 78;
                *(ref struct2 + 5) = 81;
                *(ref struct2 + 6) = 0;
                *(ref struct2 + 7) = 0;
                *(ref struct2 + 8) = 16;
                this.textBox6.AppendText("\r\n" + "Sending Magic Keys to Drive on port " + this.label123.Text + "\r\n");
                for (uint num2 = 0U; num2 < 784U; num2 += 16U)
                {
                    Struct28 struct3;

                    _Module.memcpy((void*)(&struct3), ref _Module.struct51_0 + num2, 16U);
                    this.method_391((byte*)(&struct3), (byte*)(&@struct), 16);
                    uint num3;
                    if (_Module.smethod_17((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&@struct), &num3, 16U, 1, &gstruct) != null)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Benq-Un-Lock command returned an Error", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        return;
                    }
                    selectedIndex = (uint)this.comboBox1.SelectedIndex;
                    if (*(ref _Module.struct38_0 + selectedIndex * 72U) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72U + 3) == 1)
                    {
                        this.method_424(88);
                    }
                    this.textBox6.AppendText(new string((sbyte*)(&_Module.struct6_9)));
                }
                this.textBox6.AppendText("\r\n" + "Done!" + "\r\n");
                this.textBox6.AppendText("Sending Vendor Intro" + str + "\r\n");
                if (this.method_252() != 115U)
                {

                    _Module.Sleep(250);
                    if (this.method_252() != 115U)
                    {

                        _Module.Sleep(250);
                        if (this.method_252() != 115U)
                        {

                            _Module.Sleep(250);
                            if (this.method_252() != 115U)
                            {
                                this.textBox6.AppendText("Vendor Intro Failed" + str + "\r\n");
                                return;
                            }
                        }
                    }
                }
                else
                {
                    this.label122.Text = "Serial flash with status 0x73";
                }
                this.textBox6.AppendText("Requesting Device ID" + str + "\r\n");
                uint uint_ = (uint)this.method_297();
                if (this.method_206(uint_) == 0 && this.bool_2)
                {
                    this.method_187();
                }
            }
        }

        // Token: 0x060002D6 RID: 726 RVA: 0x003C70D8 File Offset: 0x0030F0D8
        private unsafe void method_187()
        {
            this.Cursor = Cursors.WaitCursor;
            if (this.method_298() != 0)
            {
                this.Cursor = Cursors.Arrow;
            }
            else
            {
                this.Cursor = Cursors.Arrow;
                this.method_263();
                this.tabControl5.SelectedTab = this.Firmtools;
                if (*(*(ref _Module.struct123_0 + 4)) == 0)
                {
                    this.textBox6.AppendText("Load Failed" + "\r\n");
                }
                else
                {
                    string text = "Drive has been unlocked, put in vendor mode and dumped." + "\n";
                    text = text + "iXtreme has auto-loaded and been spoofed from source." + "\n\n";
                    text = text + "Do You wish to proceed with erase and Flash" + "\n";

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num = (int)MessageBox.Show(text, "Auto Flash", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num == 7)
                    {
                        this.textBox6.AppendText("Auto-Flashing was aborted!" + "\r\n");
                    }
                    else
                    {
                        this.Cursor = Cursors.WaitCursor;
                        this.method_299();
                        this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                        if (this.method_302() == 1)
                        {
                            this.Cursor = Cursors.Arrow;
                        }
                        else
                        {
                            this.Cursor = Cursors.Arrow;

                            _Module.Sleep(500);
                            this.Cursor = Cursors.WaitCursor;
                            this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                            this.method_298();
                            this.Cursor = Cursors.Arrow;
                            for (int i = 0; i < 262144; i++)
                            {
                                if (*(*(ref _Module.struct121_0 + 7172) + i) != *(*(ref _Module.struct121_0 + 4780) + i))
                                {
                                    this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                                    return;
                                }
                            }
                            this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                            this.string_2 = "Write verified !";
                            this.string_3 = "OK";
                        }
                    }
                }
            }
        }

        // Token: 0x060002D7 RID: 727 RVA: 0x00133BD4 File Offset: 0x00133BD4
        private unsafe void method_188()
        {
            this.Cursor = Cursors.WaitCursor;
            Application.DoEvents();
            this.textBox6.AppendText("\r\n");
            for (int i = 0; i < 12; i++)
            {

                _Module.Sleep(250);
                this.textBox6.AppendText(".");
            }
            this.textBox6.AppendText("\r\n");
            if (this.method_307() != 0)
            {
                this.Cursor = Cursors.Arrow;
            }
            else if (_Module.memcmp(*(ref _Module.struct121_0 + 7172) + 82176, (void*)(&_Module.struct43_16), 6U) != null)
            {
                this.Cursor = Cursors.Arrow;
            }
            else
            {
                this.Cursor = Cursors.Arrow;
                this.method_264();
                this.textBox6.AppendText("\r\n" + "Loading MTK_Flash source file " + "\r\n");
                if (*(*(ref _Module.struct123_0 + 4)) == 0)
                {
                    this.textBox6.AppendText("Load Failed" + "\r\n");
                }
                else
                {
                    string text = "Drive has been unlocked, put in vendor mode and dumped." + "\n";
                    text = text + "iXtreme has auto-loaded and been spoofed from source." + "\n\n";
                    text = text + "Do You wish to proceed with erase and Flash" + "\n";

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num = (int)MessageBox.Show(text, "Auto Flash", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num == 7)
                    {
                        this.textBox6.AppendText("Auto-Flashing was aborted!" + "\r\n");
                    }
                    else
                    {
                        this.Cursor = Cursors.WaitCursor;
                        this.method_311();
                        this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                        if (this.method_326() == 1)
                        {
                            this.Cursor = Cursors.Arrow;
                        }
                        else
                        {
                            this.Cursor = Cursors.Arrow;

                            _Module.Sleep(500);
                            this.Cursor = Cursors.WaitCursor;
                            this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                            this.method_307();
                            this.Cursor = Cursors.Arrow;
                            for (int i = 0; i < 262144; i++)
                            {
                                if (*(*(ref _Module.struct121_0 + 7172) + i) != *(*(ref _Module.struct121_0 + 4780) + i))
                                {
                                    this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                                    return;
                                }
                            }
                            this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                            this.string_2 = "Write verified !";
                            this.string_3 = "OK";
                        }
                    }
                }
            }
        }

        // Token: 0x060002D8 RID: 728 RVA: 0x00133E84 File Offset: 0x00133E84
        private void button40_Click(object sender, EventArgs e)
        {
            this.method_14();
            this.method_197();
            if (string.Compare(this.label109.Text, 0, "DG-16D5S", 0, 8) == 0)
            {
                this.method_190();
            }
            else
            {
                this.method_189();
            }
            this.method_15();
        }

        // Token: 0x060002D9 RID: 729 RVA: 0x00133ED0 File Offset: 0x00133ED0
        private unsafe int method_189()
        {
            Struct68 @struct = 0;
            initblk(ref @struct + 1, 0, 259);

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));
            this.Cursor = Cursors.WaitCursor;
            this.method_172();
            this.radioButton19.Checked = true;
            int result;
            if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No Drive Detected!" + "\n" + "Slim Un Lock aborted! ", "Slim Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
                result = 0;
            }
            else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("Drive in Vendor Mode!" + "\n" + "Slim Un Lock aborted!", "Slim Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
                result = 0;
            }
            else
            {
                this.method_82();
                Struct28 struct2;
                this.method_85((byte*)(&struct2));
                if (this.method_87((byte*)(&struct2)) == 0)
                {
                    this.Cursor = Cursors.Arrow;

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Unlock failed !", "Slim Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    result = 0;
                }
                else if (this.method_200() == 0)
                {
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {
                    this.Cursor = Cursors.Arrow;
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x060002DA RID: 730 RVA: 0x001340D0 File Offset: 0x001340D0
        private unsafe int method_190()
        {
            Struct68 @struct = 0;
            initblk(ref @struct + 1, 0, 259);

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));
            this.Cursor = Cursors.WaitCursor;
            this.method_172();
            this.radioButton19.Checked = true;
            int result;
            if (string.Compare(Convert.ToString(this.label72.Text), "No Drive Detected!") == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No Drive Detected!" + "\n" + "Slim Un Lock aborted! ", "Slim Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
                result = 0;
            }
            else if (string.Compare(Convert.ToString(this.label72.Text), "Drive in Vendor Mode!") == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("Drive in Vendor Mode!" + "\n" + "Slim Un Lock aborted!", "Slim Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                this.label88.Text = " ";
                this.label87.Text = " ";
                result = 0;
            }
            else
            {
                this.method_82();
                Struct28 struct2;
                this.method_86((byte*)(&struct2));
                if (this.method_88((byte*)(&struct2)) == 0)
                {
                    this.Cursor = Cursors.Arrow;

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Unlock failed !", "Slim Un Lock", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    result = 0;
                }
                else if (this.method_201() == 0)
                {
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {
                    this.Cursor = Cursors.Arrow;
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x060002DB RID: 731 RVA: 0x001342D0 File Offset: 0x001342D0
        private void button21_Click(object sender, EventArgs e)
        {
            this.method_14();
            this.radioButton20.Checked = true;
            this.method_191();
            this.method_15();
        }

        // Token: 0x060002DC RID: 732 RVA: 0x001342FC File Offset: 0x001342FC
        private unsafe void method_191()
        {
            string str = null;
            Struct4 @struct = 0;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            *(ref @struct + 4) = 0;
            *(ref @struct + 5) = 0;
            *(ref @struct + 6) = 0;
            *(ref @struct + 7) = 0;
            *(ref @struct + 8) = 251;
            *(ref @struct + 9) = 48;
            *(ref @struct + 10) = byte.MaxValue;
            *(ref @struct + 11) = byte.MaxValue;
            *(ref @struct + 12) = byte.MaxValue;
            *(ref @struct + 13) = byte.MaxValue;
            *(ref @struct + 14) = byte.MaxValue;
            *(ref @struct + 15) = byte.MaxValue;
            *(ref @struct + 16) = byte.MaxValue;
            *(ref @struct + 17) = byte.MaxValue;
            *(ref @struct + 18) = byte.MaxValue;
            *(ref @struct + 19) = byte.MaxValue;
            *(ref @struct + 20) = byte.MaxValue;
            *(ref @struct + 21) = byte.MaxValue;
            *(ref @struct + 22) = byte.MaxValue;
            *(ref @struct + 23) = byte.MaxValue;
            *(ref @struct + 24) = byte.MaxValue;
            *(ref @struct + 25) = byte.MaxValue;
            *(ref @struct + 26) = byte.MaxValue;
            *(ref @struct + 27) = byte.MaxValue;
            *(ref @struct + 28) = byte.MaxValue;
            *(ref @struct + 29) = byte.MaxValue;
            *(ref @struct + 30) = byte.MaxValue;
            *(ref @struct + 31) = byte.MaxValue;
            *(ref @struct + 32) = byte.MaxValue;
            *(ref @struct + 33) = byte.MaxValue;
            *(ref @struct + 34) = byte.MaxValue;
            *(ref @struct + 35) = byte.MaxValue;
            *(ref @struct + 36) = byte.MaxValue;
            *(ref @struct + 37) = byte.MaxValue;
            *(ref @struct + 38) = byte.MaxValue;
            *(ref @struct + 39) = byte.MaxValue;
            *(ref @struct + 40) = byte.MaxValue;
            *(ref @struct + 41) = byte.MaxValue;
            *(ref @struct + 42) = byte.MaxValue;
            *(ref @struct + 43) = byte.MaxValue;
            *(ref @struct + 44) = byte.MaxValue;
            *(ref @struct + 45) = byte.MaxValue;
            *(ref @struct + 46) = byte.MaxValue;
            *(ref @struct + 47) = byte.MaxValue;
            *(ref @struct + 48) = byte.MaxValue;
            *(ref @struct + 49) = byte.MaxValue;
            *(ref @struct + 50) = byte.MaxValue;
            *(ref @struct + 51) = byte.MaxValue;
            *(ref @struct + 52) = byte.MaxValue;
            *(ref @struct + 53) = byte.MaxValue;
            *(ref @struct + 54) = byte.MaxValue;
            *(ref @struct + 55) = byte.MaxValue;
            *(ref @struct + 56) = byte.MaxValue;
            *(ref @struct + 57) = byte.MaxValue;
            *(ref @struct + 58) = byte.MaxValue;
            *(ref @struct + 59) = byte.MaxValue;
            *(ref @struct + 60) = byte.MaxValue;
            *(ref @struct + 61) = byte.MaxValue;
            *(ref @struct + 62) = byte.MaxValue;
            *(ref @struct + 63) = byte.MaxValue;
            Struct28 struct2 = 255;
            *(ref struct2 + 1) = byte.MaxValue;
            *(ref struct2 + 2) = byte.MaxValue;
            *(ref struct2 + 3) = byte.MaxValue;
            *(ref struct2 + 4) = byte.MaxValue;
            *(ref struct2 + 5) = byte.MaxValue;
            *(ref struct2 + 6) = byte.MaxValue;
            *(ref struct2 + 7) = byte.MaxValue;
            *(ref struct2 + 8) = byte.MaxValue;
            *(ref struct2 + 9) = byte.MaxValue;
            *(ref struct2 + 10) = byte.MaxValue;
            *(ref struct2 + 11) = byte.MaxValue;
            *(ref struct2 + 12) = byte.MaxValue;
            *(ref struct2 + 13) = byte.MaxValue;
            *(ref struct2 + 14) = byte.MaxValue;
            *(ref struct2 + 15) = byte.MaxValue;
            if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                if (!this.bool_2)
                {
                    string text = "Sammy_Un_Lock will unlock a Samsung MS28 with stock f/w and LT " + "\n";
                    text = text + "and LT+ flashed drives. " + "\n";
                    text = text + "For iXtreme ver 1.4 and before, unlock using 0800 DVD. " + "\n";
                    text = text + "For iXtreme 1.5, unlock drive by powering up with tray half open." + "\n";
                    text = text + "Do you wish to proceed anyway ?" + "\n";

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num2 = (int)MessageBox.Show(text, "Sammy-Un-Lock", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num2 == 7)
                    {
                        this.textBox6.AppendText("Sammy-Un-Lock NOT sent " + "\r\n");
                        return;
                    }
                }
                Application.DoEvents();
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct52 struct3;

                _Module.memset((void*)(&struct3), 0, 12U);
                struct3 = 255;
                *(ref struct3 + 1) = 8;
                *(ref struct3 + 2) = 5;
                *(ref struct3 + 4) = 5;
                *(ref struct3 + 5) = 1;
                *(ref struct3 + 6) = 3;
                *(ref struct3 + 8) = 4;
                *(ref struct3 + 9) = 7;
                this.textBox6.AppendText("\r\n" + "Sending Sammy_Un_Lock to Drive on port " + this.label123.Text + "\r\n");
                Struct28 struct4;
                uint num3;
                if (_Module.smethod_16((byte*)(&struct3), 12U, (byte)num, 512, (void*)(&struct4), &num3, 16U, 1, &gstruct) != null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Failed at Stage 1", "Sammy_Un_Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {
                    this.textBox6.AppendText("Stage 1, Complete!" + "\r\n");
                    if (struct4 == struct2)
                    {

                        _Module.memset((void*)(&struct4), 0, 16U);
                    }
                    Struct4 struct5;

                    _Module.memcpy((void*)(&struct5), (void*)(&@struct), 64U);

                    _Module.memset((void*)(&struct3), 0, 12U);
                    struct3 = 85;
                    *(ref struct3 + 8) = 58;
                    if (_Module.smethod_17((byte*)(&struct3), 12U, (byte)num, 512, (void*)(&struct5), &num3, 64U, 1, &gstruct) != null)
                    {

                        _Module.Sleep(2000);
                        if (_Module.smethod_17((byte*)(&struct3), 12U, (byte)num, 512, (void*)(&struct5), &num3, 64U, 1, &gstruct) != null)
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            MessageBox.Show("Failed at Stage 2", "Sammy_Un_Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            return;
                        }
                    }
                    this.textBox6.AppendText("Stage 2, Complete!" + "\r\n");
                    if (*(ref _Module.struct38_0 + selectedIndex * 72U) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72U + 3) == 1)
                    {
                        this.method_424(88);
                    }

                    _Module.Sleep(2000);
                    byte* ptr = ref struct5 + 10;

                    _Module.memcpy((void*)ptr, (void*)(&struct4), 16U);
                    if (_Module.smethod_17((byte*)(&struct3), 12U, (byte)num, 512, (void*)(&struct5), &num3, 64U, 1, &gstruct) != null)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Failed at Stage 3", "Sammy_Un_Lock", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    }
                    else
                    {
                        this.textBox6.AppendText("Stage 3, Complete!" + "\r\n" + "Done!" + "\r\n");
                        if (*(ref _Module.struct38_0 + selectedIndex * 72U) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72U + 3) == 1)
                        {
                            this.method_424(88);
                        }
                        Application.DoEvents();
                        this.textBox6.AppendText("Sending Vendor Intro" + str + "\r\n");
                        Application.DoEvents();
                        if (this.method_252() != 112U)
                        {

                            _Module.Sleep(250);
                            if (this.method_252() != 112U)
                            {

                                _Module.Sleep(250);
                                if (this.method_252() != 112U)
                                {

                                    _Module.Sleep(250);
                                    if (this.method_252() != 112U)
                                    {
                                        this.textBox6.AppendText("Vendor Intro Failed" + str + "\r\n");
                                        return;
                                    }
                                }
                            }
                        }
                        else
                        {
                            this.label122.Text = "Parallel flash with Status 0x70";
                        }
                        this.textBox6.AppendText("Requesting Device ID" + str + "\r\n");
                        uint uint_ = (uint)this.method_290();
                        if (this.method_206(uint_) == 0 && this.bool_2)
                        {
                            this.method_193();
                        }
                    }
                }
            }
        }

        // Token: 0x060002DD RID: 733 RVA: 0x00134AE4 File Offset: 0x00134AE4
        private unsafe void method_192()
        {
            Struct28 @struct = 255;
            *(ref @struct + 1) = byte.MaxValue;
            *(ref @struct + 2) = byte.MaxValue;
            *(ref @struct + 3) = byte.MaxValue;
            *(ref @struct + 4) = byte.MaxValue;
            *(ref @struct + 5) = byte.MaxValue;
            *(ref @struct + 6) = byte.MaxValue;
            *(ref @struct + 7) = byte.MaxValue;
            *(ref @struct + 8) = byte.MaxValue;
            *(ref @struct + 9) = byte.MaxValue;
            *(ref @struct + 10) = byte.MaxValue;
            *(ref @struct + 11) = byte.MaxValue;
            *(ref @struct + 12) = byte.MaxValue;
            *(ref @struct + 13) = byte.MaxValue;
            *(ref @struct + 14) = byte.MaxValue;
            *(ref @struct + 15) = byte.MaxValue;
            if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct52 struct2;

                _Module.memset((void*)(&struct2), 0, 12U);
                struct2 = 255;
                *(ref struct2 + 1) = 8;
                *(ref struct2 + 2) = 5;
                *(ref struct2 + 4) = 5;
                *(ref struct2 + 5) = 1;
                *(ref struct2 + 6) = 3;
                *(ref struct2 + 8) = 4;
                *(ref struct2 + 9) = 7;
                this.textBox6.AppendText("\r\n" + "Retrieving Key from Samsung Drive on port " + this.label123.Text + "\r\n");
                Struct28 struct3;
                uint num2;
                if (_Module.smethod_16((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&struct3), &num2, 16U, 1, &gstruct) != null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(new string((sbyte*)(&_Module.struct97_2)), "Sammy_Key", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {
                    if (struct3 == @struct)
                    {

                        _Module.memset((void*)(&struct3), 0, 16U);
                    }
                    this.method_6((byte*)(&struct3), 16U, 0U);
                    this.textBox6.AppendText("Extracted drive key " + this.string_0 + "\r\n");
                    string text;
                    if (this.bool_2)
                    {
                        text = this.string_10 + "\\" + this.string_0 + ".bin";
                    }
                    else
                    {
                        SaveFileDialog saveFileDialog = new SaveFileDialog();
                        saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
                        saveFileDialog.DefaultExt = ".bin";
                        saveFileDialog.FileName = this.string_0 + ".bin";
                        saveFileDialog.RestoreDirectory = false;
                        if (this.bool_2)
                        {
                            saveFileDialog.InitialDirectory = this.string_10;
                        }
                        if (saveFileDialog.ShowDialog() != DialogResult.OK)
                        {
                            return;
                        }
                        text = Path.GetFullPath(saveFileDialog.FileName);
                    }
                    IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                    IntPtr value = intPtr;
                    sbyte* pSbyte_ = (sbyte*)((void*)value);
                    GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                    if (ptr == null)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show(text, "Can't open file", MessageBoxButtons.OK);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    }
                    else
                    {

                        _Module.fwrite((void*)(&struct3), 16U, 1U, ptr);

                        _Module.fclose(ptr);
                        this.textBox6.AppendText("Sammy key saved to " + text + "\r\n");
                    }
                }
            }
        }

        // Token: 0x060002DE RID: 734 RVA: 0x003C7300 File Offset: 0x0030F300
        private unsafe void method_193()
        {
            this.Cursor = Cursors.WaitCursor;
            if (this.method_291() != 0)
            {
                this.Cursor = Cursors.Arrow;
            }
            else
            {
                this.Cursor = Cursors.Arrow;
                this.method_262();
                this.textBox6.AppendText("\r\n" + "Loading MTK_Flash source file " + "\r\n");
                if (*(*(ref _Module.struct123_0 + 4)) == 0)
                {
                    this.textBox6.AppendText("Load Failed" + "\r\n");
                }
                else
                {
                    string text = "Drive has been unlocked, put in vendor mode and dumped." + "\n";
                    text = text + "iXtreme has auto-loaded and been spoofed from source." + "\n\n";
                    text = text + "Do You wish to proceed with erase and Flash" + "\n";

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num = (int)MessageBox.Show(text, "Auto Flash", MessageBoxButtons.YesNo, MessageBoxIcon.Asterisk, MessageBoxDefaultButton.Button2);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num == 7)
                    {
                        this.textBox6.AppendText("Auto-Flashing was aborted!" + "\r\n");
                    }
                    else
                    {
                        this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                        this.Cursor = Cursors.WaitCursor;
                        this.method_292();
                        if (this.method_296() == 1)
                        {
                            this.Cursor = Cursors.Arrow;
                        }
                        else
                        {
                            this.Cursor = Cursors.Arrow;

                            _Module.Sleep(500);
                            this.Cursor = Cursors.WaitCursor;
                            this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                            this.method_291();
                            this.Cursor = Cursors.Arrow;
                            for (int i = 0; i < 262144; i++)
                            {
                                if (*(*(ref _Module.struct121_0 + 7172) + i) != *(*(ref _Module.struct121_0 + 4780) + i))
                                {
                                    this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                                    return;
                                }
                            }
                            this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                            this.string_2 = "Write verified !";
                            this.string_3 = "OK";
                        }
                    }
                }
            }
        }

        // Token: 0x060002DF RID: 735 RVA: 0x00135054 File Offset: 0x00135054
        private void method_194()
        {
            if (string.Compare(this.label109.Text, 0, "DG-16D5S", 0, 8) == 0)
            {
                this.method_196();
            }
            else
            {
                this.method_195();
            }
        }

        // Token: 0x060002E0 RID: 736 RVA: 0x0013508C File Offset: 0x0013508C
        private unsafe void method_195()
        {
            Struct4 @struct = 0;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            *(ref @struct + 4) = 0;
            *(ref @struct + 5) = 0;
            *(ref @struct + 6) = 0;
            *(ref @struct + 7) = 0;
            *(ref @struct + 8) = 251;
            *(ref @struct + 9) = 48;
            *(ref @struct + 10) = byte.MaxValue;
            *(ref @struct + 11) = byte.MaxValue;
            *(ref @struct + 12) = byte.MaxValue;
            *(ref @struct + 13) = byte.MaxValue;
            *(ref @struct + 14) = byte.MaxValue;
            *(ref @struct + 15) = byte.MaxValue;
            *(ref @struct + 16) = byte.MaxValue;
            *(ref @struct + 17) = byte.MaxValue;
            *(ref @struct + 18) = byte.MaxValue;
            *(ref @struct + 19) = byte.MaxValue;
            *(ref @struct + 20) = byte.MaxValue;
            *(ref @struct + 21) = byte.MaxValue;
            *(ref @struct + 22) = byte.MaxValue;
            *(ref @struct + 23) = byte.MaxValue;
            *(ref @struct + 24) = byte.MaxValue;
            *(ref @struct + 25) = byte.MaxValue;
            *(ref @struct + 26) = byte.MaxValue;
            *(ref @struct + 27) = byte.MaxValue;
            *(ref @struct + 28) = byte.MaxValue;
            *(ref @struct + 29) = byte.MaxValue;
            *(ref @struct + 30) = byte.MaxValue;
            *(ref @struct + 31) = byte.MaxValue;
            *(ref @struct + 32) = byte.MaxValue;
            *(ref @struct + 33) = byte.MaxValue;
            *(ref @struct + 34) = byte.MaxValue;
            *(ref @struct + 35) = byte.MaxValue;
            *(ref @struct + 36) = byte.MaxValue;
            *(ref @struct + 37) = byte.MaxValue;
            *(ref @struct + 38) = byte.MaxValue;
            *(ref @struct + 39) = byte.MaxValue;
            *(ref @struct + 40) = byte.MaxValue;
            *(ref @struct + 41) = byte.MaxValue;
            *(ref @struct + 42) = byte.MaxValue;
            *(ref @struct + 43) = byte.MaxValue;
            *(ref @struct + 44) = byte.MaxValue;
            *(ref @struct + 45) = byte.MaxValue;
            *(ref @struct + 46) = byte.MaxValue;
            *(ref @struct + 47) = byte.MaxValue;
            *(ref @struct + 48) = byte.MaxValue;
            *(ref @struct + 49) = byte.MaxValue;
            *(ref @struct + 50) = byte.MaxValue;
            *(ref @struct + 51) = byte.MaxValue;
            *(ref @struct + 52) = byte.MaxValue;
            *(ref @struct + 53) = byte.MaxValue;
            *(ref @struct + 54) = byte.MaxValue;
            *(ref @struct + 55) = byte.MaxValue;
            *(ref @struct + 56) = byte.MaxValue;
            *(ref @struct + 57) = byte.MaxValue;
            *(ref @struct + 58) = byte.MaxValue;
            *(ref @struct + 59) = byte.MaxValue;
            *(ref @struct + 60) = byte.MaxValue;
            *(ref @struct + 61) = byte.MaxValue;
            *(ref @struct + 62) = byte.MaxValue;
            *(ref @struct + 63) = byte.MaxValue;
            Struct28 struct2 = 255;
            *(ref struct2 + 1) = byte.MaxValue;
            *(ref struct2 + 2) = byte.MaxValue;
            *(ref struct2 + 3) = byte.MaxValue;
            *(ref struct2 + 4) = byte.MaxValue;
            *(ref struct2 + 5) = byte.MaxValue;
            *(ref struct2 + 6) = byte.MaxValue;
            *(ref struct2 + 7) = byte.MaxValue;
            *(ref struct2 + 8) = byte.MaxValue;
            *(ref struct2 + 9) = byte.MaxValue;
            *(ref struct2 + 10) = byte.MaxValue;
            *(ref struct2 + 11) = byte.MaxValue;
            *(ref struct2 + 12) = byte.MaxValue;
            *(ref struct2 + 13) = byte.MaxValue;
            *(ref struct2 + 14) = byte.MaxValue;
            *(ref struct2 + 15) = byte.MaxValue;
            if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 1000U);
                Struct4 struct3;

                _Module.memcpy((void*)(&struct3), (void*)(&@struct), 64U);
                Struct52 struct4;

                _Module.memset((void*)(&struct4), 0, 12U);
                struct4 = 85;
                *(ref struct4 + 8) = 58;
                uint num2;
                if (_Module.smethod_17((byte*)(&struct4), 12U, (byte)num, 512, (void*)(&struct3), &num2, 64U, 1, &gstruct) != null)
                {

                    _Module.Sleep(2000);
                    if (_Module.smethod_17((byte*)(&struct4), 12U, (byte)num, 512, (void*)(&struct3), &num2, 64U, 1, &gstruct) != null)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Failed at Stage 1", "Set Drive Key", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        return;
                    }
                }
                this.textBox6.AppendText("Stage 1, Complete!" + "\r\n");
                if (*(ref _Module.struct38_0 + selectedIndex * 72U) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72U + 3) == 1)
                {
                    this.method_424(88);
                }

                _Module.Sleep(2000);
                byte* ptr = ref struct3 + 10;

                _Module.memcpy((void*)ptr, *(ref _Module.struct123_0 + 4) + 280, 16U);
                if (_Module.smethod_17((byte*)(&struct4), 12U, (byte)num, 512, (void*)(&struct3), &num2, 64U, 1, &gstruct) != null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Failed at Stage 2", "Set Drive Key", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {
                    if (*(ref _Module.struct38_0 + selectedIndex * 72U) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72U + 3) == 1)
                    {
                        this.method_424(88);
                    }
                    this.textBox6.AppendText("Stage 2, Complete!" + "\r\n" + "Done!" + "\r\n");
                }
            }
        }

        // Token: 0x060002E1 RID: 737 RVA: 0x001355E0 File Offset: 0x001355E0
        private unsafe void method_196()
        {
            Struct80 @struct = 0;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            *(ref @struct + 4) = 0;
            *(ref @struct + 5) = 0;
            *(ref @struct + 6) = 0;
            *(ref @struct + 7) = 0;
            *(ref @struct + 8) = 171;
            *(ref @struct + 9) = 16;
            *(ref @struct + 10) = byte.MaxValue;
            *(ref @struct + 11) = byte.MaxValue;
            *(ref @struct + 12) = byte.MaxValue;
            *(ref @struct + 13) = byte.MaxValue;
            *(ref @struct + 14) = byte.MaxValue;
            *(ref @struct + 15) = byte.MaxValue;
            *(ref @struct + 16) = byte.MaxValue;
            *(ref @struct + 17) = byte.MaxValue;
            *(ref @struct + 18) = byte.MaxValue;
            *(ref @struct + 19) = byte.MaxValue;
            *(ref @struct + 20) = byte.MaxValue;
            *(ref @struct + 21) = byte.MaxValue;
            *(ref @struct + 22) = byte.MaxValue;
            *(ref @struct + 23) = byte.MaxValue;
            *(ref @struct + 24) = byte.MaxValue;
            *(ref @struct + 25) = byte.MaxValue;
            if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 1000U);
                Struct80 struct2;

                _Module.memcpy((void*)(&struct2), (void*)(&@struct), 26U);
                Struct52 struct3;

                _Module.memset((void*)(&struct3), 0, 12U);
                struct3 = 85;
                *(ref struct3 + 8) = 26;

                _Module.memcpy(ref struct2 + 10, *(ref _Module.struct123_0 + 4) + 280, 16U);
                uint num2;
                if (_Module.smethod_17((byte*)(&struct3), 12U, (byte)num, 512, (void*)(&struct2), &num2, 26U, 1, &gstruct) != null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Failed at Stage 1", "Set Drive Key", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {
                    if (*(ref _Module.struct38_0 + selectedIndex * 72U) == 0 && *(ref _Module.struct38_0 + selectedIndex * 72U + 3) == 1)
                    {
                        this.method_424(88);
                    }
                    this.textBox6.AppendText("Stage 1, Complete!" + "\r\n" + "Done!" + "\r\n");
                }
            }
        }

        // Token: 0x060002E2 RID: 738 RVA: 0x0013581C File Offset: 0x0013581C
        private void button17_Click(object sender, EventArgs e)
        {
            this.method_14();
            this.bool_1 = false;
            this.method_197();
            this.method_197();
            this.method_198();
            this.bool_1 = true;
            this.method_15();
        }

        // Token: 0x060002E3 RID: 739 RVA: 0x00135858 File Offset: 0x00135858
        private void method_197()
        {
            this.method_360();
            this.method_172();
            string strA = this.label72.Text + this.label68.Text + this.label61.Text;
            int count = this.comboBox16.Items.Count;
            int i = 0;
            while (i < count)
            {
                string text = Convert.ToString(this.comboBox16.Items[i]);
                string text2 = text.Substring(0, 3);
                text = text.Substring(5, 28);
                if (string.Compare(strA, text) != 0)
                {
                    i++;
                }
                else
                {
                    string text3 = "" + "The drive on I/O port " + this.label84.Text + " has windows drive letter " + text2 + "\n";
                    text3 = text3 + "assigned to it. This may cause read back issues." + "\n\n";
                    text3 = text3 + "Do you wish to disable " + text2 + " ?";

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num = (int)MessageBox.Show(text3, "Warning", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num == 7)
                    {
                        break;
                    }
                    this.method_335(text2);
                    break;
                }
            }
        }

        // Token: 0x060002E4 RID: 740 RVA: 0x003C7534 File Offset: 0x0030F534
        private unsafe void method_198()
        {
            string text = null;
            bool flag = false;
            int selectedIndex = this.comboBox10.SelectedIndex;
            if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex2 = (uint)this.comboBox1.SelectedIndex;
                this.label118.Text = "";
                this.label119.Text = "";
                this.label120.Text = "";
                this.label121.Text = "";
                this.label122.Text = "";
                this.textBox6.AppendText("Sending Vendor Intro to port " + this.label123.Text + "\r\n");
                byte b;
                if (this.radioButton19.Checked)
                {
                    b = (byte)this.method_253();
                }
                else if (this.radioButton21.Checked)
                {
                    b = (byte)this.method_254();
                }
                else
                {
                    b = (byte)this.method_252();
                }
                this.bool_0 = false;
                uint num;
                if (b == 115)
                {
                    this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x73" + "\r\n");
                    this.label122.Text = "Serial flash with status 0x73";
                    this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                    num = (uint)this.method_297();
                }
                else if (b == 112)
                {
                    this.textBox6.AppendText("\r\n" + "Parallel flash found with Status 0x70" + "\r\n");
                    this.label122.Text = "Parallel flash with Status 0x70";
                    this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                    num = (uint)this.method_290();
                }
                else if (b == 114)
                {
                    this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                    this.label122.Text = "Serial flash with status 0x72";
                    this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");

                    _Module.Sleep(1000);
                    num = (uint)this.method_303();
                    if (this.radioButton19.Checked)
                    {
                        this.method_239();
                    }
                    if (this.radioButton21.Checked)
                    {
                        this.method_240();
                    }
                    if (this.radioButton20.Checked)
                    {
                        this.method_241();
                    }
                    if (num == 0U)
                    {

                        _Module.Sleep(1000);
                        num = (uint)this.method_303();
                    }
                    if (num == 65535U)
                    {

                        _Module.Sleep(1000);
                        num = (uint)this.method_303();
                        if (num == 65535U)
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            int num2 = (int)MessageBox.Show("Please return MRA Hack device to the Normal position !" + "\r\n\r\n" + "Then, press OK to continue.", "Device ID Failed !", MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            if (num2 != 1)
                            {
                                return;
                            }
                            num = (uint)this.method_303();
                        }
                    }
                }
                else
                {
                    Struct20 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), b);
                    string text2 = new string((sbyte*)(&_Module.struct19_0));
                    text2 += new string((sbyte*)(&@struct));
                    text += text2;
                    this.textBox6.AppendText("Status 0x" + text + "\r\n");
                    int num2;
                    if (this.method_130() == 1)
                    {
                        num2 = 6;
                        Thread thread = new Thread(new ThreadStart(this.method_132));
                        thread.Start();
                    }
                    else
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        num2 = (int)MessageBox.Show("If you wish to resend the command you should click Yes." + "\n" + "Power off the drive and then back on (within 1 second)." + "\n\n" + "Press Escape to cancel.", "MTK Vendor Intro failed", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    }
                    if (num2 != 6)
                    {
                        num = 0U;
                        return;
                    }
                    this.textBox6.AppendText("Re-sending Vendor Intro: " + "\r\n");
                    uint num3 = _Module.smethod_6();
                    while (b != 112 & b != 114 & b != 115)
                    {
                        uint num4 = _Module.smethod_6();
                        if (num4 - num3 >= 200000U)
                        {
                            this.textBox6.AppendText("\r\n" + "Device Intro failed!" + "\r\n");
                            return;
                        }
                        if (_Module.GetAsyncKeyState(27) != null)
                        {
                            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                            return;
                        }
                        if (flag)
                        {

                            _Module.Sleep(500);
                            b = (byte)this.method_252();
                        }
                        else
                        {
                            b = (byte)this.method_250();
                        }

                        _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), b);
                        text2 = new string((sbyte*)(&_Module.struct19_0));
                        text2 += new string((sbyte*)(&@struct));
                        this.label122.Text = "Status 0x" + text2;
                        Application.DoEvents();
                        this.textBox6.AppendText(new string((sbyte*)(&_Module.struct6_9)));
                        if (b == 115)
                        {
                            this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x73" + "\r\n");
                            this.label122.Text = "Serial flash with status 0x73";
                            this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                            num = (uint)this.method_297();
                            break;
                        }
                        if (b == 112)
                        {
                            this.textBox6.AppendText("\r\n" + "Parallel flash found with Status 0x70" + "\r\n");
                            this.label122.Text = "Parallel flash with Status 0x70";
                            this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                            num = (uint)this.method_290();
                            break;
                        }
                        if (b == 114)
                        {
                            this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                            this.label122.Text = "Serial flash with status 0x72";
                            this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");

                            _Module.Sleep(1500);
                            num = (uint)this.method_303();
                            if (this.radioButton19.Checked)
                            {
                                this.method_239();
                            }
                            if (this.radioButton20.Checked)
                            {
                                this.method_241();
                            }
                            if (this.radioButton21.Checked)
                            {
                                this.method_240();
                            }
                            if (num == 0U)
                            {

                                _Module.Sleep(1000);
                                num = (uint)this.method_303();
                            }
                            if (num != 65535U)
                            {
                                break;
                            }

                            _Module.Sleep(1000);
                            num = (uint)this.method_303();
                            if (num != 65535U)
                            {
                                break;
                            }

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            num2 = (int)MessageBox.Show("Please return MRA Hack Device to the Normal position !" + "\r\n\r\n" + "Then, press OK to continue.", "Device ID Failed !", MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            if (num2 == 1)
                            {
                                num = (uint)this.method_303();
                                break;
                            }
                            return;
                        }
                        else
                        {
                            if (b == 209 && !flag)
                            {
                                flag = true;
                                if (this.method_130() == 1)
                                {
                                    new Thread(new ThreadStart(this.method_132));
                                }
                            }
                            if (*(ref _Module.struct38_0 + selectedIndex2 * 72U) == 0 && *(ref _Module.struct38_0 + selectedIndex2 * 72U + 3) == 1)
                            {

                                _Module.Sleep(50);
                            }
                            else
                            {

                                _Module.Sleep(250);
                            }
                        }
                    }
                }
                if (this.method_206(num) == 0)
                {

                    _Module.Sleep(1000);
                    if (this.bool_2 & b == 115)
                    {
                        this.method_187();
                    }
                    if (this.bool_2 & b == 112)
                    {
                        this.method_193();
                    }
                    if (this.bool_2 & b == 114 & this.radioButton20.Checked)
                    {
                        this.method_188();
                    }
                }
            }
        }

        // Token: 0x060002E5 RID: 741 RVA: 0x003C7D50 File Offset: 0x0030FD50
        private unsafe void method_199()
        {
            byte b = 0;
            int selectedIndex = this.comboBox10.SelectedIndex;
            if (this.comboBox1.Items.Count != 0)
            {
                int selectedIndex2 = this.comboBox1.SelectedIndex;
                this.label118.Text = "";
                this.label119.Text = "";
                this.label120.Text = "";
                this.label121.Text = "";
                this.label122.Text = "";
                this.textBox6.AppendText("Sending Vendor Intro to port " + this.label123.Text + "\r\n");
                this.bool_0 = false;
                for (uint num = 137U; num < 256U; num += 1U)
                {
                    for (uint num2 = 0U; num2 < 256U; num2 += 1U)
                    {
                        Struct20 @struct;

                        _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_121), (byte)num);
                        string text = new string((sbyte*)(&_Module.struct19_0));
                        text += new string((sbyte*)(&@struct));
                        this.label118.Text = "0x" + text;

                        _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_121), (byte)num2);
                        text = new string((sbyte*)(&_Module.struct19_0));
                        text += new string((sbyte*)(&@struct));
                        this.label119.Text = "0x" + text;
                        int num3;
                        if (this.method_130() == 1)
                        {
                            num3 = 6;
                            Thread thread = new Thread(new ThreadStart(this.method_132));
                            thread.Start();
                        }
                        else
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            num3 = (int)MessageBox.Show("If you wish to resend the command you should click Yes." + "\n" + "Power off the drive and then back on (within 1 second)." + "\n\n" + "Press Escape to cancel.", "MTK Vendor Intro failed", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        }
                        if (num3 == 6)
                        {
                            uint num4 = _Module.smethod_6();
                            while (b != 112 & b != 114 & b != 115 & b != 112 & b != 82)
                            {
                                uint num5 = _Module.smethod_6();
                                if (num5 - num4 >= 3000U)
                                {
                                    break;
                                }
                                if (_Module.GetAsyncKeyState(27) != null)
                                {
                                    this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                                    return;
                                }
                                b = (byte)this.method_255((byte)num2, (byte)num);

                                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), b);
                                string text2 = new string((sbyte*)(&_Module.struct19_0));
                                text2 += new string((sbyte*)(&@struct));
                                this.label122.Text = "Status 0x" + text2;
                                Application.DoEvents();
                                if (b == 115)
                                {
                                    this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x73" + "\r\n");
                                    this.label122.Text = "Serial flash with status 0x73";
                                    return;
                                }
                                if (b == 112)
                                {
                                    this.textBox6.AppendText("\r\n" + "Parallel flash found with Status 0x70" + "\r\n");
                                    this.label122.Text = "Parallel flash with Status 0x70";
                                    return;
                                }
                                if (b == 114)
                                {
                                    this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                                    this.label122.Text = "Serial flash with status 0x72";
                                    return;
                                }

                                _Module.Sleep(250);
                            }
                        }
                    }
                }
            }
        }

        // Token: 0x060002E6 RID: 742 RVA: 0x003C80E8 File Offset: 0x003100E8
        private unsafe int method_200()
        {
            string text = null;
            int selectedIndex = this.comboBox10.SelectedIndex;
            this.label118.Text = "";
            this.label119.Text = "";
            this.label120.Text = "";
            this.label121.Text = "";
            this.label122.Text = "";
            this.textBox6.AppendText("Sending Vendor Intro to port " + this.label123.Text + "\r\n");
            byte b = (byte)this.method_253();
            this.bool_0 = false;
            uint uint_;
            if (b == 114)
            {
                this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                this.label122.Text = "Serial flash with status 0x72";
                this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");

                _Module.Sleep(100);
                this.radioButton19.Checked = true;
                uint_ = (uint)this.method_305();
            }
            else
            {
                Struct20 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_121), b);
                string text2 = new string((sbyte*)(&_Module.struct19_0));
                text2 += new string((sbyte*)(&@struct));
                text += text2;
                this.textBox6.AppendText("Status 0x" + text + "\r\n");
                int num;
                if (this.method_130() == 1)
                {
                    num = 6;
                    Thread thread = new Thread(new ThreadStart(this.method_132));
                    thread.Start();
                }
                else
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    num = (int)MessageBox.Show("If you wish to resend the command you should click Yes." + "\n" + "Power off the drive and then back on (within 1 second)." + "\n\n" + "Press Escape to cancel.", "MTK Vendor Intro failed", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                if (num != 6)
                {
                    uint_ = 0U;
                    return 0;
                }
                this.textBox6.AppendText("Re-sending Vendor Intro: " + "\r\n");
                uint num2 = _Module.smethod_6();
                while (b != 114)
                {
                    uint num3 = _Module.smethod_6();
                    if (num3 - num2 >= 10000U)
                    {
                        this.textBox6.AppendText("\r\n" + "Device Intro failed!" + "\r\n");
                        return 0;
                    }
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 0;
                    }
                    b = (byte)this.method_253();

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), b);
                    text2 = new string((sbyte*)(&_Module.struct19_0));
                    text2 += new string((sbyte*)(&@struct));
                    this.label122.Text = "Status 0x" + text2;
                    Application.DoEvents();
                    this.textBox6.AppendText(new string((sbyte*)(&_Module.struct6_9)));
                    if (b == 114)
                    {
                        this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                        this.label122.Text = "Serial flash with status 0x72";
                        this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");

                        _Module.Sleep(100);
                        uint_ = (uint)this.method_305();
                        break;
                    }

                    _Module.Sleep(250);
                }
            }
            return (this.method_206(uint_) == 0) ? 1 : 0;
        }

        // Token: 0x060002E7 RID: 743 RVA: 0x003C8464 File Offset: 0x00310464
        private unsafe int method_201()
        {
            string text = null;
            int selectedIndex = this.comboBox10.SelectedIndex;
            this.label118.Text = "";
            this.label119.Text = "";
            this.label120.Text = "";
            this.label121.Text = "";
            this.label122.Text = "";
            this.textBox6.AppendText("Sending Vendor Intro to port " + this.label123.Text + "\r\n");
            byte b = (byte)this.method_253();
            this.bool_0 = false;
            uint uint_;
            if (b == 114)
            {
                this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                this.label122.Text = "Serial flash with status 0x72";
                this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");

                _Module.Sleep(100);
                if (this.radioButton21.Visible)
                {
                    this.radioButton21.Checked = true;
                }
                uint_ = (uint)this.method_306();
            }
            else
            {
                Struct20 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_121), b);
                string text2 = new string((sbyte*)(&_Module.struct19_0));
                text2 += new string((sbyte*)(&@struct));
                text += text2;
                this.textBox6.AppendText("Status 0x" + text + "\r\n");
                int num;
                if (this.method_130() == 1)
                {
                    num = 6;
                    Thread thread = new Thread(new ThreadStart(this.method_132));
                    thread.Start();
                }
                else
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    num = (int)MessageBox.Show("If you wish to resend the command you should click Yes." + "\n" + "Power off the drive and then back on (within 1 second)." + "\n\n" + "Press Escape to cancel.", "MTK Vendor Intro failed", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                if (num != 6)
                {
                    uint_ = 0U;
                    return 0;
                }
                this.textBox6.AppendText("Re-sending Vendor Intro: " + "\r\n");
                uint num2 = _Module.smethod_6();
                while (b != 114)
                {
                    uint num3 = _Module.smethod_6();
                    if (num3 - num2 >= 10000U)
                    {
                        this.textBox6.AppendText("\r\n" + "Device Intro failed!" + "\r\n");
                        return 0;
                    }
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 0;
                    }
                    b = (byte)this.method_254();

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), b);
                    text2 = new string((sbyte*)(&_Module.struct19_0));
                    text2 += new string((sbyte*)(&@struct));
                    this.label122.Text = "Status 0x" + text2;
                    Application.DoEvents();
                    this.textBox6.AppendText(new string((sbyte*)(&_Module.struct6_9)));
                    if (b == 114)
                    {
                        this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                        this.label122.Text = "Serial flash with status 0x72";
                        this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");

                        _Module.Sleep(100);
                        uint_ = (uint)this.method_306();
                        break;
                    }

                    _Module.Sleep(250);
                }
            }
            return (this.method_206(uint_) == 0) ? 1 : 0;
        }

        // Token: 0x060002E8 RID: 744 RVA: 0x003C87F0 File Offset: 0x003107F0
        private unsafe void method_202()
        {
            string text = null;
            this.label118.Text = "";
            this.label119.Text = "";
            this.label120.Text = "";
            this.label121.Text = "";
            this.label122.Text = "";
            this.textBox6.AppendText("Sending Vendor Intro to port " + this.label123.Text + "\r\n");
            sbyte b = (sbyte)this.method_250();
            this.bool_0 = false;
            uint uint_;
            if (b == 115)
            {
                this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x73" + "\r\n");
                this.label122.Text = "Serial flash with status 0x73";
                this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                uint_ = (uint)this.method_297();
            }
            else if (b == 112)
            {
                this.textBox6.AppendText("\r\n" + "Parallel flash found with Status 0x70" + "\r\n");
                this.label122.Text = "Parallel flash with Status 0x70";
                this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                uint_ = (uint)this.method_290();
            }
            else if (b == 114)
            {
                this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                this.label122.Text = "Serial flash with status 0x72";
                this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                uint_ = (uint)this.method_303();
            }
            else
            {
                Struct20 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), (byte)b);
                string text2 = new string((sbyte*)(&_Module.struct19_0));
                text2 += new string((sbyte*)(&@struct));
                text += text2;
                this.textBox6.AppendText("Status 0x" + text + "\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num = (int)MessageBox.Show("If you wish to resend the command you should click Yes." + "\n" + "Power off the drive and then back on (within 1 second)." + "\n\n" + "Press Escape to cancel.", "MTK Vendor Intro failed", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                if (num != 6)
                {
                    uint_ = 0U;
                    return;
                }
                this.textBox6.AppendText("Re-sending Vendor Intro: " + "\r\n");
                uint num2 = _Module.smethod_6();
                while (b != 112 & b != 114 & b != 115)
                {
                    uint num3 = _Module.smethod_6();
                    if (num3 - num2 >= 20000U)
                    {
                        this.textBox6.AppendText("\r\n" + "Device Intro failed!" + "\r\n");
                        return;
                    }
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return;
                    }
                    b = (sbyte)this.method_250();

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), (byte)b);
                    text2 = new string((sbyte*)(&_Module.struct19_0));
                    text2 += new string((sbyte*)(&@struct));
                    this.label122.Text = "Status 0x" + text2;
                    Application.DoEvents();
                    this.textBox6.AppendText(new string((sbyte*)(&_Module.struct6_9)));
                    if (b == 115)
                    {
                        this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x73" + "\r\n");
                        this.label122.Text = "Serial flash with status 0x73";
                        this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                        uint_ = (uint)this.method_297();
                        break;
                    }
                    if (b == 112)
                    {
                        this.textBox6.AppendText("\r\n" + "Parallel flash found with Status 0x70" + "\r\n");
                        this.label122.Text = "Parallel flash with Status 0x70";
                        this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                        uint_ = (uint)this.method_290();
                        break;
                    }
                    if (b == 114)
                    {
                        this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                        this.label122.Text = "Serial flash with status 0x72";
                        this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                        uint_ = (uint)this.method_303();
                        break;
                    }

                    _Module.Sleep(250);
                }
            }
            this.method_206(uint_);
        }

        // Token: 0x060002E9 RID: 745 RVA: 0x003C8CE4 File Offset: 0x00310CE4
        private unsafe int method_203()
        {
            string text = null;
            this.label118.Text = "";
            this.label119.Text = "";
            this.label120.Text = "";
            this.label121.Text = "";
            this.label122.Text = "";
            this.textBox6.AppendText("Sending Vendor Intro to port " + this.label123.Text + "\r\n");
            sbyte b = (sbyte)this.method_252();
            this.bool_0 = false;
            int result;
            if (b == 114)
            {
                this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                this.label122.Text = "Serial flash with status 0x72";
                this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                uint uint_ = (uint)this.method_303();
                result = 0;
            }
            else if (b == 82)
            {
                this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x52" + "\r\n");
                this.label122.Text = "Serial flash with status 0x52";
                result = 1;
            }
            else
            {
                Struct20 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), (byte)b);
                string text2 = new string((sbyte*)(&_Module.struct19_0));
                text2 += new string((sbyte*)(&@struct));
                text += text2;
                this.textBox6.AppendText("Status 0x" + text + "\r\n");

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num = (int)MessageBox.Show("To resend the command you should click Yes." + "\n" + "Press and hold Probe 3 cable button... Probe MPX01... Then release cable button." + "\n\n" + "Press Escape to cancel.", "MTK Vendor Intro failed", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                if (num == 6)
                {
                    this.textBox6.AppendText("Re-sending Vendor Intro: " + "\r\n");
                    uint num2 = _Module.smethod_6();
                    while (b != 82 & b != 114)
                    {
                        uint num3 = _Module.smethod_6();
                        if (num3 - num2 >= 20000U)
                        {
                            this.textBox6.AppendText("\r\n" + "Device Intro failed!" + "\r\n");
                            return 0;
                        }
                        if (_Module.GetAsyncKeyState(27) != null)
                        {
                            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                            return 0;
                        }
                        b = (sbyte)this.method_252();

                        _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), (byte)b);
                        text2 = new string((sbyte*)(&_Module.struct19_0));
                        text2 += new string((sbyte*)(&@struct));
                        this.label122.Text = "Status 0x" + text2;
                        Application.DoEvents();
                        this.textBox6.AppendText(new string((sbyte*)(&_Module.struct6_9)));
                        if (b == 114)
                        {
                            this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                            this.label122.Text = "Serial flash with status 0x72";
                            this.textBox6.AppendText("\r\n" + "Sending Device ID request to port " + this.label123.Text + "\r\n");
                            uint uint_ = (uint)this.method_303();
                            if (this.method_206(uint_) != 0)
                            {
                                return 0;
                            }
                        }
                        else if (b == 82)
                        {
                            this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x52" + "\r\n");
                            this.label122.Text = "Serial flash with status 0x52";
                            return 1;
                        }

                        _Module.Sleep(250);
                    }
                }
                result = 0;
            }
            return result;
        }

        // Token: 0x060002EA RID: 746 RVA: 0x00137494 File Offset: 0x00137494
        private int method_204()
        {
            this.label118.Text = "";
            this.label119.Text = "";
            this.label120.Text = "";
            this.label121.Text = "";
            this.label122.Text = "";
            sbyte b = (sbyte)this.method_250();
            this.bool_0 = false;
            int result;
            if (b == 82)
            {
                this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x52" + "\r\n");
                this.label122.Text = "Serial flash with status 0x52";
                this.method_96();
                result = 1;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        // Token: 0x060002EB RID: 747 RVA: 0x00137544 File Offset: 0x00137544
        private void method_205()
        {
            this.label118.Text = "";
            this.label119.Text = "";
            this.label120.Text = "";
            this.label121.Text = "";
            this.label122.Text = "";
            sbyte b = (sbyte)this.method_250();
            uint uint_;
            if (b == 115)
            {
                this.label122.Text = "Serial flash with status 0x73";
                uint_ = (uint)this.method_297();
            }
            else if (b == 112)
            {
                this.label122.Text = "Parallel flash with Status 0x70";
                uint_ = (uint)this.method_290();
            }
            else if (b == 114)
            {
                this.label122.Text = "Serial flash with status 0x72";
                uint_ = (uint)this.method_303();
            }
            else if (b != 112 & b != 114 & b != 115)
            {
                return;
            }
            this.method_206(uint_);
        }

        // Token: 0x060002EC RID: 748 RVA: 0x0013762C File Offset: 0x0013762C
        private unsafe int method_206(uint uint_0)
        {
            uint num = (uint_0 & 65280U) >> 8;
            Struct20 @struct;

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), num);
            string text = new string((sbyte*)(&_Module.struct19_0));
            string text2 = new string((sbyte*)(&_Module.struct19_0));
            text += new string((sbyte*)(&@struct));
            text2 += text;
            this.label118.Text = "0x" + text2;
            this.textBox6.AppendText("Manufacturer ID: 0x" + text2 + "\r\n");
            uint num2 = uint_0 & 255U;

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), num2);
            text = new string((sbyte*)(&_Module.struct19_0));
            text2 = new string((sbyte*)(&_Module.struct19_0));
            text += new string((sbyte*)(&@struct));
            text2 += text;
            this.label119.Text = "0x" + text2;
            this.textBox6.AppendText("Device ID: 0x" + text2 + "\r\n");
            string text3;
            int result;
            if (num == 191U && num2 == 182U)
            {
                text2 = "SST(SST39SF020)";
                text3 = "262144 bytes";
                result = 0;
                this.string_2 = "DevID: 0xBF 0xB6";
                this.string_3 = "SST(SST39SF020)";
            }
            else if (num == 191U && num2 == 67U)
            {
                text2 = "SST(25LF020/25VF020)";
                text3 = "262144 bytes";
                result = 0;
                this.string_2 = "DevID: 0xBF 0x43";
                this.string_3 = "SST(25LF020/25VF020)";
            }
            else if (num == 239U && num2 == 17U)
            {
                text2 = "Winbond/NEX(W25P20/NX25P20)";
                text3 = "262144 bytes";
                result = 0;
                this.string_2 = "DevID: 0xEF 0x11";
                this.string_3 = "Winbond(W25P20)";
            }
            else if (num == 157U && num2 == 125U)
            {
                text2 = "PMC(PM25LV020)";
                text3 = "262144 bytes";
                result = 0;
                this.string_2 = "DevID: 0x9D 0x7D";
                this.string_3 = "PMC(PM25LV020)";
            }
            else if (num == 239U && num2 == 49U)
            {
                text2 = "Winbond/NEX(W25B20/NX25B20)";
                text3 = "262144 bytes";
                result = 0;
                this.string_2 = "DevID: 0xEF 0x31";
                this.string_3 = "Winbond(W25B20)";
            }
            else if (num == 55U && num2 == 17U)
            {
                text2 = "AMIC(A25L20P)";
                text3 = "262144 bytes";
                result = 0;
                this.string_2 = "DevID: 0x37 0x11";
                this.string_3 = "AMIC(A25L20P)";
            }
            else if (num == 194U && num2 == 17U)
            {
                text2 = "MXIC(MX25L2005)";
                text3 = "262144 bytes";
                result = 0;
                this.string_2 = "DevID: 0xC2 0x11";
                this.string_3 = "MXIC(MX25L2005)";
            }
            else if (num == 16U && num2 == 0U)
            {
                text2 = "Spansion(S25FL002D)";
                text3 = "262144 bytes";
                result = 0;
                this.string_2 = "DevID: 0x10 0x00";
                this.string_3 = "SPANSION(S25FL002D)";
            }
            else if (num == 28U && num2 == 20U)
            {
                text2 = "EON(EN25P16)";
                text3 = "2097152 bytes";
                result = 0;
                this.string_2 = "DevID: 0x1C 0x14";
                this.string_3 = "EON(EN25P16)";
            }
            else if (num == 239U && num2 == 20U)
            {
                text2 = "Winbond/NEX(W25P16/NX25P16)";
                text3 = "2097152 bytes";
                result = 0;
                this.string_2 = "DevID: 0xEF 0x14";
                this.string_3 = "Winbond(W25P16)";
            }
            else if (num == 194U && num2 == 20U)
            {
                text2 = "MXIC(MX25L1605D)";
                text3 = "2097152 bytes";
                result = 0;
                this.string_2 = "DevID: 0xC2 0x14";
                this.string_3 = "MXIC(MX25L1605D)";
            }
            else if (num == 28U && num2 == 19U)
            {
                text2 = "EON(EN25P80)";
                text3 = "1048576 bytes";
                result = 0;
                this.string_2 = "DevID: 0x1C 0x13";
                this.string_3 = "EON(EN25P80)";
            }
            else if (num == 239U && num2 == 19U)
            {
                text2 = "Winbond/NEX(W25P80/NX25P80)";
                text3 = "1048576 bytes";
                result = 0;
                this.string_2 = "DevID: 0xEF 0x13";
                this.string_3 = "Winbond(W25P80)";
            }
            else if (num == 194U && num2 == 19U)
            {
                text2 = "MXIC(MX25L8005)";
                text3 = "1048576 bytes";
                result = 0;
                this.string_2 = "DevID: 0xC2 0x13";
                this.string_3 = "MXIC(MX25L8005)";
            }
            else
            {
                text2 = "Unknown type";
                text3 = "n/a";
                result = 1;
            }
            this.label120.Text = text2;
            this.label121.Text = text3;
            this.textBox6.AppendText("Flash Name:  " + text2 + "\r\n");
            this.textBox6.AppendText("Flash Size:  " + text3 + "\r\n");
            this.label110.Text = "Drive in Vendor Mode!";
            this.label109.Text = "";
            this.label106.Text = "";
            this.label92.Text = "";
            this.label72.Text = "Drive in Vendor Mode!";
            this.label68.Text = "";
            this.label61.Text = "";
            this.label58.Text = "";
            this.label100.Text = "Drive in Vendor Mode!";
            this.label99.Text = "";
            this.label98.Text = "";
            this.label97.Text = "";
            return result;
        }

        // Token: 0x060002ED RID: 749 RVA: 0x00137B44 File Offset: 0x00137B44
        private void button7_Click(object sender, EventArgs e)
        {
            this.method_14();
            this.radioButton20.Checked = true;
            this.method_207();
            this.method_15();
        }

        // Token: 0x060002EE RID: 750 RVA: 0x003C9094 File Offset: 0x00311094
        private unsafe void method_207()
        {
            int selectedIndex = this.comboBox10.SelectedIndex;
            if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex2 = (uint)this.comboBox1.SelectedIndex;
                uint num = (uint)(*(ref _Module.struct38_0 + selectedIndex2 * 72U + 4));
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex2 * 72U);
                if (*(*(ref _Module.struct123_0 + 4)) == 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num2 = (int)MessageBox.Show("No Firmware is loaded to Target buffer," + "\n" + "Are you sure you wish to proceed ?", "Lite-On Erase", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num2 == 7)
                    {
                        this.textBox6.AppendText("Lite-On-Erase NOT sent " + "\r\n");
                        return;
                    }
                }
                if (*(*(ref _Module.struct123_0 + 4)) != 4 && *(*(ref _Module.struct123_0 + 4)) != 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num2 = (int)MessageBox.Show("Firmware in Target buffer is not Lite-On," + "\n" + "Are you sure you wish to proceed ?", "Lite-On Erase", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num2 == 7)
                    {
                        this.textBox6.AppendText("Lite-On-Erase NOT sent " + "\r\n");
                        return;
                    }
                }
                if (this.method_69() == 1 && this.method_107(*(ref _Module.struct123_0 + 4) + 280) != 1)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num2 = (int)MessageBox.Show("Target DVDKey Can't be verified to drive !" + "\n" + "Are you sure you wish to proceed ?", "Lite-On Erase", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num2 == 7)
                    {
                        this.textBox6.AppendText("Lite-On-Erase NOT sent " + "\r\n");
                        return;
                    }
                }
                if (this.method_69() == 1 && *(*(ref _Module.struct123_0 + 4)) == 4)
                {
                    byte* ptr = *(ref _Module.struct121_0 + 4780) + 130816;
                    if (_Module.memcmp((void*)ptr, *(ref _Module.struct123_0 + 8) + 2028, 20U) != null)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        int num2 = (int)MessageBox.Show("The Target f/w in does not appear to match the attached drive !" + "\n" + "This is based on a comparison of the drive barcode." + "\n" + "Please make sure you have done DVDKey32." + "\n\n" + "Are you sure you wish to proceed ?", "Lite-On Erase", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        if (num2 == 7)
                        {
                            this.textBox6.AppendText("Lite-On-Erase NOT sent " + "\r\n");
                            return;
                        }
                    }
                }
                if (!this.bool_2)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num2 = (int)MessageBox.Show("Are you 100% sure you have the Correct Drive Key" + "\n\n" + "This Command will Completely Erase your Drive f/w!" + "\n\n" + "                Do you Wish to Proceed ?", "Lite-On-Erase", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num2 == 7)
                    {
                        this.textBox6.AppendText("Lite-On-Erase NOT sent " + "\r\n");
                        return;
                    }
                }
                if (this.method_134() == 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num2 = (int)MessageBox.Show("When Erase is complete, Vendor Intro will be sent." + "\n\n" + "Power drive Off then On in quick succession, Once!" + "\n\n" + "Drive should return Status 0x72 and a good Device ID." + "\n\n" + "                Do you Wish to Proceed ?", "Lite-On-Erase", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num2 == 7)
                    {
                        this.textBox6.AppendText("Lite-On-Erase NOT sent " + "\r\n");
                        return;
                    }
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                this.textBox6.AppendText("\r\n" + "Sending Lite-On-Erase request to port " + this.label123.Text + "\r\n");

                _Module.smethod_2(*(ref gstruct + 14), (byte)num);

                _Module.Sleep(250);
                this.textBox6.AppendText(".");

                _Module.Sleep(250);
                this.textBox6.AppendText(".");

                _Module.smethod_2(*(ref gstruct + 14), (byte)num);

                _Module.smethod_2(*(ref gstruct + 8), 46);

                _Module.smethod_2(*(ref gstruct + 18), 128);
                if (this.method_134() == 1)
                {
                    Thread thread = new Thread(new ThreadStart(this.method_133));
                    thread.Start();
                }
                else
                {
                    for (int i = 0; i < 12; i++)
                    {

                        _Module.Sleep(250);
                        this.textBox6.AppendText(".");
                    }
                }
                ushort num3 = (ushort)_Module.smethod_1(*(ref gstruct + 18));
                Struct20 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), (byte)num3);
                string text = new string((sbyte*)(&_Module.struct19_0));
                text += new string((sbyte*)(&@struct));
                this.textBox6.AppendText("\r\n" + "Drive returned Status 0x" + text + "\r\n");
                uint num4 = _Module.smethod_6();
                uint uint_;
                while (num3 != 114)
                {
                    uint num5 = _Module.smethod_6();
                    if (num5 - num4 >= 10000U)
                    {
                        this.textBox6.AppendText("\r\n" + "Device Intro failed!" + "\r\n");
                        return;
                    }
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return;
                    }

                    _Module.smethod_2(*(ref gstruct + 14), (byte)num);

                    _Module.Sleep(500);

                    _Module.smethod_2(*(ref gstruct + 8), 46);

                    _Module.smethod_2(*(ref gstruct + 18), 128);
                    num3 = (ushort)_Module.smethod_1(*(ref gstruct + 18));

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), (byte)num3);
                    text = new string((sbyte*)(&_Module.struct19_0));
                    text += new string((sbyte*)(&@struct));
                    this.label122.Text = "Status 0x" + text;
                    Application.DoEvents();
                    this.textBox6.AppendText(new string((sbyte*)(&_Module.struct6_9)));
                    Application.DoEvents();
                    if (num3 == 242)
                    {
                        this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                        this.label122.Text = "Serial flash with status 0x72";

                        _Module.Sleep(250);
                        this.method_258();

                        _Module.Sleep(250);
                        this.method_252();
                        uint_ = (uint)this.method_304();
                        break;
                    }
                    if (num3 == 114)
                    {
                        this.textBox6.AppendText("\r\n" + "Serial flash found with Status 0x72" + "\r\n");
                        this.label122.Text = "Serial flash with status 0x72";

                        _Module.Sleep(250);
                        this.method_258();

                        _Module.Sleep(250);
                        this.method_252();
                        uint_ = (uint)this.method_304();
                        break;
                    }
                }
                if (this.method_206(uint_) == 0)
                {
                    Application.DoEvents();
                    if (this.bool_2)
                    {
                        this.method_208();
                    }
                }
            }
        }

        // Token: 0x060002EF RID: 751 RVA: 0x003C97F4 File Offset: 0x003117F4
        private unsafe void method_208()
        {
            if (*(*(ref _Module.struct123_0 + 4)) == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No Firmware is loaded to Target buffer", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else if (*(*(ref _Module.struct123_0 + 4)) != 4)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("Firmware in Target buffer is not Lite-On, write aborted", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                this.Cursor = Cursors.WaitCursor;
                this.method_311();
                this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                if (this.method_326() == 1)
                {
                    this.Cursor = Cursors.Arrow;
                }
                else
                {
                    this.Cursor = Cursors.Arrow;

                    _Module.Sleep(500);
                    this.Cursor = Cursors.WaitCursor;
                    this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                    this.method_307();
                    this.Cursor = Cursors.Arrow;
                    for (int i = 0; i < 262144; i++)
                    {
                        if (*(*(ref _Module.struct121_0 + 7172) + i) != *(*(ref _Module.struct121_0 + 4780) + i))
                        {
                            this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                            return;
                        }
                    }
                    this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                    Thread thread = new Thread(new ThreadStart(this.method_162));
                    thread.Start();
                }
            }
        }

        // Token: 0x060002F0 RID: 752 RVA: 0x00138488 File Offset: 0x00138488
        private void button16_Click(object sender, EventArgs e)
        {
            this.method_14();
            this.method_209();
            this.method_15();
        }

        // Token: 0x060002F1 RID: 753 RVA: 0x001384A8 File Offset: 0x001384A8
        private void method_209()
        {
            this.textBox6.AppendText("Sending Vendor Outro to port " + this.label123.Text + "\r\n");
            this.method_251();
            this.toolTip_0.SetToolTip(this.button42, "Lock/UnLock Slim Lite-On Spi ");
            this.button42.Enabled = false;
            this.button42.Text = "";
            this.label118.Text = "";
            this.label119.Text = "";
            this.label120.Text = "";
            this.label121.Text = "";
            this.label122.Text = "";

            _Module.Sleep(1500);
            this.method_172();
        }

        // Token: 0x060002F2 RID: 754 RVA: 0x00138574 File Offset: 0x00138574
        private void button15_Click(object sender, EventArgs e)
        {
            this.method_14();
            this.method_210();
            this.method_15();
        }

        // Token: 0x060002F3 RID: 755 RVA: 0x00138594 File Offset: 0x00138594
        private void method_210()
        {
            if (this.radioButton19.Checked)
            {
                this.method_212();
            }
            else
            {
                this.method_211();
            }
        }

        // Token: 0x060002F4 RID: 756 RVA: 0x001385C0 File Offset: 0x001385C0
        private unsafe void method_211()
        {
            if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") == 0)
            {
                this.textBox6.AppendText("Unknown flash type Read aborted !" + "\r\n");
            }
            else
            {
                uint num = (uint)this.method_261();
                Struct20 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), num);
                string text = new string((sbyte*)(&_Module.struct19_0));
                text += new string((sbyte*)(&@struct));
                text = "0x" + text;
                int num2 = _Module.clock();
                if (num == 112U)
                {
                    this.textBox6.AppendText("Parallel flash found with Status 0x70" + "\r\n");
                    this.Cursor = Cursors.WaitCursor;
                    this.method_291();
                    int num3 = _Module.clock();
                    int value = num3 - num2;
                    this.textBox6.AppendText("\r\n" + "Dumped in " + Convert.ToString(value) + "mS" + "\r\n");
                    this.Cursor = Cursors.Arrow;
                    this.method_262();
                    this.textBox6.AppendText("\r\n" + "Loading MTK_Flash source file " + "\r\n");
                }
                else if (num == 115U)
                {
                    this.textBox6.AppendText("Serial flash found with Status 0x73" + "\r\n");
                    this.Cursor = Cursors.WaitCursor;
                    this.method_298();
                    int num3 = _Module.clock();
                    int value = num3 - num2;
                    this.textBox6.AppendText("\r\n" + "Dumped in " + Convert.ToString(value) + "mS" + "\r\n");
                    this.Cursor = Cursors.Arrow;
                    this.method_263();
                    this.textBox6.AppendText("\r\n" + "Loading MTK_Flash source file " + "\r\n");
                }
                else if (num == 114U)
                {
                    this.textBox6.AppendText("Serial flash found with Status 0x72" + "\r\n");
                    this.Cursor = Cursors.WaitCursor;
                    this.method_307();
                    int num3 = _Module.clock();
                    int value = num3 - num2;
                    this.textBox6.AppendText("\r\n" + "Dumped in " + Convert.ToString(value) + "mS" + "\r\n");
                    this.Cursor = Cursors.Arrow;
                    this.method_264();
                    this.textBox6.AppendText("\r\n" + "Loading MTK_Flash source file " + "\r\n");
                }
                else
                {
                    this.textBox6.AppendText("Invalid Status " + text + "\r\n");
                }
            }
        }

        // Token: 0x060002F5 RID: 757 RVA: 0x00138844 File Offset: 0x00138844
        private unsafe void method_212()
        {
            string strA = null;
            int num = 0;
            Struct28 @struct = 239;
            *(ref @struct + 1) = 180;
            *(ref @struct + 2) = 134;
            *(ref @struct + 3) = 14;
            *(ref @struct + 4) = 51;
            *(ref @struct + 5) = 186;
            *(ref @struct + 6) = 40;
            *(ref @struct + 7) = 88;
            *(ref @struct + 8) = 99;
            *(ref @struct + 9) = 52;
            *(ref @struct + 10) = 85;
            *(ref @struct + 11) = 115;
            *(ref @struct + 12) = 79;
            *(ref @struct + 13) = 173;
            *(ref @struct + 14) = 24;
            *(ref @struct + 15) = 147;
            Struct28 struct2 = 36;
            *(ref struct2 + 1) = 213;
            *(ref struct2 + 2) = 165;
            *(ref struct2 + 3) = 239;
            *(ref struct2 + 4) = 251;
            *(ref struct2 + 5) = 64;
            *(ref struct2 + 6) = 87;
            *(ref struct2 + 7) = 131;
            *(ref struct2 + 8) = 252;
            *(ref struct2 + 9) = 60;
            *(ref struct2 + 10) = 35;
            *(ref struct2 + 11) = 73;
            *(ref struct2 + 12) = 167;
            *(ref struct2 + 13) = 178;
            *(ref struct2 + 14) = 185;
            *(ref struct2 + 15) = 12;
            Struct28 struct3 = 52;
            *(ref struct3 + 1) = 69;
            *(ref struct3 + 2) = 177;
            *(ref struct3 + 3) = 214;
            *(ref struct3 + 4) = 227;
            *(ref struct3 + 5) = 148;
            *(ref struct3 + 6) = 233;
            *(ref struct3 + 7) = 64;
            *(ref struct3 + 8) = 198;
            *(ref struct3 + 9) = 228;
            *(ref struct3 + 10) = 212;
            *(ref struct3 + 11) = 253;
            *(ref struct3 + 12) = 219;
            *(ref struct3 + 13) = 73;
            *(ref struct3 + 14) = 84;
            *(ref struct3 + 15) = 20;
            Struct28 struct4 = 26;
            *(ref struct4 + 1) = 194;
            *(ref struct4 + 2) = 56;
            *(ref struct4 + 3) = 208;
            *(ref struct4 + 4) = 231;
            *(ref struct4 + 5) = 48;
            *(ref struct4 + 6) = 102;
            *(ref struct4 + 7) = 115;
            *(ref struct4 + 8) = 147;
            *(ref struct4 + 9) = 121;
            *(ref struct4 + 10) = 237;
            *(ref struct4 + 11) = 217;
            *(ref struct4 + 12) = 109;
            *(ref struct4 + 13) = 141;
            *(ref struct4 + 14) = 64;
            *(ref struct4 + 15) = 46;
            Struct28 struct5 = 64;
            *(ref struct5 + 1) = 116;
            *(ref struct5 + 2) = 220;
            *(ref struct5 + 3) = 208;
            *(ref struct5 + 4) = 84;
            *(ref struct5 + 5) = 22;
            *(ref struct5 + 6) = 95;
            *(ref struct5 + 7) = 210;
            *(ref struct5 + 8) = 63;
            *(ref struct5 + 9) = 201;
            *(ref struct5 + 10) = 208;
            *(ref struct5 + 11) = 33;
            *(ref struct5 + 12) = 129;
            *(ref struct5 + 13) = 190;
            *(ref struct5 + 14) = 153;
            *(ref struct5 + 15) = 53;
            Struct28 struct6 = 123;
            *(ref struct6 + 1) = 0;
            *(ref struct6 + 2) = 74;
            *(ref struct6 + 3) = 89;
            *(ref struct6 + 4) = 0;
            *(ref struct6 + 5) = 11;
            *(ref struct6 + 6) = 221;
            *(ref struct6 + 7) = 131;
            *(ref struct6 + 8) = 180;
            *(ref struct6 + 9) = 196;
            *(ref struct6 + 10) = 36;
            *(ref struct6 + 11) = 121;
            *(ref struct6 + 12) = 111;
            *(ref struct6 + 13) = 65;
            *(ref struct6 + 14) = 168;
            *(ref struct6 + 15) = 106;
            GStruct93 gstruct;

            _Module.smethod_111(ref gstruct);
            GStruct19 gstruct2;
            try
            {

                _Module.smethod_90(ref gstruct2);
                try
                {
                    if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") != 0)
                    {
                        goto IL_3C4;
                    }
                    this.textBox6.AppendText("Unknown flash type Read aborted !" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_3C4:
                    uint num2 = (uint)this.method_261();
                    Struct20 struct7;

                    _Module.sprintf((sbyte*)(&struct7), (sbyte*)(&_Module.struct35_129), num2);
                    string text = new string((sbyte*)(&_Module.struct19_0));
                    text += new string((sbyte*)(&struct7));
                    text = "0x" + text;
                    if (num2 == 114U)
                    {
                        goto IL_45A;
                    }
                    this.textBox6.AppendText("Invalid Status " + text + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_45A:
                    this.textBox6.AppendText("Serial flash found with Status 0x72" + "\r\n");
                    int num3 = this.method_323();
                    if (num3 != 140)
                    {
                        goto IL_4D2;
                    }
                    this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_4D2:
                    int num3;
                    if (num3 != 142)
                    {
                        goto IL_528;
                    }
                    this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_528:
                    this.Cursor = Cursors.WaitCursor;
                    this.textBox6.AppendText("Reading Drive Key." + "\r\n");
                    this.method_256();
                    Struct28 struct8;

                    _Module.memcpy((void*)(&struct8), *(ref _Module.struct123_0 + 8) + 280, 16U);
                    this.method_259();
                    for (int i = 0; i < 12; i++)
                    {

                        _Module.Sleep(250);
                        this.textBox6.AppendText(".");
                    }
                    if (this.method_107((byte*)(&struct8)) == 1)
                    {
                        this.Cursor = Cursors.WaitCursor;
                        this.textBox6.AppendText("\r\n" + "Authorised !" + "\r\n");
                        goto IL_621;
                    }
                    this.textBox6.AppendText("\r\n" + "Authorisation Failed!" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            Struct28 struct9;
            int num4;
            try
            {
                try
                {
                IL_621:
                    this.textBox6.AppendText("Grabbing sector 0x3E000." + "\r\n");
                    this.method_92(0, 0, 0, (byte*)(&struct9));
                    num4 = 16;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            int j;
            Struct33 struct10;
            for (; ; )
            {
                try
                {
                    try
                    {
                        if (num4 >= 32)
                        {
                            goto IL_7AD;
                        }
                        j = 0;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                        throw;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }
                for (; ; )
                {
                    try
                    {
                        try
                        {
                            if (j >= 256)
                            {
                                break;
                            }
                            if (this.method_91(0, (byte)num4, (byte)j, (byte*)(&struct9)) != 0)
                            {
                                goto IL_6F3;
                            }
                            this.textBox6.AppendText("\r\n" + "Read Failed !" + "\r\n");
                        }
                        catch
                        {

                            _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                            throw;
                        }

                        _Module.smethod_92(ref gstruct2);
                        goto IL_7A1;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                        throw;
                    }
                    try
                    {
                        try
                        {
                        IL_6F3:

                            _Module.memcpy(ref struct10 + num, (void*)(&struct9), 16U);
                        }
                        catch
                        {

                            _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                            throw;
                        }
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                        throw;
                    }
                    try
                    {
                        try
                        {
                            j += 16;
                            num += 16;
                        }
                        catch
                        {

                            _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                            throw;
                        }
                        continue;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                        throw;
                    }
                    break;
                }
                try
                {
                    try
                    {
                        this.textBox6.AppendText(".");
                        Application.DoEvents();
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                        throw;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }
                try
                {
                    try
                    {
                        num4++;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                        throw;
                    }
                    continue;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }
                break;
            }
        IL_7A1:

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_7AD:
                    this.textBox6.AppendText(string.Concat("\r\n"));
                    GStruct19 gstruct3;
                    int pGstruct19_ = _Module.smethod_115(ref gstruct, &gstruct3, (byte*)(&struct10), 4096U);
                    try
                    {

                        _Module.smethod_93(ref gstruct2, pGstruct19_);
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct3));
                        throw;
                    }

                    _Module.smethod_92(ref gstruct3);
                    strA = new string(_Module.smethod_94(ref gstruct2));
                    Struct28 struct11;
                    if (this.method_93(35, 16, (byte)j, (byte*)(&struct11)) == 1)
                    {
                        goto IL_85F;
                    }
                    this.textBox6.AppendText("Drive hashing failed, aborting!" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_85F:
                    if (string.Compare(strA, "72fedc223e7285fa14e97efc5c26f095") != 0)
                    {
                        goto IL_A1D;
                    }
                    Struct28 struct11;
                    if (_Module.memcmp((void*)(&struct11), (void*)(&@struct), 16U) == null)
                    {
                        goto IL_8CB;
                    }
                    this.textBox6.AppendText("Unknown f/w, aborting !" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            Struct33 struct12;
            Struct33 struct13;
            try
            {
                try
                {
                IL_8CB:
                    this.textBox6.AppendText("Known f/w confirmed !" + "\r\n");

                    _Module.memcpy((void*)(&struct12), (void*)(&struct10), 4096U);

                    _Module.memcpy((void*)(&struct13), (void*)(&struct10), 4096U);
                    for (j = 0; j < 1568; j++)
                    {
                        *(ref struct13 + (j + 1536)) = (*(ref struct13 + (j + 1536)) ^ *(ref _Module.struct61_0 + j));
                    }
                    this.method_189();
                    this.textBox6.AppendText("\r\n" + "Updating flash for on-line dump." + "\r\n");
                    if (this.method_329() != 0)
                    {
                        goto IL_993;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_993:
                    if (this.method_330((byte*)(&struct13)) != 0)
                    {
                        goto IL_9D0;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_9D0:
                    this.method_259();
                    for (int i = 0; i < 12; i++)
                    {

                        _Module.Sleep(250);
                        this.textBox6.AppendText(".");
                    }
                    goto IL_130F;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            try
            {
                try
                {
                IL_A1D:
                    if (string.Compare(strA, "641c9d5df2a5b22549970a9904f82aba") != 0)
                    {
                        goto IL_B29;
                    }
                    Struct28 struct11;
                    if (_Module.memcmp((void*)(&struct11), (void*)(&@struct), 16U) == null)
                    {
                        goto IL_A89;
                    }
                    this.textBox6.AppendText("Unknown f/w, aborting !" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_A89:
                    this.textBox6.AppendText("Modded sector detected !" + "\r\n");
                    this.textBox6.AppendText("Ready for on-line dump." + "\r\n");

                    _Module.memcpy((void*)(&struct12), (void*)(&struct10), 4096U);

                    _Module.memcpy((void*)(&struct13), (void*)(&struct10), 4096U);
                    for (j = 0; j < 1568; j++)
                    {
                        *(ref struct12 + (j + 1536)) = (*(ref struct12 + (j + 1536)) ^ *(ref _Module.struct61_0 + j));
                    }
                    goto IL_130F;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            try
            {
                try
                {
                IL_B29:
                    if (string.Compare(strA, "29d96e15f409aadec008b539203ff300") != 0)
                    {
                        goto IL_CE4;
                    }
                    Struct28 struct11;
                    if (_Module.memcmp((void*)(&struct11), (void*)(&struct4), 16U) == null)
                    {
                        goto IL_B95;
                    }
                    this.textBox6.AppendText("Unknown f/w, aborting !" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_B95:
                    this.textBox6.AppendText("Known f/w confirmed !" + "\r\n");

                    _Module.memcpy((void*)(&struct12), (void*)(&struct10), 4096U);

                    _Module.memcpy((void*)(&struct13), (void*)(&struct10), 4096U);
                    for (j = 0; j < 80; j++)
                    {
                        *(ref struct13 + (j + 2064)) = (*(ref struct13 + (j + 2064)) ^ *(ref _Module.struct31_0 + j));
                    }
                    this.method_189();
                    this.textBox6.AppendText("\r\n" + "Updating flash for on-line dump." + "\r\n");
                    if (this.method_329() != 0)
                    {
                        goto IL_C5A;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_C5A:
                    if (this.method_330((byte*)(&struct13)) != 0)
                    {
                        goto IL_C97;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_C97:
                    this.method_259();
                    for (int i = 0; i < 12; i++)
                    {

                        _Module.Sleep(250);
                        this.textBox6.AppendText(".");
                    }
                    goto IL_130F;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            try
            {
                try
                {
                IL_CE4:
                    if (string.Compare(strA, "70e8e44dba1f2c9cd419f253f8a8da55") != 0)
                    {
                        goto IL_DED;
                    }
                    Struct28 struct11;
                    if (_Module.memcmp((void*)(&struct11), (void*)(&struct4), 16U) == null)
                    {
                        goto IL_D50;
                    }
                    this.textBox6.AppendText("Unknown f/w, aborting !" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_D50:
                    this.textBox6.AppendText("Modded sector detected !" + "\r\n");
                    this.textBox6.AppendText("Ready for on-line dump." + "\r\n");

                    _Module.memcpy((void*)(&struct12), (void*)(&struct10), 4096U);

                    _Module.memcpy((void*)(&struct13), (void*)(&struct10), 4096U);
                    for (j = 0; j < 80; j++)
                    {
                        *(ref struct12 + (j + 2064)) = (*(ref struct12 + (j + 2064)) ^ *(ref _Module.struct31_0 + j));
                    }
                    goto IL_130F;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            try
            {
                try
                {
                IL_DED:
                    if (string.Compare(strA, "2445fc4f85f71359de0406003c60d559") != 0)
                    {
                        goto IL_EFA;
                    }
                    Struct28 struct11;
                    if (_Module.memcmp((void*)(&struct11), (void*)(&struct2), 16U) == null)
                    {
                        goto IL_E86;
                    }
                    if (_Module.memcmp((void*)(&struct11), (void*)(&struct3), 16U) == null)
                    {
                        goto IL_E86;
                    }
                    if (_Module.memcmp((void*)(&struct11), (void*)(&struct5), 16U) == null)
                    {
                        goto IL_E86;
                    }
                    if (_Module.memcmp((void*)(&struct11), (void*)(&struct6), 16U) == null)
                    {
                        goto IL_E86;
                    }
                    this.textBox6.AppendText("Unknown f/w, aborting !" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_E86:
                    this.textBox6.AppendText("Modded sector detected !" + "\r\n");
                    this.textBox6.AppendText("Ready for on-line dump." + "\r\n");

                    _Module.memset((void*)(&struct12), 255, 4096U);

                    _Module.memcpy((void*)(&struct13), (void*)(&struct10), 4096U);
                    goto IL_130F;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            try
            {
                try
                {
                IL_EFA:
                    if (string.Compare(strA, "b8164e88115adea4ecd164fb88ccb426") != 0)
                    {
                        goto IL_FDA;
                    }
                    Struct28 struct11;
                    if (_Module.memcmp((void*)(&struct11), (void*)(&struct4), 16U) == null)
                    {
                        goto IL_F66;
                    }
                    this.textBox6.AppendText("Unknown f/w, aborting !" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_F66:
                    this.textBox6.AppendText("Modded sector detected !" + "\r\n");
                    this.textBox6.AppendText("Ready for on-line dump." + "\r\n");

                    _Module.memset((void*)(&struct12), 255, 4096U);

                    _Module.memcpy((void*)(&struct13), (void*)(&struct10), 4096U);
                    goto IL_130F;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            try
            {
                try
                {
                IL_FDA:
                    if (string.Compare(strA, "6ae59e64850377ee5470c854761551ea") != 0)
                    {
                        goto IL_130F;
                    }
                    this.textBox6.AppendText("Blank 3E000 sector detected!" + "\r\n");
                    Struct28 struct11;
                    if (_Module.memcmp((void*)(&struct11), (void*)(&struct2), 16U) != null && _Module.memcmp((void*)(&struct11), (void*)(&struct3), 16U) != null && _Module.memcmp((void*)(&struct11), (void*)(&struct5), 16U) != null && _Module.memcmp((void*)(&struct11), (void*)(&struct6), 16U) != null)
                    {
                        goto IL_117A;
                    }
                    this.textBox6.AppendText("Known f/w confirmed !" + "\r\n");

                    _Module.memset((void*)(&struct12), 255, 4096U);

                    _Module.memcpy((void*)(&struct13), (void*)(&struct10), 4096U);

                    _Module.memcpy(ref struct13 + 2048, (void*)(&_Module.struct59_1), 84U);
                    this.method_200();
                    this.textBox6.AppendText("\r\n" + "Updating flash for on-line dump." + "\r\n");
                    if (this.method_329() != 0)
                    {
                        goto IL_10F0;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_10F0:
                    if (this.method_330((byte*)(&struct13)) != 0)
                    {
                        goto IL_112D;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_112D:
                    this.method_259();
                    for (int i = 0; i < 12; i++)
                    {

                        _Module.Sleep(250);
                        this.textBox6.AppendText(".");
                    }
                    goto IL_130F;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            try
            {
                try
                {
                IL_117A:
                    Struct28 struct11;
                    if (_Module.memcmp((void*)(&struct11), (void*)(&struct4), 16U) != null)
                    {
                        goto IL_12C4;
                    }
                    this.textBox6.AppendText("Known f/w confirmed !" + "\r\n");

                    _Module.memset((void*)(&struct12), 255, 4096U);

                    _Module.memcpy((void*)(&struct13), (void*)(&struct10), 4096U);

                    _Module.memcpy(ref struct13 + 2048, (void*)(&_Module.struct59_0), 84U);
                    this.method_200();
                    this.textBox6.AppendText("\r\n" + "Updating flash for on-line dump." + "\r\n");
                    if (this.method_329() != 0)
                    {
                        goto IL_123D;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_123D:
                    if (this.method_330((byte*)(&struct13)) != 0)
                    {
                        goto IL_127A;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_127A:
                    this.method_259();
                    for (int i = 0; i < 12; i++)
                    {

                        _Module.Sleep(250);
                        this.textBox6.AppendText(".");
                    }
                    goto IL_130F;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            try
            {
                try
                {
                IL_12C4:
                    this.textBox6.AppendText("Unknown f/w, Aborting !" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_130F:
                    if (this.method_214((byte*)(&struct12)) != 0)
                    {
                        goto IL_1357;
                    }
                    this.Cursor = Cursors.Arrow;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_1357:
                    this.method_253();
                    this.textBox6.AppendText("Restoring sector 0x3E000." + "\r\n");
                    if (this.method_324() != 0)
                    {
                        goto IL_13C4;
                    }
                    this.method_264();
                    this.Cursor = Cursors.Arrow;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_13C4:
                    if (this.method_329() != 0)
                    {
                        goto IL_1410;
                    }
                    this.method_264();
                    this.Cursor = Cursors.Arrow;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_1410:
                    if (this.method_330((byte*)(&struct12)) != 0)
                    {
                        goto IL_145E;
                    }
                    this.method_264();
                    this.Cursor = Cursors.Arrow;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_145E:
                    this.method_259();
                    for (int i = 0; i < 12; i++)
                    {

                        _Module.Sleep(250);
                        this.textBox6.AppendText(".");
                    }
                    Struct28 struct8;
                    if (this.method_107((byte*)(&struct8)) == 1)
                    {
                        this.Cursor = Cursors.WaitCursor;
                        this.textBox6.AppendText("\r\n" + "Authorised !" + "\r\n");
                        goto IL_1524;
                    }
                    this.textBox6.AppendText("\r\n" + "Authorisation Failed!" + "\r\n");
                    this.method_264();
                    this.Cursor = Cursors.Arrow;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_1524:
                    this.method_92(0, 0, 0, (byte*)(&struct9));
                    num = 0;
                    num4 = 16;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            for (; ; )
            {
                try
                {
                    try
                    {
                        if (num4 >= 32)
                        {
                            goto IL_169F;
                        }
                        j = 0;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                        throw;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }
                for (; ; )
                {
                    try
                    {
                        try
                        {
                            if (j >= 256)
                            {
                                break;
                            }
                            if (this.method_91(0, (byte)num4, (byte)j, (byte*)(&struct9)) != 0)
                            {
                                goto IL_15E5;
                            }
                            this.textBox6.AppendText("\r\n" + "Read Failed !" + "\r\n");
                            this.method_264();
                        }
                        catch
                        {

                            _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                            throw;
                        }

                        _Module.smethod_92(ref gstruct2);
                        goto IL_1693;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                        throw;
                    }
                    try
                    {
                        try
                        {
                        IL_15E5:

                            _Module.memcpy(ref struct10 + num, (void*)(&struct9), 16U);
                        }
                        catch
                        {

                            _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                            throw;
                        }
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                        throw;
                    }
                    try
                    {
                        try
                        {
                            j += 16;
                            num += 16;
                        }
                        catch
                        {

                            _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                            throw;
                        }
                        continue;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                        throw;
                    }
                    break;
                }
                try
                {
                    try
                    {
                        this.textBox6.AppendText(".");
                        Application.DoEvents();
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                        throw;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }
                try
                {
                    try
                    {
                        num4++;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                        throw;
                    }
                    continue;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }
                break;
            }
        IL_1693:

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_169F:
                    this.textBox6.AppendText(string.Concat("\r\n"));
                    j = 0;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            for (; ; )
            {
                try
                {
                    try
                    {
                        if (j >= 4096)
                        {
                            goto IL_177C;
                        }
                        if (*(ref struct12 + j) == *(ref struct10 + j))
                        {
                            goto IL_1732;
                        }
                        this.textBox6.AppendText("Restore 0x3E000 failed !" + "\r\n");
                        this.method_264();
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                        throw;
                    }

                    _Module.smethod_92(ref gstruct2);
                    break;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }
                try
                {
                    try
                    {
                    IL_1732:;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                        throw;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }
                try
                {
                    try
                    {
                        j++;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                        throw;
                    }
                    continue;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }
                break;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_177C:
                    this.textBox6.AppendText("Restore 0x3E000 verified !" + "\r\n");
                    this.method_264();
                    this.Cursor = Cursors.Arrow;
                    this.method_177();
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
        }

        // Token: 0x060002F6 RID: 758 RVA: 0x0013AA94 File Offset: 0x0013AA94
        private unsafe void method_213()
        {
            Struct33 @struct;

            _Module.memset((void*)(&@struct), 255, 4096U);
            Struct33 struct2;

            _Module.memset((void*)(&struct2), 255, 4096U);

            _Module.memcpy(ref struct2 + 2048, (void*)(&_Module.struct59_1), 84U);
            if (this.method_329() == 0)
            {
                this.Cursor = Cursors.Arrow;
            }
            else if (this.method_330((byte*)(&struct2)) == 0)
            {
                this.Cursor = Cursors.Arrow;
            }
        }

        // Token: 0x060002F7 RID: 759 RVA: 0x003C99B8 File Offset: 0x003119B8
        private unsafe int method_214(byte* pByte_0)
        {
            Struct28 @struct = 0;
            initblk(ref @struct + 1, 0, 15);
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                this.Cursor = Cursors.WaitCursor;
                int num2 = _Module.clock();
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct33 struct2;
                Struct52 struct3;
                uint num3;
                Struct32 struct4;
                for (byte b = 0; b < 4; b += 1)
                {
                    this.textBox6.AppendText("\r\n" + "Reading Bank " + Convert.ToString(b) + ": ");
                    this.string_2 = "Reading Bank " + Convert.ToString(b) + ": ";
                    this.string_3 = "";
                    for (byte b2 = 0; b2 < 2; b2 += 1)
                    {
                        if (_Module.GetAsyncKeyState(27) != null)
                        {
                            this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                            return 0;
                        }

                        _Module.memset((void*)(&struct2), 0, 4096U);

                        _Module.memset((void*)(&struct3), 0, 12U);
                        struct3 = 253;
                        *(ref struct3 + 1) = 15;
                        *(ref struct3 + 2) = 80;
                        *(ref struct3 + 3) = 76;
                        *(ref struct3 + 4) = 68;
                        *(ref struct3 + 5) = 83;
                        *(ref struct3 + 6) = b * 16 + b2 * 8;
                        *(ref struct3 + 7) = 0;
                        *(ref struct3 + 8) = 16;
                        *(ref struct3 + 9) = 0;
                        *(ref struct3 + 10) = 0;
                        *(ref struct3 + 11) = 0;
                        if (_Module.smethod_17((byte*)(&struct3), 12U, (byte)num, 512, (void*)(&@struct), &num3, 16U, 1, &gstruct) != null)
                        {
                            this.textBox6.AppendText("Dump Failed" + "\r\n");
                            this.Cursor = Cursors.Arrow;
                            return 0;
                        }
                        for (byte b3 = 0; b3 < 8; b3 += 1)
                        {
                            this.textBox6.AppendText(".");
                            this.string_3 += ".";
                            Application.DoEvents();
                            if (_Module.smethod_9((void*)(&struct2), &num3, 4096U, 512U, &gstruct) != null)
                            {
                                return 0;
                            }
                            byte* ptr = ref struct4 + ((int)b * 65536 + (int)b2 * 32768 + (int)b3 * 4096);

                            _Module.memcpy((void*)ptr, (void*)(&struct2), 4096U);
                        }
                    }
                }
                if (*pByte_0 != 0)
                {

                    _Module.memcpy(ref struct4 + 253952, (void*)pByte_0, 4096U);
                }
                int num4 = _Module.clock();
                int value = num4 - num2;
                this.textBox6.AppendText("\r\n" + "Dumped in " + Convert.ToString(value) + "mS" + "\r\n");
                this.textBox6.AppendText("\r\n");
                this.string_2 = "Done! ";
                this.string_3 = "";

                _Module.memset((void*)(&struct2), 0, 4096U);

                _Module.memset((void*)(&struct3), 0, 12U);
                struct3 = 253;
                *(ref struct3 + 1) = 15;
                *(ref struct3 + 2) = 80;
                *(ref struct3 + 3) = 76;
                *(ref struct3 + 4) = 68;
                *(ref struct3 + 5) = 83;
                *(ref struct3 + 6) = 119;
                *(ref struct3 + 7) = 0;
                *(ref struct3 + 8) = 16;
                *(ref struct3 + 9) = 0;
                *(ref struct3 + 10) = 0;
                *(ref struct3 + 11) = 0;
                if (_Module.smethod_17((byte*)(&struct3), 12U, (byte)num, 512, (void*)(&@struct), &num3, 16U, 1, &gstruct) != null)
                {
                    this.textBox6.AppendText("Dump Failed" + "\r\n");
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {
                    this.Cursor = Cursors.Arrow;

                    _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct4), 262144U);
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x060002F8 RID: 760 RVA: 0x0013AEC4 File Offset: 0x0013AEC4
        private unsafe int method_215()
        {
            Struct28 @struct = 0;
            initblk(ref @struct + 1, 0, 15);
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                this.Cursor = Cursors.WaitCursor;
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct52 struct2;

                _Module.memset((void*)(&struct2), 0, 12U);
                struct2 = 253;
                *(ref struct2 + 1) = 15;
                *(ref struct2 + 2) = 80;
                *(ref struct2 + 3) = 76;
                *(ref struct2 + 4) = 68;
                *(ref struct2 + 5) = 83;
                *(ref struct2 + 6) = 119;
                *(ref struct2 + 7) = 0;
                *(ref struct2 + 8) = 16;
                *(ref struct2 + 9) = 0;
                *(ref struct2 + 10) = 0;
                *(ref struct2 + 11) = 0;
                uint num2;
                if (_Module.smethod_17((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&@struct), &num2, 16U, 1, &gstruct) != null)
                {
                    this.Cursor = Cursors.Arrow;
                    result = 0;
                }
                else
                {
                    this.Cursor = Cursors.Arrow;
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x060002F9 RID: 761 RVA: 0x0013AFDC File Offset: 0x0013AFDC
        private void button14_Click(object sender, EventArgs e)
        {
            this.method_14();
            this.method_216();
            this.method_15();
        }

        // Token: 0x060002FA RID: 762 RVA: 0x0013AFFC File Offset: 0x0013AFFC
        private void method_216()
        {
            if (this.radioButton19.Checked)
            {
                this.method_218();
            }
            if (this.radioButton21.Checked)
            {
                this.method_219();
            }
            else
            {
                this.method_217();
            }
        }

        // Token: 0x060002FB RID: 763 RVA: 0x003C9D78 File Offset: 0x00311D78
        private unsafe void method_217()
        {
            if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") == 0)
            {
                this.textBox6.AppendText("Unknown flash type Erase aborted !" + "\r\n");
            }
            else
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num = (int)MessageBox.Show("You are about to Erase your flash," + "\n" + "Are you sure you wish to proceed ?", "Erase Flash", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                if (num != 7)
                {
                    uint num2 = (uint)this.method_261();
                    Struct20 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), num2);
                    string text = new string((sbyte*)(&_Module.struct19_0));
                    text += new string((sbyte*)(&@struct));
                    text = "0x" + text;
                    if (num2 == 112U)
                    {
                        this.textBox6.AppendText("Parallel flash found with Status 0x70" + "\r\n");
                        this.Cursor = Cursors.WaitCursor;
                        this.method_292();

                        _Module.Sleep(200);
                        this.textBox6.AppendText("Blank Test !" + "\r\n");
                        int num3 = this.method_293();
                        this.Cursor = Cursors.Arrow;
                        if (num3 != 1)
                        {
                            this.textBox6.AppendText("Blank test Failed !" + "\r\n");
                        }
                        else
                        {
                            this.textBox6.AppendText("Blank verified OK !" + "\r\n");
                        }
                    }
                    else if (num2 == 115U)
                    {
                        this.textBox6.AppendText("SPi flash found with Status 0x73" + "\r\n");
                        this.method_299();
                        this.textBox6.AppendText("Blank Test !" + "\r\n");
                        this.method_298();
                        this.Cursor = Cursors.Arrow;
                        for (int i = 0; i < 262144; i++)
                        {
                            if (*(*(ref _Module.struct121_0 + 7172) + i) != 255)
                            {
                                this.textBox6.AppendText("Blank test Failed !" + "\r\n");
                                return;
                            }
                        }
                        this.textBox6.AppendText("Blank verified OK !" + "\r\n");
                    }
                    else if (num2 == 114U)
                    {
                        this.textBox6.AppendText("SPi flash found with Status 0x72" + "\r\n");
                        this.Cursor = Cursors.WaitCursor;
                        this.method_311();
                        this.textBox6.AppendText("Blank Test !" + "\r\n");
                        this.method_307();
                        this.Cursor = Cursors.Arrow;
                        for (int i = 0; i < 262144; i++)
                        {
                            if (*(*(ref _Module.struct121_0 + 7172) + i) != 255)
                            {
                                this.textBox6.AppendText("Blank test Failed !" + "\r\n");
                                return;
                            }
                        }
                        this.textBox6.AppendText("Blank verified OK !" + "\r\n");
                    }
                    else
                    {
                        this.textBox6.AppendText("Invalid Status " + text + "\r\n");

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Drive returned Invalid Status!", "Flash Erase", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    }
                }
            }
        }

        // Token: 0x060002FC RID: 764 RVA: 0x0013B3A4 File Offset: 0x0013B3A4
        private unsafe void method_218()
        {
            if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") == 0)
            {
                this.textBox6.AppendText("Unknown flash type Erase aborted !" + "\r\n");
            }
            else
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num = (int)MessageBox.Show("You are about to Erase your flash," + "\n" + "Are you sure you wish to proceed ?", "Erase Flash", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                if (num != 7)
                {
                    uint num2 = (uint)this.method_261();
                    Struct20 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), num2);
                    string text = new string((sbyte*)(&_Module.struct19_0));
                    text += new string((sbyte*)(&@struct));
                    text = "0x" + text;
                    if (num2 == 114U)
                    {
                        this.textBox6.AppendText("SPi flash found with Status 0x72" + "\r\n");
                        this.Cursor = Cursors.WaitCursor;
                        this.method_312();
                        this.textBox6.AppendText("Done !" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                    }
                    else
                    {
                        this.textBox6.AppendText("Invalid Status " + text + "\r\n");

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Drive returned Invalid Status!", "Flash Erase", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    }
                }
            }
        }

        // Token: 0x060002FD RID: 765 RVA: 0x0013B538 File Offset: 0x0013B538
        private unsafe void method_219()
        {
            if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") == 0)
            {
                this.textBox6.AppendText("Unknown flash type Erase aborted !" + "\r\n");
            }
            else
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num = (int)MessageBox.Show("You are about to Erase your flash," + "\n" + "Are you sure you wish to proceed ?", "Erase Flash", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                if (num != 7)
                {
                    uint num2 = (uint)this.method_261();
                    Struct20 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), num2);
                    string text = new string((sbyte*)(&_Module.struct19_0));
                    text += new string((sbyte*)(&@struct));
                    text = "0x" + text;
                    if (num2 == 114U)
                    {
                        this.textBox6.AppendText("SPi flash found with Status 0x72" + "\r\n");
                        this.Cursor = Cursors.WaitCursor;
                        this.method_313();
                        this.textBox6.AppendText("Done !" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                    }
                    else
                    {
                        this.textBox6.AppendText("Invalid Status " + text + "\r\n");

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Drive returned Invalid Status!", "Flash Erase", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    }
                }
            }
        }

        // Token: 0x060002FE RID: 766 RVA: 0x0013B6CC File Offset: 0x0013B6CC
        private void button42_Click(object sender, EventArgs e)
        {
            if (this.radioButton19.Checked)
            {
                this.method_221();
            }
            else
            {
                this.method_220();
            }
        }

        // Token: 0x060002FF RID: 767 RVA: 0x003CA0E0 File Offset: 0x003120E0
        private void method_220()
        {
            int num = 0;
            this.Cursor = Cursors.WaitCursor;
            if (string.Compare(this.button42.Text, "0x00") == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num2 = (int)MessageBox.Show("This Lock is intended for:" + "\r\n" + " - XECUTER DG-16D4S UNLOCKED PCB" + "\r\n" + " - XECUTER DG-16D4S PRO INSTALL KIT" + "\r\n\r\n" + "You should not attempt to lock a Phat Lite-on." + "\r\n" + "If you do, LO-Erase will fail !" + "\r\n" + "You will have no recourse other than to MRA " + "\r\n" + "the drive to Intro it.", "SPi Lock", MessageBoxButtons.OKCancel, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                if (num2 == 2)
                {
                    this.Cursor = Cursors.Arrow;
                    return;
                }
                this.textBox6.AppendText("\r\n" + "Sending Spi Lock request to Port " + this.label123.Text + "\r\n");
                if (this.method_314() == 1)
                {
                    this.button42.Text = "0x8C";
                    this.toolTip_0.SetToolTip(this.button42, "Click to clear Spi status register");
                }
                else
                {
                    this.textBox6.AppendText("Lock Failed !" + "\r\n" + "Spi Status: 0x00" + "\r\n");
                }
            }
            else if (string.Compare(this.button42.Text, "0x8C") == 0)
            {
                this.textBox6.AppendText("\r\n" + "Sending Spi UnLock request to Port " + this.label123.Text + "\r\n");
                if (this.method_315() == 1)
                {
                    this.button42.Text = "0x00";
                    this.toolTip_0.SetToolTip(this.button42, "Click to lock Spi status register");
                }
                else
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num2 = (int)MessageBox.Show("Spi Status Register is H/W protected" + "\n" + "If you wish to resend clear Spi Status Register" + "\n\n" + "Press Escape to cancel.", "SPI Status 0x8C", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num2 == 6)
                    {
                        this.Cursor = Cursors.AppStarting;
                        while (this.method_315() == 0)
                        {

                            _Module.Sleep(5);
                            num++;
                            if (_Module.GetAsyncKeyState(27) != null)
                            {
                                this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                                this.Cursor = Cursors.Arrow;
                                return;
                            }
                            if (num % 8 == 0)
                            {
                                this.textBox6.AppendText(".");
                            }
                            Application.DoEvents();
                        }
                        this.Cursor = Cursors.Arrow;
                    }
                }
            }
            this.Cursor = Cursors.Arrow;
        }

        // Token: 0x06000300 RID: 768 RVA: 0x003CA390 File Offset: 0x00312390
        private void method_221()
        {
            int num = 0;
            this.Cursor = Cursors.WaitCursor;
            if (string.Compare(this.button42.Text, "0x00") == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num2 = (int)MessageBox.Show("***                                 Warning                                     ***" + "\r\n\r\n" + "This lock can be quite permanent... You should stop if: " + "\r\n" + "You do not have a Sputnik or Russian type hack for MXIC." + "\r\n" + "                                      -OR-  " + "\r\n" + "Cannot do a Kamikaze hack on Winbond.", "SPi Lock", MessageBoxButtons.OKCancel, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                if (num2 == 2)
                {
                    this.Cursor = Cursors.Arrow;
                    return;
                }
                this.textBox6.AppendText("\r\n" + "Sending Spi Lock request to Port " + this.label123.Text + "\r\n");
                if (this.method_322() == 1)
                {
                    this.button42.Text = "0x8C";
                    this.toolTip_0.SetToolTip(this.button42, "Click to clear Spi status register");
                }
                else
                {
                    this.textBox6.AppendText("Lock Failed !" + "\r\n" + "Spi Status: 0x00" + "\r\n");
                }
            }
            else if (string.Compare(this.button42.Text, "0x8C") == 0)
            {
                this.textBox6.AppendText("\r\n" + "Sending Spi UnLock request to Port " + this.label123.Text + "\r\n");
                if (this.method_321() == 1)
                {
                    this.button42.Text = "0x00";
                    this.toolTip_0.SetToolTip(this.button42, "Click to lock Spi status register");
                }
                else
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num2 = (int)MessageBox.Show("Spi Status Register is H/W protected" + "\n" + "If you wish to resend clear Spi Status Register" + "\n\n" + "Press Escape to cancel.", "SPI Status 0x8C", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num2 == 6)
                    {
                        this.Cursor = Cursors.AppStarting;
                        while (this.method_321() == 0)
                        {

                            _Module.Sleep(5);
                            num++;
                            if (_Module.GetAsyncKeyState(27) != null)
                            {
                                this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                                this.Cursor = Cursors.Arrow;
                                return;
                            }
                            if (num % 16 == 0)
                            {
                                this.textBox6.AppendText(".");
                            }
                            Application.DoEvents();
                        }
                        this.Cursor = Cursors.Arrow;
                    }
                }
            }
            this.Cursor = Cursors.Arrow;
        }

        // Token: 0x06000301 RID: 769 RVA: 0x0013BC3C File Offset: 0x0013BC3C
        private void button13_Click(object sender, EventArgs e)
        {
            this.method_14();
            int num = _Module.GetAsyncKeyState(17);
            num &= 32768;
            if (num != 0)
            {
                this.method_226();
            }
            else
            {
                this.method_222();
            }
            this.method_15();
        }

        // Token: 0x06000302 RID: 770 RVA: 0x0013BC80 File Offset: 0x0013BC80
        private void method_222()
        {
            if (this.radioButton19.Checked)
            {
                this.method_224();
            }
            else if (this.radioButton21.Checked)
            {
                this.method_225();
            }
            else
            {
                this.method_223();
            }
        }

        // Token: 0x06000303 RID: 771 RVA: 0x003CA62C File Offset: 0x0031262C
        private unsafe void method_223()
        {
            if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") == 0)
            {
                this.textBox6.AppendText("Unknown flash type Write aborted !" + "\r\n");
            }
            else
            {
                uint num = (uint)this.method_261();
                Struct20 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), num);
                string text = new string((sbyte*)(&_Module.struct19_0));
                text += new string((sbyte*)(&@struct));
                text = "0x" + text;
                if (*(*(ref _Module.struct123_0 + 4)) == 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("No Firmware is loaded to Target buffer", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {
                    if (!this.bool_10 & !this.bool_11)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        int num2 = (int)MessageBox.Show("Target has not been spoofed," + "\n" + "Are you sure you wish to proceed ?", "F/W Write", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        if (num2 == 7)
                        {
                            return;
                        }
                    }
                    Application.DoEvents();
                    if (num == 112U)
                    {
                        this.textBox6.AppendText("Parallel flash found with Status 0x70" + "\r\n");
                        if (*(*(ref _Module.struct123_0 + 4)) != 1)
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            MessageBox.Show("Firmware in Target buffer is not Samsung, write aborted", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        }
                        else
                        {
                            this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                            this.Cursor = Cursors.WaitCursor;
                            this.method_292();
                            if (this.method_296() == 1)
                            {
                                this.Cursor = Cursors.Arrow;
                            }
                            else
                            {
                                this.Cursor = Cursors.Arrow;

                                _Module.Sleep(500);
                                this.Cursor = Cursors.WaitCursor;
                                this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                                this.method_291();
                                this.Cursor = Cursors.Arrow;
                                for (int i = 0; i < 262144; i++)
                                {
                                    if (*(*(ref _Module.struct121_0 + 7172) + i) != *(*(ref _Module.struct121_0 + 4780) + i))
                                    {
                                        this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                                        return;
                                    }
                                }
                                this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                                this.string_2 = "Write verified !";
                                this.string_3 = "OK";
                            }
                        }
                    }
                    else if (num == 115U)
                    {
                        this.textBox6.AppendText("SPi flash found with Status 0x73" + "\r\n");
                        if (*(*(ref _Module.struct123_0 + 4)) != 3)
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            MessageBox.Show("Firmware in Target buffer is not Benq, write aborted", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        }
                        else
                        {
                            this.Cursor = Cursors.WaitCursor;
                            this.method_299();
                            this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                            if (this.method_302() == 1)
                            {
                                this.Cursor = Cursors.Arrow;
                            }
                            else
                            {
                                this.Cursor = Cursors.Arrow;

                                _Module.Sleep(500);
                                this.Cursor = Cursors.WaitCursor;
                                this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                                this.method_298();
                                this.Cursor = Cursors.Arrow;
                                for (int i = 0; i < 262144; i++)
                                {
                                    if (*(*(ref _Module.struct121_0 + 7172) + i) != *(*(ref _Module.struct121_0 + 4780) + i))
                                    {
                                        this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                                        return;
                                    }
                                }
                                this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                                this.string_2 = "Write verified !";
                                this.string_3 = "OK";
                            }
                        }
                    }
                    else if (num == 114U)
                    {
                        this.textBox6.AppendText("SPi flash found with Status 0x72" + "\r\n");
                        uint num3 = (uint)this.method_317();
                        if (num3 == 140U)
                        {
                            this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
                        }
                        else if (num3 == 142U)
                        {
                            this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
                        }
                        else if (*(*(ref _Module.struct123_0 + 4)) != 7 && *(*(ref _Module.struct123_0 + 4)) != 5 && *(*(ref _Module.struct123_0 + 4)) != 4 && *(*(ref _Module.struct123_0 + 4) + 560) != 70628 && *(*(ref _Module.struct123_0 + 4) + 560) != 73464 && *(*(ref _Module.struct123_0 + 4) + 560) != 82278)
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            MessageBox.Show("Firmware in Target buffer is not Lite-On, write aborted", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        }
                        else
                        {
                            this.Cursor = Cursors.WaitCursor;
                            this.method_311();
                            this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                            if (this.method_326() == 1)
                            {
                                this.Cursor = Cursors.Arrow;
                            }
                            else
                            {
                                this.Cursor = Cursors.Arrow;
                                if (this.radioButton20.Checked)
                                {

                                    _Module.Sleep(500);
                                    this.Cursor = Cursors.WaitCursor;
                                    this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                                    this.method_307();
                                    this.Cursor = Cursors.Arrow;
                                    for (int i = 0; i < 262144; i++)
                                    {
                                        if (*(*(ref _Module.struct121_0 + 7172) + i) != *(*(ref _Module.struct121_0 + 4780) + i))
                                        {
                                            this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                                            return;
                                        }
                                    }
                                    this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                                    this.string_2 = "Write verified !";
                                    this.string_3 = "OK";
                                }
                            }
                        }
                    }
                    else
                    {
                        this.textBox6.AppendText("Invalid Status " + text + "\r\n");

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Drive returned Invalid Status!", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    }
                }
            }
        }

        // Token: 0x06000304 RID: 772 RVA: 0x0013C3CC File Offset: 0x0013C3CC
        private unsafe void method_224()
        {
            string text = null;
            string strA = null;
            int num = 0;
            GStruct93 gstruct;

            _Module.smethod_111(ref gstruct);
            GStruct19 gstruct2;
            try
            {

                _Module.smethod_90(ref gstruct2);
                try
                {
                    if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") != 0)
                    {
                        goto IL_80;
                    }
                    this.textBox6.AppendText("Unknown flash type Write aborted !" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_80:
                    uint num2 = (uint)this.method_261();
                    Struct20 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), num2);
                    text = new string((sbyte*)(&_Module.struct19_0));
                    text += new string((sbyte*)(&@struct));
                    text = "0x" + text;
                    if (*(*(ref _Module.struct123_0 + 4)) != 0)
                    {
                        goto IL_13A;
                    }

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("No Firmware is loaded to Target buffer", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_13A:
                    if (!(!this.bool_10 & !this.bool_11))
                    {
                        goto IL_1E1;
                    }

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num3 = (int)MessageBox.Show("Target has not been spoofed," + "\n" + "Are you sure you wish to proceed ?", "F/W Write", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num3 != 7)
                    {
                        goto IL_1E1;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_1E1:
                    Application.DoEvents();
                    uint num2;
                    if (num2 == 114U)
                    {
                        goto IL_27D;
                    }
                    this.textBox6.AppendText("Invalid Status " + text + "\r\n");

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive returned Invalid Status!", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_27D:
                    this.textBox6.AppendText("SPi flash found with Status 0x72" + "\r\n");
                    uint num4 = (uint)this.method_323();
                    if (num4 != 140U)
                    {
                        goto IL_2F5;
                    }
                    this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_2F5:
                    uint num4;
                    if (num4 != 142U)
                    {
                        goto IL_34B;
                    }
                    this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_34B:
                    if (*(*(ref _Module.struct123_0 + 4)) == 5)
                    {
                        goto IL_3CA;
                    }

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Firmware in Target buffer is not Lite-On, write aborted", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            int i;
            try
            {
                try
                {
                IL_3CA:
                    Struct33 struct2;

                    _Module.memcpy((void*)(&struct2), *(ref _Module.struct121_0 + 4780) + 253952, 4096U);
                    GStruct19 gstruct3;
                    int pGstruct19_ = _Module.smethod_115(ref gstruct, &gstruct3, (byte*)(&struct2), 4096U);
                    try
                    {

                        _Module.smethod_93(ref gstruct2, pGstruct19_);
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct3));
                        throw;
                    }

                    _Module.smethod_92(ref gstruct3);
                    strA = new string(_Module.smethod_94(ref gstruct2));
                    if (*(*(ref _Module.struct123_0 + 4) + 2) != 1)
                    {
                        goto IL_4E7;
                    }
                    if (string.Compare(strA, "72fedc223e7285fa14e97efc5c26f095") == 0)
                    {
                        Struct33 struct3;

                        _Module.memcpy((void*)(&struct3), (void*)(&struct2), 4096U);
                        Struct33 struct4;

                        _Module.memcpy((void*)(&struct4), (void*)(&struct2), 4096U);
                        for (i = 0; i < 1568; i++)
                        {
                            *(ref struct4 + (i + 1536)) = (*(ref struct4 + (i + 1536)) ^ *(ref _Module.struct61_0 + i));
                        }
                        goto IL_4C8;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_4C8:
                    goto IL_6A6;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            try
            {
                try
                {
                IL_4E7:
                    if (*(*(ref _Module.struct123_0 + 4) + 2) != 2 && *(*(ref _Module.struct123_0 + 4) + 2) != 3 && *(*(ref _Module.struct123_0 + 4) + 2) != 5)
                    {
                        goto IL_5A8;
                    }
                    if (string.Compare(strA, "6ae59e64850377ee5470c854761551ea") == 0)
                    {
                        Struct33 struct2;
                        Struct33 struct3;

                        _Module.memcpy((void*)(&struct3), (void*)(&struct2), 4096U);
                        Struct33 struct4;

                        _Module.memcpy((void*)(&struct4), (void*)(&struct2), 4096U);

                        _Module.memcpy(ref struct4 + 2048, (void*)(&_Module.struct59_1), 84U);
                        goto IL_589;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_589:
                    goto IL_6A6;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            try
            {
                try
                {
                IL_5A8:
                    if (*(*(ref _Module.struct123_0 + 4) + 2) != 4)
                    {
                        goto IL_C14;
                    }
                    Struct33 struct2;
                    Struct33 struct3;
                    Struct33 struct4;
                    if (string.Compare(strA, "6ae59e64850377ee5470c854761551ea") == 0)
                    {

                        _Module.memcpy((void*)(&struct3), (void*)(&struct2), 4096U);

                        _Module.memcpy((void*)(&struct4), (void*)(&struct2), 4096U);

                        _Module.memcpy(ref struct4 + 2048, (void*)(&_Module.struct59_0), 84U);
                        goto IL_68A;
                    }
                    if (string.Compare(strA, "29d96e15f409aadec008b539203ff300") == 0)
                    {

                        _Module.memcpy((void*)(&struct3), (void*)(&struct2), 4096U);

                        _Module.memcpy((void*)(&struct4), (void*)(&struct2), 4096U);
                        for (i = 0; i < 80; i++)
                        {
                            *(ref struct4 + (i + 2064)) = (*(ref struct4 + (i + 2064)) ^ *(ref _Module.struct31_0 + i));
                        }
                        goto IL_68A;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_68A:;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            goto Block_14;
            try
            {
            IL_C14:

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
        Block_14:
            try
            {
                try
                {
                IL_6A6:
                    Struct33 struct4;

                    _Module.memcpy(*(ref _Module.struct121_0 + 4780) + 253952, (void*)(&struct4), 4096U);
                    this.Cursor = Cursors.WaitCursor;
                    this.method_312();
                    this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                    if (this.method_327() != 1)
                    {
                        goto IL_757;
                    }
                    this.Cursor = Cursors.Arrow;
                    Struct33 struct3;

                    _Module.memcpy(*(ref _Module.struct121_0 + 4780) + 253952, (void*)(&struct3), 4096U);
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_757:

                    _Module.Sleep(500);
                    this.method_259();
                    for (int j = 0; j < 12; j++)
                    {

                        _Module.Sleep(250);
                        this.textBox6.AppendText(".");
                    }
                    this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                    Struct33 struct4;
                    if (this.method_214((byte*)(&struct4)) != 0)
                    {
                        goto IL_805;
                    }
                    Struct33 struct3;

                    _Module.memcpy(*(ref _Module.struct121_0 + 4780) + 253952, (void*)(&struct3), 4096U);
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_805:
                    i = 0;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }
            for (; ; )
            {
                try
                {
                    try
                    {
                        if (i >= 262144)
                        {
                            goto IL_8FD;
                        }
                        if (*(*(ref _Module.struct121_0 + 7172) + i) == *(*(ref _Module.struct121_0 + 4780) + i))
                        {
                            goto IL_8B0;
                        }
                        this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                        Struct33 struct3;

                        _Module.memcpy(*(ref _Module.struct121_0 + 4780) + 253952, (void*)(&struct3), 4096U);
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                        throw;
                    }

                    _Module.smethod_92(ref gstruct2);
                    break;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }
                try
                {
                    try
                    {
                    IL_8B0:;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                        throw;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }
                try
                {
                    try
                    {
                        i++;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                        throw;
                    }
                    continue;
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }
                break;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_8FD:
                    this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                    this.string_2 = "Write verified !";
                    this.string_3 = "OK";
                    Struct33 struct3;

                    _Module.memcpy(*(ref _Module.struct121_0 + 4780) + 253952, (void*)(&struct3), 4096U);
                    this.method_253();
                    this.textBox6.AppendText("Restoring sector 0x3E000." + "\r\n");
                    if (this.method_324() != 0)
                    {
                        goto IL_9A8;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_9A8:
                    if (this.method_329() != 0)
                    {
                        goto IL_9E3;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_9E3:
                    Struct33 struct3;
                    if (this.method_330((byte*)(&struct3)) != 0)
                    {
                        goto IL_A20;
                    }
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_A20:
                    this.method_259();
                    for (int j = 0; j < 12; j++)
                    {

                        _Module.Sleep(250);
                        this.textBox6.AppendText(".");
                    }
                    if (this.method_107(*(ref _Module.struct123_0 + 4) + 280) == 1)
                    {
                        this.Cursor = Cursors.WaitCursor;
                        this.textBox6.AppendText("\r\n" + "Authorised !" + "\r\n");
                        goto IL_AFB;
                    }
                    this.textBox6.AppendText("\r\n" + "Authorisation Failed!" + "\r\n");
                    this.textBox6.AppendText("Restore Verify Failed !" + "\r\n");
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
            return;
            try
            {
                try
                {
                IL_AFB:
                    Struct28 struct5;
                    this.method_92(0, 0, 0, (byte*)(&struct5));
                    Struct33 struct2;
                    for (int k = 16; k < 32; k++)
                    {
                        i = 0;
                        while (i < 256)
                        {
                            this.method_91(0, (byte)k, (byte)i, (byte*)(&struct5));

                            _Module.memcpy(ref struct2 + num, (void*)(&struct5), 16U);
                            i += 16;
                            num += 16;
                        }
                        this.textBox6.AppendText(".");
                        Application.DoEvents();
                    }
                    this.textBox6.AppendText(string.Concat("\r\n"));
                    for (i = 0; i < 4096; i++)
                    {
                        Struct33 struct3;
                        if (*(ref struct3 + i) != *(ref struct2 + i))
                        {
                            this.textBox6.AppendText("Restore Verify Failed !" + "\r\n");
                            break;
                        }
                    }
                    if (i == 4096)
                    {
                        this.textBox6.AppendText("Restore verified OK !" + "\r\n");
                        this.string_2 = "Restore verified !";
                    }
                    this.method_177();
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct2));
                    throw;
                }

                _Module.smethod_92(ref gstruct2);
            }
            catch
            {

                _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                throw;
            }

            _Module.smethod_112(ref gstruct);
        }

        // Token: 0x06000305 RID: 773 RVA: 0x003CAD40 File Offset: 0x00312D40
        private unsafe void method_225()
        {
            if (string.Compare(Convert.ToString(this.label120.Text), "Unknown type") == 0)
            {
                this.textBox6.AppendText("Unknown flash type Write aborted !" + "\r\n");
            }
            else
            {
                uint num = (uint)this.method_261();
                Struct20 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), num);
                string text = new string((sbyte*)(&_Module.struct19_0));
                text += new string((sbyte*)(&@struct));
                text = "0x" + text;
                if (*(*(ref _Module.struct123_0 + 4)) == 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("No Firmware is loaded to Target buffer", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {
                    if (!this.bool_10 & !this.bool_11)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        int num2 = (int)MessageBox.Show("Target has not been spoofed," + "\n" + "Are you sure you wish to proceed ?", "F/W Write", MessageBoxButtons.YesNo, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button2);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        if (num2 == 7)
                        {
                            return;
                        }
                    }
                    Application.DoEvents();
                    if (num == 114U)
                    {
                        this.textBox6.AppendText("SPi flash found with Status 0x72" + "\r\n");
                        uint num3 = (uint)this.method_325();
                        if (num3 == 140U)
                        {
                            this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
                        }
                        else if (num3 == 142U)
                        {
                            this.textBox6.AppendText("Spi is locked, Aborting!" + "\r\n");
                        }
                        else if (*(*(ref _Module.struct123_0 + 4)) != 6)
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            MessageBox.Show("Firmware in Target buffer is not Lite-On, write aborted", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        }
                        else
                        {
                            this.Cursor = Cursors.WaitCursor;
                            this.method_313();
                            this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                            if (this.method_328() == 1)
                            {
                                this.Cursor = Cursors.Arrow;
                            }
                            else
                            {
                                this.Cursor = Cursors.Arrow;
                                if (this.radioButton20.Checked)
                                {

                                    _Module.Sleep(500);
                                    this.Cursor = Cursors.WaitCursor;
                                    this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                                    this.method_310();
                                    this.Cursor = Cursors.Arrow;
                                    for (int i = 0; i < 262144; i++)
                                    {
                                        if (*(*(ref _Module.struct121_0 + 7172) + i) != *(*(ref _Module.struct121_0 + 4780) + i))
                                        {
                                            this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                                            return;
                                        }
                                    }
                                    this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                                    this.string_2 = "Write verified !";
                                    this.string_3 = "OK";
                                }
                            }
                        }
                    }
                    else
                    {
                        this.textBox6.AppendText("Invalid Status " + text + "\r\n");

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Drive returned Invalid Status!", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    }
                }
            }
        }

        // Token: 0x06000306 RID: 774 RVA: 0x003CB0D8 File Offset: 0x003130D8
        private unsafe void method_226()
        {
            uint num = (uint)this.method_261();
            Struct20 @struct;

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_129), num);
            string text = new string((sbyte*)(&_Module.struct19_0));
            text += new string((sbyte*)(&@struct));
            text = "0x" + text;

            _Module.memset(*(ref _Module.struct123_0 + 4), 0, 2392U);
            this.method_43();
            this.label87.Text = "";
            this.label88.Text = "";
            Application.DoEvents();
            if (this.method_227() != 0)
            {
                if (num == 112U)
                {
                    this.textBox6.AppendText("Parallel flash found with Status 0x70" + "\r\n");
                    this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                    this.Cursor = Cursors.WaitCursor;
                    this.method_292();
                    if (this.method_296() == 1)
                    {
                        this.Cursor = Cursors.Arrow;
                    }
                    else
                    {
                        this.Cursor = Cursors.Arrow;

                        _Module.Sleep(500);
                        this.Cursor = Cursors.WaitCursor;
                        this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                        this.method_291();
                        this.Cursor = Cursors.Arrow;
                        for (int i = 0; i < 262144; i++)
                        {
                            if (*(*(ref _Module.struct121_0 + 7172) + i) != *(*(ref _Module.struct121_0 + 4780) + i))
                            {
                                this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                                return;
                            }
                        }
                        this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                        this.string_2 = "Write verified !";
                        this.string_3 = "OK";
                    }
                }
                else if (num == 115U)
                {
                    this.textBox6.AppendText("SPi flash found with Status 0x73" + "\r\n");
                    this.Cursor = Cursors.WaitCursor;
                    this.method_299();
                    this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                    if (this.method_302() == 1)
                    {
                        this.Cursor = Cursors.Arrow;
                    }
                    else
                    {
                        this.Cursor = Cursors.Arrow;

                        _Module.Sleep(500);
                        this.Cursor = Cursors.WaitCursor;
                        this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                        this.method_298();
                        this.Cursor = Cursors.Arrow;
                        for (int i = 0; i < 262144; i++)
                        {
                            if (*(*(ref _Module.struct121_0 + 7172) + i) != *(*(ref _Module.struct121_0 + 4780) + i))
                            {
                                this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                                return;
                            }
                        }
                        this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                        this.string_2 = "Write verified !";
                        this.string_3 = "OK";
                    }
                }
                else if (num == 114U)
                {
                    this.textBox6.AppendText("SPi flash found with Status 0x72" + "\r\n");
                    this.Cursor = Cursors.WaitCursor;
                    if (this.radioButton20.Checked)
                    {
                        this.method_311();
                        this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                        if (this.method_326() == 1)
                        {
                            this.Cursor = Cursors.Arrow;
                        }
                        else
                        {
                            this.Cursor = Cursors.Arrow;

                            _Module.Sleep(500);
                            this.Cursor = Cursors.WaitCursor;
                            this.textBox6.AppendText("\r\n" + "Flash Verification Test !");
                            this.method_307();
                            this.Cursor = Cursors.Arrow;
                            for (int i = 0; i < 262144; i++)
                            {
                                if (*(*(ref _Module.struct121_0 + 7172) + i) != *(*(ref _Module.struct121_0 + 4780) + i))
                                {
                                    this.textBox6.AppendText("Write Verify Failed !" + "\r\n");
                                    return;
                                }
                            }
                            this.textBox6.AppendText("Write verified OK !" + "\r\n\r\n");
                            this.string_2 = "Write verified !";
                            this.string_3 = "OK";
                        }
                    }
                    else if (this.radioButton19.Checked)
                    {
                        this.method_312();
                        this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                        if (this.method_327() == 1)
                        {
                            this.Cursor = Cursors.Arrow;
                        }
                        else
                        {
                            this.Cursor = Cursors.Arrow;
                        }
                    }
                    else
                    {
                        this.method_313();
                        this.textBox6.AppendText("Writing target buffer to flash" + "\r\n");
                        if (this.method_328() == 1)
                        {
                            this.Cursor = Cursors.Arrow;
                        }
                        else
                        {
                            this.Cursor = Cursors.Arrow;
                        }
                    }
                }
                else
                {
                    this.textBox6.AppendText("Invalid Status " + text + "\r\n");

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive returned Invalid Status!", "F/W Write", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
            }
        }

        // Token: 0x06000307 RID: 775 RVA: 0x0013DDC4 File Offset: 0x0013DDC4
        private unsafe int method_227()
        {
            string[] commandLineArgs = Environment.GetCommandLineArgs();
            string directoryName = Path.GetDirectoryName(commandLineArgs[0]);
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "f/w files |*.bin|All Files (*.*)|*.*";
            openFileDialog.FileName = "firm.bin";
            openFileDialog.DefaultExt = ".bin";
            openFileDialog.CheckFileExists = true;
            openFileDialog.CheckPathExists = true;
            openFileDialog.RestoreDirectory = false;
            openFileDialog.InitialDirectory = directoryName + "\\firmware";
            int result;
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(openFileDialog.FileName);
                Struct68 @struct;

                _Module.memset((void*)(&@struct), 0, 260U);
                string s = new string((sbyte*)(&_Module.struct19_0));
                s = Path.GetFullPath(fullPath);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(s);
                IntPtr value = intPtr;
                sbyte* ptr = (sbyte*)((void*)value);

                _Module.memcpy((void*)(&@struct), (void*)ptr, 260U);
                this.method_44((sbyte*)(&@struct), 1);
                result = 1;
            }
            else
            {
                result = 0;
            }
            return result;
        }

        // Token: 0x06000308 RID: 776 RVA: 0x0013DEA4 File Offset: 0x0013DEA4
        private int method_228(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1, byte byte_2)
        {
            uint num;
            if (ushort_0 == 0)
            {
                num = 512U;
            }
            else
            {
                num = 327680U;
            }

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 4, (byte)(ushort_1 & 255));

            _Module.smethod_2(ushort_0 + 5, (byte)((ushort_1 & 65280) >> 8));

            _Module.smethod_2(ushort_0 + 3, byte_2);

            _Module.smethod_2(ushort_0 + 7, 1);

            _Module.smethod_2(ushort_0 + 6, byte_0);
            uint num2 = 0U;
            while (num2 <= num)
            {
                int result;
                if (_Module.GetAsyncKeyState(27) == null)
                {
                    if (_Module.smethod_0(ushort_0 + 7) != byte_1)
                    {
                        num2 += 1U;
                        continue;
                    }
                    result = 0;
                }
                else
                {
                    result = 1;
                }
                return result;
            }
            return 1;
        }

        // Token: 0x06000309 RID: 777 RVA: 0x0013DF40 File Offset: 0x0013DF40
        private unsafe int method_229(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1, byte* pByte_0)
        {
            uint num;
            if (ushort_0 == 0)
            {
                num = 512U;
            }
            else
            {
                num = 327680U;
            }

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 4, (byte)(ushort_1 & 255));

            _Module.smethod_2(ushort_0 + 5, (byte)((ushort_1 & 65280) >> 8));

            _Module.smethod_2(ushort_0 + 7, 0);

            _Module.smethod_2(ushort_0 + 6, byte_0);
            uint num2;
            for (num2 = 0U; num2 <= num; num2 += 1U)
            {
                if (_Module.GetAsyncKeyState(27) != null)
                {
                    return 1;
                }
                if (_Module.smethod_0(ushort_0 + 7) == byte_1)
                {
                    break;
                }
            }
            if (num2 == num)
            {
                return 1;
            }
            *pByte_0 = _Module.smethod_0(ushort_0 + 3);
            return 0;
        }

        // Token: 0x0600030A RID: 778 RVA: 0x0013DFE0 File Offset: 0x0013DFE0
        private unsafe int method_230(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1, byte* pByte_0)
        {

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 4, (byte)(ushort_1 & 255));

            _Module.smethod_2(ushort_0 + 5, (byte)((ushort_1 & 65280) >> 8));

            _Module.smethod_2(ushort_0 + 7, 2);
            while ((_Module.smethod_0(ushort_0 + 7) & 128) != null)
            {
            }
            ushort num = _Module.smethod_1(ushort_0);
            *pByte_0 = (byte)(num & 255);
            pByte_0[1] = (byte)((num & 65280) >> 8);
            while ((_Module.smethod_0(ushort_0 + 7) & 128) != null)
            {
            }
            num = _Module.smethod_1(ushort_0);
            pByte_0[2] = (byte)(num & 255);
            pByte_0[3] = (byte)((num & 65280) >> 8);
            return 0;
        }

        // Token: 0x0600030B RID: 779 RVA: 0x0013E090 File Offset: 0x0013E090
        private int method_231(ushort ushort_0, byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte byte_4, byte byte_5)
        {
            uint num;
            if (ushort_0 == 0)
            {
                num = 512U;
            }
            else
            {
                num = 327680U;
            }

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 1, byte_2);

            _Module.smethod_2(ushort_0 + 2, byte_3);

            _Module.smethod_2(ushort_0 + 3, 0);

            _Module.smethod_2(ushort_0 + 4, byte_4);

            _Module.smethod_2(ushort_0 + 5, byte_5);

            _Module.smethod_2(ushort_0 + 7, 4);

            _Module.smethod_2(ushort_0 + 6, byte_0);
            uint num2;
            for (num2 = 0U; num2 <= 327680U; num2 += 1U)
            {
                if (_Module.GetAsyncKeyState(27) != null)
                {
                    return 1;
                }
                if (_Module.smethod_0(ushort_0 + 7) == byte_1)
                {
                    break;
                }
            }
            if (num2 == 327680U)
            {
                return 1;
            }

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 7, 5);
            for (num2 = 0U; num2 <= num; num2 += 1U)
            {
                if (_Module.GetAsyncKeyState(27) != null)
                {
                    return 1;
                }
                if (_Module.smethod_0(ushort_0 + 7) == byte_1)
                {
                    return 0;
                }
            }
            return 1;
        }

        // Token: 0x0600030C RID: 780 RVA: 0x0013E17C File Offset: 0x0013E17C
        private unsafe int method_232(ushort ushort_0, byte byte_0, byte byte_1, byte byte_2)
        {
            uint num;
            if (ushort_0 == 0)
            {
                num = 512U;
            }
            else
            {
                num = 327680U;
            }
            int result;
            if (byte_1 == 115)
            {
                for (uint num2 = 0U; num2 <= num; num2 += 1U)
                {
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 1;
                    }
                    this.method_228(ushort_0, byte_0, byte_1, 0, 5);
                    this.method_231(ushort_0, byte_0, byte_1, 0, 1, 0, 1);
                    byte b;
                    this.method_229(ushort_0, byte_0, byte_1, 1, &b);
                    if (b == byte_2)
                    {
                        return 0;
                    }
                }
                result = 1;
            }
            else if (byte_1 == 114)
            {
                for (uint num3 = 0U; num3 <= num; num3 += 1U)
                {
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 1;
                    }
                    this.method_228(ushort_0, byte_0, byte_1, 34816, 5);
                    this.method_231(ushort_0, byte_0, byte_1, 1, 0, 1, 0);
                    byte b;
                    this.method_229(ushort_0, byte_0, byte_1, 1, &b);
                    if (b == byte_2)
                    {
                        return 0;
                    }
                }
                result = 1;
            }
            else
            {
                result = 1;
            }
            return result;
        }

        // Token: 0x0600030D RID: 781 RVA: 0x0013E28C File Offset: 0x0013E28C
        private byte method_233(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1)
        {

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 4, (byte)(ushort_1 & 255));

            _Module.smethod_2(ushort_0 + 5, (byte)((ushort_1 & 65280) >> 8));

            _Module.smethod_2(ushort_0 + 7, 0);

            _Module.smethod_2(ushort_0 + 6, byte_0);
            for (uint num = 0U; num <= 327680U; num += 1U)
            {
                if (_Module.smethod_0(ushort_0 + 7) == byte_1)
                {
                    break;
                }
            }
            return _Module.smethod_0(ushort_0 + 3);
        }

        // Token: 0x0600030E RID: 782 RVA: 0x0013E308 File Offset: 0x0013E308
        private int method_234(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1, byte byte_2)
        {
            uint num;
            if (ushort_0 == 0)
            {
                num = 512U;
            }
            else
            {
                num = 327680U;
            }

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 4, (byte)(ushort_1 & 255));

            _Module.smethod_2(ushort_0 + 5, (byte)((ushort_1 & 65280) >> 8));

            _Module.smethod_2(ushort_0 + 3, byte_2);

            _Module.smethod_2(ushort_0 + 7, 104);

            _Module.smethod_2(ushort_0 + 6, byte_0);
            uint num2 = 0U;
            while (num2 <= num)
            {
                int result;
                if (_Module.GetAsyncKeyState(27) == null)
                {
                    if (_Module.smethod_0(ushort_0 + 7) != byte_1)
                    {
                        num2 += 1U;
                        continue;
                    }
                    result = 0;
                }
                else
                {
                    result = 1;
                }
                return result;
            }
            return 1;
        }

        // Token: 0x0600030F RID: 783 RVA: 0x0013E3A4 File Offset: 0x0013E3A4
        private unsafe int method_235(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1, byte* pByte_0)
        {
            uint num;
            if (ushort_0 == 0)
            {
                num = 512U;
            }
            else
            {
                num = 327680U;
            }

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 4, (byte)(ushort_1 & 255));

            _Module.smethod_2(ushort_0 + 5, (byte)((ushort_1 & 65280) >> 8));

            _Module.smethod_2(ushort_0 + 7, 145);

            _Module.smethod_2(ushort_0 + 6, byte_0);
            uint num2;
            for (num2 = 0U; num2 <= num; num2 += 1U)
            {
                if (_Module.GetAsyncKeyState(27) != null)
                {
                    return 0;
                }
                if (_Module.smethod_0(ushort_0 + 7) == byte_1)
                {
                    break;
                }
            }
            if (num2 == num)
            {
                return 0;
            }
            *pByte_0 = _Module.smethod_0(ushort_0 + 3);
            return 1;
        }

        // Token: 0x06000310 RID: 784 RVA: 0x0013E448 File Offset: 0x0013E448
        private int method_236(ushort ushort_0, byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte byte_4, byte byte_5)
        {
            uint num;
            if (ushort_0 == 0)
            {
                num = 512U;
            }
            else
            {
                num = 327680U;
            }

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 1, byte_2);

            _Module.smethod_2(ushort_0 + 2, byte_3);

            _Module.smethod_2(ushort_0 + 3, 0);

            _Module.smethod_2(ushort_0 + 4, byte_4);

            _Module.smethod_2(ushort_0 + 5, byte_5);

            _Module.smethod_2(ushort_0 + 7, 27);

            _Module.smethod_2(ushort_0 + 6, byte_0);
            uint num2;
            for (num2 = 0U; num2 <= num; num2 += 1U)
            {
                if (_Module.GetAsyncKeyState(27) != null)
                {
                    return 1;
                }
                if (_Module.smethod_0(ushort_0 + 7) == byte_1)
                {
                    break;
                }
            }
            return (num2 != num) ? 0 : 1;
        }

        // Token: 0x06000311 RID: 785 RVA: 0x0013E4F0 File Offset: 0x0013E4F0
        private unsafe int method_237(ushort ushort_0, byte byte_0, byte byte_1, byte byte_2)
        {
            uint num;
            if (ushort_0 == 0)
            {
                num = 512U;
            }
            else
            {
                num = 327680U;
            }
            uint num2 = 0U;
            while (num2 < num)
            {
                int result;
                if (_Module.GetAsyncKeyState(27) == null)
                {
                    this.method_234(ushort_0, byte_0, byte_1, 34816, 5);
                    this.method_236(ushort_0, byte_0, byte_1, 1, 0, 1, 0);
                    byte b;
                    this.method_235(ushort_0, byte_0, byte_1, 1, &b);
                    if (b != byte_2)
                    {

                        _Module.Sleep(1);
                        num2 += 1U;
                        continue;
                    }
                    result = 0;
                }
                else
                {
                    this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                    result = 1;
                }
                return result;
            }
            return 1;
        }

        // Token: 0x06000312 RID: 786 RVA: 0x0013E584 File Offset: 0x0013E584
        private unsafe void method_238()
        {
            int num = 0;
            if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                this.method_234(ushort_, byte_, 114, 34816, 5);
                this.method_236(ushort_, byte_, 114, 1, 0, 1, 0);
                Struct104 @struct;
                this.method_235(ushort_, byte_, 114, 1, (byte*)(&@struct));
                Struct20 struct2;

                _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct35_121), @struct);
                string text = new string((sbyte*)(&_Module.struct19_0));
                text += new string((sbyte*)(&struct2));
                this.textBox6.AppendText("Spi Status: 0x" + text + "\r\n");
                byte b = @struct;
                if ((b & 128) != 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    int num2 = (int)MessageBox.Show("Spi Status Register is S/W protected" + "\n" + "If you wish to resend clear Spi Status Register" + "\n\n" + "Press Escape to cancel.", "SPI Status 0x8C", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num2 == 6)
                    {
                        this.Cursor = Cursors.AppStarting;
                        while (this.method_321() == 0)
                        {

                            _Module.Sleep(5);
                            num++;
                            if (_Module.GetAsyncKeyState(27) != null)
                            {
                                this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                                this.Cursor = Cursors.Arrow;
                                return;
                            }
                            if (num % 16 == 0)
                            {
                                this.textBox6.AppendText(".");
                            }
                            Application.DoEvents();
                        }
                        this.Cursor = Cursors.Arrow;
                    }
                }
            }
        }

        // Token: 0x06000313 RID: 787 RVA: 0x0013E73C File Offset: 0x0013E73C
        private unsafe void method_239()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_234(ushort_, byte_, 114, 34816, 5);
            this.method_236(ushort_, byte_, 114, 1, 0, 1, 0);
            Struct104 @struct;
            this.method_235(ushort_, byte_, 114, 1, (byte*)(&@struct));
            Struct20 struct2;

            _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct35_121), @struct);
            string text = new string((sbyte*)(&_Module.struct19_0));
            text += new string((sbyte*)(&struct2));
            this.textBox6.AppendText("Spi Status: 0x" + text + "\r\n");
            byte b = @struct;
            if (b == 140)
            {
                this.button42.Text = new string((sbyte*)(&_Module.struct35_130));
                this.button42.Enabled = true;
                this.toolTip_0.SetToolTip(this.button42, "Click to clear Spi status register");
            }
            else if (b == 0)
            {
                this.button42.Text = new string((sbyte*)(&_Module.struct35_131));
                this.button42.Enabled = true;
                this.toolTip_0.SetToolTip(this.button42, "Click to lock Spi status register");
            }
        }

        // Token: 0x06000314 RID: 788 RVA: 0x0013E86C File Offset: 0x0013E86C
        private unsafe void method_240()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_242(ushort_, byte_, 114, 34816, 5);
            this.method_244(ushort_, byte_, 114, 1, 0, 1, 0);
            Struct104 @struct;
            this.method_243(ushort_, byte_, 114, 1, (byte*)(&@struct));
            Struct20 struct2;

            _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct35_121), @struct);
            string text = new string((sbyte*)(&_Module.struct19_0));
            text += new string((sbyte*)(&struct2));
            this.textBox6.AppendText("Spi Status: 0x" + text + "\r\n");
            byte b = @struct;
            if (b == 140)
            {
                this.button42.Text = new string((sbyte*)(&_Module.struct35_130));
                this.button42.Enabled = true;
                this.toolTip_0.SetToolTip(this.button42, "Click to clear Spi status register");
            }
            else if (b == 0)
            {
                this.button42.Text = new string((sbyte*)(&_Module.struct35_131));
                this.button42.Enabled = true;
                this.toolTip_0.SetToolTip(this.button42, "Click to lock Spi status register");
            }
        }

        // Token: 0x06000315 RID: 789 RVA: 0x0013E99C File Offset: 0x0013E99C
        private unsafe void method_241()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_228(ushort_, byte_, 114, 34816, 5);
            this.method_231(ushort_, byte_, 114, 1, 0, 1, 0);
            Struct104 @struct;
            this.method_229(ushort_, byte_, 114, 1, (byte*)(&@struct));
            Struct20 struct2;

            _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct35_121), @struct);
            string text = new string((sbyte*)(&_Module.struct19_0));
            text += new string((sbyte*)(&struct2));
            this.textBox6.AppendText("Spi Status: 0x" + text + "\r\n");
            byte b = @struct;
            if (b == 140)
            {
                this.button42.Text = new string((sbyte*)(&_Module.struct35_130));
                this.button42.Enabled = true;
                this.toolTip_0.SetToolTip(this.button42, "Click to clear Spi status register");
            }
            else if (b == 0)
            {
                this.button42.Text = new string((sbyte*)(&_Module.struct35_131));
                this.button42.Enabled = true;
                this.toolTip_0.SetToolTip(this.button42, "Click to lock Spi status register");
            }
        }

        // Token: 0x06000316 RID: 790 RVA: 0x0013EACC File Offset: 0x0013EACC
        private int method_242(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1, byte byte_2)
        {
            uint num;
            if (ushort_0 == 0)
            {
                num = 512U;
            }
            else
            {
                num = 327680U;
            }

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 4, (byte)(ushort_1 & 255));

            _Module.smethod_2(ushort_0 + 5, (byte)((ushort_1 & 65280) >> 8));

            _Module.smethod_2(ushort_0 + 3, byte_2);

            _Module.smethod_2(ushort_0 + 7, 82);

            _Module.smethod_2(ushort_0 + 6, byte_0);
            uint num2 = 0U;
            while (num2 <= num)
            {
                int result;
                if (_Module.GetAsyncKeyState(27) == null)
                {
                    if (_Module.smethod_0(ushort_0 + 7) != byte_1)
                    {
                        num2 += 1U;
                        continue;
                    }
                    result = 0;
                }
                else
                {
                    result = 1;
                }
                return result;
            }
            return 1;
        }

        // Token: 0x06000317 RID: 791 RVA: 0x0013EB68 File Offset: 0x0013EB68
        private unsafe int method_243(ushort ushort_0, byte byte_0, byte byte_1, ushort ushort_1, byte* pByte_0)
        {
            uint num;
            if (ushort_0 == 0)
            {
                num = 512U;
            }
            else
            {
                num = 327680U;
            }

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 4, (byte)(ushort_1 & 255));

            _Module.smethod_2(ushort_0 + 5, (byte)((ushort_1 & 65280) >> 8));

            _Module.smethod_2(ushort_0 + 7, 31);

            _Module.smethod_2(ushort_0 + 6, byte_0);
            uint num2;
            for (num2 = 0U; num2 <= num; num2 += 1U)
            {
                if (_Module.GetAsyncKeyState(27) != null)
                {
                    return 0;
                }
                if (_Module.smethod_0(ushort_0 + 7) == byte_1)
                {
                    break;
                }
            }
            if (num2 == num)
            {
                return 0;
            }
            *pByte_0 = _Module.smethod_0(ushort_0 + 3);
            return 1;
        }

        // Token: 0x06000318 RID: 792 RVA: 0x0013EC0C File Offset: 0x0013EC0C
        private int method_244(ushort ushort_0, byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte byte_4, byte byte_5)
        {
            uint num;
            if (ushort_0 == 0)
            {
                num = 512U;
            }
            else
            {
                num = 327680U;
            }

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 1, byte_2);

            _Module.smethod_2(ushort_0 + 2, byte_3);

            _Module.smethod_2(ushort_0 + 3, 0);

            _Module.smethod_2(ushort_0 + 4, byte_4);

            _Module.smethod_2(ushort_0 + 5, byte_5);

            _Module.smethod_2(ushort_0 + 7, 194);

            _Module.smethod_2(ushort_0 + 6, byte_0);
            uint num2;
            for (num2 = 0U; num2 <= num; num2 += 1U)
            {
                if (_Module.GetAsyncKeyState(27) != null)
                {
                    return 1;
                }
                if (_Module.smethod_0(ushort_0 + 7) == byte_1)
                {
                    break;
                }
            }
            return (num2 != num) ? 0 : 1;
        }

        // Token: 0x06000319 RID: 793 RVA: 0x0013ECB4 File Offset: 0x0013ECB4
        private unsafe int method_245(ushort ushort_0, byte byte_0, byte byte_1, byte byte_2)
        {
            uint num;
            if (ushort_0 == 0)
            {
                num = 512U;
            }
            else
            {
                num = 327680U;
            }
            uint num2 = 0U;
            while (num2 < num)
            {
                int result;
                if (_Module.GetAsyncKeyState(27) == null)
                {
                    this.method_242(ushort_0, byte_0, byte_1, 34816, 5);
                    this.method_244(ushort_0, byte_0, byte_1, 1, 0, 1, 0);
                    byte b;
                    this.method_243(ushort_0, byte_0, byte_1, 1, &b);
                    if (b != byte_2)
                    {

                        _Module.Sleep(1);
                        num2 += 1U;
                        continue;
                    }
                    result = 0;
                }
                else
                {
                    this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                    result = 1;
                }
                return result;
            }
            return 1;
        }

        // Token: 0x0600031A RID: 794 RVA: 0x0013ED48 File Offset: 0x0013ED48
        private int method_246(ushort ushort_0, byte byte_0, byte byte_1, uint uint_0, byte byte_2)
        {

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 4, (byte)(uint_0 & 255U));

            _Module.smethod_2(ushort_0 + 5, (byte)((uint_0 & 65280U) >> 8));

            _Module.smethod_2(ushort_0 + 6, (byte)((uint_0 & 16711680U) >> 16 | (uint)byte_0));

            _Module.smethod_2(ushort_0 + 3, byte_2);

            _Module.smethod_2(ushort_0 + 7, 1);

            _Module.smethod_2(ushort_0 + 6, byte_0);
            for (uint num = 0U; num <= 327680U; num += 1U)
            {
                if (_Module.smethod_0(ushort_0 + 7) == byte_1)
                {
                    return 0;
                }
            }
            return 1;
        }

        // Token: 0x0600031B RID: 795 RVA: 0x0013EDE0 File Offset: 0x0013EDE0
        private unsafe int method_247(ushort ushort_0, byte byte_0, byte byte_1, uint uint_0, byte* pByte_0)
        {

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 4, (byte)(uint_0 & 255U));

            _Module.smethod_2(ushort_0 + 5, (byte)((uint_0 & 65280U) >> 8));

            _Module.smethod_2(ushort_0 + 6, (byte)((uint_0 & 16711680U) >> 16 | (uint)byte_0));

            _Module.smethod_2(ushort_0 + 7, 0);

            _Module.smethod_2(ushort_0 + 6, byte_0);
            uint num;
            for (num = 0U; num <= 327680U; num += 1U)
            {
                if (_Module.smethod_0(ushort_0 + 7) == byte_1)
                {
                    break;
                }
            }
            int result;
            if (num == 327680U)
            {
                result = 0;
            }
            else
            {
                *pByte_0 = _Module.smethod_0(ushort_0 + 3);
                result = 1;
            }
            return result;
        }

        // Token: 0x0600031C RID: 796 RVA: 0x0013EE84 File Offset: 0x0013EE84
        private int method_248(ushort ushort_0, byte byte_0, byte byte_1)
        {

            _Module.smethod_2(ushort_0 + 6, byte_0);
            for (uint num = 0U; num <= 327680U; num += 1U)
            {
                if (_Module.smethod_0(ushort_0 + 7) == byte_1)
                {
                    return 0;
                }
            }
            return 1;
        }

        // Token: 0x0600031D RID: 797 RVA: 0x0013EEC0 File Offset: 0x0013EEC0
        private byte method_249(ushort ushort_0, byte byte_0, byte byte_1, uint uint_0)
        {

            _Module.smethod_2(ushort_0 + 6, byte_0);

            _Module.smethod_2(ushort_0 + 4, (byte)(uint_0 & 255U));

            _Module.smethod_2(ushort_0 + 5, (byte)((uint_0 & 65280U) >> 8));

            _Module.smethod_2(ushort_0 + 6, (byte)((uint_0 & 16711680U) >> 16 | (uint)byte_0));

            _Module.smethod_2(ushort_0 + 7, 0);

            _Module.smethod_2(ushort_0 + 6, byte_0);
            for (uint num = 0U; num <= 327680U; num += 1U)
            {
                if (_Module.smethod_0(ushort_0 + 7) == byte_1)
                {
                    break;
                }
            }
            return _Module.smethod_0(ushort_0 + 3);
        }

        // Token: 0x0600031E RID: 798 RVA: 0x0013EF54 File Offset: 0x0013EF54
        private uint method_250()
        {
            uint result;
            if (this.radioButton20.Checked)
            {
                result = this.method_252();
            }
            else if (this.radioButton19.Checked)
            {
                result = this.method_253();
            }
            else
            {
                result = this.method_254();
            }
            return result;
        }

        // Token: 0x0600031F RID: 799 RVA: 0x0013EF9C File Offset: 0x0013EF9C
        private uint method_251()
        {
            uint result;
            if (this.radioButton19.Checked)
            {
                result = this.method_259();
            }
            if (this.radioButton21.Checked)
            {
                result = this.method_260();
            }
            else
            {
                result = this.method_258();
            }
            return result;
        }

        // Token: 0x06000320 RID: 800 RVA: 0x0013EFE0 File Offset: 0x0013EFE0
        private unsafe uint method_252()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            if (num != 0)
            {

                _Module.smethod_2(num + 6, byte_);

                _Module.Sleep(250);

                _Module.smethod_2(num + 6, byte_);
            }

            _Module.smethod_2(num + 3, 42);

            _Module.smethod_2(num + 7, 128);

            _Module.Sleep(2);
            if (num != 0)
            {

                _Module.smethod_2(num + 6, byte_);
            }
            uint result = (uint)_Module.smethod_1(num + 7);

            _Module.Sleep(1);
            return result;
        }

        // Token: 0x06000321 RID: 801 RVA: 0x0013F074 File Offset: 0x0013F074
        private unsafe uint method_253()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            if (num != 0)
            {

                _Module.Sleep(250);
            }

            _Module.smethod_2(num + 6, byte_);

            _Module.smethod_2(num + 3, 217);

            _Module.smethod_2(num + 7, 137);

            _Module.Sleep(2);

            _Module.smethod_2(num + 6, byte_);
            uint result = (uint)_Module.smethod_1(num + 7);

            _Module.Sleep(1);
            return result;
        }

        // Token: 0x06000322 RID: 802 RVA: 0x0013F100 File Offset: 0x0013F100
        private unsafe uint method_254()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            if (num != 0)
            {

                _Module.Sleep(250);
            }

            _Module.smethod_2(num + 6, byte_);

            _Module.smethod_2(num + 3, 121);

            _Module.smethod_2(num + 7, 141);

            _Module.Sleep(2);

            _Module.smethod_2(num + 6, byte_);
            uint result = (uint)_Module.smethod_1(num + 7);

            _Module.Sleep(1);
            return result;
        }

        // Token: 0x06000323 RID: 803 RVA: 0x0013F188 File Offset: 0x0013F188
        private unsafe uint method_255(byte byte_0, byte byte_1)
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_2 = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            if (num != 0)
            {

                _Module.Sleep(250);
            }

            _Module.smethod_2(num + 6, byte_2);

            _Module.smethod_2(num + 3, byte_0);

            _Module.smethod_2(num + 7, byte_1);

            _Module.Sleep(2);

            _Module.smethod_2(num + 6, byte_2);
            uint result = (uint)_Module.smethod_1(num + 7);

            _Module.Sleep(1);
            return result;
        }

        // Token: 0x06000324 RID: 804 RVA: 0x0013F20C File Offset: 0x0013F20C
        private unsafe uint method_256()
        {
            Struct28 @struct = 0;
            initblk(ref @struct + 1, 0, 15);
            Struct43 struct2 = 0;
            initblk(ref struct2 + 1, 0, 255);
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);

            _Module.smethod_2(num + 6, byte_);

            _Module.Sleep(250);
            if (num == 0)
            {
                this.method_276(114, (byte*)(&struct2));
            }
            else
            {
                for (int i = 0; i < 256; i++)
                {

                    _Module.smethod_2(num + 6, byte_);

                    _Module.smethod_2(num + 2, 3);

                    _Module.smethod_2(num + 3, 217);

                    _Module.smethod_2(num + 4, (byte)i);

                    _Module.smethod_0(num + 7);

                    _Module.smethod_2(num + 7, 145);

                    _Module.smethod_0(num + 7);

                    _Module.smethod_2(num + 6, byte_);
                    *(ref struct2 + i) = _Module.smethod_1(num + 3);

                    _Module.smethod_0(num + 7);
                }
            }
            int num2;
            if (*(ref struct2 + 117) == 0 && *(ref struct2 + 118) == 0 && *(ref struct2 + 119) == 0)
            {
                num2 = 127;
            }
            else
            {
                num2 = 117;
            }
            uint result;
            if (*(ref struct2 + 127) == *(ref struct2 + 128) && *(ref struct2 + 127) == *(ref struct2 + 129) && *(ref struct2 + 127) == *(ref struct2 + 130) && *(ref struct2 + 127) == *(ref struct2 + 131))
            {
                result = 0U;
            }
            else
            {
                for (int i = 0; i < 16; i++)
                {
                    *(ref @struct + i) = (*(ref struct2 + (i + num2)) ^ (byte)((sbyte)i));
                }

                _Module.memcpy(*(ref _Module.struct123_0 + 8) + 280, (void*)(&@struct), 16U);
                result = 1U;
            }
            return result;
        }

        // Token: 0x06000325 RID: 805 RVA: 0x0013F3AC File Offset: 0x0013F3AC
        private unsafe uint method_257()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);

            _Module.smethod_2(num + 6, byte_);

            _Module.Sleep(250);

            _Module.smethod_2(num + 6, byte_);

            _Module.smethod_2(num + 3, 46);

            _Module.smethod_2(num + 7, 128);

            _Module.Sleep(2);

            _Module.smethod_2(num + 6, byte_);
            uint result = (uint)_Module.smethod_1(num + 7);

            _Module.Sleep(1);
            return result;
        }

        // Token: 0x06000326 RID: 806 RVA: 0x0013F43C File Offset: 0x0013F43C
        private unsafe uint method_258()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            uint result;
            if (num == 0)
            {

                _Module.smethod_2(num + 7, 129);

                _Module.smethod_2(num + 8, 4);

                _Module.Sleep(1);

                _Module.smethod_2(num + 8, 0);

                _Module.Sleep(100);
                result = _Module.smethod_0(7);
            }
            else
            {

                _Module.smethod_2(num + 6, byte_);

                _Module.smethod_2(num + 7, 129);

                _Module.smethod_2(num + 6, byte_);

                _Module.smethod_2(num + 7, 8);
                result = (uint)_Module.smethod_1(num + 7);
            }

            _Module.Sleep(350);
            return result;
        }

        // Token: 0x06000327 RID: 807 RVA: 0x0013F4F0 File Offset: 0x0013F4F0
        private unsafe uint method_259()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);

            _Module.smethod_2(num + 6, byte_);

            _Module.smethod_2(num + 7, 240);

            _Module.Sleep(250);

            _Module.smethod_2(num + 6, byte_);

            _Module.smethod_2(num + 7, 8);

            _Module.Sleep(500);
            return (uint)_Module.smethod_1(num + 7);
        }

        // Token: 0x06000328 RID: 808 RVA: 0x0013F574 File Offset: 0x0013F574
        private unsafe uint method_260()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);

            _Module.smethod_2(num + 6, byte_);

            _Module.smethod_2(num + 7, 190);

            _Module.Sleep(250);

            _Module.smethod_2(num + 6, byte_);

            _Module.smethod_2(num + 7, 8);

            _Module.Sleep(500);
            return (uint)_Module.smethod_1(num + 7);
        }

        // Token: 0x06000329 RID: 809 RVA: 0x0013F5F8 File Offset: 0x0013F5F8
        private unsafe int method_261()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.textBox6.AppendText("\r\n" + "Getting Status from port " + this.label123.Text + "\r\n");

            _Module.smethod_2(num + 6, byte_);

            _Module.Sleep(20);
            uint result = (uint)_Module.smethod_1(num + 7);

            _Module.Sleep(1);
            return (int)result;
        }

        // Token: 0x0600032A RID: 810 RVA: 0x0013F67C File Offset: 0x0013F67C
        private unsafe void method_262()
        {
            if (this.bool_2)
            {
                string text = this.string_10 + "\\SAM-OFW.bin";
                for (int i = 1; i < 10; i++)
                {
                    if (!File.Exists(text))
                    {
                        IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                        IntPtr value = intPtr;
                        sbyte* pSbyte_ = (sbyte*)((void*)value);
                        GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                        if (ptr != null)
                        {

                            _Module.fwrite(*(ref _Module.struct121_0 + 7172), 262144U, 1U, ptr);

                            _Module.fclose(ptr);
                            this.textBox6.AppendText("\r\n" + "Samsung Dump file saved to " + text + "\r\n");
                            this.method_37(text, 0, *(ref _Module.struct121_0 + 7172));
                            return;
                        }
                    }
                    else
                    {
                        text = this.string_10 + "\\SAM-OFW_" + Convert.ToString(i) + ".bin";
                    }
                }
            }
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
            saveFileDialog.DefaultExt = ".bin";
            saveFileDialog.FileName = "SAM-OFW.bin";
            saveFileDialog.RestoreDirectory = false;
            if (this.bool_2)
            {
                saveFileDialog.InitialDirectory = this.string_10;
            }
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                string fileName = Path.GetFileName(saveFileDialog.FileName);
                IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(fullPath);
                IntPtr value2 = intPtr2;
                sbyte* pSbyte_2 = (sbyte*)((void*)value2);
                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_2, (sbyte*)(&_Module.struct18_5));
                if (ptr == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {

                    _Module.fwrite(*(ref _Module.struct121_0 + 7172), 262144U, 1U, ptr);

                    _Module.fclose(ptr);
                    this.textBox6.AppendText("\r\n" + "Samsung Dump file saved to " + fileName + "\r\n");
                    this.method_37(fullPath, 0, *(ref _Module.struct121_0 + 7172));
                }
            }
            else
            {
                this.method_37("", 0, *(ref _Module.struct121_0 + 7172));
            }
        }

        // Token: 0x0600032B RID: 811 RVA: 0x0013F8AC File Offset: 0x0013F8AC
        private unsafe void method_263()
        {
            if (this.bool_2)
            {
                string text = this.string_10 + "\\BENQ-OFW.bin";
                for (int i = 1; i < 10; i++)
                {
                    if (!File.Exists(text))
                    {
                        IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                        IntPtr value = intPtr;
                        sbyte* pSbyte_ = (sbyte*)((void*)value);
                        GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                        if (ptr != null)
                        {

                            _Module.fwrite(*(ref _Module.struct121_0 + 7172), 262144U, 1U, ptr);

                            _Module.fclose(ptr);
                            this.textBox6.AppendText("\r\n" + "Benq Dump file saved to " + text + "\r\n");
                            this.method_37(text, 0, *(ref _Module.struct121_0 + 7172));
                            return;
                        }
                    }
                    else
                    {
                        text = this.string_10 + "\\BENQ-OFW_" + Convert.ToString(i) + ".bin";
                    }
                }
            }
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
            saveFileDialog.DefaultExt = ".bin";
            saveFileDialog.FileName = "BENQ-OFW.bin";
            saveFileDialog.RestoreDirectory = false;
            if (this.bool_2)
            {
                saveFileDialog.InitialDirectory = this.string_10;
            }
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                string fileName = Path.GetFileName(saveFileDialog.FileName);
                IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(fullPath);
                IntPtr value2 = intPtr2;
                sbyte* pSbyte_ = (sbyte*)((void*)value2);
                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                if (ptr == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {

                    _Module.fwrite(*(ref _Module.struct121_0 + 7172), 262144U, 1U, ptr);

                    _Module.fclose(ptr);
                    this.textBox6.AppendText("\r\n" + "Benq Dump file saved to " + fileName + "\r\n");
                    this.method_37(fullPath, 0, *(ref _Module.struct121_0 + 7172));
                }
            }
            else
            {
                this.method_37("", 0, *(ref _Module.struct121_0 + 7172));
            }
        }

        // Token: 0x0600032C RID: 812 RVA: 0x0013FADC File Offset: 0x0013FADC
        private unsafe void method_264()
        {
            if (this.bool_2)
            {
                string text = this.string_10 + "\\Lite-OFW.bin";
                for (int i = 1; i < 10; i++)
                {
                    if (!File.Exists(text))
                    {
                        IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                        IntPtr value = intPtr;
                        sbyte* pSbyte_ = (sbyte*)((void*)value);
                        GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                        if (ptr != null)
                        {

                            _Module.fwrite(*(ref _Module.struct121_0 + 7172), 262144U, 1U, ptr);

                            _Module.fclose(ptr);
                            this.textBox6.AppendText("\r\n" + "Lite-On Dump file saved to " + text + "\r\n");
                            this.method_37(text, 0, *(ref _Module.struct121_0 + 7172));
                            return;
                        }
                    }
                    else
                    {
                        text = this.string_10 + "\\Lite-OFW_" + Convert.ToString(i) + ".bin";
                    }
                }
            }
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
            saveFileDialog.DefaultExt = ".bin";
            saveFileDialog.FileName = "Lite-OFW.bin";
            saveFileDialog.RestoreDirectory = false;
            if (this.bool_2)
            {
                saveFileDialog.InitialDirectory = this.string_10;
            }
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                string fileName = Path.GetFileName(saveFileDialog.FileName);
                IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(fullPath);
                IntPtr value2 = intPtr2;
                sbyte* pSbyte_2 = (sbyte*)((void*)value2);
                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_2, (sbyte*)(&_Module.struct18_5));
                if (ptr == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {

                    _Module.fwrite(*(ref _Module.struct121_0 + 7172), 262144U, 1U, ptr);

                    _Module.fclose(ptr);
                    this.textBox6.AppendText("\r\n" + "Lite-On Dump file saved to " + fileName + "\r\n");
                    this.method_37(fullPath, 0, *(ref _Module.struct121_0 + 7172));
                }
            }
            else
            {
                this.method_37("", 0, *(ref _Module.struct121_0 + 7172));
            }
        }

        // Token: 0x0600032D RID: 813 RVA: 0x0013FD0C File Offset: 0x0013FD0C
        private unsafe int method_265(byte byte_0, ushort ushort_0, byte byte_1, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int num = 0;
            uint int_ = 6U;
            uint int_2 = (uint)(byte_1 + 6);
            @struct = 80;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            *(ref @struct + 3) = (byte)((sbyte)byte_1);
            *(ref @struct + 4) = (byte)(ushort_0 & 255);
            *(ref @struct + 5) = (byte)((ushort_0 & 65280) >> 8);
            while (num != 8)
            {
                if (this.method_416((sbyte*)(&@struct), (int)int_, (sbyte*)(&struct2), (int)int_2) == 1)
                {
                    int result;
                    if (struct2 == 80 && *(ref struct2 + 2) == (sbyte)byte_0)
                    {

                        _Module.memcpy((void*)pByte_0, ref struct2 + 6, (uint)byte_1);
                        result = 1;
                    }
                    else
                    {
                        if (struct2 != 81)
                        {
                            num++;
                            continue;
                        }
                        if (*(ref struct2 + 2) != (sbyte)byte_0)
                        {
                            num++;
                            continue;
                        }
                        result = 0;
                    }
                    return result;
                }
                num++;
            }
            return 0;
        }

        // Token: 0x0600032E RID: 814 RVA: 0x0013FDC4 File Offset: 0x0013FDC4
        private unsafe int method_266(byte byte_0, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct105 struct2 = 0;
            initblk(ref struct2 + 1, 0, 285);
            int num = 0;
            @struct = 83;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            while (num != 8)
            {
                if (_Module.usb_bulk_write(_Module.gstruct10_0, 1, (sbyte*)(&@struct), 6, 2000) == 6)
                {
                    int num2 = _Module.usb_bulk_read(_Module.gstruct10_0, 129, (sbyte*)(&struct2), 286, 2000);
                    if (num2 == 286)
                    {
                        if (*(ref struct2 + 2) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 66) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 130) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 194) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else
                        {
                            if (*(ref struct2 + 258) == (sbyte)byte_0)
                            {

                                _Module.memcpy((void*)pByte_0, ref struct2 + 6, 58U);

                                _Module.memcpy((void*)(pByte_0 + 58), ref struct2 + 70, 58U);

                                _Module.memcpy((void*)(pByte_0 + 116), ref struct2 + 134, 58U);

                                _Module.memcpy((void*)(pByte_0 + 174), ref struct2 + 198, 58U);

                                _Module.memcpy((void*)(pByte_0 + 232), ref struct2 + 262, 24U);
                                return 1;
                            }
                            num++;
                        }
                    }
                    else
                    {
                        num++;
                    }
                }
                else
                {
                    num++;
                }
            }
            return 0;
        }

        // Token: 0x0600032F RID: 815 RVA: 0x0013FF18 File Offset: 0x0013FF18
        private unsafe int method_267(byte byte_0, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct106 struct2 = 0;
            initblk(ref struct2 + 1, 0, 293);
            int num = 0;
            @struct = 99;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            while (num != 8)
            {
                if (_Module.usb_bulk_write(_Module.gstruct10_0, 1, (sbyte*)(&@struct), 6, 2000) == 6)
                {
                    int num2 = _Module.usb_bulk_read(_Module.gstruct10_0, 129, (sbyte*)(&struct2), 294, 2000);
                    if (num2 == 294)
                    {
                        if (*(ref struct2 + 2) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 66) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 130) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 194) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else
                        {
                            if (*(ref struct2 + 258) == (sbyte)byte_0)
                            {

                                _Module.memcpy((void*)pByte_0, ref struct2 + 6, 56U);

                                _Module.memcpy((void*)(pByte_0 + 56), ref struct2 + 70, 56U);

                                _Module.memcpy((void*)(pByte_0 + 112), ref struct2 + 134, 56U);

                                _Module.memcpy((void*)(pByte_0 + 168), ref struct2 + 198, 56U);

                                _Module.memcpy((void*)(pByte_0 + 224), ref struct2 + 262, 32U);
                                return 1;
                            }
                            num++;
                        }
                    }
                    else
                    {
                        num++;
                    }
                }
                else
                {
                    num++;
                }
            }
            return 0;
        }

        // Token: 0x06000330 RID: 816 RVA: 0x0014006C File Offset: 0x0014006C
        private unsafe int method_268(byte byte_0, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct105 struct2 = 0;
            initblk(ref struct2 + 1, 0, 285);
            int num = 0;
            @struct = -109;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            while (num != 8)
            {
                if (_Module.usb_bulk_write(_Module.gstruct10_0, 1, (sbyte*)(&@struct), 6, 2000) == 6)
                {
                    int num2 = _Module.usb_bulk_read(_Module.gstruct10_0, 129, (sbyte*)(&struct2), 286, 2000);
                    if (num2 == 286)
                    {
                        if (*(ref struct2 + 2) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 66) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 130) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 194) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else
                        {
                            if (*(ref struct2 + 258) == (sbyte)byte_0)
                            {

                                _Module.memcpy((void*)pByte_0, ref struct2 + 6, 58U);

                                _Module.memcpy((void*)(pByte_0 + 58), ref struct2 + 70, 58U);

                                _Module.memcpy((void*)(pByte_0 + 116), ref struct2 + 134, 58U);

                                _Module.memcpy((void*)(pByte_0 + 174), ref struct2 + 198, 58U);

                                _Module.memcpy((void*)(pByte_0 + 232), ref struct2 + 262, 24U);
                                return 1;
                            }
                            num++;
                        }
                    }
                    else
                    {
                        num++;
                    }
                }
                else
                {
                    num++;
                }
            }
            return 0;
        }

        // Token: 0x06000331 RID: 817 RVA: 0x001401C0 File Offset: 0x001401C0
        private unsafe int method_269(byte byte_0, ushort ushort_0, byte byte_1, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int int_ = (int)(byte_1 + 6);
            int int_2 = 6;
            int num = 0;
            @struct = 81;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            *(ref @struct + 3) = (byte)((sbyte)byte_1);
            *(ref @struct + 4) = (byte)(ushort_0 & 255);
            *(ref @struct + 5) = (byte)((ushort_0 & 65280) >> 8);

            _Module.memcpy(ref @struct + 6, (void*)pByte_0, (uint)byte_1);
            while (num != 8)
            {
                if (this.method_416((sbyte*)(&@struct), int_, (sbyte*)(&struct2), int_2) == 1)
                {
                    int result;
                    if (struct2 == 81 && *(ref struct2 + 2) == (sbyte)byte_0)
                    {
                        result = 1;
                    }
                    else
                    {
                        if (struct2 != 81)
                        {
                            num++;
                            continue;
                        }
                        if (*(ref struct2 + 2) != (sbyte)byte_0)
                        {
                            num++;
                            continue;
                        }
                        result = 0;
                    }
                    return result;
                }
                num++;
            }
            return 0;
        }

        // Token: 0x06000332 RID: 818 RVA: 0x00140278 File Offset: 0x00140278
        private unsafe int method_270(byte byte_0, byte* pByte_0)
        {
            Struct107 @struct = 0;
            initblk(ref @struct + 1, 0, 511);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int num = 0;
            @struct = 84;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);

            _Module.memcpy(ref @struct + 2, (void*)pByte_0, 260U);
            while (num != 8)
            {
                if (_Module.usb_bulk_write(_Module.gstruct10_0, 1, (sbyte*)(&@struct), 262, 1000) == 262)
                {
                    if (_Module.usb_bulk_read(_Module.gstruct10_0, 129, (sbyte*)(&struct2), 2, 1000) == 2)
                    {
                        int result;
                        if (struct2 == 84 && *(ref struct2 + 1) == (sbyte)byte_0)
                        {
                            result = 1;
                        }
                        else
                        {
                            if (struct2 != 84)
                            {
                                num++;
                                continue;
                            }
                            if (*(ref struct2 + 2) != (sbyte)byte_0)
                            {
                                num++;
                                continue;
                            }
                            result = 0;
                        }
                        return result;
                    }
                    num++;
                }
                else
                {
                    num++;
                }
            }
            return 0;
        }

        // Token: 0x06000333 RID: 819 RVA: 0x00140350 File Offset: 0x00140350
        private unsafe int method_271(byte byte_0, byte* pByte_0)
        {
            Struct107 @struct = 0;
            initblk(ref @struct + 1, 0, 511);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int num = 0;
            @struct = 100;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;

            _Module.memcpy(ref @struct + 4, (void*)pByte_0, 260U);
            while (num != 8)
            {
                int num2 = _Module.usb_bulk_write(_Module.gstruct10_0, 1, (sbyte*)(&@struct), 264, 5000);
                if (num2 == 264)
                {
                    num2 = _Module.usb_bulk_read(_Module.gstruct10_0, 129, (sbyte*)(&struct2), 6, 5000);
                    if (num2 == 6)
                    {
                        int result;
                        if (struct2 == 100 && *(ref struct2 + 1) == 88)
                        {
                            result = 1;
                        }
                        else
                        {
                            if (struct2 != 100)
                            {
                                num++;
                                continue;
                            }
                            if (*(ref struct2 + 2) != (sbyte)byte_0)
                            {
                                num++;
                                continue;
                            }
                            result = 0;
                        }
                        return result;
                    }
                    num++;
                }
                else
                {
                    num++;
                }
            }
            return 0;
        }

        // Token: 0x06000334 RID: 820 RVA: 0x0014043C File Offset: 0x0014043C
        private unsafe int method_272(byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte byte_4)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int int_ = 7;
            int int_2 = 7;
            int num = 0;
            @struct = 82;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            *(ref @struct + 3) = (byte)((sbyte)byte_1);
            *(ref @struct + 4) = (byte)((sbyte)byte_2);
            *(ref @struct + 5) = (byte)((sbyte)byte_3);
            *(ref @struct + 6) = (byte)((sbyte)byte_4);
            while (num != 8)
            {
                if (this.method_416((sbyte*)(&@struct), int_, (sbyte*)(&struct2), int_2) == 1)
                {
                    int result;
                    if (struct2 == 82 && *(ref struct2 + 2) == (sbyte)byte_0)
                    {
                        result = 1;
                    }
                    else
                    {
                        if (struct2 != 81)
                        {
                            num++;
                            continue;
                        }
                        if (*(ref struct2 + 2) != (sbyte)byte_0)
                        {
                            num++;
                            continue;
                        }
                        result = 0;
                    }
                    return result;
                }
                num++;
            }
            return 0;
        }

        // Token: 0x06000335 RID: 821 RVA: 0x001404E4 File Offset: 0x001404E4
        private unsafe int method_273(byte byte_0, ushort ushort_0, byte byte_1, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int num = 0;
            uint int_ = 6U;
            uint int_2 = (uint)(byte_1 + 6);
            @struct = 112;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            *(ref @struct + 3) = (byte)((sbyte)byte_1);
            *(ref @struct + 4) = (byte)(ushort_0 & 255);
            *(ref @struct + 5) = (byte)((ushort_0 & 65280) >> 8);
            while (num != 8)
            {
                if (this.method_416((sbyte*)(&@struct), (int)int_, (sbyte*)(&struct2), (int)int_2) == 1)
                {
                    int result;
                    if (struct2 == 112 && *(ref struct2 + 2) == (sbyte)byte_0)
                    {

                        _Module.memcpy((void*)pByte_0, ref struct2 + 6, (uint)byte_1);
                        result = 1;
                    }
                    else
                    {
                        if (struct2 != 112)
                        {
                            num++;
                            continue;
                        }
                        if (*(ref struct2 + 2) != (sbyte)byte_0)
                        {
                            num++;
                            continue;
                        }
                        result = 0;
                    }
                    return result;
                }
                num++;
            }
            return 0;
        }

        // Token: 0x06000336 RID: 822 RVA: 0x0014059C File Offset: 0x0014059C
        private unsafe int method_274(byte byte_0, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct105 struct2 = 0;
            initblk(ref struct2 + 1, 0, 285);
            int num = 0;
            @struct = 115;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            while (num != 8)
            {
                if (_Module.usb_bulk_write(_Module.gstruct10_0, 1, (sbyte*)(&@struct), 6, 2000) == 6)
                {
                    int num2 = _Module.usb_bulk_read(_Module.gstruct10_0, 129, (sbyte*)(&struct2), 286, 2000);
                    if (num2 == 286)
                    {
                        if (*(ref struct2 + 2) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 66) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 130) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 194) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else
                        {
                            if (*(ref struct2 + 258) == (sbyte)byte_0)
                            {

                                _Module.memcpy((void*)pByte_0, ref struct2 + 6, 58U);

                                _Module.memcpy((void*)(pByte_0 + 58), ref struct2 + 70, 58U);

                                _Module.memcpy((void*)(pByte_0 + 116), ref struct2 + 134, 58U);

                                _Module.memcpy((void*)(pByte_0 + 174), ref struct2 + 198, 58U);

                                _Module.memcpy((void*)(pByte_0 + 232), ref struct2 + 262, 24U);
                                return 1;
                            }
                            num++;
                        }
                    }
                    else
                    {
                        num++;
                    }
                }
                else
                {
                    num++;
                }
            }
            return 0;
        }

        // Token: 0x06000337 RID: 823 RVA: 0x001406F0 File Offset: 0x001406F0
        private unsafe int method_275(byte byte_0, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct106 struct2 = 0;
            initblk(ref struct2 + 1, 0, 293);
            int num = 0;
            @struct = -125;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            while (num != 8)
            {
                if (_Module.usb_bulk_write(_Module.gstruct10_0, 1, (sbyte*)(&@struct), 6, 2000) == 6)
                {
                    int num2 = _Module.usb_bulk_read(_Module.gstruct10_0, 129, (sbyte*)(&struct2), 294, 2000);
                    if (num2 == 294)
                    {
                        if (*(ref struct2 + 2) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 66) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 130) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 194) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else
                        {
                            if (*(ref struct2 + 258) == (sbyte)byte_0)
                            {

                                _Module.memcpy((void*)pByte_0, ref struct2 + 6, 56U);

                                _Module.memcpy((void*)(pByte_0 + 56), ref struct2 + 70, 56U);

                                _Module.memcpy((void*)(pByte_0 + 112), ref struct2 + 134, 56U);

                                _Module.memcpy((void*)(pByte_0 + 168), ref struct2 + 198, 56U);

                                _Module.memcpy((void*)(pByte_0 + 224), ref struct2 + 262, 32U);
                                return 1;
                            }
                            num++;
                        }
                    }
                    else
                    {
                        num++;
                    }
                }
                else
                {
                    num++;
                }
            }
            return 0;
        }

        // Token: 0x06000338 RID: 824 RVA: 0x00140844 File Offset: 0x00140844
        private unsafe int method_276(byte byte_0, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct105 struct2 = 0;
            initblk(ref struct2 + 1, 0, 285);
            int num = 0;
            @struct = -108;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            while (num != 8)
            {
                if (_Module.usb_bulk_write(_Module.gstruct10_0, 1, (sbyte*)(&@struct), 6, 2000) == 6)
                {
                    int num2 = _Module.usb_bulk_read(_Module.gstruct10_0, 129, (sbyte*)(&struct2), 286, 2000);
                    if (num2 == 286)
                    {
                        if (*(ref struct2 + 2) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 66) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 130) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 194) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else
                        {
                            if (*(ref struct2 + 258) == (sbyte)byte_0)
                            {

                                _Module.memcpy((void*)pByte_0, ref struct2 + 6, 58U);

                                _Module.memcpy((void*)(pByte_0 + 58), ref struct2 + 70, 58U);

                                _Module.memcpy((void*)(pByte_0 + 116), ref struct2 + 134, 58U);

                                _Module.memcpy((void*)(pByte_0 + 174), ref struct2 + 198, 58U);

                                _Module.memcpy((void*)(pByte_0 + 232), ref struct2 + 262, 24U);
                                return 1;
                            }
                            num++;
                        }
                    }
                    else
                    {
                        num++;
                    }
                }
                else
                {
                    num++;
                }
            }
            return 0;
        }

        // Token: 0x06000339 RID: 825 RVA: 0x00140998 File Offset: 0x00140998
        private unsafe int method_277(byte byte_0, ushort ushort_0, byte byte_1, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int int_ = (int)(byte_1 + 6);
            int int_2 = 6;
            int num = 0;
            @struct = 113;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            *(ref @struct + 3) = (byte)((sbyte)byte_1);
            *(ref @struct + 4) = (byte)(ushort_0 & 255);
            *(ref @struct + 5) = (byte)((ushort_0 & 65280) >> 8);

            _Module.memcpy(ref @struct + 6, (void*)pByte_0, (uint)byte_1);
            while (num != 8)
            {
                if (this.method_416((sbyte*)(&@struct), int_, (sbyte*)(&struct2), int_2) == 1)
                {
                    int result;
                    if (struct2 == 113 && *(ref struct2 + 2) == (sbyte)byte_0)
                    {
                        result = 1;
                    }
                    else
                    {
                        if (struct2 != 113)
                        {
                            num++;
                            continue;
                        }
                        if (*(ref struct2 + 2) != (sbyte)byte_0)
                        {
                            num++;
                            continue;
                        }
                        result = 0;
                    }
                    return result;
                }
                num++;
            }
            return 0;
        }

        // Token: 0x0600033A RID: 826 RVA: 0x00140A50 File Offset: 0x00140A50
        private unsafe int method_278(byte byte_0, byte* pByte_0)
        {
            Struct107 @struct = 0;
            initblk(ref @struct + 1, 0, 511);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int num = 0;
            @struct = 116;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);

            _Module.memcpy(ref @struct + 2, (void*)pByte_0, 260U);
            while (num != 8)
            {
                if (_Module.usb_bulk_write(_Module.gstruct10_0, 1, (sbyte*)(&@struct), 262, 1000) == 262)
                {
                    if (_Module.usb_bulk_read(_Module.gstruct10_0, 129, (sbyte*)(&struct2), 2, 1000) == 2)
                    {
                        int result;
                        if (struct2 == 116 && *(ref struct2 + 1) == (sbyte)byte_0)
                        {
                            result = 1;
                        }
                        else
                        {
                            if (struct2 != 116)
                            {
                                num++;
                                continue;
                            }
                            if (*(ref struct2 + 2) != (sbyte)byte_0)
                            {
                                num++;
                                continue;
                            }
                            result = 0;
                        }
                        return result;
                    }
                    num++;
                }
                else
                {
                    num++;
                }
            }
            return 0;
        }

        // Token: 0x0600033B RID: 827 RVA: 0x00140B28 File Offset: 0x00140B28
        private unsafe int method_279(byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte byte_4)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int int_ = 7;
            int int_2 = 7;
            int num = 0;
            @struct = 114;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            *(ref @struct + 3) = (byte)((sbyte)byte_1);
            *(ref @struct + 4) = (byte)((sbyte)byte_2);
            *(ref @struct + 5) = (byte)((sbyte)byte_3);
            *(ref @struct + 6) = (byte)((sbyte)byte_4);
            while (num != 8)
            {
                if (this.method_416((sbyte*)(&@struct), int_, (sbyte*)(&struct2), int_2) == 1)
                {
                    int result;
                    if (struct2 == 114 && *(ref struct2 + 2) == (sbyte)byte_0)
                    {
                        result = 1;
                    }
                    else
                    {
                        if (struct2 != 114)
                        {
                            num++;
                            continue;
                        }
                        if (*(ref struct2 + 2) != (sbyte)byte_0)
                        {
                            num++;
                            continue;
                        }
                        result = 0;
                    }
                    return result;
                }
                num++;
            }
            return 0;
        }

        // Token: 0x0600033C RID: 828 RVA: 0x00140BD0 File Offset: 0x00140BD0
        private unsafe int method_280(byte byte_0, ushort ushort_0, byte byte_1, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int num = 0;
            uint int_ = 6U;
            uint int_2 = (uint)(byte_1 + 6);
            @struct = -128;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            *(ref @struct + 3) = (byte)((sbyte)byte_1);
            *(ref @struct + 4) = (byte)(ushort_0 & 255);
            *(ref @struct + 5) = (byte)((ushort_0 & 65280) >> 8);
            while (num != 8)
            {
                if (this.method_416((sbyte*)(&@struct), (int)int_, (sbyte*)(&struct2), (int)int_2) == 1)
                {
                    int result;
                    if (struct2 == 128 && (byte)(*(ref struct2 + 2)) == byte_0)
                    {

                        _Module.memcpy((void*)pByte_0, ref struct2 + 6, (uint)byte_1);
                        result = 1;
                    }
                    else
                    {
                        if (struct2 != 128)
                        {
                            num++;
                            continue;
                        }
                        if ((byte)(*(ref struct2 + 2)) != byte_0)
                        {
                            num++;
                            continue;
                        }
                        result = 0;
                    }
                    return result;
                }
                num++;
            }
            return 0;
        }

        // Token: 0x0600033D RID: 829 RVA: 0x00140C94 File Offset: 0x00140C94
        private unsafe int method_281(byte byte_0, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct105 struct2 = 0;
            initblk(ref struct2 + 1, 0, 285);
            int num = 0;
            @struct = -123;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            while (num != 8)
            {
                if (_Module.usb_bulk_write(_Module.gstruct10_0, 1, (sbyte*)(&@struct), 6, 2000) == 6)
                {
                    int num2 = _Module.usb_bulk_read(_Module.gstruct10_0, 129, (sbyte*)(&struct2), 286, 2000);
                    if (num2 == 286)
                    {
                        if ((byte)(*(ref struct2 + 2)) != byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 66) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 130) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 194) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else
                        {
                            if (*(ref struct2 + 258) == (sbyte)byte_0)
                            {

                                _Module.memcpy((void*)pByte_0, ref struct2 + 6, 58U);

                                _Module.memcpy((void*)(pByte_0 + 58), ref struct2 + 70, 58U);

                                _Module.memcpy((void*)(pByte_0 + 116), ref struct2 + 134, 58U);

                                _Module.memcpy((void*)(pByte_0 + 174), ref struct2 + 198, 58U);

                                _Module.memcpy((void*)(pByte_0 + 232), ref struct2 + 262, 24U);
                                return 1;
                            }
                            num++;
                        }
                    }
                    else
                    {
                        num++;
                    }
                }
                else
                {
                    num++;
                }
            }
            return 0;
        }

        // Token: 0x0600033E RID: 830 RVA: 0x00140DEC File Offset: 0x00140DEC
        private unsafe int method_282(byte byte_0, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct106 struct2 = 0;
            initblk(ref struct2 + 1, 0, 293);
            int num = 0;
            @struct = -122;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            while (num != 8)
            {
                if (_Module.usb_bulk_write(_Module.gstruct10_0, 1, (sbyte*)(&@struct), 6, 2000) == 6)
                {
                    int num2 = _Module.usb_bulk_read(_Module.gstruct10_0, 129, (sbyte*)(&struct2), 294, 2000);
                    if (num2 == 294)
                    {
                        if ((byte)(*(ref struct2 + 2)) != byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 66) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 130) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 194) != (sbyte)byte_0)
                        {
                            num++;
                        }
                        else
                        {
                            if (*(ref struct2 + 258) == (sbyte)byte_0)
                            {

                                _Module.memcpy((void*)pByte_0, ref struct2 + 6, 56U);

                                _Module.memcpy((void*)(pByte_0 + 56), ref struct2 + 70, 56U);

                                _Module.memcpy((void*)(pByte_0 + 112), ref struct2 + 134, 56U);

                                _Module.memcpy((void*)(pByte_0 + 168), ref struct2 + 198, 56U);

                                _Module.memcpy((void*)(pByte_0 + 224), ref struct2 + 262, 32U);
                                return 1;
                            }
                            num++;
                        }
                    }
                    else
                    {
                        num++;
                    }
                }
                else
                {
                    num++;
                }
            }
            return 0;
        }

        // Token: 0x0600033F RID: 831 RVA: 0x00140F44 File Offset: 0x00140F44
        private unsafe int method_283(byte byte_0, ushort ushort_0, byte byte_1, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int int_ = (int)(byte_1 + 6);
            int int_2 = 6;
            int num = 0;
            @struct = -127;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            *(ref @struct + 3) = (byte)((sbyte)byte_1);
            *(ref @struct + 4) = (byte)(ushort_0 & 255);
            *(ref @struct + 5) = (byte)((ushort_0 & 65280) >> 8);

            _Module.memcpy(ref @struct + 6, (void*)pByte_0, (uint)byte_1);
            while (num != 8)
            {
                if (this.method_416((sbyte*)(&@struct), int_, (sbyte*)(&struct2), int_2) == 1)
                {
                    int result;
                    if (struct2 == 129 && (byte)(*(ref struct2 + 2)) == byte_0)
                    {
                        result = 1;
                    }
                    else
                    {
                        if (struct2 != 129)
                        {
                            num++;
                            continue;
                        }
                        if ((byte)(*(ref struct2 + 2)) != byte_0)
                        {
                            num++;
                            continue;
                        }
                        result = 0;
                    }
                    return result;
                }
                num++;
            }
            return 0;
        }

        // Token: 0x06000340 RID: 832 RVA: 0x00141008 File Offset: 0x00141008
        private unsafe int method_284(byte byte_0, byte* pByte_0)
        {
            Struct107 @struct = 0;
            initblk(ref @struct + 1, 0, 511);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int num = 0;
            @struct = -121;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);

            _Module.memcpy(ref @struct + 2, (void*)pByte_0, 260U);
            while (num != 8)
            {
                if (_Module.usb_bulk_write(_Module.gstruct10_0, 1, (sbyte*)(&@struct), 262, 1000) == 262)
                {
                    if (_Module.usb_bulk_read(_Module.gstruct10_0, 129, (sbyte*)(&struct2), 2, 1000) == 2)
                    {
                        int result;
                        if (struct2 == 135 && (byte)(*(ref struct2 + 1)) == byte_0)
                        {
                            result = 1;
                        }
                        else
                        {
                            if (struct2 != 135)
                            {
                                num++;
                                continue;
                            }
                            if ((byte)(*(ref struct2 + 2)) != byte_0)
                            {
                                num++;
                                continue;
                            }
                            result = 0;
                        }
                        return result;
                    }
                    num++;
                }
                else
                {
                    num++;
                }
            }
            return 0;
        }

        // Token: 0x06000341 RID: 833 RVA: 0x001410EC File Offset: 0x001410EC
        private unsafe int method_285(byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte byte_4)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int int_ = 7;
            int int_2 = 7;
            int num = 0;
            @struct = -126;
            *(ref @struct + 1) = (byte)((sbyte)byte_0);
            *(ref @struct + 3) = (byte)((sbyte)byte_1);
            *(ref @struct + 4) = (byte)((sbyte)byte_2);
            *(ref @struct + 5) = (byte)((sbyte)byte_3);
            *(ref @struct + 6) = (byte)((sbyte)byte_4);
            while (num != 8)
            {
                if (this.method_416((sbyte*)(&@struct), int_, (sbyte*)(&struct2), int_2) == 1)
                {
                    int result;
                    if (struct2 == 130 && (byte)(*(ref struct2 + 2)) == byte_0)
                    {
                        result = 1;
                    }
                    else
                    {
                        if (struct2 != 130)
                        {
                            num++;
                            continue;
                        }
                        if ((byte)(*(ref struct2 + 2)) != byte_0)
                        {
                            num++;
                            continue;
                        }
                        result = 0;
                    }
                    return result;
                }
                num++;
            }
            return 0;
        }

        // Token: 0x06000342 RID: 834 RVA: 0x0014119C File Offset: 0x0014119C
        private unsafe int method_286(byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            uint int_ = 6U;
            uint int_2 = (uint)(byte_3 + 6);
            int num = 0;
            @struct = 85;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = (byte)((sbyte)byte_3);
            *(ref @struct + 3) = (byte)((sbyte)byte_2);
            *(ref @struct + 4) = (byte)((sbyte)byte_1);
            *(ref @struct + 5) = (byte)((sbyte)byte_0);
            while (num != 2)
            {
                if (this.method_416((sbyte*)(&@struct), (int)int_, (sbyte*)(&struct2), (int)int_2) == 1)
                {
                    int result;
                    if (struct2 == 85 && *(ref struct2 + 1) == 112)
                    {

                        _Module.memcpy((void*)pByte_0, ref struct2 + 6, (uint)byte_3);
                        result = 1;
                    }
                    else
                    {
                        if (struct2 != 85)
                        {
                            num++;
                            continue;
                        }
                        if (*(ref struct2 + 1) != 112)
                        {
                            num++;
                            continue;
                        }
                        result = 0;
                    }
                    return result;
                }
                num++;
            }
            return 0;
        }

        // Token: 0x06000343 RID: 835 RVA: 0x00141254 File Offset: 0x00141254
        private unsafe int method_287(byte byte_0, byte byte_1, byte byte_2, byte byte_3, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int num = 0;
            uint int_ = (uint)(byte_3 + 6);
            uint int_2 = 6U;
            @struct = 86;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = (byte)((sbyte)byte_3);
            *(ref @struct + 3) = (byte)((sbyte)byte_2);
            *(ref @struct + 4) = (byte)((sbyte)byte_1);
            *(ref @struct + 5) = (byte)((sbyte)byte_0);

            _Module.memcpy(ref @struct + 6, (void*)pByte_0, (uint)byte_3);
            while (num != 2)
            {
                if (this.method_416((sbyte*)(&@struct), (int)int_, (sbyte*)(&struct2), (int)int_2) == 1)
                {
                    int result;
                    if (struct2 == 86 && *(ref struct2 + 1) == 112)
                    {
                        result = 1;
                    }
                    else
                    {
                        if (struct2 != 86)
                        {
                            num++;
                            continue;
                        }
                        if (*(ref struct2 + 1) != 112)
                        {
                            num++;
                            continue;
                        }
                        result = 0;
                    }
                    return result;
                }
                num++;
            }
            return 0;
        }

        // Token: 0x06000344 RID: 836 RVA: 0x0014130C File Offset: 0x0014130C
        private unsafe int method_288(byte byte_0, byte byte_1, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct105 struct2 = 0;
            initblk(ref struct2 + 1, 0, 285);
            int num = 0;
            @struct = 87;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            *(ref @struct + 4) = (byte)((sbyte)byte_1);
            *(ref @struct + 5) = (byte)((sbyte)byte_0);
            while (num != 8)
            {
                if (_Module.usb_bulk_write(_Module.gstruct10_0, 1, (sbyte*)(&@struct), 6, 2000) == 6)
                {
                    int num2 = _Module.usb_bulk_read(_Module.gstruct10_0, 129, (sbyte*)(&struct2), 286, 2000);
                    if (num2 == 286)
                    {
                        if (*(ref struct2 + 1) != 112)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 65) != 112)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 129) != 112)
                        {
                            num++;
                        }
                        else if (*(ref struct2 + 193) != 112)
                        {
                            num++;
                        }
                        else
                        {
                            if (*(ref struct2 + 257) == 112)
                            {

                                _Module.memcpy((void*)pByte_0, ref struct2 + 6, 58U);

                                _Module.memcpy((void*)(pByte_0 + 58), ref struct2 + 70, 58U);

                                _Module.memcpy((void*)(pByte_0 + 116), ref struct2 + 134, 58U);

                                _Module.memcpy((void*)(pByte_0 + 174), ref struct2 + 198, 58U);

                                _Module.memcpy((void*)(pByte_0 + 232), ref struct2 + 262, 24U);
                                return 1;
                            }
                            num++;
                        }
                    }
                    else
                    {
                        num++;
                    }
                }
                else
                {
                    num++;
                }
            }
            return 0;
        }

        // Token: 0x06000345 RID: 837 RVA: 0x00141480 File Offset: 0x00141480
        private unsafe int method_289(byte byte_0, byte byte_1, byte* pByte_0)
        {
            Struct107 @struct = 0;
            initblk(ref @struct + 1, 0, 511);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int num = 0;
            @struct = 88;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            *(ref @struct + 4) = (byte)((sbyte)byte_1);
            *(ref @struct + 5) = (byte)((sbyte)byte_0);

            _Module.memcpy(ref @struct + 6, (void*)pByte_0, 256U);
            while (num != 8)
            {
                if (_Module.usb_bulk_write(_Module.gstruct10_0, 1, (sbyte*)(&@struct), 262, 1000) == 262)
                {
                    if (_Module.usb_bulk_read(_Module.gstruct10_0, 129, (sbyte*)(&struct2), 2, 1000) == 2)
                    {
                        int result;
                        if (struct2 == 88 && *(ref struct2 + 1) == 112)
                        {
                            result = 1;
                        }
                        else
                        {
                            if (struct2 != 88)
                            {
                                num++;
                                continue;
                            }
                            if (*(ref struct2 + 2) != 112)
                            {
                                num++;
                                continue;
                            }
                            result = 0;
                        }
                        return result;
                    }
                    num++;
                }
                else
                {
                    num++;
                }
            }
            return 0;
        }

        // Token: 0x06000346 RID: 838 RVA: 0x00141574 File Offset: 0x00141574
        private unsafe int method_290()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_246(ushort_, byte_, 112, 21845U, 170);
            this.method_246(ushort_, byte_, 112, 10922U, 85);
            this.method_246(ushort_, byte_, 112, 21845U, 144);
            byte b;
            this.method_247(ushort_, byte_, 112, 0U, &b);
            byte b2;
            this.method_247(ushort_, byte_, 112, 1U, &b2);
            this.method_246(ushort_, byte_, 112, 21845U, 170);
            this.method_246(ushort_, byte_, 112, 10922U, 85);
            this.method_246(ushort_, byte_, 112, 21845U, 240);
            return (int)b2 | (int)b << 8;
        }

        // Token: 0x06000347 RID: 839 RVA: 0x00141648 File Offset: 0x00141648
        private unsafe int method_291()
        {
            byte b = 0;
            byte b2 = 0;
            uint num = 0U;
            int num2 = 0;
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num3 = *(ref _Module.struct38_0 + selectedIndex * 72U);
            Struct32 struct2;
            for (uint num4 = 0U; num4 < 4U; num4 += 1U)
            {
                this.textBox6.AppendText("\r\n" + "Reading Bank " + Convert.ToString(num4) + ": ");
                this.string_2 = "Reading Bank " + Convert.ToString(num4) + ": ";
                this.string_3 = "";
                uint num5 = 0U;
            IL_20F:
                while (num5 < 256U)
                {
                    uint num6 = num5 % 16U;
                    if (_Module.GetAsyncKeyState(27) == null)
                    {
                        if (num6 == 0U)
                        {
                            this.textBox6.AppendText(".");
                            this.string_3 += ".";
                            Application.DoEvents();
                        }
                        while (num2 != 2)
                        {
                            if (num3 == 0)
                            {
                                Struct43 @struct;
                                if (this.method_286((byte)num4, (byte)num5, 0, 56, (byte*)(&@struct)) == 0)
                                {
                                    num2++;
                                    continue;
                                }
                                if (this.method_286((byte)num4, (byte)num5, 56, 56, ref @struct + 56) == 0)
                                {
                                    num2++;
                                    continue;
                                }
                                if (this.method_286((byte)num4, (byte)num5, 112, 56, ref @struct + 112) == 0)
                                {
                                    num2++;
                                    continue;
                                }
                                if (this.method_286((byte)num4, (byte)num5, 168, 56, ref @struct + 168) == 0)
                                {
                                    num2++;
                                    continue;
                                }
                                if (this.method_286((byte)num4, (byte)num5, 224, 32, ref @struct + 224) == 0)
                                {
                                    num2++;
                                    continue;
                                }
                                byte* ptr = ref struct2 + (num5 * 256U + num4 * 65536U);

                                _Module.memcpy((void*)ptr, (void*)(&@struct), 256U);
                            }
                            else
                            {
                                for (uint num7 = 0U; num7 < 256U; num7 += 1U)
                                {
                                    uint num8 = num7 | num5 << 8 | num4 << 16;
                                    this.method_247(num3, byte_, 112, num8, &b);
                                    this.method_247(num3, byte_, 112, num8, &b2);
                                    if (b2 != b)
                                    {
                                        this.textBox6.AppendText("x");
                                        num7 -= 1U;
                                        num += 1U;
                                        if (num > 16U)
                                        {
                                            this.textBox6.AppendText("Read Failed!" + "\r\n");
                                            return 1;
                                        }
                                    }
                                    else
                                    {
                                        *(ref struct2 + num8) = b;
                                    }
                                }
                            }
                            num5 += 1U;
                            goto IL_20F;
                        }
                        this.textBox6.AppendText("Read Failed!" + "\r\n");
                        return 1;
                    }
                    this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                    return 1;
                }

                _Module.Sleep(200);
            }
            this.textBox6.AppendText("\r\n");
            this.string_2 = "Done! ";
            this.string_3 = "";

            _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct2), 262144U);
            return 0;
        }

        // Token: 0x06000348 RID: 840 RVA: 0x0014192C File Offset: 0x0014192C
        private unsafe void method_292()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.textBox6.AppendText("\r\n" + "Sending Chip Erase request to port " + this.label123.Text + "\r\n");
            this.method_246(ushort_, byte_, 112, 21845U, 170);
            this.method_246(ushort_, byte_, 112, 10922U, 85);
            this.method_246(ushort_, byte_, 112, 21845U, 128);
            this.method_246(ushort_, byte_, 112, 21845U, 170);
            this.method_246(ushort_, byte_, 112, 10922U, 85);
            this.method_246(ushort_, byte_, 112, 21845U, 16);
            this.textBox6.AppendText("Erasing:");
            this.string_2 = string.Concat("Erasing Chip: ");
            this.string_3 = "";
            for (uint num = 0U; num < 12U; num += 1U)
            {

                _Module.Sleep(250);
                this.textBox6.AppendText(".");
                this.string_3 += ".";
            }
            this.textBox6.AppendText("\r\n");
        }

        // Token: 0x06000349 RID: 841 RVA: 0x00141A78 File Offset: 0x00141A78
        private unsafe int method_293()
        {
            byte b = 0;
            uint num = 0U;
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num2 = *(ref _Module.struct38_0 + selectedIndex * 72U);
            for (uint num3 = 0U; num3 < 4U; num3 += 1U)
            {
                this.textBox6.AppendText("Reading Bank " + Convert.ToString(num3) + ": ");
                for (uint num4 = 0U; num4 < 256U; num4 += 1U)
                {
                    if (num4 % 16U == 0U)
                    {
                        this.textBox6.AppendText(".");
                        Application.DoEvents();
                    }
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 1;
                    }
                    if (num2 == 0)
                    {
                        Struct43 @struct;
                        this.method_286((byte)num3, (byte)num4, 0, 56, (byte*)(&@struct));
                        this.method_286((byte)num3, (byte)num4, 56, 56, ref @struct + 56);
                        this.method_286((byte)num3, (byte)num4, 112, 56, ref @struct + 112);
                        this.method_286((byte)num3, (byte)num4, 168, 56, ref @struct + 168);
                        this.method_286((byte)num3, (byte)num4, 224, 32, ref @struct + 224);
                        for (uint num5 = 0U; num5 < 256U; num5 += 1U)
                        {
                            if (*(ref @struct + num5) != 255)
                            {
                                this.textBox6.AppendText("x");
                                num += 1U;
                                if (num > 16U)
                                {
                                    return 0;
                                }
                            }
                        }
                    }
                    else
                    {
                        for (uint num5 = 0U; num5 < 256U; num5 += 1U)
                        {
                            this.method_247(num2, byte_, 112, num5 | num4 << 8 | num3 << 16, &b);
                            if (b != 255)
                            {
                                num5 -= 1U;
                                this.textBox6.AppendText("x");
                                num += 1U;
                                if (num > 16U)
                                {
                                    return 0;
                                }
                            }
                        }
                    }
                }
                this.textBox6.AppendText("\r\n");
            }
            return 1;
        }

        // Token: 0x0600034A RID: 842 RVA: 0x00141C68 File Offset: 0x00141C68
        private unsafe void method_294(int int_16)
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            for (ushort num = 0; num < 256; num += 16)
            {
                uint uint_ = (uint)((int)num << 8 | int_16 << 16);
                this.method_246(ushort_, byte_, 112, 21845U, 170);
                this.method_246(ushort_, byte_, 112, 10922U, 85);
                this.method_246(ushort_, byte_, 112, 21845U, 128);
                this.method_246(ushort_, byte_, 112, 21845U, 170);
                this.method_246(ushort_, byte_, 112, 10922U, 85);
                this.method_246(ushort_, byte_, 112, uint_, 48);

                _Module.Sleep(100);
            }
        }

        // Token: 0x0600034B RID: 843 RVA: 0x003CB624 File Offset: 0x00313624
        private unsafe int method_295(int int_16)
        {
            byte b = 0;
            uint num = 0U;
            int num2 = 0;
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num3 = *(ref _Module.struct38_0 + selectedIndex * 72U);
            Struct32 @struct;

            _Module.memcpy((void*)(&@struct), *(ref _Module.struct121_0 + 4780), 262144U);
            this.textBox6.AppendText("Writing Bank " + Convert.ToString(3 - int_16) + ": ");
            this.string_2 = "Writing Bank " + Convert.ToString(3 - int_16) + ": ";
            this.string_3 = "";
            uint num4 = 0U;
            while (num4 < 256U)
            {
                int result;
                if (_Module.GetAsyncKeyState(27) == null)
                {
                    if (num4 % 16U == 0U)
                    {
                        this.textBox6.AppendText(".");
                        this.string_3 += ".";
                        Application.DoEvents();
                    }
                    if (num2 != 8)
                    {
                        if (num3 == 0)
                        {
                            byte* ptr = ref @struct + (num4 * 256U + (uint)(int_16 * 65536));
                            Struct43 struct2;

                            _Module.memcpy((void*)(&struct2), (void*)ptr, 256U);
                            if (this.method_287((byte)int_16, (byte)num4, 0, 56, (byte*)(&struct2)) == 0)
                            {
                                this.textBox6.AppendText("Write Failed!" + "\r\n");
                                return 1;
                            }
                            if (this.method_287((byte)int_16, (byte)num4, 56, 56, ref struct2 + 56) == 0)
                            {
                                this.textBox6.AppendText("Write Failed!" + "\r\n");
                                return 1;
                            }
                            if (this.method_287((byte)int_16, (byte)num4, 112, 56, ref struct2 + 112) == 0)
                            {
                                this.textBox6.AppendText("Write Failed!" + "\r\n");
                                return 1;
                            }
                            if (this.method_287((byte)int_16, (byte)num4, 168, 56, ref struct2 + 168) == 0)
                            {
                                this.textBox6.AppendText("Write Failed!" + "\r\n");
                                return 1;
                            }
                            if (this.method_287((byte)int_16, (byte)num4, 224, 32, ref struct2 + 224) == 0)
                            {
                                this.textBox6.AppendText("Write Failed!" + "\r\n");
                                return 1;
                            }
                        }
                        else
                        {
                            for (uint num5 = 0U; num5 < 256U; num5 += 1U)
                            {
                                uint num6 = num5 | num4 << 8 | (uint)((uint)int_16 << 16);
                                byte b2 = *(ref @struct + num6);
                                this.method_246(num3, byte_, 112, 21845U, 170);
                                this.method_246(num3, byte_, 112, 10922U, 85);
                                this.method_246(num3, byte_, 112, 21845U, 160);
                                this.method_246(num3, byte_, 112, num6, b2);
                                this.method_247(num3, byte_, 112, num6, &b);
                                if (b != b2)
                                {
                                    this.method_247(num3, byte_, 112, num6, &b);
                                }
                                if (b != b2)
                                {
                                    this.method_247(num3, byte_, 112, num6, &b);
                                }
                                if (b != b2)
                                {
                                    num5 -= 1U;
                                    num += 1U;
                                    if (num > 16U)
                                    {
                                        this.textBox6.AppendText("Write Failed !");
                                        this.textBox6.AppendText("\r\n");
                                        return 1;
                                    }
                                }
                                else if (num > 0U)
                                {
                                    this.textBox6.AppendText("y");
                                    num = 0U;
                                }
                            }
                        }

                        _Module.Sleep(20);
                        num4 += 1U;
                        continue;
                    }
                    this.textBox6.AppendText("Read Failed!" + "\r\n");
                    result = 1;
                }
                else
                {
                    this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                    result = 1;
                }
                return result;
            }

            _Module.Sleep(200);
            this.textBox6.AppendText("\r\n");
            this.string_2 = "Done! ";
            this.string_3 = "";
            return 0;
        }

        // Token: 0x0600034C RID: 844 RVA: 0x001420F8 File Offset: 0x001420F8
        private unsafe int method_296()
        {
            byte b = 0;
            uint num = 0U;
            int num2 = 0;
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num3 = *(ref _Module.struct38_0 + selectedIndex * 72U);
            Struct32 @struct;

            _Module.memcpy((void*)(&@struct), *(ref _Module.struct121_0 + 4780), 262144U);
            uint num4;
            Struct43 struct2;
            for (num4 = 0U; num4 < 4U; num4 += 1U)
            {
                uint num5 = 3U - num4;
                this.textBox6.AppendText("Writing Bank " + Convert.ToString(num4) + ": .");
                this.string_2 = "Writing Bank " + Convert.ToString(num4) + ": ";
                this.string_3 = "";
                this.method_294((int)num5);
                uint num6 = 1U;
            IL_2B6:
                while (num6 < 256U)
                {
                    if (_Module.GetAsyncKeyState(27) == null)
                    {
                        if (num6 % 16U == 0U)
                        {
                            this.textBox6.AppendText(".");
                            this.string_3 += ".";
                            Application.DoEvents();
                        }
                        while (num2 != 2)
                        {
                            if (num3 == 0)
                            {
                                byte* ptr = ref @struct + (num6 * 256U + num5 * 65536U);

                                _Module.memcpy((void*)(&struct2), (void*)ptr, 256U);
                                if (this.method_287((byte)num5, (byte)num6, 0, 56, (byte*)(&struct2)) == 0)
                                {
                                    num2++;
                                    continue;
                                }
                                if (this.method_287((byte)num5, (byte)num6, 56, 56, ref struct2 + 56) == 0)
                                {
                                    num2++;
                                    continue;
                                }
                                if (this.method_287((byte)num5, (byte)num6, 112, 56, ref struct2 + 112) == 0)
                                {
                                    num2++;
                                    continue;
                                }
                                if (this.method_287((byte)num5, (byte)num6, 168, 56, ref struct2 + 168) == 0)
                                {
                                    num2++;
                                    continue;
                                }
                                if (this.method_287((byte)num5, (byte)num6, 224, 32, ref struct2 + 224) == 0)
                                {
                                    num2++;
                                    continue;
                                }
                            }
                            else
                            {
                                for (uint num7 = 0U; num7 < 256U; num7 += 1U)
                                {
                                    uint num8 = num7 | num6 << 8 | num5 << 16;
                                    byte b2 = *(ref @struct + num8);
                                    this.method_246(num3, byte_, 112, 21845U, 170);
                                    this.method_246(num3, byte_, 112, 10922U, 85);
                                    this.method_246(num3, byte_, 112, 21845U, 160);
                                    this.method_246(num3, byte_, 112, num8, b2);
                                    this.method_247(num3, byte_, 112, num8, &b);
                                    if (b != b2)
                                    {
                                        this.method_247(num3, byte_, 112, num8, &b);
                                    }
                                    if (b != b2)
                                    {
                                        this.method_247(num3, byte_, 112, num8, &b);
                                    }
                                    if (b != b2)
                                    {
                                        num7 -= 1U;
                                        num += 1U;
                                        if (num > 16U)
                                        {
                                            this.textBox6.AppendText("Write Failed !");
                                            this.textBox6.AppendText("\r\n");
                                            return 1;
                                        }
                                    }
                                    else if (num > 0U)
                                    {
                                        this.textBox6.AppendText("y");
                                        num = 0U;
                                    }
                                }
                            }

                            _Module.Sleep(20);
                            num6 += 1U;
                            goto IL_2B6;
                        }
                        this.textBox6.AppendText("Write Failed!" + "\r\n");
                        return 1;
                    }
                    this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                    return 1;
                }
                this.textBox6.AppendText("\r\n");
            }
            num4 = 0U;
        IL_51E:
            while (num4 < 4U)
            {
                uint num5 = 3U - num4;
                uint num6 = 0U;
                while (num2 != 8)
                {
                    if (num3 == 0)
                    {
                        byte* ptr = ref @struct + (num6 * 256U + num5 * 65536U);

                        _Module.memcpy((void*)(&struct2), (void*)ptr, 256U);
                        if (this.method_287((byte)num5, (byte)num6, 0, 56, (byte*)(&struct2)) == 0)
                        {
                            num2++;
                            continue;
                        }
                        if (this.method_287((byte)num5, (byte)num6, 56, 56, ref struct2 + 56) == 0)
                        {
                            num2++;
                            continue;
                        }
                        if (this.method_287((byte)num5, (byte)num6, 112, 56, ref struct2 + 112) == 0)
                        {
                            num2++;
                            continue;
                        }
                        if (this.method_287((byte)num5, (byte)num6, 168, 56, ref struct2 + 168) == 0)
                        {
                            num2++;
                            continue;
                        }
                        if (this.method_287((byte)num5, (byte)num6, 224, 32, ref struct2 + 224) == 0)
                        {
                            num2++;
                            continue;
                        }
                    }
                    else
                    {
                        for (uint num7 = 0U; num7 < 256U; num7 += 1U)
                        {
                            uint num8 = num7 | num6 << 8 | num5 << 16;
                            byte b2 = *(ref @struct + num8);
                            this.method_246(num3, byte_, 112, 21845U, 170);
                            this.method_246(num3, byte_, 112, 10922U, 85);
                            this.method_246(num3, byte_, 112, 21845U, 160);
                            this.method_246(num3, byte_, 112, num8, b2);
                            this.method_247(num3, byte_, 112, num8, &b);
                            if (b != b2)
                            {
                                this.method_247(num3, byte_, 112, num8, &b);
                            }
                            if (b != b2)
                            {
                                this.method_247(num3, byte_, 112, num8, &b);
                            }
                            if (b != b2)
                            {
                                num7 -= 1U;
                                num += 1U;
                                if (num > 16U)
                                {
                                    this.textBox6.AppendText("Write Failed !");
                                    this.textBox6.AppendText("\r\n");
                                    return 1;
                                }
                            }
                            else if (num > 0U)
                            {
                                this.textBox6.AppendText("y");
                                num = 0U;
                            }
                        }
                    }

                    _Module.Sleep(20);
                    num4 += 1U;
                    goto IL_51E;
                }
                this.textBox6.AppendText("Write Failed!" + "\r\n");
                return 1;
            }

            _Module.Sleep(200);
            this.string_2 = "Done! ";
            this.string_3 = "";
            return 0;
        }

        // Token: 0x0600034D RID: 845 RVA: 0x00142690 File Offset: 0x00142690
        private unsafe int method_297()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_228(ushort_, byte_, 115, 0, 144);
            this.method_228(ushort_, byte_, 115, 1, 0);
            this.method_228(ushort_, byte_, 115, 2, 0);
            this.method_228(ushort_, byte_, 115, 3, 0);
            this.method_231(ushort_, byte_, 115, 1, 0, 3, 0);

            _Module.Sleep(200);
            byte b;
            this.method_229(ushort_, byte_, 115, 4, &b);
            byte b2;
            this.method_229(ushort_, byte_, 115, 5, &b2);
            ushort num = (ushort)((int)b2 | (int)b << 8);
            if (num == 48963)
            {
                this.method_301();
            }
            return (int)num;
        }

        // Token: 0x0600034E RID: 846 RVA: 0x0014274C File Offset: 0x0014274C
        private unsafe int method_298()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            Struct63 @struct = 3;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            Struct32 struct3;
            for (uint num2 = 0U; num2 < 4U; num2 += 1U)
            {
                this.textBox6.AppendText("\r\n" + "Reading Bank " + Convert.ToString(num2) + ": ");
                this.string_2 = "Reading Bank " + Convert.ToString(num2) + ": ";
                this.string_3 = "";
                *(ref @struct + 1) = (byte)num2;
                for (uint num3 = 0U; num3 < 256U; num3 += 1U)
                {
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 1;
                    }
                    *(ref @struct + 2) = (byte)num3;
                    if (num3 % 16U == 0U)
                    {
                        this.textBox6.AppendText(".");
                        this.string_3 += ".";
                        Application.DoEvents();
                    }
                    Struct43 struct2;
                    if (num == 0)
                    {
                        if (this.method_269(115, 0, 4, (byte*)(&@struct)) == 0)
                        {
                            return 1;
                        }
                        if (this.method_272(115, 0, 4, 1, 0) == 0)
                        {
                            return 1;
                        }
                        if (this.method_266(115, (byte*)(&struct2)) == 0)
                        {
                            return 1;
                        }
                    }
                    else
                    {
                        this.method_228(num, byte_, 115, 0, 3);
                        this.method_228(num, byte_, 115, 1, (byte)num2);
                        this.method_228(num, byte_, 115, 2, (byte)num3);
                        this.method_228(num, byte_, 115, 3, 0);
                        this.method_231(num, byte_, 115, 0, 4, 1, 0);
                        for (uint num4 = 4U; num4 < 260U; num4 += 1U)
                        {
                            this.method_229(num, byte_, 115, (ushort)num4, ref struct2 + (num4 - 4U));
                        }
                    }
                    byte* ptr = ref struct3 + (num3 * 256U + num2 * 65536U);

                    _Module.memcpy((void*)ptr, (void*)(&struct2), 256U);
                }
            }
            this.textBox6.AppendText("\r\n");
            this.string_2 = "Done! ";
            this.string_3 = "";

            _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct3), 262144U);
            return 0;
        }

        // Token: 0x0600034F RID: 847 RVA: 0x00142994 File Offset: 0x00142994
        private unsafe int method_299()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.textBox6.AppendText("\r\n" + "Sending Chip Erase to Port " + this.label123.Text + "\r\n");
            this.method_228(ushort_, byte_, 115, 0, 6);
            this.method_231(ushort_, byte_, 115, 0, 1, 0, 0);
            int result;
            if (this.method_232(ushort_, byte_, 115, 2) == 1)
            {
                result = 0;
            }
            else
            {
                if (this.label118.Text == new string((sbyte*)(&_Module.struct35_132)))
                {
                    this.method_228(ushort_, byte_, 115, 0, 96);
                }
                else if (this.label118.Text == new string((sbyte*)(&_Module.struct35_133)))
                {
                    this.method_228(ushort_, byte_, 115, 0, 98);
                }
                else
                {
                    this.method_228(ushort_, byte_, 115, 0, 199);
                }
                this.method_231(ushort_, byte_, 115, 0, 1, 0, 0);
                this.textBox6.AppendText("Erasing:");
                this.string_2 = string.Concat("Erasing Chip: ");
                this.string_3 = "";
                if (this.method_232(ushort_, byte_, 115, 0) == 1)
                {
                    result = 0;
                }
                else
                {
                    this.textBox6.AppendText("\r\n");
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x06000350 RID: 848 RVA: 0x00142AE0 File Offset: 0x00142AE0
        private unsafe void method_300()
        {
            Struct63 @struct = 6;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            if (num == 0)
            {
                this.method_269(115, 0, 4, (byte*)(&@struct));
                this.method_272(115, 0, 1, 0, 0);
            }
            else
            {
                this.method_228(num, byte_, 115, 0, 6);
                this.method_231(num, byte_, 115, 0, 1, 0, 0);
            }
        }

        // Token: 0x06000351 RID: 849 RVA: 0x00142B64 File Offset: 0x00142B64
        private unsafe void method_301()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_228(ushort_, byte_, 115, 0, 80);
            this.method_231(ushort_, byte_, 115, 0, 1, 0, 0);
            this.method_228(ushort_, byte_, 115, 0, 1);
            this.method_228(ushort_, byte_, 115, 1, 0);
            this.method_231(ushort_, byte_, 115, 0, 2, 0, 0);
        }

        // Token: 0x06000352 RID: 850 RVA: 0x00142BE0 File Offset: 0x00142BE0
        private unsafe int method_302()
        {
            Struct63 @struct = 6;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            Struct76 struct2 = 2;
            *(ref struct2 + 1) = 0;
            *(ref struct2 + 2) = 0;
            *(ref struct2 + 3) = 0;
            Struct32 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 4780), 262144U);
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            for (uint num2 = 0U; num2 < 4U; num2 += 1U)
            {
                this.textBox6.AppendText("Writing Bank " + Convert.ToString(num2) + ": ");
                this.string_2 = "Writing Bank " + Convert.ToString(num2) + ": ";
                this.string_3 = "";
                *(ref struct2 + 1) = (byte)num2;
                for (uint num3 = 0U; num3 < 256U; num3 += 1U)
                {
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 1;
                    }
                    if (num3 % 16U == 0U)
                    {
                        this.textBox6.AppendText(".");
                        this.string_3 += ".";
                        Application.DoEvents();
                    }
                    if (num == 0)
                    {
                        *(ref struct2 + 2) = (byte)num3;

                        _Module.memcpy(ref struct2 + 4, ref struct3 + (num3 * 256U + num2 * 65536U), 256U);
                        if (this.method_270(115, (byte*)(&struct2)) == 0)
                        {
                            return 1;
                        }
                    }
                    else
                    {
                        this.method_228(num, byte_, 115, 0, 6);
                        this.method_231(num, byte_, 115, 0, 1, 0, 0);
                        if (this.method_232(num, byte_, 115, 2) == 1)
                        {
                            return 1;
                        }
                        this.method_228(num, byte_, 115, 0, 2);
                        this.method_228(num, byte_, 115, 1, (byte)num2);
                        this.method_228(num, byte_, 115, 2, (byte)num3);
                        this.method_228(num, byte_, 115, 3, 0);
                        for (uint num4 = 0U; num4 < 256U; num4 += 1U)
                        {
                            this.method_228(num, byte_, 115, (ushort)(num4 + 4U), *(ref struct3 + (num4 + num3 * 256U + num2 * 65536U)));
                        }
                        this.method_231(num, byte_, 115, 1, 4, 0, 0);
                        if (this.method_232(num, byte_, 115, 0) == 1)
                        {
                            return 1;
                        }
                    }
                }
                this.textBox6.AppendText("\r\n");
                this.string_2 = "Done! ";
                this.string_3 = "";
            }
            return 0;
        }

        // Token: 0x06000353 RID: 851 RVA: 0x003CB9F8 File Offset: 0x003139F8
        private int method_303()
        {
            ushort num;
            if (this.radioButton19.Checked)
            {
                num = (ushort)this.method_305();
                if (num == 0)
                {
                    num = (ushort)this.method_304();
                    if (num == 0)
                    {
                        num = (ushort)this.method_306();
                        if (num != 0 && this.radioButton21.Visible)
                        {
                            this.radioButton21.Checked = true;
                        }
                    }
                    else
                    {
                        this.radioButton20.Checked = true;
                    }
                }
            }
            else if (this.radioButton21.Checked)
            {
                num = (ushort)this.method_306();
                if (num == 0)
                {
                    num = (ushort)this.method_304();
                    if (num == 0)
                    {
                        num = (ushort)this.method_305();
                        if (num != 0)
                        {
                            this.radioButton19.Checked = true;
                        }
                    }
                    else
                    {
                        this.radioButton20.Checked = true;
                    }
                }
            }
            else
            {
                num = (ushort)this.method_304();
                if (num == 0)
                {
                    num = (ushort)this.method_306();
                    if (num == 0)
                    {
                        num = (ushort)this.method_305();
                        if (num != 0)
                        {
                            this.radioButton19.Checked = true;
                        }
                    }
                    else if (this.radioButton21.Visible)
                    {
                        this.radioButton21.Checked = true;
                    }
                }
                if (num == 48963)
                {
                    this.method_316();
                }
            }
            return (int)num;
        }

        // Token: 0x06000354 RID: 852 RVA: 0x00142F6C File Offset: 0x00142F6C
        private unsafe int method_304()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_228(ushort_, byte_, 114, 34816, 144);
            this.method_228(ushort_, byte_, 114, 34817, 0);
            this.method_228(ushort_, byte_, 114, 34818, 0);
            this.method_228(ushort_, byte_, 114, 34819, 0);
            this.method_231(ushort_, byte_, 114, 4, 0, 2, 0);

            _Module.Sleep(200);
            byte b;
            this.method_229(ushort_, byte_, 114, 34820, &b);
            byte b2;
            this.method_229(ushort_, byte_, 114, 34821, &b2);
            return (int)b2 | (int)b << 8;
        }

        // Token: 0x06000355 RID: 853 RVA: 0x00143030 File Offset: 0x00143030
        private unsafe int method_305()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_234(ushort_, byte_, 114, 0, 144);
            this.method_234(ushort_, byte_, 114, 1, 0);
            this.method_234(ushort_, byte_, 114, 2, 0);
            this.method_234(ushort_, byte_, 114, 3, 0);
            this.method_236(ushort_, byte_, 114, 4, 0, 2, 0);

            _Module.Sleep(200);
            byte b;
            this.method_235(ushort_, byte_, 114, 4, &b);
            byte b2;
            this.method_235(ushort_, byte_, 114, 5, &b2);
            return (int)b2 | (int)b << 8;
        }

        // Token: 0x06000356 RID: 854 RVA: 0x001430DC File Offset: 0x001430DC
        private unsafe int method_306()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_242(ushort_, byte_, 114, 0, 144);
            this.method_242(ushort_, byte_, 114, 1, 0);
            this.method_242(ushort_, byte_, 114, 2, 0);
            this.method_242(ushort_, byte_, 114, 3, 0);
            this.method_244(ushort_, byte_, 114, 4, 0, 2, 0);

            _Module.Sleep(200);
            byte b;
            this.method_243(ushort_, byte_, 114, 4, &b);
            byte b2;
            this.method_243(ushort_, byte_, 114, 5, &b2);
            return (int)b2 | (int)b << 8;
        }

        // Token: 0x06000357 RID: 855 RVA: 0x00143188 File Offset: 0x00143188
        private int method_307()
        {
            uint result;
            if (this.radioButton19.Checked)
            {
                result = (uint)this.method_309();
            }
            if (this.radioButton21.Checked)
            {
                result = (uint)this.method_310();
            }
            else
            {
                result = (uint)this.method_308();
            }
            return (int)result;
        }

        // Token: 0x06000358 RID: 856 RVA: 0x001431CC File Offset: 0x001431CC
        private unsafe int method_308()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            Struct63 @struct = 3;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            Struct32 struct3;
            for (uint num2 = 0U; num2 < 4U; num2 += 1U)
            {
                this.textBox6.AppendText("\r\n" + "Reading Bank " + Convert.ToString(num2) + ": ");
                this.string_2 = "Reading Bank " + Convert.ToString(num2) + ": ";
                this.string_3 = "";
                *(ref @struct + 1) = (byte)num2;
                for (uint num3 = 0U; num3 < 256U; num3 += 1U)
                {
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 1;
                    }
                    *(ref @struct + 2) = (byte)num3;
                    if (num3 % 16U == 0U)
                    {
                        this.textBox6.AppendText(".");
                        this.string_3 += ".";
                        Application.DoEvents();
                    }
                    Struct43 struct2;
                    if (num == 0)
                    {
                        if (this.method_269(114, 0, 4, (byte*)(&@struct)) == 0)
                        {
                            return 1;
                        }
                        if (this.method_272(114, 4, 0, 0, 1) == 0)
                        {
                            return 1;
                        }
                        if (this.method_266(114, (byte*)(&struct2)) == 0)
                        {
                            return 1;
                        }
                    }
                    else
                    {
                        this.method_228(num, byte_, 114, 34816, 3);
                        this.method_228(num, byte_, 114, 34817, (byte)num2);
                        this.method_228(num, byte_, 114, 34818, (byte)num3);
                        this.method_228(num, byte_, 114, 34819, 0);
                        this.method_231(num, byte_, 114, 4, 0, 0, 1);
                        for (uint num4 = 4U; num4 < 260U; num4 += 1U)
                        {
                            this.method_229(num, byte_, 114, (ushort)(num4 + 34816U), ref struct2 + (num4 - 4U));
                        }
                    }
                    byte* ptr = ref struct3 + (num3 * 256U + num2 * 65536U);

                    _Module.memcpy((void*)ptr, (void*)(&struct2), 256U);
                }
            }
            this.textBox6.AppendText("\r\n");
            this.string_2 = "Done! ";
            this.string_3 = "";

            _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct3), 262144U);
            return 0;
        }

        // Token: 0x06000359 RID: 857 RVA: 0x0014342C File Offset: 0x0014342C
        private unsafe int method_309()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            Struct63 @struct = 3;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            Struct32 struct3;
            for (uint num2 = 0U; num2 < 4U; num2 += 1U)
            {
                this.textBox6.AppendText("\r\n" + "Reading Bank " + Convert.ToString(num2) + ": ");
                this.string_2 = "Reading Bank " + Convert.ToString(num2) + ": ";
                this.string_3 = "";
                *(ref @struct + 1) = (byte)num2;
                for (uint num3 = 0U; num3 < 256U; num3 += 1U)
                {
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 1;
                    }
                    *(ref @struct + 2) = (byte)num3;
                    if (num3 % 16U == 0U)
                    {
                        this.textBox6.AppendText(".");
                        this.string_3 += ".";
                        Application.DoEvents();
                    }
                    Struct43 struct2;
                    if (num == 0)
                    {
                        if (this.method_277(114, 0, 4, (byte*)(&@struct)) == 0)
                        {
                            return 1;
                        }
                        if (this.method_279(114, 4, 0, 0, 1) == 0)
                        {
                            return 1;
                        }
                        if (this.method_274(114, (byte*)(&struct2)) == 0)
                        {
                            return 1;
                        }
                    }
                    else
                    {
                        this.method_234(num, byte_, 114, 34816, 3);
                        this.method_234(num, byte_, 114, 34817, (byte)num2);
                        this.method_234(num, byte_, 114, 34818, (byte)num3);
                        this.method_234(num, byte_, 114, 34819, 0);
                        this.method_236(num, byte_, 114, 4, 0, 0, 1);
                        for (uint num4 = 4U; num4 < 260U; num4 += 1U)
                        {
                            this.method_235(num, byte_, 114, (ushort)(num4 + 34816U), ref struct2 + (num4 - 4U));
                        }
                    }
                    byte* ptr = ref struct3 + (num3 * 256U + num2 * 65536U);

                    _Module.memcpy((void*)ptr, (void*)(&struct2), 256U);
                }
            }
            this.textBox6.AppendText("\r\n");
            this.string_2 = "Done! ";
            this.string_3 = "";

            _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct3), 262144U);
            return 0;
        }

        // Token: 0x0600035A RID: 858 RVA: 0x0014368C File Offset: 0x0014368C
        private unsafe int method_310()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            Struct63 @struct = 3;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            Struct32 struct3;
            for (uint num2 = 0U; num2 < 4U; num2 += 1U)
            {
                this.textBox6.AppendText("\r\n" + "Reading Bank " + Convert.ToString(num2) + ": ");
                this.string_2 = "Reading Bank " + Convert.ToString(num2) + ": ";
                this.string_3 = "";
                *(ref @struct + 1) = (byte)num2;
                for (uint num3 = 0U; num3 < 256U; num3 += 1U)
                {
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 1;
                    }
                    *(ref @struct + 2) = (byte)num3;
                    if (num3 % 16U == 0U)
                    {
                        this.textBox6.AppendText(".");
                        this.string_3 += ".";
                        Application.DoEvents();
                    }
                    Struct43 struct2;
                    if (num == 0)
                    {
                        if (this.method_283(114, 0, 4, (byte*)(&@struct)) == 0)
                        {
                            return 1;
                        }
                        if (this.method_285(114, 4, 0, 0, 1) == 0)
                        {
                            return 1;
                        }
                        if (this.method_281(114, (byte*)(&struct2)) == 0)
                        {
                            return 1;
                        }
                    }
                    else
                    {
                        this.method_242(num, byte_, 114, 34816, 3);
                        this.method_242(num, byte_, 114, 34817, (byte)num2);
                        this.method_242(num, byte_, 114, 34818, (byte)num3);
                        this.method_242(num, byte_, 114, 34819, 0);
                        this.method_244(num, byte_, 114, 4, 0, 0, 1);
                        for (uint num4 = 4U; num4 < 260U; num4 += 1U)
                        {
                            this.method_235(num, byte_, 114, (ushort)(num4 + 34816U), ref struct2 + (num4 - 4U));
                        }
                    }
                    byte* ptr = ref struct3 + (num3 * 256U + num2 * 65536U);

                    _Module.memcpy((void*)ptr, (void*)(&struct2), 256U);
                }
            }
            this.textBox6.AppendText("\r\n");
            this.string_2 = "Done! ";
            this.string_3 = "";

            _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct3), 262144U);
            return 0;
        }

        // Token: 0x0600035B RID: 859 RVA: 0x001438EC File Offset: 0x001438EC
        private unsafe int method_311()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.textBox6.AppendText("\r\n" + "Sending Chip Erase to Port " + this.label123.Text + "\r\n");
            this.method_228(ushort_, byte_, 114, 34816, 6);
            this.method_231(ushort_, byte_, 114, 1, 0, 0, 0);
            int result;
            if (this.method_232(ushort_, byte_, 114, 2) == 1)
            {
                result = 0;
            }
            else
            {
                if (string.Compare(this.label118.Text, "0xBF") == 0)
                {
                    this.method_228(ushort_, byte_, 114, 34816, 96);
                }
                else if (string.Compare(this.label118.Text, "0x1F") == 0)
                {
                    this.method_228(ushort_, byte_, 114, 34816, 98);
                }
                else
                {
                    this.method_228(ushort_, byte_, 114, 34816, 199);
                }
                this.method_231(ushort_, byte_, 114, 1, 0, 0, 0);
                this.textBox6.AppendText("Erasing:");
                this.string_2 = string.Concat("Erasing Chip: ");
                this.string_3 = "";
                if (this.method_232(ushort_, byte_, 114, 0) == 1)
                {
                    result = 0;
                }
                else
                {
                    this.textBox6.AppendText("\r\n");
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x0600035C RID: 860 RVA: 0x00143A48 File Offset: 0x00143A48
        private unsafe int method_312()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.textBox6.AppendText("\r\n" + "Sending Chip Erase to Port " + this.label123.Text + "\r\n");
            this.method_234(ushort_, byte_, 114, 34816, 6);
            this.method_236(ushort_, byte_, 114, 1, 0, 0, 0);
            int result;
            if (this.method_237(ushort_, byte_, 114, 2) == 1)
            {
                result = 0;
            }
            else
            {
                if (this.label118.Text == new string((sbyte*)(&_Module.struct35_132)))
                {
                    this.method_234(ushort_, byte_, 114, 34816, 96);
                }
                else if (this.label118.Text == new string((sbyte*)(&_Module.struct35_133)))
                {
                    this.method_234(ushort_, byte_, 114, 34816, 98);
                }
                else
                {
                    this.method_234(ushort_, byte_, 114, 34816, 199);
                }
                this.method_236(ushort_, byte_, 114, 1, 0, 0, 0);
                this.textBox6.AppendText("Erasing:");
                this.string_2 = string.Concat("Erasing Chip: ");
                this.string_3 = "";
                if (this.method_237(ushort_, byte_, 114, 0) == 1)
                {
                    result = 0;
                }
                else
                {
                    this.textBox6.AppendText("\r\n");
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x0600035D RID: 861 RVA: 0x00143BA4 File Offset: 0x00143BA4
        private unsafe int method_313()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.textBox6.AppendText("\r\n" + "Sending Chip Erase to Port " + this.label123.Text + "\r\n");
            this.method_242(ushort_, byte_, 114, 34816, 6);
            this.method_244(ushort_, byte_, 114, 1, 0, 0, 0);
            int result;
            if (this.method_245(ushort_, byte_, 114, 2) == 1)
            {
                result = 0;
            }
            else
            {
                if (this.label118.Text == new string((sbyte*)(&_Module.struct35_132)))
                {
                    this.method_242(ushort_, byte_, 114, 34816, 96);
                }
                else if (this.label118.Text == new string((sbyte*)(&_Module.struct35_133)))
                {
                    this.method_242(ushort_, byte_, 114, 34816, 98);
                }
                else
                {
                    this.method_242(ushort_, byte_, 114, 34816, 199);
                }
                this.method_244(ushort_, byte_, 114, 1, 0, 0, 0);
                this.textBox6.AppendText("Erasing:");
                this.string_2 = string.Concat("Erasing Chip: ");
                this.string_3 = "";
                if (this.method_245(ushort_, byte_, 114, 0) == 1)
                {
                    result = 0;
                }
                else
                {
                    this.textBox6.AppendText("\r\n");
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x0600035E RID: 862 RVA: 0x00143D00 File Offset: 0x00143D00
        private unsafe int method_314()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_228(ushort_, byte_, 114, 34816, 5);
            this.method_231(ushort_, byte_, 114, 1, 0, 1, 0);
            byte b;
            this.method_229(ushort_, byte_, 114, 1, &b);
            int result;
            if (b == 140)
            {
                this.textBox6.AppendText("Spi Status: 0x8C.. Already locked !" + "\r\n");
                result = 0;
            }
            else if (b == 142)
            {
                this.textBox6.AppendText("Spi Status: 0x8E.. Already locked !" + "\r\n");
                result = 0;
            }
            else
            {
                this.method_228(ushort_, byte_, 114, 34816, 6);
                this.method_231(ushort_, byte_, 114, 1, 0, 0, 0);
                this.method_228(ushort_, byte_, 114, 34816, 1);
                this.method_228(ushort_, byte_, 114, 34817, 140);
                this.method_231(ushort_, byte_, 114, 2, 0, 0, 0);

                _Module.Sleep(500);
                this.method_228(ushort_, byte_, 114, 34816, 5);
                this.method_231(ushort_, byte_, 114, 1, 0, 1, 0);
                this.method_229(ushort_, byte_, 114, 1, &b);
                if ((b & 128) != 0)
                {
                    this.textBox6.AppendText("Spi Status: 0x8C" + "\r\n");
                    result = 1;
                }
                else
                {
                    result = 0;
                }
            }
            return result;
        }

        // Token: 0x0600035F RID: 863 RVA: 0x00143E68 File Offset: 0x00143E68
        private unsafe int method_315()
        {
            byte b = 140;
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_228(ushort_, byte_, 114, 34816, 6);
            this.method_231(ushort_, byte_, 114, 1, 0, 0, 0);
            this.method_228(ushort_, byte_, 114, 34816, 1);
            this.method_228(ushort_, byte_, 114, 34817, 0);
            this.method_231(ushort_, byte_, 114, 2, 0, 0, 0);
            this.method_228(ushort_, byte_, 114, 34816, 5);
            this.method_231(ushort_, byte_, 114, 1, 0, 1, 0);
            this.method_229(ushort_, byte_, 114, 1, &b);
            Struct20 @struct;

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_121), b);
            string text = new string((sbyte*)(&_Module.struct19_0));
            text += new string((sbyte*)(&@struct));
            this.label122.Text = "Spi Status register 0x" + text;
            if ((b & 128) == 0)
            {

                _Module.Sleep(500);
                this.method_228(ushort_, byte_, 114, 34816, 5);
                this.method_231(ushort_, byte_, 114, 1, 0, 1, 0);
                this.method_229(ushort_, byte_, 114, 1, &b);
                if (b == 0)
                {
                    this.textBox6.AppendText("." + "\r\n" + "Spi Status: 0x00" + "\r\n");
                    this.button42.Text = new string((sbyte*)(&_Module.struct35_131));
                    this.button42.Enabled = true;
                    this.toolTip_0.SetToolTip(this.button42, "Click to lock Spi status register");
                    return 1;
                }
            }
            return 0;
        }

        // Token: 0x06000360 RID: 864 RVA: 0x0014400C File Offset: 0x0014400C
        private unsafe void method_316()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_228(ushort_, byte_, 114, 34816, 80);
            this.method_231(ushort_, byte_, 114, 1, 0, 0, 0);
            this.method_228(ushort_, byte_, 114, 34816, 1);
            this.method_228(ushort_, byte_, 114, 34817, 0);
            this.method_231(ushort_, byte_, 114, 2, 0, 0, 0);
        }

        // Token: 0x06000361 RID: 865 RVA: 0x00144094 File Offset: 0x00144094
        private unsafe int method_317()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_228(ushort_, byte_, 114, 34816, 5);
            this.method_231(ushort_, byte_, 114, 1, 0, 1, 0);
            byte result;
            this.method_229(ushort_, byte_, 114, 1, &result);
            return (int)result;
        }

        // Token: 0x06000362 RID: 866 RVA: 0x001440F8 File Offset: 0x001440F8
        private int method_318()
        {
            if (this.radioButton19.Checked)
            {
                if (this.method_320() == 1)
                {
                    return 1;
                }
            }
            else if (this.method_319() == 1)
            {
                return 1;
            }
            return 0;
        }

        // Token: 0x06000363 RID: 867 RVA: 0x00144130 File Offset: 0x00144130
        private unsafe int method_319()
        {
            Struct63 @struct = 6;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            if (num == 0)
            {
                if (this.method_269(114, 0, 4, (byte*)(&@struct)) == 0)
                {
                    return 1;
                }
                if (this.method_272(114, 1, 0, 0, 0) == 0)
                {
                    return 1;
                }
            }
            else
            {
                this.method_228(num, byte_, 114, 34816, 6);
                this.method_231(num, byte_, 114, 1, 0, 0, 0);
            }
            return 0;
        }

        // Token: 0x06000364 RID: 868 RVA: 0x001441C4 File Offset: 0x001441C4
        private unsafe int method_320()
        {
            Struct63 @struct = 6;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            if (num == 0)
            {
                if (this.method_277(114, 0, 4, (byte*)(&@struct)) == 0)
                {
                    return 1;
                }
                if (this.method_279(114, 1, 0, 0, 0) == 0)
                {
                    return 1;
                }
            }
            else
            {
                this.method_234(num, byte_, 114, 34816, 6);
                this.method_236(num, byte_, 114, 1, 0, 0, 0);
            }
            return 0;
        }

        // Token: 0x06000365 RID: 869 RVA: 0x00144258 File Offset: 0x00144258
        private unsafe int method_321()
        {
            byte b = 140;
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);

            _Module.smethod_2(num + 6, byte_);

            _Module.smethod_2(num + 3, 217);

            _Module.smethod_2(num + 7, 137);

            _Module.Sleep(2);

            _Module.smethod_2(num + 6, byte_);
            byte b2 = _Module.smethod_1(num + 7);
            int result;
            if (b2 != 114)
            {
                Struct20 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_121), b);
                string text = new string((sbyte*)(&_Module.struct19_0));
                text += new string((sbyte*)(&@struct));
                this.label122.Text = "Status 0x" + text;
                result = 0;
            }
            else
            {
                this.method_234(num, byte_, 114, 34816, 6);
                this.method_236(num, byte_, 114, 1, 0, 0, 0);
                this.method_234(num, byte_, 114, 34816, 1);
                this.method_234(num, byte_, 114, 34817, 0);
                this.method_236(num, byte_, 114, 2, 0, 0, 0);
                this.method_234(num, byte_, 114, 34816, 5);
                this.method_236(num, byte_, 114, 1, 0, 1, 0);
                this.method_235(num, byte_, 114, 1, &b);
                Struct20 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct35_121), b);
                string text = new string((sbyte*)(&_Module.struct19_0));
                text += new string((sbyte*)(&@struct));
                this.label122.Text = "Spi Status register 0x" + text;
                if ((b & 128) == 0)
                {

                    _Module.Sleep(500);
                    this.method_234(num, byte_, 114, 34816, 5);
                    this.method_236(num, byte_, 114, 1, 0, 1, 0);
                    this.method_235(num, byte_, 114, 1, &b);
                    if (b == 0)
                    {
                        this.textBox6.AppendText("\r\n" + "Spi Status: 0x00" + "\r\n");
                        this.button42.Text = new string((sbyte*)(&_Module.struct35_131));
                        this.button42.Enabled = true;
                        this.toolTip_0.SetToolTip(this.button42, "Click to lock Spi status register");

                        _Module.MessageBeep(0U);

                        _Module.Beep(500, 500);

                        _Module.MessageBeep(0U);

                        _Module.Beep(750, 500);

                        _Module.MessageBeep(0U);

                        _Module.Beep(500, 500);
                        return 1;
                    }
                }
                result = 0;
            }
            return result;
        }

        // Token: 0x06000366 RID: 870 RVA: 0x001444C8 File Offset: 0x001444C8
        private unsafe int method_322()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_234(ushort_, byte_, 114, 34816, 5);
            this.method_236(ushort_, byte_, 114, 1, 0, 1, 0);
            byte b;
            this.method_235(ushort_, byte_, 114, 1, &b);
            int result;
            if (b == 140)
            {
                this.textBox6.AppendText("Spi Status: 0x8C.. Already locked !" + "\r\n");
                result = 0;
            }
            else if (b == 142)
            {
                this.textBox6.AppendText("Spi Status: 0x8E.. Already locked !" + "\r\n");
                result = 0;
            }
            else
            {
                this.method_234(ushort_, byte_, 114, 34816, 6);
                this.method_236(ushort_, byte_, 114, 1, 0, 0, 0);
                this.method_234(ushort_, byte_, 114, 34816, 1);
                this.method_234(ushort_, byte_, 114, 34817, 140);
                this.method_236(ushort_, byte_, 114, 2, 0, 0, 0);

                _Module.Sleep(500);
                this.method_234(ushort_, byte_, 114, 34816, 5);
                this.method_236(ushort_, byte_, 114, 1, 0, 1, 0);
                this.method_235(ushort_, byte_, 114, 1, &b);
                if ((b & 128) != 0)
                {
                    this.textBox6.AppendText("Spi Status: 0x8C" + "\r\n");
                    result = 1;
                }
                else
                {
                    result = 0;
                }
            }
            return result;
        }

        // Token: 0x06000367 RID: 871 RVA: 0x00144630 File Offset: 0x00144630
        private unsafe int method_323()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_234(ushort_, byte_, 114, 34816, 5);
            this.method_236(ushort_, byte_, 114, 1, 0, 1, 0);
            byte result;
            this.method_235(ushort_, byte_, 114, 1, &result);
            return (int)result;
        }

        // Token: 0x06000368 RID: 872 RVA: 0x00144694 File Offset: 0x00144694
        private unsafe int method_324()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_234(ushort_, byte_, 114, 34816, 6);
            this.method_236(ushort_, byte_, 114, 1, 0, 0, 0);
            this.method_234(ushort_, byte_, 114, 34816, 1);
            this.method_234(ushort_, byte_, 114, 34817, 0);
            this.method_236(ushort_, byte_, 114, 2, 0, 0, 0);
            this.method_234(ushort_, byte_, 114, 34816, 5);
            this.method_236(ushort_, byte_, 114, 1, 0, 1, 0);
            byte b;
            this.method_235(ushort_, byte_, 114, 1, &b);
            if ((b & 128) == 0)
            {

                _Module.Sleep(500);
                this.method_234(ushort_, byte_, 114, 34816, 5);
                this.method_236(ushort_, byte_, 114, 1, 0, 1, 0);
                this.method_235(ushort_, byte_, 114, 1, &b);
                if (b == 0)
                {
                    return 1;
                }
            }
            return 0;
        }

        // Token: 0x06000369 RID: 873 RVA: 0x00144790 File Offset: 0x00144790
        private unsafe int method_325()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.method_242(ushort_, byte_, 114, 34816, 5);
            this.method_244(ushort_, byte_, 114, 1, 0, 1, 0);
            byte result;
            this.method_243(ushort_, byte_, 114, 1, &result);
            return (int)result;
        }

        // Token: 0x0600036A RID: 874 RVA: 0x001447F4 File Offset: 0x001447F4
        private unsafe int method_326()
        {
            Struct63 @struct = 6;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            Struct76 struct2 = 2;
            *(ref struct2 + 1) = 0;
            *(ref struct2 + 2) = 0;
            *(ref struct2 + 3) = 0;
            Struct32 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 4780), 262144U);
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            for (uint num2 = 0U; num2 < 4U; num2 += 1U)
            {
                this.textBox6.AppendText("Writing Bank " + Convert.ToString(num2) + ": ");
                this.string_2 = "Writing Bank " + Convert.ToString(num2) + ": ";
                this.string_3 = "";
                *(ref struct2 + 1) = (byte)num2;
                for (uint num3 = 0U; num3 < 256U; num3 += 1U)
                {
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 1;
                    }
                    if (num3 % 16U == 0U)
                    {
                        this.textBox6.AppendText(".");
                        this.string_3 += ".";
                        Application.DoEvents();
                    }
                    if (num == 0)
                    {
                        *(ref struct2 + 2) = (byte)num3;

                        _Module.memcpy(ref struct2 + 4, ref struct3 + (num3 * 256U + num2 * 65536U), 256U);
                        if (this.method_270(114, (byte*)(&struct2)) == 0)
                        {
                            return 1;
                        }
                    }
                    else
                    {
                        this.method_228(num, byte_, 114, 34816, 6);
                        this.method_231(num, byte_, 114, 1, 0, 0, 0);
                        if (this.method_232(num, byte_, 114, 2) == 1)
                        {
                            return 1;
                        }
                        this.method_228(num, byte_, 114, 34816, 2);
                        this.method_228(num, byte_, 114, 34817, (byte)num2);
                        this.method_228(num, byte_, 114, 34818, (byte)num3);
                        this.method_228(num, byte_, 114, 34819, 0);
                        for (uint num4 = 0U; num4 < 256U; num4 += 1U)
                        {
                            this.method_228(num, byte_, 114, (ushort)(num4 + 34820U), *(ref struct3 + (num4 + num3 * 256U + num2 * 65536U)));
                        }
                        this.method_231(num, byte_, 114, 4, 1, 0, 0);
                        if (this.method_232(num, byte_, 114, 0) == 1)
                        {
                            return 1;
                        }
                    }
                }
                this.textBox6.AppendText("\r\n");
                this.string_2 = "Done! ";
                this.string_3 = "";
            }
            return 0;
        }

        // Token: 0x0600036B RID: 875 RVA: 0x00144A90 File Offset: 0x00144A90
        private unsafe int method_327()
        {
            Struct63 @struct = 6;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            Struct76 struct2 = 2;
            *(ref struct2 + 1) = 0;
            *(ref struct2 + 2) = 0;
            *(ref struct2 + 3) = 0;
            Struct32 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 4780), 262144U);
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            for (uint num2 = 0U; num2 < 4U; num2 += 1U)
            {
                this.textBox6.AppendText("Writing Bank " + Convert.ToString(num2) + ": ");
                this.string_2 = "Writing Bank " + Convert.ToString(num2) + ": ";
                this.string_3 = "";
                *(ref struct2 + 1) = (byte)num2;
                for (uint num3 = 0U; num3 < 256U; num3 += 1U)
                {
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 1;
                    }
                    if (num3 % 16U == 0U)
                    {
                        this.textBox6.AppendText(".");
                        this.string_3 += ".";
                        Application.DoEvents();
                    }
                    if (num == 0)
                    {
                        *(ref struct2 + 2) = (byte)num3;

                        _Module.memcpy(ref struct2 + 4, ref struct3 + (num3 * 256U + num2 * 65536U), 256U);
                        if (this.method_278(114, (byte*)(&struct2)) == 0)
                        {
                            return 1;
                        }
                    }
                    else
                    {
                        this.method_234(num, byte_, 114, 34816, 6);
                        this.method_236(num, byte_, 114, 1, 0, 0, 0);
                        if (this.method_237(num, byte_, 114, 2) == 1)
                        {
                            return 1;
                        }
                        this.method_234(num, byte_, 114, 34816, 2);
                        this.method_234(num, byte_, 114, 34817, (byte)num2);
                        this.method_234(num, byte_, 114, 34818, (byte)num3);
                        this.method_234(num, byte_, 114, 34819, 0);
                        for (uint num4 = 0U; num4 < 256U; num4 += 1U)
                        {
                            this.method_234(num, byte_, 114, (ushort)(num4 + 34820U), *(ref struct3 + (num4 + num3 * 256U + num2 * 65536U)));
                        }
                        this.method_236(num, byte_, 114, 4, 1, 0, 0);
                        if (this.method_237(num, byte_, 114, 0) == 1)
                        {
                            return 1;
                        }
                    }
                }
                this.textBox6.AppendText("\r\n");
                this.string_2 = "Done! ";
                this.string_3 = "";
            }
            return 0;
        }

        // Token: 0x0600036C RID: 876 RVA: 0x00144D2C File Offset: 0x00144D2C
        private unsafe int method_328()
        {
            Struct63 @struct = 6;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            Struct76 struct2 = 2;
            *(ref struct2 + 1) = 0;
            *(ref struct2 + 2) = 0;
            *(ref struct2 + 3) = 0;
            Struct32 struct3;

            _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 4780), 262144U);
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            for (uint num2 = 0U; num2 < 4U; num2 += 1U)
            {
                this.textBox6.AppendText("Writing Bank " + Convert.ToString(num2) + ": ");
                this.string_2 = "Writing Bank " + Convert.ToString(num2) + ": ";
                this.string_3 = "";
                *(ref struct2 + 1) = (byte)num2;
                for (uint num3 = 0U; num3 < 256U; num3 += 1U)
                {
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 1;
                    }
                    if (num3 % 16U == 0U)
                    {
                        this.textBox6.AppendText(".");
                        this.string_3 += ".";
                        Application.DoEvents();
                    }
                    if (num == 0)
                    {
                        *(ref struct2 + 2) = (byte)num3;

                        _Module.memcpy(ref struct2 + 4, ref struct3 + (num3 * 256U + num2 * 65536U), 256U);
                        if (this.method_284(114, (byte*)(&struct2)) == 0)
                        {
                            return 1;
                        }
                    }
                    else
                    {
                        this.method_242(num, byte_, 114, 34816, 6);
                        this.method_244(num, byte_, 114, 1, 0, 0, 0);
                        if (this.method_245(num, byte_, 114, 2) == 1)
                        {
                            return 1;
                        }
                        this.method_242(num, byte_, 114, 34816, 2);
                        this.method_242(num, byte_, 114, 34817, (byte)num2);
                        this.method_242(num, byte_, 114, 34818, (byte)num3);
                        this.method_242(num, byte_, 114, 34819, 0);
                        for (uint num4 = 0U; num4 < 256U; num4 += 1U)
                        {
                            this.method_242(num, byte_, 114, (ushort)(num4 + 34820U), *(ref struct3 + (num4 + num3 * 256U + num2 * 65536U)));
                        }
                        this.method_244(num, byte_, 114, 4, 1, 0, 0);
                        if (this.method_245(num, byte_, 114, 0) == 1)
                        {
                            return 1;
                        }
                    }
                }
                this.textBox6.AppendText("\r\n");
                this.string_2 = "Done! ";
                this.string_3 = "";
            }
            return 0;
        }

        // Token: 0x0600036D RID: 877 RVA: 0x00144FC8 File Offset: 0x00144FC8
        private unsafe int method_329()
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.textBox6.AppendText("\r\n" + "Sending Sector Erase to Port " + this.label123.Text + "\r\n");
            this.method_234(ushort_, byte_, 114, 34816, 6);
            this.method_236(ushort_, byte_, 114, 1, 0, 0, 0);
            int result;
            if (this.method_237(ushort_, byte_, 114, 2) == 1)
            {
                result = 0;
            }
            else
            {
                this.method_234(ushort_, byte_, 114, 34816, 32);
                this.method_234(ushort_, byte_, 114, 34817, 3);
                this.method_234(ushort_, byte_, 114, 34818, 224);
                this.method_234(ushort_, byte_, 114, 34819, 0);
                this.method_236(ushort_, byte_, 114, 4, 0, 0, 0);
                if (this.method_237(ushort_, byte_, 114, 0) == 1)
                {
                    result = 0;
                }
                else
                {
                    this.textBox6.AppendText("Erasing: 0x3E000");
                    this.string_2 = string.Concat("Erasing:  0x3E000");
                    this.string_3 = "";
                    this.textBox6.AppendText("\r\n");
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x0600036E RID: 878 RVA: 0x00145100 File Offset: 0x00145100
        private unsafe int method_330(byte* pByte_0)
        {
            Struct63 @struct = 6;
            *(ref @struct + 1) = 0;
            *(ref @struct + 2) = 0;
            *(ref @struct + 3) = 0;
            Struct76 struct2 = 2;
            *(ref struct2 + 1) = 0;
            *(ref struct2 + 2) = 0;
            *(ref struct2 + 3) = 0;
            Struct33 struct3;

            _Module.memcpy((void*)(&struct3), (void*)pByte_0, 4096U);
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            byte byte_ = *(ref _Module.struct38_0 + selectedIndex * 72U + 4);
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            this.textBox6.AppendText(string.Concat("Writing: 0x3E000 "));
            this.string_2 = string.Concat("Writing: 0x3E000 ");
            this.string_3 = "";
            uint num2 = 3U;
            *(ref struct2 + 1) = 3;
            uint num3 = 224U;
            while (num3 < 240U)
            {
                if (_Module.GetAsyncKeyState(27) == null)
                {
                    if (num == 0)
                    {
                        *(ref struct2 + 2) = (byte)num3;

                        _Module.memcpy(ref struct2 + 4, ref struct3 + (num3 - 224U) * 256U, 256U);
                        if (this.method_278(114, (byte*)(&struct2)) == 0)
                        {
                            return 0;
                        }
                    }
                    else
                    {
                        this.method_234(num, byte_, 114, 34816, 6);
                        this.method_236(num, byte_, 114, 1, 0, 0, 0);
                        if (this.method_237(num, byte_, 114, 2) == 1)
                        {
                            return 0;
                        }
                        this.method_234(num, byte_, 114, 34816, 2);
                        this.method_234(num, byte_, 114, 34817, (byte)num2);
                        this.method_234(num, byte_, 114, 34818, (byte)num3);
                        this.method_234(num, byte_, 114, 34819, 0);
                        for (uint num4 = 0U; num4 < 256U; num4 += 1U)
                        {
                            this.method_234(num, byte_, 114, (ushort)(num4 + 34820U), *(ref struct3 + (num4 + (num3 - 224U) * 256U)));
                        }
                        this.method_236(num, byte_, 114, 4, 1, 0, 0);
                        if (this.method_237(num, byte_, 114, 0) == 1)
                        {
                            return 0;
                        }
                    }
                    num3 += 1U;
                    continue;
                }
                this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                return 0;
            }
            this.textBox6.AppendText("\r\n");
            this.string_2 = "Done! ";
            this.string_3 = "";
            return 1;
        }

        // Token: 0x0600036F RID: 879 RVA: 0x003CBB0C File Offset: 0x00313B0C
        private unsafe int method_331()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num2;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num2 = 0U;
                }
                else
                {
                    num2 = 16U;
                }
                if (!this.bool_2)
                {
                    string text = "" + "You are about to send the mode-B command to your Hitachi Drive." + "\n";
                    text = text + "For Best results open drive tray now and power off the drive." + "\n";
                    text = text + "Then press OK to continue. When dots show, power on the drive." + "\n";
                    text = text + "Drive should respond to normal windows Inquiry and close." + "\n";
                    if (this.radioButton17.Checked)
                    {
                        text = text + "Wait 15 seconds for Windows to recognise drive.." + "\n";
                    }
                    text = text + "\n" + "When done, it's important to confirm Mode-B with double press to" + "\n";
                    text = text + "open and close drive tray." + "\n\n";
                    text += "Press Escape to cancel.";

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    uint num3 = (uint)MessageBox.Show(text, "Send Mode-B Command", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    if (num3 == 2U)
                    {
                        return 1;
                    }
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, num, 0, 1, 250U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 231;
                *(ref @struct + 1) = 72;
                *(ref @struct + 2) = 73;
                *(ref @struct + 3) = 84;
                *(ref @struct + 4) = 48;
                *(ref @struct + 5) = 144;
                *(ref @struct + 6) = 144;
                *(ref @struct + 7) = 208;
                *(ref @struct + 8) = 1;
                while (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num2, 1, &gstruct) != null)
                {
                    this.textBox6.AppendText(".");
                    Application.DoEvents();

                    _Module.Sleep(250);
                    if (_Module.GetAsyncKeyState(27) != null)
                    {
                        this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                        return 1;
                    }
                }

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 18;
                *(ref @struct + 1) = 0;
                *(ref @struct + 2) = 0;
                *(ref @struct + 3) = 0;
                *(ref @struct + 4) = 36;
                *(ref @struct + 5) = 0;
                Struct100 struct2;
                uint num4;
                if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num2, 512, (void*)(&struct2), &num4, 36U, 1, &gstruct) != null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Inquiry command Failed !", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    result = 1;
                }
                else
                {
                    this.method_5((byte*)(&struct2), 36U, 0U);
                    this.textBox6.AppendText("\r\n" + "Drive, answers normal Windows Inquiry 12 0 0 0 24 0" + "\r\n");
                    this.textBox6.AppendText(this.string_0 + "\r\n");
                    this.textBox6.AppendText("Mode-B Done! " + "\r\n");
                    if (*(ref struct2 + 34) == 53)
                    {
                        this.radioButton4.Checked = true;
                    }
                    else if (*(ref struct2 + 34) == 55)
                    {
                        this.radioButton5.Checked = true;
                    }
                    else if (*(ref struct2 + 34) == 52 & *(ref struct2 + 35) != 48)
                    {
                        this.radioButton3.Checked = true;
                    }
                    else if (*(ref struct2 + 34) == 51 & *(ref struct2 + 35) == 54)
                    {
                        this.radioButton2.Checked = true;
                    }
                    else
                    {
                        this.radioButton1.Checked = true;
                    }
                    uint num5 = 0U;
                    for (; ; )
                    {

                        _Module.memset((void*)(&@struct), 0, 12U);
                        @struct = 27;
                        *(ref @struct + 4) = 3;
                        if (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num2, 1, &gstruct) == null)
                        {
                            goto IL_3BD;
                        }

                        _Module.Sleep(200);
                        if (num5 == 10U)
                        {
                            break;
                        }
                        num5 += 1U;
                    }
                    return 1;
                IL_3BD:
                    if (num == 0 && this.checkBox15.CheckState == CheckState.Unchecked)
                    {
                        this.method_424(1);
                        this.bool_9 = true;

                        _Module.Sleep(10);
                        this.method_424(5);

                        _Module.Sleep(25);
                        this.method_424(7);
                        this.method_422();
                    }
                    result = 0;
                }
            }
            return result;
        }

        // Token: 0x06000370 RID: 880 RVA: 0x0014573C File Offset: 0x0014573C
        private void button27_Click(object sender, EventArgs e)
        {
            if (this.radioButton17.Checked)
            {
                this.textBox6.AppendText("Scanning for hardware changes" + "\r\n");
                if (_Module.smethod_121() != null)
                {
                    this.textBox6.AppendText("Scan returned an error!" + "\r\n");
                }
            }
        }

        // Token: 0x06000371 RID: 881 RVA: 0x00145794 File Offset: 0x00145794
        private unsafe void method_332()
        {
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                string text = this.comboBox16.Text;
                Struct84 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), text);
                this.textBox6.AppendText("Attempting to remove " + text + "\r\n");
                int num = _Module.smethod_122((byte*)(&@struct));
                if (num == 1)
                {
                    this.textBox6.AppendText("Removal of " + text + " Failed!" + "\r\n");
                }
                else
                {
                    this.textBox6.AppendText("Done!" + "\r\n");
                }
                this.method_360();
            }
        }

        // Token: 0x06000372 RID: 882 RVA: 0x00145880 File Offset: 0x00145880
        private void method_333()
        {
            this.textBox6.AppendText("Enabling All CDROMS" + "\r\n");

            _Module.smethod_125();
            this.textBox6.AppendText("Done!" + "\r\n");
            this.method_360();
        }

        // Token: 0x06000373 RID: 883 RVA: 0x001458D0 File Offset: 0x001458D0
        private unsafe void method_334()
        {
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                string text = this.comboBox16.Text;
                Struct84 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), text);
                this.textBox6.AppendText("Attempting to disable " + text + "\r\n");
                int num = _Module.smethod_124((byte*)(&@struct));
                if (num == 1)
                {
                    this.textBox6.AppendText("Disabling of " + text + " Failed!" + "\r\n");
                }
                else
                {
                    this.textBox6.AppendText("Done!" + "\r\n");
                }
                this.method_360();
            }
        }

        // Token: 0x06000374 RID: 884 RVA: 0x001459BC File Offset: 0x001459BC
        private unsafe void method_335(string string_25)
        {
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct84 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct18_9), string_25.Substring(0, 1));
                this.textBox6.AppendText("Attempting to disable " + string_25 + "\r\n");
                int num = _Module.smethod_124((byte*)(&@struct));
                if (num == 1)
                {
                    this.textBox6.AppendText("Disabling of " + string_25 + " Failed!" + "\r\n");
                }
                else
                {
                    this.textBox6.AppendText("Done!" + "\r\n");
                }
                this.method_360();
            }
        }

        // Token: 0x06000375 RID: 885 RVA: 0x00145AA0 File Offset: 0x00145AA0
        private void button11_Click(object sender, EventArgs e)
        {
            this.method_336();
        }

        // Token: 0x06000376 RID: 886 RVA: 0x00145AB4 File Offset: 0x00145AB4
        private unsafe void method_336()
        {
            if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                uint count = (uint)this.comboBox1.Items.Count;
                ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
                if (this.radioButton17.Checked && num == 0 && count != 0U)
                {
                    this.method_424(2);
                    this.bool_9 = false;

                    _Module.Sleep(10);
                }
                if (this.method_331() == 0 && this.radioButton17.Checked)
                {
                    if (num == 0 && count != 0U)
                    {
                        this.method_424(1);
                        this.bool_9 = true;

                        _Module.Sleep(10);
                    }
                    this.Cursor = Cursors.WaitCursor;

                    _Module.Sleep(3000);
                    Application.DoEvents();
                    this.method_361();
                    this.Cursor = Cursors.Arrow;
                }
            }
        }

        // Token: 0x06000377 RID: 887 RVA: 0x00145B8C File Offset: 0x00145B8C
        private void button23_Click(object sender, EventArgs e)
        {
            string text = "" + "You are about to scan for your Hitachi Drive and send USmodeB." + "\n";
            text = text + "You will need to use the JungleUSB driver for this to work." + "\n";
            text = text + "Connect the USB-2-SATA to the USB port with the drive connected" + "\n";
            text = text + "and powered on, wait 15 seconds, then press OK." + "\n\n";
            text += "Press Escape to cancel.";

            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
            int num = (int)MessageBox.Show(text, "USmodeB", MessageBoxButtons.OKCancel, MessageBoxIcon.Question);

            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            if (num != 2)
            {
                if (this.method_361() != 0)
                {
                    this.method_362();
                }
            }
        }

        // Token: 0x06000378 RID: 888 RVA: 0x00145C40 File Offset: 0x00145C40
        private unsafe void method_337()
        {
            if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                uint count = (uint)this.comboBox1.Items.Count;
                ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num2;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num2 = 0U;
                }
                else
                {
                    num2 = 16U;
                }
                if (this.radioButton17.Checked && num == 0 && count != 0U)
                {
                    this.method_424(2);
                    this.bool_9 = false;

                    _Module.Sleep(100);
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, num, 0, 1, 10000U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 27;
                *(ref @struct + 4) = 2;
                if (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num2, 1, &gstruct) != null)
                {

                    _Module.Sleep(1500);
                    if (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num2, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Drive Aborted the command" + "\r\n");
                    }
                    else
                    {
                        this.textBox6.AppendText("Tray Opening" + "\r\n");
                    }
                }
                else
                {
                    this.textBox6.AppendText("Tray Opening" + "\r\n");
                }
                if (this.radioButton17.Checked && num == 0 && count != 0U)
                {
                    this.method_424(1);
                    this.bool_9 = true;
                }
            }
        }

        // Token: 0x06000379 RID: 889 RVA: 0x00145D98 File Offset: 0x00145D98
        private unsafe void method_338()
        {
            if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                uint count = (uint)this.comboBox1.Items.Count;
                ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num2;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num2 = 0U;
                }
                else
                {
                    num2 = 16U;
                }
                if (this.radioButton17.Checked && num == 0 && count != 0U)
                {
                    this.method_424(2);
                    this.bool_9 = false;

                    _Module.Sleep(100);
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, num, 0, 1, 10000U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 27;
                *(ref @struct + 4) = 3;
                if (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num2, 1, &gstruct) != null)
                {

                    _Module.Sleep(1500);
                    if (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num2, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Drive Aborted the command" + "\r\n");
                    }
                    else
                    {
                        this.textBox6.AppendText("Tray Closing" + "\r\n");
                    }
                }
                else
                {
                    this.textBox6.AppendText("Tray Closing" + "\r\n");
                }
                if (this.radioButton17.Checked && num == 0 && count != 0U)
                {
                    this.method_424(1);
                    this.bool_9 = true;

                    _Module.Sleep(10);
                    this.method_424(5);

                    _Module.Sleep(25);
                    this.method_424(7);
                }
            }
        }

        // Token: 0x0600037A RID: 890 RVA: 0x00145F0C File Offset: 0x00145F0C
        private unsafe int method_339()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 1000U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                if (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num, 1, &gstruct) != null)
                {
                    result = 1;
                }
                else
                {

                    _Module.memset((void*)(&@struct), 0, 12U);
                    @struct = 3;
                    *(ref @struct + 4) = 18;
                    Struct55 struct2;
                    uint num2;
                    result = ((_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct2), &num2, 20U, 1, &gstruct) == null) ? (((*(ref struct2 + 2) & 15) != 0 || *(ref struct2 + 12) != 0 || *(ref struct2 + 13) != 0) ? 1 : 0) : 1);
                }
            }
            return result;
        }

        // Token: 0x0600037B RID: 891 RVA: 0x00145FE8 File Offset: 0x00145FE8
        private unsafe void method_340()
        {
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 @struct;
                byte* ptr = ref @struct + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct2;

                    _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {

                        _Module.memset((void*)(&@struct), 0, 62U);
                        *(ref @struct + 28) = 27;
                        *(ref @struct + 32) = 2;
                        @struct = 44;
                        *(ref @struct + 6) = 12;
                        *(ref @struct + 7) = 18;
                        *(ref @struct + 8) = 2;
                        *(ref @struct + 16) = 15;
                        *(ref @struct + 24) = 44;
                        uint num;
                        if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num), null) == null || (ptr[2] & 15) != 0)
                        {
                            this.textBox6.AppendText("Tray Open Failed" + "\r\n");
                        }

                        _Module.CloseHandle(ptr3);
                    }
                }
            }
        }

        // Token: 0x0600037C RID: 892 RVA: 0x00146130 File Offset: 0x00146130
        private unsafe void method_341()
        {
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 @struct;
                byte* ptr = ref @struct + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct2;

                    _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {

                        _Module.memset((void*)(&@struct), 0, 62U);
                        *(ref @struct + 28) = 27;
                        *(ref @struct + 32) = 3;
                        @struct = 44;
                        *(ref @struct + 6) = 12;
                        *(ref @struct + 7) = 18;
                        *(ref @struct + 8) = 2;
                        *(ref @struct + 16) = 15;
                        *(ref @struct + 24) = 44;
                        uint num;
                        if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num), null) == null || (ptr[2] & 15) != 0)
                        {
                            this.textBox6.AppendText("Tray Close Failed" + "\r\n");
                        }

                        _Module.CloseHandle(ptr3);
                    }
                }
            }
        }

        // Token: 0x0600037D RID: 893 RVA: 0x00146278 File Offset: 0x00146278
        private unsafe void method_342()
        {
            Struct52 @struct = 137;
            *(ref @struct + 1) = 137;
            *(ref @struct + 2) = 137;
            *(ref @struct + 3) = 134;
            *(ref @struct + 4) = 134;
            *(ref @struct + 5) = 134;
            *(ref @struct + 6) = 134;
            *(ref @struct + 7) = 134;
            *(ref @struct + 8) = 134;
            *(ref @struct + 9) = 134;
            *(ref @struct + 10) = 134;
            *(ref @struct + 11) = 134;
            Struct52 struct2 = 216;
            *(ref struct2 + 1) = 217;
            *(ref struct2 + 2) = 218;
            *(ref struct2 + 3) = 221;
            *(ref struct2 + 4) = 222;
            *(ref struct2 + 5) = 223;
            *(ref struct2 + 6) = 217;
            *(ref struct2 + 7) = 218;
            *(ref struct2 + 8) = 219;
            *(ref struct2 + 9) = 233;
            *(ref struct2 + 10) = 234;
            *(ref struct2 + 11) = 235;
            Struct52 struct3 = 35;
            *(ref struct3 + 1) = 142;
            *(ref struct3 + 2) = 16;
            *(ref struct3 + 3) = 35;
            *(ref struct3 + 4) = 142;
            *(ref struct3 + 5) = 16;
            *(ref struct3 + 6) = 68;
            *(ref struct3 + 7) = 28;
            *(ref struct3 + 8) = 32;
            *(ref struct3 + 9) = 68;
            *(ref struct3 + 10) = 28;
            *(ref struct3 + 11) = 32;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 struct4;
                byte* ptr = ref struct4 + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct5;

                    _Module.sprintf((sbyte*)(&struct5), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct5), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {
                        for (int i = 0; i < 12; i++)
                        {

                            _Module.memset((void*)(&struct4), 0, 62U);
                            *(ref struct4 + 28) = 241;
                            *(ref struct4 + 29) = 1;
                            *(ref struct4 + 32) = *(ref @struct + i);
                            *(ref struct4 + 33) = *(ref struct2 + i);
                            *(ref struct4 + 37) = *(ref struct3 + i);
                            struct4 = 44;
                            *(ref struct4 + 6) = 12;
                            *(ref struct4 + 7) = 18;
                            *(ref struct4 + 8) = 2;
                            *(ref struct4 + 16) = 15;
                            *(ref struct4 + 24) = 44;
                            uint num;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&struct4), 62, (void*)(&struct4), 62, (uint*)(&num), null) == null || (ptr[2] & 15) != 0)
                            {
                                this.textBox6.AppendText("Command Failed" + "\r\n");
                                return;
                            }
                        }
                        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");

                        _Module.CloseHandle(ptr3);
                    }
                }
            }
        }

        // Token: 0x0600037E RID: 894 RVA: 0x00146560 File Offset: 0x00146560
        private unsafe void method_343()
        {
            Struct52 @struct = 134;
            *(ref @struct + 1) = 134;
            *(ref @struct + 2) = 134;
            *(ref @struct + 3) = 134;
            *(ref @struct + 4) = 134;
            *(ref @struct + 5) = 134;
            *(ref @struct + 6) = 134;
            *(ref @struct + 7) = 134;
            *(ref @struct + 8) = 134;
            *(ref @struct + 9) = 134;
            *(ref @struct + 10) = 134;
            *(ref @struct + 11) = 134;
            Struct52 struct2 = 130;
            *(ref struct2 + 1) = 131;
            *(ref struct2 + 2) = 132;
            *(ref struct2 + 3) = 221;
            *(ref struct2 + 4) = 222;
            *(ref struct2 + 5) = 223;
            *(ref struct2 + 6) = 217;
            *(ref struct2 + 7) = 218;
            *(ref struct2 + 8) = 219;
            *(ref struct2 + 9) = 233;
            *(ref struct2 + 10) = 234;
            *(ref struct2 + 11) = 235;
            Struct52 struct3 = 35;
            *(ref struct3 + 1) = 142;
            *(ref struct3 + 2) = 16;
            *(ref struct3 + 3) = 35;
            *(ref struct3 + 4) = 142;
            *(ref struct3 + 5) = 16;
            *(ref struct3 + 6) = 68;
            *(ref struct3 + 7) = 28;
            *(ref struct3 + 8) = 32;
            *(ref struct3 + 9) = 68;
            *(ref struct3 + 10) = 28;
            *(ref struct3 + 11) = 32;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 struct4;
                byte* ptr = ref struct4 + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct5;

                    _Module.sprintf((sbyte*)(&struct5), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct5), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {
                        for (int i = 0; i < 12; i++)
                        {

                            _Module.memset((void*)(&struct4), 0, 62U);
                            *(ref struct4 + 28) = 241;
                            *(ref struct4 + 29) = 1;
                            *(ref struct4 + 32) = *(ref @struct + i);
                            *(ref struct4 + 33) = *(ref struct2 + i);
                            *(ref struct4 + 37) = *(ref struct3 + i);
                            struct4 = 44;
                            *(ref struct4 + 6) = 12;
                            *(ref struct4 + 7) = 18;
                            *(ref struct4 + 8) = 2;
                            *(ref struct4 + 16) = 15;
                            *(ref struct4 + 24) = 44;
                            uint num;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&struct4), 62, (void*)(&struct4), 62, (uint*)(&num), null) == null || (ptr[2] & 15) != 0)
                            {
                                this.textBox6.AppendText("Command Failed" + "\r\n");
                                return;
                            }
                        }
                        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");

                        _Module.CloseHandle(ptr3);
                    }
                }
            }
        }

        // Token: 0x0600037F RID: 895 RVA: 0x00146848 File Offset: 0x00146848
        private unsafe void method_344()
        {
            Struct52 @struct = 138;
            *(ref @struct + 1) = 138;
            *(ref @struct + 2) = 138;
            *(ref @struct + 3) = 142;
            *(ref @struct + 4) = 142;
            *(ref @struct + 5) = 142;
            *(ref @struct + 6) = 142;
            *(ref @struct + 7) = 142;
            *(ref @struct + 8) = 142;
            *(ref @struct + 9) = 142;
            *(ref @struct + 10) = 142;
            *(ref @struct + 11) = 142;
            Struct52 struct2 = 90;
            *(ref struct2 + 1) = 91;
            *(ref struct2 + 2) = 92;
            *(ref struct2 + 3) = 94;
            *(ref struct2 + 4) = 95;
            *(ref struct2 + 5) = 96;
            *(ref struct2 + 6) = 90;
            *(ref struct2 + 7) = 91;
            *(ref struct2 + 8) = 92;
            *(ref struct2 + 9) = 114;
            *(ref struct2 + 10) = 115;
            *(ref struct2 + 11) = 116;
            Struct52 struct3 = 35;
            *(ref struct3 + 1) = 142;
            *(ref struct3 + 2) = 16;
            *(ref struct3 + 3) = 35;
            *(ref struct3 + 4) = 142;
            *(ref struct3 + 5) = 16;
            *(ref struct3 + 6) = 68;
            *(ref struct3 + 7) = 28;
            *(ref struct3 + 8) = 32;
            *(ref struct3 + 9) = 68;
            *(ref struct3 + 10) = 28;
            *(ref struct3 + 11) = 32;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 struct4;
                byte* ptr = ref struct4 + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct5;

                    _Module.sprintf((sbyte*)(&struct5), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct5), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {
                        for (int i = 0; i < 12; i++)
                        {

                            _Module.memset((void*)(&struct4), 0, 62U);
                            *(ref struct4 + 28) = 223;
                            *(ref struct4 + 29) = 132;
                            *(ref struct4 + 32) = 1;
                            *(ref struct4 + 35) = *(ref @struct + i);
                            *(ref struct4 + 36) = *(ref struct2 + i);
                            *(ref struct4 + 37) = *(ref struct3 + i);
                            struct4 = 44;
                            *(ref struct4 + 6) = 12;
                            *(ref struct4 + 7) = 18;
                            *(ref struct4 + 8) = 2;
                            *(ref struct4 + 16) = 15;
                            *(ref struct4 + 24) = 44;
                            uint num;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&struct4), 62, (void*)(&struct4), 62, (uint*)(&num), null) == null || (ptr[2] & 15) != 0)
                            {
                                this.textBox6.AppendText("Command Failed" + "\r\n");
                                return;
                            }
                        }
                        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");

                        _Module.CloseHandle(ptr3);
                    }
                }
            }
        }

        // Token: 0x06000380 RID: 896 RVA: 0x00146B18 File Offset: 0x00146B18
        private unsafe void method_345()
        {
            Struct110 @struct = 136;
            *(ref @struct + 1) = 136;
            *(ref @struct + 2) = 136;
            *(ref @struct + 3) = 141;
            *(ref @struct + 4) = 141;
            *(ref @struct + 5) = 141;
            *(ref @struct + 6) = 136;
            *(ref @struct + 7) = 136;
            *(ref @struct + 8) = 136;
            *(ref @struct + 9) = 136;
            *(ref @struct + 10) = 136;
            *(ref @struct + 11) = 136;
            *(ref @struct + 12) = 136;
            *(ref @struct + 13) = 136;
            *(ref @struct + 14) = 136;
            Struct110 struct2 = 36;
            *(ref struct2 + 1) = 37;
            *(ref struct2 + 2) = 38;
            *(ref struct2 + 3) = 162;
            *(ref struct2 + 4) = 163;
            *(ref struct2 + 5) = 164;
            *(ref struct2 + 6) = 3;
            *(ref struct2 + 7) = 3;
            *(ref struct2 + 8) = 5;
            *(ref struct2 + 9) = 32;
            *(ref struct2 + 10) = 33;
            *(ref struct2 + 11) = 34;
            *(ref struct2 + 12) = 60;
            *(ref struct2 + 13) = 61;
            *(ref struct2 + 14) = 62;
            Struct110 struct3 = 35;
            *(ref struct3 + 1) = 142;
            *(ref struct3 + 2) = 16;
            *(ref struct3 + 3) = 35;
            *(ref struct3 + 4) = 142;
            *(ref struct3 + 5) = 16;
            *(ref struct3 + 6) = 68;
            *(ref struct3 + 7) = 28;
            *(ref struct3 + 8) = 32;
            *(ref struct3 + 9) = 68;
            *(ref struct3 + 10) = 28;
            *(ref struct3 + 11) = 32;
            *(ref struct3 + 12) = 68;
            *(ref struct3 + 13) = 28;
            *(ref struct3 + 14) = 32;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 struct4;
                byte* ptr = ref struct4 + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct5;

                    _Module.sprintf((sbyte*)(&struct5), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct5), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {
                        for (int i = 0; i < 15; i++)
                        {

                            _Module.memset((void*)(&struct4), 0, 62U);
                            *(ref struct4 + 28) = 223;
                            *(ref struct4 + 29) = 132;
                            *(ref struct4 + 32) = 1;
                            *(ref struct4 + 35) = *(ref @struct + i);
                            *(ref struct4 + 36) = *(ref struct2 + i);
                            *(ref struct4 + 37) = *(ref struct3 + i);
                            struct4 = 44;
                            *(ref struct4 + 6) = 12;
                            *(ref struct4 + 7) = 18;
                            *(ref struct4 + 8) = 2;
                            *(ref struct4 + 16) = 15;
                            *(ref struct4 + 24) = 44;
                            uint num;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&struct4), 62, (void*)(&struct4), 62, (uint*)(&num), null) == null || (ptr[2] & 15) != 0)
                            {
                                this.textBox6.AppendText("Command Failed" + "\r\n");
                                return;
                            }
                        }
                        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");

                        _Module.CloseHandle(ptr3);
                    }
                }
            }
        }

        // Token: 0x06000381 RID: 897 RVA: 0x00146E40 File Offset: 0x00146E40
        private unsafe void method_346()
        {
            Struct52 @struct = 134;
            *(ref @struct + 1) = 134;
            *(ref @struct + 2) = 134;
            *(ref @struct + 3) = 134;
            *(ref @struct + 4) = 134;
            *(ref @struct + 5) = 134;
            *(ref @struct + 6) = 134;
            *(ref @struct + 7) = 134;
            *(ref @struct + 8) = 134;
            *(ref @struct + 9) = 134;
            *(ref @struct + 10) = 134;
            *(ref @struct + 11) = 134;
            Struct52 struct2 = 130;
            *(ref struct2 + 1) = 131;
            *(ref struct2 + 2) = 132;
            *(ref struct2 + 3) = 221;
            *(ref struct2 + 4) = 222;
            *(ref struct2 + 5) = 223;
            *(ref struct2 + 6) = 217;
            *(ref struct2 + 7) = 218;
            *(ref struct2 + 8) = 219;
            *(ref struct2 + 9) = 233;
            *(ref struct2 + 10) = 234;
            *(ref struct2 + 11) = 235;
            Struct52 struct3 = 35;
            *(ref struct3 + 1) = 142;
            *(ref struct3 + 2) = 16;
            *(ref struct3 + 3) = 35;
            *(ref struct3 + 4) = 142;
            *(ref struct3 + 5) = 16;
            *(ref struct3 + 6) = 68;
            *(ref struct3 + 7) = 28;
            *(ref struct3 + 8) = 32;
            *(ref struct3 + 9) = 68;
            *(ref struct3 + 10) = 28;
            *(ref struct3 + 11) = 32;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 struct4;
                byte* ptr = ref struct4 + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct5;

                    _Module.sprintf((sbyte*)(&struct5), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct5), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {
                        for (int i = 0; i < 12; i++)
                        {

                            _Module.memset((void*)(&struct4), 0, 62U);
                            *(ref struct4 + 28) = 241;
                            *(ref struct4 + 29) = 1;
                            *(ref struct4 + 32) = *(ref @struct + i);
                            *(ref struct4 + 33) = *(ref struct2 + i);
                            *(ref struct4 + 37) = *(ref struct3 + i);
                            struct4 = 44;
                            *(ref struct4 + 6) = 12;
                            *(ref struct4 + 7) = 18;
                            *(ref struct4 + 8) = 2;
                            *(ref struct4 + 16) = 15;
                            *(ref struct4 + 24) = 44;
                            uint num;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&struct4), 62, (void*)(&struct4), 62, (uint*)(&num), null) == null || (ptr[2] & 15) != 0)
                            {
                                this.textBox6.AppendText("Command Failed" + "\r\n");
                                return;
                            }
                        }
                        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");

                        _Module.CloseHandle(ptr3);
                    }
                }
            }
        }

        // Token: 0x06000382 RID: 898 RVA: 0x00147128 File Offset: 0x00147128
        private unsafe void method_347()
        {
            Struct52 @struct = 133;
            *(ref @struct + 1) = 133;
            *(ref @struct + 2) = 133;
            *(ref @struct + 3) = 134;
            *(ref @struct + 4) = 134;
            *(ref @struct + 5) = 134;
            *(ref @struct + 6) = 134;
            *(ref @struct + 7) = 134;
            *(ref @struct + 8) = 134;
            *(ref @struct + 9) = 134;
            *(ref @struct + 10) = 134;
            *(ref @struct + 11) = 134;
            Struct52 struct2 = 222;
            *(ref struct2 + 1) = 223;
            *(ref struct2 + 2) = 224;
            *(ref struct2 + 3) = 221;
            *(ref struct2 + 4) = 222;
            *(ref struct2 + 5) = 223;
            *(ref struct2 + 6) = 217;
            *(ref struct2 + 7) = 218;
            *(ref struct2 + 8) = 219;
            *(ref struct2 + 9) = 233;
            *(ref struct2 + 10) = 234;
            *(ref struct2 + 11) = 235;
            Struct52 struct3 = 35;
            *(ref struct3 + 1) = 142;
            *(ref struct3 + 2) = 16;
            *(ref struct3 + 3) = 35;
            *(ref struct3 + 4) = 142;
            *(ref struct3 + 5) = 16;
            *(ref struct3 + 6) = 68;
            *(ref struct3 + 7) = 28;
            *(ref struct3 + 8) = 32;
            *(ref struct3 + 9) = 68;
            *(ref struct3 + 10) = 28;
            *(ref struct3 + 11) = 32;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 struct4;
                byte* ptr = ref struct4 + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct5;

                    _Module.sprintf((sbyte*)(&struct5), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct5), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {
                        for (int i = 0; i < 12; i++)
                        {

                            _Module.memset((void*)(&struct4), 0, 62U);
                            *(ref struct4 + 28) = 241;
                            *(ref struct4 + 29) = 1;
                            *(ref struct4 + 32) = *(ref @struct + i);
                            *(ref struct4 + 33) = *(ref struct2 + i);
                            *(ref struct4 + 37) = *(ref struct3 + i);
                            struct4 = 44;
                            *(ref struct4 + 6) = 12;
                            *(ref struct4 + 7) = 18;
                            *(ref struct4 + 8) = 2;
                            *(ref struct4 + 16) = 15;
                            *(ref struct4 + 24) = 44;
                            uint num;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&struct4), 62, (void*)(&struct4), 62, (uint*)(&num), null) == null || (ptr[2] & 15) != 0)
                            {
                                this.textBox6.AppendText("Command Failed" + "\r\n");
                                return;
                            }
                        }
                        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");

                        _Module.CloseHandle(ptr3);
                    }
                }
            }
        }

        // Token: 0x06000383 RID: 899 RVA: 0x00147410 File Offset: 0x00147410
        private unsafe void method_348()
        {
            Struct52 @struct = 136;
            *(ref @struct + 1) = 136;
            *(ref @struct + 2) = 136;
            *(ref @struct + 3) = 134;
            *(ref @struct + 4) = 134;
            *(ref @struct + 5) = 134;
            *(ref @struct + 6) = 134;
            *(ref @struct + 7) = 134;
            *(ref @struct + 8) = 134;
            *(ref @struct + 9) = 134;
            *(ref @struct + 10) = 134;
            *(ref @struct + 11) = 134;
            Struct52 struct2 = 160;
            *(ref struct2 + 1) = 161;
            *(ref struct2 + 2) = 162;
            *(ref struct2 + 3) = 221;
            *(ref struct2 + 4) = 222;
            *(ref struct2 + 5) = 223;
            *(ref struct2 + 6) = 217;
            *(ref struct2 + 7) = 218;
            *(ref struct2 + 8) = 219;
            *(ref struct2 + 9) = 233;
            *(ref struct2 + 10) = 234;
            *(ref struct2 + 11) = 235;
            Struct52 struct3 = 35;
            *(ref struct3 + 1) = 142;
            *(ref struct3 + 2) = 16;
            *(ref struct3 + 3) = 35;
            *(ref struct3 + 4) = 142;
            *(ref struct3 + 5) = 16;
            *(ref struct3 + 6) = 68;
            *(ref struct3 + 7) = 28;
            *(ref struct3 + 8) = 32;
            *(ref struct3 + 9) = 68;
            *(ref struct3 + 10) = 28;
            *(ref struct3 + 11) = 32;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 struct4;
                byte* ptr = ref struct4 + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct5;

                    _Module.sprintf((sbyte*)(&struct5), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct5), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {
                        for (int i = 0; i < 12; i++)
                        {

                            _Module.memset((void*)(&struct4), 0, 62U);
                            *(ref struct4 + 28) = 241;
                            *(ref struct4 + 29) = 1;
                            *(ref struct4 + 32) = *(ref @struct + i);
                            *(ref struct4 + 33) = *(ref struct2 + i);
                            *(ref struct4 + 37) = *(ref struct3 + i);
                            struct4 = 44;
                            *(ref struct4 + 6) = 12;
                            *(ref struct4 + 7) = 18;
                            *(ref struct4 + 8) = 2;
                            *(ref struct4 + 16) = 15;
                            *(ref struct4 + 24) = 44;
                            uint num;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&struct4), 62, (void*)(&struct4), 62, (uint*)(&num), null) == null || (ptr[2] & 15) != 0)
                            {
                                this.textBox6.AppendText("Command Failed" + "\r\n");
                                return;
                            }
                        }
                        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");

                        _Module.CloseHandle(ptr3);
                    }
                }
            }
        }

        // Token: 0x06000384 RID: 900 RVA: 0x001476F8 File Offset: 0x001476F8
        private unsafe void method_349()
        {
            Struct52 @struct = 138;
            *(ref @struct + 1) = 138;
            *(ref @struct + 2) = 138;
            *(ref @struct + 3) = 134;
            *(ref @struct + 4) = 134;
            *(ref @struct + 5) = 134;
            *(ref @struct + 6) = 134;
            *(ref @struct + 7) = 134;
            *(ref @struct + 8) = 134;
            *(ref @struct + 9) = 134;
            *(ref @struct + 10) = 134;
            *(ref @struct + 11) = 134;
            Struct52 struct2 = 82;
            *(ref struct2 + 1) = 83;
            *(ref struct2 + 2) = 84;
            *(ref struct2 + 3) = 220;
            *(ref struct2 + 4) = 221;
            *(ref struct2 + 5) = 222;
            *(ref struct2 + 6) = 216;
            *(ref struct2 + 7) = 217;
            *(ref struct2 + 8) = 218;
            *(ref struct2 + 9) = 232;
            *(ref struct2 + 10) = 233;
            *(ref struct2 + 11) = 234;
            Struct52 struct3 = 35;
            *(ref struct3 + 1) = 142;
            *(ref struct3 + 2) = 16;
            *(ref struct3 + 3) = 35;
            *(ref struct3 + 4) = 142;
            *(ref struct3 + 5) = 16;
            *(ref struct3 + 6) = 68;
            *(ref struct3 + 7) = 28;
            *(ref struct3 + 8) = 32;
            *(ref struct3 + 9) = 68;
            *(ref struct3 + 10) = 28;
            *(ref struct3 + 11) = 32;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 struct4;
                byte* ptr = ref struct4 + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct5;

                    _Module.sprintf((sbyte*)(&struct5), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct5), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {
                        for (int i = 0; i < 12; i++)
                        {

                            _Module.memset((void*)(&struct4), 0, 62U);
                            *(ref struct4 + 28) = 241;
                            *(ref struct4 + 29) = 1;
                            *(ref struct4 + 32) = *(ref @struct + i);
                            *(ref struct4 + 33) = *(ref struct2 + i);
                            *(ref struct4 + 37) = *(ref struct3 + i);
                            struct4 = 44;
                            *(ref struct4 + 6) = 12;
                            *(ref struct4 + 7) = 18;
                            *(ref struct4 + 8) = 2;
                            *(ref struct4 + 16) = 15;
                            *(ref struct4 + 24) = 44;
                            uint num;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&struct4), 62, (void*)(&struct4), 62, (uint*)(&num), null) == null || (ptr[2] & 15) != 0)
                            {
                                this.textBox6.AppendText("Command Failed" + "\r\n");
                                return;
                            }
                        }
                        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");

                        _Module.CloseHandle(ptr3);
                    }
                }
            }
        }

        // Token: 0x06000385 RID: 901 RVA: 0x001479D8 File Offset: 0x001479D8
        private unsafe void method_350()
        {
            Struct110 @struct = 135;
            *(ref @struct + 1) = 135;
            *(ref @struct + 2) = 135;
            *(ref @struct + 3) = 137;
            *(ref @struct + 4) = 137;
            *(ref @struct + 5) = 137;
            *(ref @struct + 6) = 135;
            *(ref @struct + 7) = 135;
            *(ref @struct + 8) = 135;
            *(ref @struct + 9) = 135;
            *(ref @struct + 10) = 135;
            *(ref @struct + 11) = 135;
            *(ref @struct + 12) = 135;
            *(ref @struct + 13) = 135;
            *(ref @struct + 14) = 135;
            Struct110 struct2 = 47;
            *(ref struct2 + 1) = 48;
            *(ref struct2 + 2) = 49;
            *(ref struct2 + 3) = 202;
            *(ref struct2 + 4) = 203;
            *(ref struct2 + 5) = 204;
            *(ref struct2 + 6) = 14;
            *(ref struct2 + 7) = 15;
            *(ref struct2 + 8) = 16;
            *(ref struct2 + 9) = 43;
            *(ref struct2 + 10) = 44;
            *(ref struct2 + 11) = 45;
            *(ref struct2 + 12) = 71;
            *(ref struct2 + 13) = 72;
            *(ref struct2 + 14) = 73;
            Struct110 struct3 = 35;
            *(ref struct3 + 1) = 142;
            *(ref struct3 + 2) = 16;
            *(ref struct3 + 3) = 35;
            *(ref struct3 + 4) = 142;
            *(ref struct3 + 5) = 16;
            *(ref struct3 + 6) = 68;
            *(ref struct3 + 7) = 28;
            *(ref struct3 + 8) = 32;
            *(ref struct3 + 9) = 68;
            *(ref struct3 + 10) = 28;
            *(ref struct3 + 11) = 32;
            *(ref struct3 + 12) = 68;
            *(ref struct3 + 13) = 28;
            *(ref struct3 + 14) = 32;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 struct4;
                byte* ptr = ref struct4 + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct5;

                    _Module.sprintf((sbyte*)(&struct5), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct5), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {
                        for (int i = 0; i < 15; i++)
                        {

                            _Module.memset((void*)(&struct4), 0, 62U);
                            *(ref struct4 + 28) = 241;
                            *(ref struct4 + 29) = 1;
                            *(ref struct4 + 32) = *(ref @struct + i);
                            *(ref struct4 + 33) = *(ref struct2 + i);
                            *(ref struct4 + 37) = *(ref struct3 + i);
                            struct4 = 44;
                            *(ref struct4 + 6) = 12;
                            *(ref struct4 + 7) = 18;
                            *(ref struct4 + 8) = 2;
                            *(ref struct4 + 16) = 15;
                            *(ref struct4 + 24) = 44;
                            uint num;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&struct4), 62, (void*)(&struct4), 62, (uint*)(&num), null) == null || (ptr[2] & 15) != 0)
                            {
                                this.textBox6.AppendText("Command Failed" + "\r\n");
                                return;
                            }
                        }
                        this.textBox6.AppendText("BurnMax Enabled !!!" + "\r\n");

                        _Module.CloseHandle(ptr3);
                    }
                }
            }
        }

        // Token: 0x06000386 RID: 902 RVA: 0x00147CF8 File Offset: 0x00147CF8
        private unsafe void method_351()
        {
            GStruct5* pGstruct5_ = _Module.fopen((sbyte*)(&_Module.struct14_1), (sbyte*)(&_Module.struct18_5));
            if (this.comboBox16.Text == new string((sbyte*)(&_Module.struct19_0)))
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                this.comboBox16.Text.Substring(0, 1);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr < 65 | *(sbyte*)ptr > 122))
                {
                    Struct109 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr);
                    void* ptr2 = _Module.CreateFileA((sbyte*)(&@struct), -1073741824, 3, null, 3, 128, null);
                    if (ptr2 != -1)
                    {
                        for (int i = 32768; i < 36864; i += 128)
                        {
                            Struct111 struct2;

                            _Module.memset((void*)(&struct2), 48, 128U);
                            Struct108 struct3;

                            _Module.memset((void*)(&struct3), 0, 62U);
                            *(ref struct3 + 28) = 223;
                            *(ref struct3 + 29) = 133;
                            *(ref struct3 + 31) = byte.MaxValue;
                            *(ref struct3 + 35) = (byte)((i & 65280) >> 8);
                            *(ref struct3 + 36) = (byte)(i & 255);
                            struct3 = 44;
                            *(ref struct3 + 6) = 12;
                            *(ref struct3 + 7) = 18;
                            *(ref struct3 + 8) = 1;
                            *(ref struct3 + 12) = 128;
                            *(ref struct3 + 16) = 15;
                            *(ref struct3 + 20) = ref struct2;
                            *(ref struct3 + 24) = 44;
                            uint num;
                            if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num), null) == null)
                            {
                                this.textBox6.AppendText("CDB failed" + "\r\n");
                                return;
                            }

                            _Module.fwrite((void*)(&struct2), 128U, 1U, pGstruct5_);
                        }
                    }
                    else
                    {
                        this.textBox6.AppendText("Failed to open drive" + "\r\n");
                    }

                    _Module.fclose(pGstruct5_);

                    _Module.CloseHandle(ptr2);
                }
            }
        }

        // Token: 0x06000387 RID: 903 RVA: 0x00147F08 File Offset: 0x00147F08
        private unsafe void method_352()
        {
            GStruct5* pGstruct5_ = _Module.fopen((sbyte*)(&_Module.struct14_2), (sbyte*)(&_Module.struct18_5));
            if (this.comboBox16.Text == new string((sbyte*)(&_Module.struct19_0)))
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                this.comboBox16.Text.Substring(0, 1);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr < 65 | *(sbyte*)ptr > 122))
                {
                    Struct109 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr);
                    void* ptr2 = _Module.CreateFileA((sbyte*)(&@struct), -1073741824, 3, null, 3, 128, null);
                    if (ptr2 != -1)
                    {
                        for (int i = 32768; i < 36864; i++)
                        {
                            Struct28 struct2;

                            _Module.memset((void*)(&struct2), 48, 16U);
                            Struct108 struct3;

                            _Module.memset((void*)(&struct3), 0, 62U);
                            *(ref struct3 + 28) = 241;
                            *(ref struct3 + 29) = 2;
                            *(ref struct3 + 32) = (byte)((i & 65280) >> 8);
                            *(ref struct3 + 33) = (byte)(i & 255);
                            *(ref struct3 + 34) = 1;
                            struct3 = 44;
                            *(ref struct3 + 6) = 12;
                            *(ref struct3 + 7) = 18;
                            *(ref struct3 + 8) = 1;
                            *(ref struct3 + 12) = 4;
                            *(ref struct3 + 16) = 15;
                            *(ref struct3 + 20) = ref struct2;
                            *(ref struct3 + 24) = 44;
                            uint num;
                            if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num), null) == null)
                            {
                                this.textBox6.AppendText("CDB failed" + "\r\n");
                                return;
                            }

                            _Module.fwrite(ref struct2 + 3, 1U, 1U, pGstruct5_);
                        }
                    }
                    else
                    {
                        this.textBox6.AppendText("Failed to open drive" + "\r\n");
                    }

                    _Module.fclose(pGstruct5_);

                    _Module.CloseHandle(ptr2);
                }
            }
        }

        // Token: 0x06000388 RID: 904 RVA: 0x00148100 File Offset: 0x00148100
        private unsafe void method_353()
        {
            if (this.comboBox16.Text == new string((sbyte*)(&_Module.struct19_0)))
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                this.comboBox16.Text.Substring(0, 1);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr < 65 | *(sbyte*)ptr > 122))
                {
                    Struct109 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr);
                    void* ptr2 = _Module.CreateFileA((sbyte*)(&@struct), -1073741824, 3, null, 3, 128, null);
                    if (ptr2 != -1)
                    {
                        Struct112 struct2;

                        _Module.memset((void*)(&struct2), 48, 2052U);
                        Struct108 struct3;

                        _Module.memset((void*)(&struct3), 0, 62U);
                        *(ref struct3 + 28) = 173;
                        *(ref struct3 + 34) = 1;
                        *(ref struct3 + 36) = 8;
                        *(ref struct3 + 37) = 4;
                        struct3 = 44;
                        *(ref struct3 + 6) = 12;
                        *(ref struct3 + 7) = 18;
                        *(ref struct3 + 8) = 1;
                        *(ref struct3 + 12) = 2052;
                        *(ref struct3 + 16) = 15;
                        *(ref struct3 + 20) = ref struct2;
                        *(ref struct3 + 24) = 44;
                        uint num;
                        if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num), null) != null)
                        {
                            this.method_5((byte*)(&struct2), 2052U, 0U);
                            this.textBox6.AppendText(this.string_0 + "\r\n");
                        }
                        else
                        {
                            this.textBox6.AppendText("CDB failed" + "\r\n");
                        }
                    }
                    else
                    {
                        this.textBox6.AppendText("Failed to open drive" + "\r\n");
                    }
                }
            }
        }

        // Token: 0x06000389 RID: 905 RVA: 0x001482C8 File Offset: 0x001482C8
        private unsafe void method_354()
        {
            if (this.comboBox16.Text == new string((sbyte*)(&_Module.struct19_0)))
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                this.comboBox16.Text.Substring(0, 1);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr < 65 | *(sbyte*)ptr > 122))
                {
                    Struct109 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr);
                    void* ptr2 = _Module.CreateFileA((sbyte*)(&@struct), -1073741824, 3, null, 3, 128, null);
                    if (ptr2 != -1)
                    {
                        Struct52 struct2;

                        _Module.memset((void*)(&struct2), 48, 12U);
                        Struct108 struct3;

                        _Module.memset((void*)(&struct3), 0, 62U);
                        *(ref struct3 + 28) = 173;
                        *(ref struct3 + 35) = 32;
                        *(ref struct3 + 37) = 12;
                        struct3 = 44;
                        *(ref struct3 + 6) = 12;
                        *(ref struct3 + 7) = 18;
                        *(ref struct3 + 8) = 1;
                        *(ref struct3 + 12) = 12;
                        *(ref struct3 + 16) = 15;
                        *(ref struct3 + 20) = ref struct2;
                        *(ref struct3 + 24) = 44;
                        uint num;
                        if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num), null) != null)
                        {
                            this.method_5((byte*)(&struct2), 12U, 0U);
                            this.textBox6.AppendText(this.string_0 + "\r\n");
                        }
                        else
                        {
                            this.textBox6.AppendText("CDB failed" + "\r\n");
                        }
                    }
                    else
                    {
                        this.textBox6.AppendText("Failed to open drive" + "\r\n");
                    }
                }
            }
        }

        // Token: 0x0600038A RID: 906 RVA: 0x00148484 File Offset: 0x00148484
        private unsafe void method_355()
        {
            if (this.comboBox16.Text == new string((sbyte*)(&_Module.struct19_0)))
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                this.comboBox16.Text.Substring(0, 1);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr < 65 | *(sbyte*)ptr > 122))
                {
                    Struct109 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr);
                    void* ptr2 = _Module.CreateFileA((sbyte*)(&@struct), -1073741824, 3, null, 3, 128, null);
                    if (ptr2 != -1)
                    {
                        Struct5 struct2;

                        _Module.memset((void*)(&struct2), 48, 56U);
                        Struct108 struct3;

                        _Module.memset((void*)(&struct3), 0, 62U);
                        *(ref struct3 + 28) = 3;
                        *(ref struct3 + 32) = 18;
                        struct3 = 44;
                        *(ref struct3 + 6) = 12;
                        *(ref struct3 + 7) = 18;
                        *(ref struct3 + 8) = 1;
                        *(ref struct3 + 12) = 18;
                        *(ref struct3 + 16) = 15;
                        *(ref struct3 + 20) = ref struct2;
                        *(ref struct3 + 24) = 44;
                        uint num;
                        if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num), null) != null)
                        {
                            this.method_5((byte*)(&struct2), 18U, 0U);
                            this.textBox6.AppendText(this.string_0 + "\r\n");
                        }
                        else
                        {
                            this.textBox6.AppendText("Inquiry failed" + "\r\n");
                        }
                    }
                    else
                    {
                        this.textBox6.AppendText("Failed to open drive " + "\r\n");
                    }

                    _Module.CloseHandle(ptr2);
                }
            }
        }

        // Token: 0x0600038B RID: 907 RVA: 0x0014863C File Offset: 0x0014863C
        private void button19_Click(object sender, EventArgs e)
        {
            this.method_337();
        }

        // Token: 0x0600038C RID: 908 RVA: 0x00148650 File Offset: 0x00148650
        private void button20_Click(object sender, EventArgs e)
        {
            this.method_338();
        }

        // Token: 0x0600038D RID: 909 RVA: 0x00148664 File Offset: 0x00148664
        private void button3_Click(object sender, EventArgs e)
        {
            this.Cursor = Cursors.WaitCursor;
            this.method_361();
            this.Cursor = Cursors.Arrow;
        }

        // Token: 0x0600038E RID: 910 RVA: 0x00148690 File Offset: 0x00148690
        private void button22_Click(object sender, EventArgs e)
        {
            this.method_363();
        }

        // Token: 0x0600038F RID: 911 RVA: 0x001486A4 File Offset: 0x001486A4
        private void method_356()
        {
            this.method_358(0);
            this.textBox6.AppendText("Loading Hitachi Dump to Source Buffer" + "\r\n");
        }

        // Token: 0x06000390 RID: 912 RVA: 0x001486D4 File Offset: 0x001486D4
        private void method_357()
        {
            this.method_358(1);
            this.textBox6.AppendText("Loading Hitachi Dump to Target Buffer " + "\r\n");
        }

        // Token: 0x06000391 RID: 913 RVA: 0x00148704 File Offset: 0x00148704
        private unsafe void method_358(int int_16)
        {
            if (this.bool_2)
            {
                string text = this.string_10 + "\\Hit-OFW.bin";
                for (int i = 1; i < 10; i++)
                {
                    if (!File.Exists(text))
                    {
                        IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
                        IntPtr value = intPtr;
                        sbyte* pSbyte_ = (sbyte*)((void*)value);
                        GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_5));
                        if (ptr != null)
                        {

                            _Module.fwrite(*(ref _Module.struct121_0 + 7172), 262144U, 1U, ptr);

                            _Module.fclose(ptr);
                            this.textBox6.AppendText("\r\n" + "Hitachi-On Dump file saved to " + text + "\r\n");
                            this.method_37(text, 0, *(ref _Module.struct121_0 + 7172));
                            return;
                        }
                    }
                    else
                    {
                        text = this.string_10 + "\\Hit-OFW_" + Convert.ToString(i) + ".bin";
                    }
                }
            }
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Firmware Images (*.bin)|*.bin|All Files (*.*)|*.*";
            saveFileDialog.DefaultExt = ".bin";
            saveFileDialog.FileName = "Hit-OFW.bin";
            saveFileDialog.RestoreDirectory = false;
            if (this.bool_2)
            {
                saveFileDialog.InitialDirectory = this.string_10;
            }
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                string fullPath = Path.GetFullPath(saveFileDialog.FileName);
                string fileName = Path.GetFileName(saveFileDialog.FileName);
                IntPtr intPtr2 = Marshal.StringToHGlobalAnsi(fullPath);
                IntPtr value2 = intPtr2;
                sbyte* pSbyte_2 = (sbyte*)((void*)value2);
                GStruct5* ptr = _Module.fopen((sbyte*)pSbyte_2, (sbyte*)(&_Module.struct18_5));
                if (ptr == null)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show(fileName, "Can't open file", MessageBoxButtons.OK);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                }
                else
                {

                    _Module.fwrite(*(ref _Module.struct121_0 + 7172), 262144U, 1U, ptr);

                    _Module.fclose(ptr);
                    this.textBox6.AppendText("\r\n" + "Hitachi Dump file saved to " + fileName + "\r\n");
                    this.method_37(fullPath, int_16, *(ref _Module.struct121_0 + 7172));
                }
            }
            else
            {
                this.method_37("", int_16, *(ref _Module.struct121_0 + 7172));
            }
        }

        // Token: 0x06000392 RID: 914 RVA: 0x00148934 File Offset: 0x00148934
        private unsafe void method_359()
        {
            string text = null;
            string text2 = null;
            int num = 0;
            int num2 = 0;
            int selectedIndex = 0;
            this.int_10 = 0;
            int num3 = 65;
            this.comboBox16.Items.Clear();
            this.comboBox16.Text = "";
            uint num4 = _Module.GetLogicalDrives();
            int i = 0;
            while (i <= 26)
            {
                if ((num4 & 1U) == 0U)
                {
                    goto IL_2CA;
                }
                Struct20 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct25_11), num3);
                num++;
                int driveTypeA = _Module.GetDriveTypeA((sbyte*)(&@struct));
                text = text + " " + new string((sbyte*)(&@struct));
                if (driveTypeA != 5)
                {
                    goto IL_2CA;
                }
                Struct109 struct2;

                _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), num3);
                text2 = text2 + " " + new string((sbyte*)(&@struct));
                void* ptr = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                if (ptr != -1)
                {
                    "Inquiry failed to drive " + Convert.ToString(i);
                    Struct5 struct3;

                    _Module.memset((void*)(&struct3), 48, 56U);
                    Struct108 struct4;

                    _Module.memset((void*)(&struct4), 0, 62U);
                    *(ref struct4 + 28) = 18;
                    *(ref struct4 + 32) = 56;
                    *(ref struct4 + 33) = 192;
                    struct4 = 44;
                    *(ref struct4 + 6) = 12;
                    *(ref struct4 + 7) = 18;
                    *(ref struct4 + 8) = 1;
                    *(ref struct4 + 12) = 56;
                    *(ref struct4 + 16) = 15;
                    *(ref struct4 + 20) = ref struct3;
                    *(ref struct4 + 24) = 44;
                    try
                    {
                        uint num5;

                        _Module.DeviceIoControl(ptr, 315412, (void*)(&struct4), 62, (void*)(&struct4), 62, (uint*)(&num5), null);
                    }
                    catch (Exception ex)
                    {
                        string message = ex.Message;

                        _Module.CloseHandle(ptr);
                        goto IL_2DA;
                    }
                    num2++;
                    this.method_5((byte*)(&struct3), 56U, 0U);
                    byte* pByte_ = ref struct3 + 8;
                    string str = this.method_176(pByte_, 28U);
                    this.comboBox16.Items.Add(new string((sbyte*)(&@struct)) + "\\ [" + str + "]");
                    if (*(ref struct3 + 24) == 71 && *(ref struct3 + 25) == 68 && *(ref struct3 + 26) == 82 && *(ref struct3 + 27) == 51 && *(ref struct3 + 28) == 49 && *(ref struct3 + 29) == 50 && *(ref struct3 + 30) == 48 && *(ref struct3 + 31) == 76)
                    {
                        selectedIndex = num2 - 1;
                        if (*(ref struct3 + 34) == 53)
                        {
                            this.radioButton4.Checked = true;
                        }
                        else if (*(ref struct3 + 34) == 55)
                        {
                            this.radioButton5.Checked = true;
                        }
                        else if (*(ref struct3 + 34) == 52 & *(ref struct3 + 35) != 48)
                        {
                            this.radioButton3.Checked = true;
                        }
                        else if (*(ref struct3 + 34) == 51 & *(ref struct3 + 35) == 54)
                        {
                            this.radioButton2.Checked = true;
                        }
                        else
                        {
                            this.radioButton1.Checked = true;
                        }
                    }
                }

                _Module.CloseHandle(ptr);
                goto IL_2CA;
            IL_2DA:
                i++;
                continue;
            IL_2CA:
                num4 >>= 1;
                num3++;
                if (num4 != 0U)
                {
                    goto IL_2DA;
                }
                break;
            }
            this.textBox6.AppendText("Found " + Convert.ToString(num) + " windows drives" + text + "\r\n");
            this.textBox6.AppendText("Found " + Convert.ToString(num2) + " CD/DVD drives" + text2 + "\r\n\r\n");
            if (num2 > 0)
            {
                this.comboBox16.SelectedIndex = selectedIndex;
            }
            this.int_10 = num2;
        }

        // Token: 0x06000393 RID: 915 RVA: 0x00148CBC File Offset: 0x00148CBC
        private unsafe void method_360()
        {
            string str = null;
            string str2 = null;
            int num = 0;
            int num2 = 0;
            int selectedIndex = 0;
            this.int_10 = 0;
            int num3 = 65;
            this.comboBox16.Items.Clear();
            this.comboBox16.Text = "";
            uint num4 = _Module.GetLogicalDrives();
            int i = 0;
            while (i <= 26)
            {
                if ((num4 & 1U) == 0U)
                {
                    goto IL_2CA;
                }
                Struct20 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct25_11), num3);
                num++;
                int driveTypeA = _Module.GetDriveTypeA((sbyte*)(&@struct));
                str = str + " " + new string((sbyte*)(&@struct));
                if (driveTypeA != 5)
                {
                    goto IL_2CA;
                }
                Struct109 struct2;

                _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), num3);
                str2 = str2 + " " + new string((sbyte*)(&@struct));
                void* ptr = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                if (ptr != -1)
                {
                    "Inquiry failed to drive " + Convert.ToString(i);
                    Struct5 struct3;

                    _Module.memset((void*)(&struct3), 48, 56U);
                    Struct108 struct4;

                    _Module.memset((void*)(&struct4), 0, 62U);
                    *(ref struct4 + 28) = 18;
                    *(ref struct4 + 32) = 56;
                    *(ref struct4 + 33) = 192;
                    struct4 = 44;
                    *(ref struct4 + 6) = 12;
                    *(ref struct4 + 7) = 18;
                    *(ref struct4 + 8) = 1;
                    *(ref struct4 + 12) = 56;
                    *(ref struct4 + 16) = 15;
                    *(ref struct4 + 20) = ref struct3;
                    *(ref struct4 + 24) = 44;
                    try
                    {
                        uint num5;

                        _Module.DeviceIoControl(ptr, 315412, (void*)(&struct4), 62, (void*)(&struct4), 62, (uint*)(&num5), null);
                    }
                    catch (Exception ex)
                    {
                        string message = ex.Message;

                        _Module.CloseHandle(ptr);
                        goto IL_2DA;
                    }
                    num2++;
                    this.method_5((byte*)(&struct3), 56U, 0U);
                    byte* pByte_ = ref struct3 + 8;
                    string str3 = this.method_176(pByte_, 28U);
                    this.comboBox16.Items.Add(new string((sbyte*)(&@struct)) + "\\ [" + str3 + "]");
                    if (*(ref struct3 + 24) == 71 && *(ref struct3 + 25) == 68 && *(ref struct3 + 26) == 82 && *(ref struct3 + 27) == 51 && *(ref struct3 + 28) == 49 && *(ref struct3 + 29) == 50 && *(ref struct3 + 30) == 48 && *(ref struct3 + 31) == 76)
                    {
                        selectedIndex = num2 - 1;
                        if (*(ref struct3 + 34) == 53)
                        {
                            this.radioButton4.Checked = true;
                        }
                        else if (*(ref struct3 + 34) == 55)
                        {
                            this.radioButton5.Checked = true;
                        }
                        else if (*(ref struct3 + 34) == 52 & *(ref struct3 + 35) != 48)
                        {
                            this.radioButton3.Checked = true;
                        }
                        else if (*(ref struct3 + 34) == 51 & *(ref struct3 + 35) == 54)
                        {
                            this.radioButton2.Checked = true;
                        }
                        else
                        {
                            this.radioButton1.Checked = true;
                        }
                    }
                }

                _Module.CloseHandle(ptr);
                goto IL_2CA;
            IL_2DA:
                i++;
                continue;
            IL_2CA:
                num4 >>= 1;
                num3++;
                if (num4 != 0U)
                {
                    goto IL_2DA;
                }
                break;
            }
            if (num2 > 0)
            {
                this.comboBox16.SelectedIndex = selectedIndex;
            }
            this.int_10 = num2;
        }

        // Token: 0x06000394 RID: 916 RVA: 0x00148FF8 File Offset: 0x00148FF8
        private unsafe int method_361()
        {
            uint num = _Module.GetLogicalDrives();
            int num2 = 65;
            int num3 = 0;
            int num4 = 0;
            int selectedIndex = 0;
            bool flag = false;
            this.int_10 = 0;
            this.comboBox16.Items.Clear();
            this.comboBox16.Text = "";
            int i = 0;
            while (i <= 26)
            {
                if ((num & 1U) == 0U)
                {
                    goto IL_3AB;
                }
                Struct20 @struct;

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct25_11), num2);
                this.textBox6.AppendText("Found drive " + new string((sbyte*)(&@struct)) + " - ");
                switch (_Module.GetDriveTypeA((sbyte*)(&@struct)))
                {
                    case 0U:
                        this.textBox6.AppendText("Unknown." + new string((sbyte*)(&_Module.struct18_12)));
                        goto IL_3AB;
                    case 1U:
                        this.textBox6.AppendText("Invalid." + new string((sbyte*)(&_Module.struct18_12)));
                        goto IL_3AB;
                    case 2U:
                        this.textBox6.AppendText("Removable." + new string((sbyte*)(&_Module.struct18_12)));
                        goto IL_3AB;
                    case 3U:
                        this.textBox6.AppendText("Hard Drive." + new string((sbyte*)(&_Module.struct18_12)));
                        goto IL_3AB;
                    case 4U:
                        this.textBox6.AppendText("Network." + new string((sbyte*)(&_Module.struct18_12)));
                        goto IL_3AB;
                    case 5U:
                        {
                            this.textBox6.AppendText("CD/DVD.");
                            Struct109 struct2;

                    _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), num2);
                            void* ptr = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                            if (ptr != -1)
                            {
                                num3++;
                                "Inquiry failed to drive " + Convert.ToString(i);
                                Struct5 struct3;

                        _Module.memset((void*)(&struct3), 48, 56U);
                                Struct108 struct4;

                        _Module.memset((void*)(&struct4), 0, 62U);
                                *(ref struct4 + 28) = 18;
                                *(ref struct4 + 32) = 56;
                                *(ref struct4 + 33) = 192;
                                struct4 = 44;
                                *(ref struct4 + 6) = 12;
                                *(ref struct4 + 7) = 18;
                                *(ref struct4 + 8) = 1;
                                *(ref struct4 + 12) = 56;
                                *(ref struct4 + 16) = 15;
                                *(ref struct4 + 20) = ref struct3;
                                *(ref struct4 + 24) = 44;
                                try
                                {
                                    uint num5;

                            _Module.DeviceIoControl(ptr, 315412, (void*)(&struct4), 62, (void*)(&struct4), 62, (uint*)(&num5), null);
                                }
                                catch (Exception ex)
                                {
                                    string message = ex.Message;

                            _Module.CloseHandle(ptr);
                                    break;
                                }
                                num4++;
                                this.method_5((byte*)(&struct3), 56U, 0U);
                                byte* pByte_ = ref struct3 + 8;
                                string str = this.method_176(pByte_, 28U);
                                this.comboBox16.Items.Add(new string((sbyte*)(&@struct)) + "\\ [" + str + "]");
                                if (_Module.memcmp(ref struct3 + 24, (void*)(&_Module.struct24_10), 8U) == null)
                                {
                                    selectedIndex = num4 - 1;
                                    flag = true;
                                    this.textBox6.AppendText(" <--- Hitachi found" + new string((sbyte*)(&_Module.struct18_12)));
                                    if (*(ref struct3 + 34) == 53)
                                    {
                                        this.radioButton4.Checked = true;
                                    }
                                    else if (*(ref struct3 + 34) == 55)
                                    {
                                        this.radioButton5.Checked = true;
                                    }
                                    else if (*(ref struct3 + 34) == 52 & *(ref struct3 + 35) != 48)
                                    {
                                        this.radioButton3.Checked = true;
                                    }
                                    else if (*(ref struct3 + 34) == 51 & *(ref struct3 + 35) == 54)
                                    {
                                        this.radioButton2.Checked = true;
                                    }
                                    else
                                    {
                                        this.radioButton1.Checked = true;
                                    }
                                }
                                else
                                {
                                    this.textBox6.AppendText(new string((sbyte*)(&_Module.struct18_12)));
                                }
                            }

                    _Module.CloseHandle(ptr);
                            goto IL_3AB;
                        }
                    case 6U:
                        this.textBox6.AppendText("Ramdisk." + new string((sbyte*)(&_Module.struct18_12)));
                        goto IL_3AB;
                    default:
                        goto IL_3AB;
                }
            IL_3B6:
                i++;
                continue;
            IL_3AB:
                num >>= 1;
                num2++;
                if (num != 0U)
                {
                    goto IL_3B6;
                }
                break;
            }
            int result;
            if (flag)
            {
                this.comboBox16.SelectedIndex = selectedIndex;
                this.int_10 = num4;
                result = 1;
            }
            else
            {
                this.textBox6.AppendText("No Hitachi drives were found!" + "\r\n");
                if (num4 > 0)
                {
                    this.comboBox16.SelectedIndex = 0;
                }
                this.int_10 = num4;
                result = 0;
            }
            return result;
        }

        // Token: 0x06000395 RID: 917 RVA: 0x003CBF1C File Offset: 0x00313F1C
        private unsafe int method_362()
        {
            int result;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 1;
            }
            else
            {
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr = (sbyte*)((void*)value);
                if (*(sbyte*)ptr < 65 | *(sbyte*)ptr > 122)
                {
                    result = 1;
                }
                else
                {
                    Struct109 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr);
                    void* ptr2;
                    do
                    {
                        ptr2 = _Module.CreateFileA((sbyte*)(&@struct), -1073741824, 3, null, 3, 128, null);
                        if (ptr2 != -1)
                        {
                            goto IL_10A;
                        }
                        this.textBox6.AppendText(".");
                        Application.DoEvents();

                        _Module.Sleep(250);
                    }
                    while (_Module.GetAsyncKeyState(27) == null);
                    this.textBox6.AppendText("\r\n" + "Aborted by User!" + "\r\n");
                    return 1;
                IL_10A:
                    Struct108 struct2;

                    _Module.memset((void*)(&struct2), 0, 62U);
                    *(ref struct2 + 28) = 231;
                    *(ref struct2 + 29) = 72;
                    *(ref struct2 + 30) = 73;
                    *(ref struct2 + 31) = 84;
                    *(ref struct2 + 32) = 48;
                    *(ref struct2 + 33) = 144;
                    *(ref struct2 + 34) = 144;
                    *(ref struct2 + 35) = 208;
                    *(ref struct2 + 36) = 1;
                    struct2 = 44;
                    *(ref struct2 + 6) = 12;
                    *(ref struct2 + 7) = 18;
                    *(ref struct2 + 8) = 2;
                    *(ref struct2 + 16) = 15;
                    *(ref struct2 + 24) = 44;
                    uint num;
                    if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct2), 62, (void*)(&struct2), 62, (uint*)(&num), null) == null)
                    {
                        this.textBox6.AppendText("Send Mode-B Failed" + "\r\n");

                        _Module.CloseHandle(ptr2);
                        result = 1;
                    }
                    else
                    {
                        Struct5 struct3;

                        _Module.memset((void*)(&struct3), 48, 56U);

                        _Module.memset((void*)(&struct2), 0, 62U);
                        *(ref struct2 + 28) = 18;
                        *(ref struct2 + 32) = 56;
                        *(ref struct2 + 33) = 0;
                        struct2 = 44;
                        *(ref struct2 + 6) = 12;
                        *(ref struct2 + 7) = 18;
                        *(ref struct2 + 8) = 1;
                        *(ref struct2 + 12) = 56;
                        *(ref struct2 + 16) = 15;
                        *(ref struct2 + 20) = ref struct3;
                        *(ref struct2 + 24) = 44;
                        if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct2), 62, (void*)(&struct2), 62, (uint*)(&num), null) != null)
                        {
                            this.method_5((byte*)(&struct3), 56U, 0U);
                            this.textBox6.AppendText(this.comboBox16.Text + " returns with normal Windows Inquiry" + "\r\n");
                            this.textBox6.AppendText(this.string_0);
                            if (*(ref struct3 + 24) == 71 && *(ref struct3 + 25) == 68 && *(ref struct3 + 26) == 82 && *(ref struct3 + 27) == 51 && *(ref struct3 + 28) == 49 && *(ref struct3 + 29) == 50 && *(ref struct3 + 30) == 48 && *(ref struct3 + 31) == 76)
                            {
                                if (*(ref struct3 + 34) == 53)
                                {
                                    this.radioButton4.Checked = true;
                                }
                                else if (*(ref struct3 + 34) == 55)
                                {
                                    this.radioButton5.Checked = true;
                                }
                                else if (*(ref struct3 + 34) == 52 & *(ref struct3 + 35) != 48)
                                {
                                    this.radioButton3.Checked = true;
                                }
                                else if (*(ref struct3 + 34) == 51 & *(ref struct3 + 35) == 54)
                                {
                                    this.radioButton2.Checked = true;
                                }
                                else
                                {
                                    this.radioButton1.Checked = true;
                                }
                            }
                        }
                        else
                        {
                            this.textBox6.AppendText("Inquiry failed" + "\r\n");
                        }

                        _Module.CloseHandle(ptr2);
                        result = 0;
                    }
                }
            }
            return result;
        }

        // Token: 0x06000396 RID: 918 RVA: 0x001497DC File Offset: 0x001497DC
        private unsafe void method_363()
        {
            if (this.comboBox16.Text == new string((sbyte*)(&_Module.struct19_0)))
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                this.comboBox16.Text.Substring(0, 1);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr < 65 | *(sbyte*)ptr > 122))
                {
                    Struct109 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr);
                    void* ptr2 = _Module.CreateFileA((sbyte*)(&@struct), -1073741824, 3, null, 3, 128, null);
                    if (ptr2 != -1)
                    {
                        Struct5 struct2;

                        _Module.memset((void*)(&struct2), 48, 56U);
                        Struct108 struct3;

                        _Module.memset((void*)(&struct3), 0, 62U);
                        *(ref struct3 + 28) = 18;
                        *(ref struct3 + 32) = 56;
                        *(ref struct3 + 33) = 0;
                        struct3 = 44;
                        *(ref struct3 + 6) = 12;
                        *(ref struct3 + 7) = 18;
                        *(ref struct3 + 8) = 1;
                        *(ref struct3 + 12) = 56;
                        *(ref struct3 + 16) = 15;
                        *(ref struct3 + 20) = ref struct2;
                        *(ref struct3 + 24) = 44;
                        uint num;
                        if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num), null) != null)
                        {
                            this.method_5((byte*)(&struct2), 56U, 0U);
                            this.textBox6.AppendText(this.comboBox16.Text + " returns Inquiry" + "\r\n");
                            this.textBox6.AppendText(this.string_0 + "\r\n");
                            if (*(ref struct2 + 24) == 71 && *(ref struct2 + 25) == 68 && *(ref struct2 + 26) == 82 && *(ref struct2 + 27) == 51 && *(ref struct2 + 28) == 49 && *(ref struct2 + 29) == 50 && *(ref struct2 + 30) == 48 && *(ref struct2 + 31) == 76)
                            {
                                if (*(ref struct2 + 34) == 53)
                                {
                                    this.radioButton4.Checked = true;
                                }
                                else if (*(ref struct2 + 34) == 55)
                                {
                                    this.radioButton5.Checked = true;
                                }
                                else if (*(ref struct2 + 34) == 52 & *(ref struct2 + 35) != 48)
                                {
                                    this.radioButton3.Checked = true;
                                }
                                else if (*(ref struct2 + 34) == 51 & *(ref struct2 + 35) == 54)
                                {
                                    this.radioButton2.Checked = true;
                                }
                                else
                                {
                                    this.radioButton1.Checked = true;
                                }
                            }
                        }
                        else
                        {
                            this.textBox6.AppendText("Inquiry failed" + "\r\n");
                        }
                    }
                    else
                    {
                        this.textBox6.AppendText("Failed to open drive " + "\r\n");
                    }

                    _Module.CloseHandle(ptr2);
                }
            }
        }

        // Token: 0x06000397 RID: 919 RVA: 0x00149AB4 File Offset: 0x00149AB4
        private void menuItem_0_Click(object sender, EventArgs e)
        {
            this.method_340();
        }

        // Token: 0x06000398 RID: 920 RVA: 0x00149AC8 File Offset: 0x00149AC8
        private void menuItem_1_Click(object sender, EventArgs e)
        {
            this.method_341();
        }

        // Token: 0x06000399 RID: 921 RVA: 0x00149ADC File Offset: 0x00149ADC
        private void menuItem_8_Click(object sender, EventArgs e)
        {
            this.method_332();
        }

        // Token: 0x0600039A RID: 922 RVA: 0x00149AF0 File Offset: 0x00149AF0
        private void menuItem_9_Click(object sender, EventArgs e)
        {
            this.method_334();
        }

        // Token: 0x0600039B RID: 923 RVA: 0x00149B04 File Offset: 0x00149B04
        private void menuItem_10_Click(object sender, EventArgs e)
        {
            this.method_333();
        }

        // Token: 0x0600039C RID: 924 RVA: 0x00149B18 File Offset: 0x00149B18
        private void menuItem_39_Click(object sender, EventArgs e)
        {
            this.method_346();
        }

        // Token: 0x0600039D RID: 925 RVA: 0x00149B2C File Offset: 0x00149B2C
        private void menuItem_40_Click(object sender, EventArgs e)
        {
            this.method_342();
        }

        // Token: 0x0600039E RID: 926 RVA: 0x00149B40 File Offset: 0x00149B40
        private void menuItem_41_Click(object sender, EventArgs e)
        {
            this.method_343();
        }

        // Token: 0x0600039F RID: 927 RVA: 0x00149B54 File Offset: 0x00149B54
        private void menuItem_42_Click(object sender, EventArgs e)
        {
            this.method_344();
        }

        // Token: 0x060003A0 RID: 928 RVA: 0x00149B68 File Offset: 0x00149B68
        private void menuItem_44_Click(object sender, EventArgs e)
        {
            this.method_348();
        }

        // Token: 0x060003A1 RID: 929 RVA: 0x00149B7C File Offset: 0x00149B7C
        private void menuItem_45_Click(object sender, EventArgs e)
        {
            this.method_349();
        }

        // Token: 0x060003A2 RID: 930 RVA: 0x00149B90 File Offset: 0x00149B90
        private void menuItem_46_Click(object sender, EventArgs e)
        {
            this.method_347();
        }

        // Token: 0x060003A3 RID: 931 RVA: 0x00149BA4 File Offset: 0x00149BA4
        private void menuItem_47_Click(object sender, EventArgs e)
        {
            this.method_350();
        }

        // Token: 0x060003A4 RID: 932 RVA: 0x00149BB8 File Offset: 0x00149BB8
        private void menuItem_49_Click(object sender, EventArgs e)
        {
            this.method_345();
        }

        // Token: 0x060003A5 RID: 933 RVA: 0x00149BCC File Offset: 0x00149BCC
        private void menuItem_43_Click(object sender, EventArgs e)
        {
            this.method_351();
            this.method_352();
        }

        // Token: 0x060003A6 RID: 934 RVA: 0x00149BE8 File Offset: 0x00149BE8
        private void button26_Click(object sender, EventArgs e)
        {
            this.method_364();
        }

        // Token: 0x060003A7 RID: 935 RVA: 0x00149BFC File Offset: 0x00149BFC
        private unsafe void method_364()
        {
            Struct113 @struct = 0;
            initblk(ref @struct + 4, 0, 252);
            this.method_376();
            this.textBox6.AppendText(this.string_21 + " Hitachi " + this.string_19 + " by ");
            this.textBox6.AppendText(this.string_20 + " " + this.string_22 + "\r\n");
            if (this.int_15 == 0)
            {
                this.method_380();
            }
            else if (this.int_15 == 1)
            {
                this.method_381();
            }
            uint uint_;
            uint uint_2;
            uint uint_3;
            uint uint_4;
            if (this.checkBox7.CheckState == CheckState.Unchecked)
            {
                uint_ = 296960U;
                uint_2 = 32U;
                uint_3 = 8192U;
                uint_4 = 1U;
            }
            else
            {
                uint_ = 2375680U;
                uint_2 = 256U;
                uint_3 = 1024U;
                uint_4 = 8U;
            }
            if (this.int_13 == 0 & this.int_14 == 0 & this.int_12 != 79 & this.int_15 == 0)
            {
                string text = "";
                text = text + "If the drive is modified with a firmware that employs f/w stealth" + "\r\n";
                text = text + "a Classic Dump will appear to be stock firmware. For a true dump" + "\r\n";
                text = text + "use one of the other transfer methods." + "\r\n";

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num = (int)MessageBox.Show(text, "Classic Dump", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                int num2 = _Module.clock();
                if (this.method_394(uint_, uint_2, uint_3, uint_4) == 0)
                {
                    uint num3 = (uint)this.method_374(*(ref _Module.struct121_0 + 7172));
                    if (this.method_367(num3) == 0)
                    {
                        num3 = (uint)this.method_374(*(ref _Module.struct121_0 + 7172));
                        this.method_368(num3);
                        int num4 = _Module.clock();
                        int value = num4 - num2;
                        this.textBox6.AppendText("\r\n" + "Dumped in " + Convert.ToString(value) + "mS" + "\r\n");
                        this.method_356();
                    }
                }
            }
            else if (this.int_13 == 0 & this.int_14 == 0 & this.int_12 != 79 & this.int_15 == 1)
            {
                string text = "";
                text = text + "If the drive is modified with a firmware that employs f/w stealth" + "\r\n";
                text = text + "a Classic Dump will appear to be stock firmware. For a true dump" + "\r\n";
                text = text + "use one of the other transfer methods." + "\r\n\r\n";
                text = text + "Also, classic mode works in mode-a over PortIO as there is no" + "\r\n";
                text = text + "requirement for a windows drive letter and will return data." + "\r\n";
                text = text + "A classic dump is no guarantee the drive is in mode-b." + "\r\n";

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                int num = (int)MessageBox.Show(text, "Classic Dump", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                int num5 = _Module.clock();
                if (this.method_395(uint_, uint_2, uint_3, uint_4) == 0)
                {
                    uint num3 = (uint)this.method_374(*(ref _Module.struct121_0 + 7172));
                    if (this.method_367(num3) == 0)
                    {
                        num3 = (uint)this.method_374(*(ref _Module.struct121_0 + 7172));
                        this.method_368(num3);
                        int num6 = _Module.clock();
                        int value2 = num6 - num5;
                        this.textBox6.AppendText("\r\n" + "Dumped in " + Convert.ToString(value2) + "mS" + "\r\n");
                        this.method_356();
                    }
                }
            }
            else if (this.int_14 == 0)
            {
                if (this.method_382() == 0)
                {
                    int num7 = _Module.clock();
                    if (this.method_393(uint_, uint_2, uint_3, uint_4) == 0)
                    {
                        uint num3 = (uint)this.method_374(*(ref _Module.struct121_0 + 7172));
                        if (this.method_367(num3) == 0)
                        {
                            int num8 = _Module.clock();
                            int value3 = num8 - num7;
                            this.textBox6.AppendText("\r\n" + "Dumped in " + Convert.ToString(value3) + "mS" + "\r\n");
                            this.method_356();
                        }
                    }
                }
            }
            else if (this.int_14 == 1)
            {

                _Module.memset(_Module.struct123_0, 0, 2392U);
                this.method_40();
                if (this.method_382() == 0)
                {
                    this.textBox6.AppendText(string.Concat("Dumping Flash:"));
                    if (this.method_393(uint_, uint_2, uint_3, uint_4) == 0)
                    {
                        uint num3 = (uint)this.method_374(*(ref _Module.struct121_0 + 7172));
                        if (this.method_367(num3) == 0)
                        {
                            this.method_37("", 1, *(ref _Module.struct121_0 + 7172));
                            FreeKey freeKey = new FreeKey();
                            freeKey.ushort_0 = *(*(ref _Module.struct123_0 + 4));
                            freeKey.ushort_1 = *(*(ref _Module.struct123_0 + 4) + 2);
                            freeKey.ushort_2 = *(*(ref _Module.struct123_0 + 4) + 2382);
                            freeKey.ushort_3 = *(*(ref _Module.struct123_0 + 4) + 2384);
                            freeKey.textBox1.Text = this.textBox11.Text;
                            if (freeKey.pByte_0 != null)
                            {

                                _Module.free((void*)freeKey.pByte_0);
                            }
                            freeKey.pByte_0 = _Module.malloc(16U);

                            _Module.memcpy((void*)freeKey.pByte_0, *(ref _Module.struct123_0 + 4) + 280, 16U);
                            if (freeKey.pByte_1 != null)
                            {

                                _Module.free((void*)freeKey.pByte_1);
                            }
                            freeKey.pByte_1 = _Module.malloc(96U);

                            _Module.memcpy((void*)freeKey.pByte_1, *(ref _Module.struct123_0 + 4) + 568, 96U);
                            if (freeKey.pByte_2 != null)
                            {

                                _Module.free((void*)freeKey.pByte_2);
                            }
                            freeKey.pByte_2 = _Module.malloc(180U);

                            _Module.memcpy((void*)freeKey.pByte_2, *(ref _Module.struct123_0 + 4) + 780, 180U);
                            if (*(*(ref _Module.struct123_0 + 4) + 2382) == 4)
                            {
                                this.method_9(*(ref _Module.struct123_0 + 4) + 610, 20U);
                                freeKey.textBox2.Text = this.string_0;
                                if (freeKey.pByte_4 != null)
                                {

                                    _Module.free((void*)freeKey.pByte_4);
                                }
                                freeKey.pByte_4 = _Module.malloc(20U);

                                _Module.memset((void*)freeKey.pByte_4, 32, 20U);

                                _Module.memcpy((void*)freeKey.pByte_4, *(ref _Module.struct123_0 + 4) + 610, 20U);
                            }
                            if (freeKey.ShowDialog(this) == DialogResult.OK)
                            {

                                _Module.memcpy(*(ref _Module.struct123_0 + 4) + 280, (void*)freeKey.pByte_0, 16U);

                                _Module.memcpy(*(ref _Module.struct123_0 + 4) + 568, (void*)freeKey.pByte_1, 96U);

                                _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2316, *(ref _Module.struct123_0 + 4) + 576, 28U);

                                _Module.memcpy(*(ref _Module.struct123_0 + 4) + 780, (void*)freeKey.pByte_2, 180U);
                                *(*(ref _Module.struct123_0 + 4) + 2382) = (short)freeKey.ushort_2;
                                *(*(ref _Module.struct123_0 + 4) + 2384) = (short)freeKey.ushort_3;
                                if (*(*(ref _Module.struct123_0 + 4)) != *(*(ref _Module.struct123_0 + 4) + 2382) || *(*(ref _Module.struct123_0 + 4) + 2) != *(*(ref _Module.struct123_0 + 4) + 2384))
                                {
                                    *(*(ref _Module.struct123_0 + 4) + 2020) = 0;
                                }
                                this.bool_10 = true;
                                this.method_47();
                                this.method_41();
                                int num9 = this.method_370(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 4780), (int*)(&@struct));
                                if (num9 > 3)
                                {
                                    this.textBox6.AppendText("Too many Sector Differences Found, Flash aborted !!" + "\r\n");
                                }
                                else
                                {
                                    Struct32 struct2;

                                    _Module.memcpy((void*)(&struct2), *(ref _Module.struct121_0 + 7172), 262144U);

                                    _Module.memcpy(*(ref _Module.struct121_0 + 7172) + 258096, (void*)(&_Module.struct34_1), 48U);
                                    Struct33 struct3;

                                    _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 7172) + 258048, 4096U);
                                    this.textBox6.AppendText("Flash Stability Test" + "\r\n");
                                    this.method_391(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 9564), 262144);
                                    this.method_403(*(ref _Module.struct121_0 + 9564), 2416177152U, 4096U);
                                    this.textBox6.AppendText(string.Concat("Dumping Sector 9003F000:"));
                                    if (this.method_393(2375932U, 4U, 1024U, 1U) == 0)
                                    {
                                        if (_Module.memcmp(*(ref _Module.struct121_0 + 7172), (void*)(&struct3), 4096U) != null)
                                        {
                                            this.textBox6.AppendText("\r\n" + "Read back mis-compare, Restore Aborted" + "\r\n");
                                        }
                                        else
                                        {
                                            this.textBox6.AppendText("\r\n" + "Read back & compare, complete, Flashing Stable!" + "\r\n");
                                            this.textBox6.AppendText("Repairing Test Sector." + "\r\n");

                                            _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct2), 262144U);
                                            this.method_391(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 9564), 262144);
                                            this.method_403(*(ref _Module.struct121_0 + 9564), 2416177152U, 4096U);
                                            this.textBox6.AppendText("Done !" + "\r\n");
                                            if (!this.bool_2)
                                            {

                                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                                int num = (int)MessageBox.Show("Flashing stabilty test reports stable." + "\n\n" + "Do you wish to Continue ?", "Flash Keys", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

                                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                                if (num == 7)
                                                {
                                                    this.textBox6.AppendText("Flash Keys Aborted !" + "\r\n");
                                                    return;
                                                }
                                            }
                                            this.method_391(*(ref _Module.struct121_0 + 4780), *(ref _Module.struct121_0 + 9564), 262144);
                                            if (*(ref @struct + (num9 - 1) * 4) == -1878794240)
                                            {
                                                this.method_403(*(ref _Module.struct121_0 + 9564), 2416173056U, 4096U);
                                                num9--;
                                            }
                                            for (int i = 0; i < num9; i++)
                                            {
                                                this.method_403(*(ref _Module.struct121_0 + 9564), (uint)(*(ref @struct + i * 4)), 4096U);
                                                Application.DoEvents();
                                            }
                                            this.textBox6.AppendText("Done !" + "\r\n");
                                            this.textBox6.AppendText("Write verify test.." + "\r\n");
                                            this.textBox6.AppendText(string.Concat("Dumping Flash:"));
                                            if (this.method_393(uint_, uint_2, uint_3, uint_4) == 0)
                                            {
                                                if (_Module.memcmp(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 4780), 262144U) != null)
                                                {
                                                    this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash process has errors" + "\r\n");
                                                }
                                                else
                                                {
                                                    this.textBox6.AppendText("\r\n" + "Read back & compare completed, Write Verified!" + "\r\n");
                                                    this.textBox6.AppendText("Flash Complete !" + "\r\n");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (this.int_14 == 2)
            {
                if (this.method_382() == 0)
                {
                    this.textBox6.AppendText(string.Concat("Dumping Flash:"));
                    if (this.method_393(uint_, uint_2, uint_3, uint_4) == 0)
                    {
                        uint num3 = (uint)this.method_374(*(ref _Module.struct121_0 + 7172));
                        if (this.method_367(num3) == 0)
                        {
                            this.method_37("", 1, *(ref _Module.struct121_0 + 7172));
                            if (*_Module.struct123_0 == 0)
                            {
                                this.method_50(5);
                            }
                            if (*_Module.struct123_0 != 0)
                            {
                                *(*(ref _Module.struct123_0 + 4) + 2020) = 0;
                                this.textBox6.AppendText(string.Concat("Setting Master Checksum."));
                                this.method_46();
                                this.method_47();
                                this.method_41();
                                int num10 = this.method_370(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 4780), (int*)(&@struct));
                                if (num10 > 4)
                                {
                                    this.textBox6.AppendText("Too many Sector Differences Found, Flash aborted !!" + "\r\n");
                                }
                                else
                                {
                                    Struct32 struct2;

                                    _Module.memcpy((void*)(&struct2), *(ref _Module.struct121_0 + 7172), 262144U);

                                    _Module.memcpy(*(ref _Module.struct121_0 + 7172) + 258096, (void*)(&_Module.struct34_1), 48U);
                                    Struct33 struct3;

                                    _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 7172) + 258048, 4096U);
                                    this.textBox6.AppendText("Flash Stability Test" + "\r\n");
                                    this.method_391(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 9564), 262144);
                                    this.method_403(*(ref _Module.struct121_0 + 9564), 2416177152U, 4096U);
                                    this.textBox6.AppendText(string.Concat("Dumping Sector 9003F000:"));
                                    if (this.method_393(2375932U, 4U, 1024U, 1U) == 0)
                                    {
                                        if (_Module.memcmp(*(ref _Module.struct121_0 + 7172), (void*)(&struct3), 4096U) != null)
                                        {
                                            this.textBox6.AppendText("\r\n" + "Read back mis-compare, Restore Aborted" + "\r\n");
                                        }
                                        else
                                        {
                                            this.textBox6.AppendText("\r\n" + "Read back & compare, complete, Flashing Stable!" + "\r\n");
                                            this.textBox6.AppendText("Repairing Test Sector." + "\r\n");

                                            _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct2), 262144U);
                                            this.method_391(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 9564), 262144);
                                            this.method_403(*(ref _Module.struct121_0 + 9564), 2416177152U, 4096U);
                                            this.textBox6.AppendText("Done !" + "\r\n");
                                            if (!this.bool_2)
                                            {

                                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                                int num = (int)MessageBox.Show("Flashing stabilty test reports stable." + "\n\n" + "Do you wish to Continue ?", "Flash ID Strings", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

                                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                                if (num == 7)
                                                {
                                                    this.textBox6.AppendText("Flash ID Strings Aborted !" + "\r\n");
                                                    return;
                                                }
                                            }
                                            this.method_391(*(ref _Module.struct121_0 + 4780), *(ref _Module.struct121_0 + 9564), 262144);
                                            if (*(ref @struct + (num10 - 1) * 4) == -1878794240)
                                            {
                                                this.method_403(*(ref _Module.struct121_0 + 9564), 2416173056U, 4096U);
                                                num10--;
                                            }
                                            for (int i = 0; i < num10; i++)
                                            {
                                                this.method_403(*(ref _Module.struct121_0 + 9564), (uint)(*(ref @struct + i * 4)), 4096U);
                                                Application.DoEvents();
                                            }
                                            this.textBox6.AppendText("Done !" + "\r\n");
                                            this.textBox6.AppendText("Write verify test.." + "\r\n");
                                            this.textBox6.AppendText(string.Concat("Dumping Flash:"));
                                            if (this.method_393(uint_, uint_2, uint_3, uint_4) == 0)
                                            {
                                                if (_Module.memcmp(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 4780), 262144U) != null)
                                                {
                                                    this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash process has errors" + "\r\n");
                                                }
                                                else
                                                {
                                                    this.textBox6.AppendText("\r\n" + "Read back & compare completed, Write Verified!" + "\r\n");
                                                    this.textBox6.AppendText("Flash Complete !" + "\r\n");
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (this.int_14 == 3)
            {
                if (this.method_382() == 0)
                {
                    this.textBox6.AppendText(string.Concat("Dumping Flash:"));
                    if (this.method_393(uint_, uint_2, uint_3, uint_4) == 0)
                    {
                        uint num3 = (uint)this.method_374(*(ref _Module.struct121_0 + 7172));
                        if (this.method_367(num3) == 0)
                        {
                            this.method_37("", 0, *(ref _Module.struct121_0 + 7172));
                            uint num11 = (uint)((int)(*(*(ref _Module.struct121_0 + 7172) + 255999)) << 24 | (int)(*(*(ref _Module.struct121_0 + 7172) + 255998)) << 16 | (int)(*(*(ref _Module.struct121_0 + 7172) + 255997)) << 8 | (int)(*(*(ref _Module.struct121_0 + 7172) + 255996)));
                            if (num11 == 0U)
                            {

                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                MessageBox.Show("Master Checksum is Set, this is normal for a modded drive." + "\n" + "Restore Drive to Stock first", "Flash iXtreme", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                this.textBox6.AppendText("Flash Aborted" + "\r\n");
                            }
                            else
                            {
                                num3 = (uint)this.method_374(*(ref _Module.struct121_0 + 7172));
                                if (this.method_365(num3, num11) == 0)
                                {
                                    this.method_377();
                                    int num12 = this.method_369(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 4780), (int*)(&@struct));
                                    if (num12 > 16)
                                    {
                                        this.textBox6.AppendText("Too many Sector Differences Found, Flash aborted !!" + "\r\n");
                                    }
                                    else
                                    {
                                        Struct32 struct2;

                                        _Module.memcpy((void*)(&struct2), *(ref _Module.struct121_0 + 7172), 262144U);

                                        _Module.memcpy(*(ref _Module.struct121_0 + 7172) + 258096, (void*)(&_Module.struct34_1), 48U);
                                        Struct33 struct3;

                                        _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 7172) + 258048, 4096U);
                                        this.textBox6.AppendText("Flash Stability Test" + "\r\n");
                                        this.method_391(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 9564), 262144);
                                        this.method_403(*(ref _Module.struct121_0 + 9564), 2416177152U, 4096U);
                                        this.textBox6.AppendText(string.Concat("Dumping Sector 9003F000:"));
                                        if (this.method_393(2375932U, 4U, 1024U, 1U) == 0)
                                        {
                                            if (_Module.memcmp(*(ref _Module.struct121_0 + 7172), (void*)(&struct3), 4096U) != null)
                                            {
                                                this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash Aborted" + "\r\n");
                                            }
                                            else
                                            {
                                                this.textBox6.AppendText("\r\n" + "Read back & compare completed, Flashing Stable!" + "\r\n");
                                                this.textBox6.AppendText("Repairing Test Sector." + "\r\n");

                                                _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct2), 262144U);
                                                this.method_391(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 9564), 262144);
                                                this.method_403(*(ref _Module.struct121_0 + 9564), 2416177152U, 4096U);
                                                this.textBox6.AppendText("Done !" + "\r\n");
                                                if (!this.bool_2)
                                                {

                                                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                                    int num = (int)MessageBox.Show("Flashing stabilty test reports stable." + "\n\n" + "Do you wish to Continue ?", "Flash iXtreme", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

                                                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                                    if (num == 7)
                                                    {
                                                        this.textBox6.AppendText("Flash Aborted !" + "\r\n");
                                                        return;
                                                    }
                                                }
                                                this.method_391(*(ref _Module.struct121_0 + 4780), *(ref _Module.struct121_0 + 9564), 262144);
                                                if (*(ref @struct + (num12 - 1) * 4) == -1878794240)
                                                {
                                                    this.method_403(*(ref _Module.struct121_0 + 9564), 2416173056U, 4096U);
                                                    num12--;
                                                }
                                                for (int i = 0; i < num12; i++)
                                                {
                                                    this.method_403(*(ref _Module.struct121_0 + 9564), (uint)(*(ref @struct + i * 4)), 4096U);
                                                    Application.DoEvents();
                                                }
                                                this.textBox6.AppendText("Done !" + "\r\n");
                                                this.textBox6.AppendText("Write verify test.." + "\r\n");
                                                this.textBox6.AppendText(string.Concat("Dumping Flash:"));
                                                if (this.method_393(uint_, uint_2, uint_3, uint_4) == 0)
                                                {
                                                    if (_Module.memcmp(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 4780), 262144U) != null)
                                                    {
                                                        this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash process has errors" + "\r\n");
                                                    }
                                                    else
                                                    {
                                                        this.textBox6.AppendText("\r\n" + "Read back & compare completed, Write Verified!" + "\r\n");
                                                        this.textBox6.AppendText("Flash Complete !" + "\r\n");
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (this.int_14 == 4)
            {
                if (this.method_382() == 0)
                {
                    this.textBox6.AppendText(string.Concat("Dumping Flash:"));
                    if (this.method_393(uint_, uint_2, uint_3, uint_4) == 0)
                    {
                        this.method_37("", 0, *(ref _Module.struct121_0 + 7172));
                        uint num3 = (uint)this.method_374(*(ref _Module.struct121_0 + 7172));
                        if (this.method_367(num3) == 0)
                        {
                            uint num11 = (uint)((int)(*(*(ref _Module.struct121_0 + 7172) + 255999)) << 24 | (int)(*(*(ref _Module.struct121_0 + 7172) + 255998)) << 16 | (int)(*(*(ref _Module.struct121_0 + 7172) + 255997)) << 8 | (int)(*(*(ref _Module.struct121_0 + 7172) + 255996)));
                            if (num11 != 0U)
                            {

                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                MessageBox.Show("Master Checksum is not Set, this is not normal for a modded drive." + "\n" + "Drive is not likely Hacked", "Flash Restore", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                this.textBox6.AppendText("Restore Aborted" + "\r\n");
                            }
                            else
                            {
                                num3 = (uint)this.method_374(*(ref _Module.struct121_0 + 7172));
                                if (this.method_366(num3) == 0)
                                {
                                    this.method_377();
                                    int num13 = this.method_371(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 4780), (int*)(&@struct));
                                    if (num13 > 16)
                                    {
                                        this.textBox6.AppendText("Too many Sector Differences Found, Flash aborted !!" + "\r\n");
                                    }
                                    else
                                    {
                                        Struct32 struct2;

                                        _Module.memcpy((void*)(&struct2), *(ref _Module.struct121_0 + 7172), 262144U);

                                        _Module.memcpy(*(ref _Module.struct121_0 + 7172) + 258096, (void*)(&_Module.struct34_1), 48U);
                                        Struct33 struct3;

                                        _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 7172) + 258048, 4096U);
                                        this.textBox6.AppendText("Flash Stability Test" + "\r\n");
                                        this.method_391(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 9564), 262144);
                                        this.method_403(*(ref _Module.struct121_0 + 9564), 2416177152U, 4096U);
                                        this.textBox6.AppendText(string.Concat("Dumping Sector 9003F000:"));
                                        if (this.method_393(2375932U, 4U, 1024U, 1U) == 0)
                                        {
                                            if (_Module.memcmp(*(ref _Module.struct121_0 + 7172), (void*)(&struct3), 4096U) != null)
                                            {
                                                this.textBox6.AppendText("\r\n" + "Read back mis-compare, Restore Aborted" + "\r\n");
                                            }
                                            else
                                            {
                                                this.textBox6.AppendText("\r\n" + "Read back & compare completed, Flashing Stable!" + "\r\n");
                                                this.textBox6.AppendText("Repairing Test Sector." + "\r\n");

                                                _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct2), 262144U);
                                                this.method_391(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 9564), 262144);
                                                this.method_403(*(ref _Module.struct121_0 + 9564), 2416177152U, 4096U);
                                                this.textBox6.AppendText("Done !" + "\r\n");
                                                if (!this.bool_2)
                                                {

                                                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                                    int num = (int)MessageBox.Show("Flashing stabilty test reports stable." + "\n\n" + "Do you wish to Continue ?", "Restore Firmware", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

                                                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                                    if (num == 7)
                                                    {
                                                        this.textBox6.AppendText("Restore Aborted !" + "\r\n");
                                                        return;
                                                    }
                                                }
                                                this.method_391(*(ref _Module.struct121_0 + 4780), *(ref _Module.struct121_0 + 9564), 262144);
                                                for (int i = 0; i < num13; i++)
                                                {
                                                    this.method_403(*(ref _Module.struct121_0 + 9564), (uint)(*(ref @struct + i * 4)), 4096U);
                                                    Application.DoEvents();
                                                }
                                                this.textBox6.AppendText("Done !" + "\r\n");
                                                this.textBox6.AppendText("Write verify test.." + "\r\n");
                                                this.textBox6.AppendText(string.Concat("Dumping Flash:"));
                                                if (this.method_393(uint_, uint_2, uint_3, uint_4) == 0)
                                                {
                                                    if (_Module.memcmp(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 4780), 262144U) != null)
                                                    {
                                                        this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash process has errors" + "\r\n");
                                                    }
                                                    else
                                                    {
                                                        this.textBox6.AppendText("\r\n" + "Read back & compare completed, Write Verified!" + "\r\n");
                                                        this.textBox6.AppendText("Flash Complete !" + "\r\n");
                                                        this.textBox6.AppendText("\r\n" + "Setting Checksum!" + "\r\n");
                                                        num11 = (uint)((int)(*(*(ref _Module.struct121_0 + 7172) + 255999)) << 24 | (int)(*(*(ref _Module.struct121_0 + 7172) + 255998)) << 16 | (int)(*(*(ref _Module.struct121_0 + 7172) + 255997)) << 8 | (int)(*(*(ref _Module.struct121_0 + 7172) + 255996)));
                                                        uint num14 = (uint)this.method_373(*(ref _Module.struct121_0 + 7172));
                                                        *(*(ref _Module.struct121_0 + 7172) + 255996) = (byte)(num14 & 255U);
                                                        *(*(ref _Module.struct121_0 + 7172) + 255997) = (byte)((num14 & 65280U) >> 8);
                                                        *(*(ref _Module.struct121_0 + 7172) + 255998) = (byte)((num14 & 16711680U) >> 16);
                                                        *(*(ref _Module.struct121_0 + 7172) + 255999) = (byte)((num14 & 4278190080U) >> 24);
                                                        if (num11 == 0U && !this.bool_2)
                                                        {

                                                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                                            MessageBox.Show("Master Checksum is still Set, this is normal for a modded drive." + "\n" + "However Checksum should be set for a full restore!", "Fix Checksum", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                                                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                                        }
                                                        this.method_391(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 9564), 262144);
                                                        this.method_403(*(ref _Module.struct121_0 + 9564), 2416173056U, 4096U);

                                                        _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 7172) + 253952, 4096U);
                                                        this.textBox6.AppendText(string.Concat("Dumping Sector 9003E000:"));
                                                        if (this.method_393(2375928U, 4U, 1024U, 1U) == 0)
                                                        {
                                                            if (_Module.memcmp(*(ref _Module.struct121_0 + 7172), (void*)(&struct3), 4096U) != null)
                                                            {
                                                                this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash Spoof ID's Failed" + "\r\n");
                                                            }
                                                            else
                                                            {
                                                                this.textBox6.AppendText("\r\n" + "Read back & compare completed, Write Verified!" + "\r\n");
                                                                this.textBox6.AppendText("Flash Checksum Complete !" + "\r\n");
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (this.int_14 == 5)
            {
                if (this.method_382() == 0 && this.method_393(uint_, uint_2, uint_3, uint_4) == 0)
                {
                    uint num3 = (uint)this.method_374(*(ref _Module.struct121_0 + 7172));
                    if (this.method_367(num3) == 0)
                    {
                        uint num11 = (uint)((int)(*(*(ref _Module.struct121_0 + 7172) + 255999)) << 24 | (int)(*(*(ref _Module.struct121_0 + 7172) + 255998)) << 16 | (int)(*(*(ref _Module.struct121_0 + 7172) + 255997)) << 8 | (int)(*(*(ref _Module.struct121_0 + 7172) + 255996)));
                        uint num14 = (uint)this.method_373(*(ref _Module.struct121_0 + 7172));
                        if (num11 == 0U)
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            int num = (int)MessageBox.Show("Master Checksum is Set, this is normal for a modded drive." + "\n" + "Do you wish to Continue ?", "Fix Checksum", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            if (num == 7)
                            {
                                return;
                            }
                        }
                        if (num11 == num14)
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            int num = (int)MessageBox.Show("The Correct Checksum is already set !" + "\n" + "Continue and set Master Checksum ?", "Fix Checksum", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            if (num == 7)
                            {
                                return;
                            }
                            *(*(ref _Module.struct121_0 + 7172) + 255996) = 0;
                            *(*(ref _Module.struct121_0 + 7172) + 255997) = 0;
                            *(*(ref _Module.struct121_0 + 7172) + 255998) = 0;
                            *(*(ref _Module.struct121_0 + 7172) + 255999) = 0;
                        }
                        if (num11 != num14 & num11 == 0U)
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            int num = (int)MessageBox.Show("The current Checksum is incorrect, but is set to Master Checksum!" + "\n\n" + "Continue and flash Checksum ?", "Fix Checksum", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            if (num == 7)
                            {
                                return;
                            }
                            *(*(ref _Module.struct121_0 + 7172) + 255996) = (byte)(num14 & 255U);
                            *(*(ref _Module.struct121_0 + 7172) + 255997) = (byte)((num14 & 65280U) >> 8);
                            *(*(ref _Module.struct121_0 + 7172) + 255998) = (byte)((num14 & 16711680U) >> 16);
                            *(*(ref _Module.struct121_0 + 7172) + 255999) = (byte)((num14 & 4278190080U) >> 24);
                        }
                        if (num11 != num14 & num11 != 0U)
                        {

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            int num = (int)MessageBox.Show("The current Checksum is incorrect, AND is NOT set to Master Checksum!" + "\n" + "Drive will not boot next time if not corrected !!" + "\n" + "Continue and flash Checksum ?", "Fix Checksum", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            if (num == 7)
                            {
                                return;
                            }
                            *(*(ref _Module.struct121_0 + 7172) + 255996) = (byte)(num14 & 255U);
                            *(*(ref _Module.struct121_0 + 7172) + 255997) = (byte)((num14 & 65280U) >> 8);
                            *(*(ref _Module.struct121_0 + 7172) + 255998) = (byte)((num14 & 16711680U) >> 16);
                            *(*(ref _Module.struct121_0 + 7172) + 255999) = (byte)((num14 & 4278190080U) >> 24);
                        }
                        Struct32 struct2;

                        _Module.memcpy((void*)(&struct2), *(ref _Module.struct121_0 + 7172), 262144U);

                        _Module.memcpy(*(ref _Module.struct121_0 + 7172) + 258096, (void*)(&_Module.struct34_1), 48U);
                        Struct33 struct3;

                        _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 7172) + 258048, 4096U);
                        this.textBox6.AppendText("Flash Stability Test" + "\r\n");
                        this.method_391(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 9564), 262144);
                        this.method_403(*(ref _Module.struct121_0 + 9564), 2416177152U, 4096U);
                        this.textBox6.AppendText(string.Concat("Dumping Sector 9003F000:"));
                        if (this.method_393(2375932U, 4U, 1024U, 1U) == 0)
                        {
                            if (_Module.memcmp(*(ref _Module.struct121_0 + 7172), (void*)(&struct3), 4096U) != null)
                            {
                                this.textBox6.AppendText("\r\n" + "Read back mis-compare, Restore Aborted" + "\r\n");
                            }
                            else
                            {
                                this.textBox6.AppendText("\r\n" + "Read back & compare completed, Flashing Stable!" + "\r\n");
                                this.textBox6.AppendText("Repairing Test Sector." + "\r\n");

                                _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct2), 262144U);
                                this.method_391(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 9564), 262144);
                                this.method_403(*(ref _Module.struct121_0 + 9564), 2416177152U, 4096U);
                                this.textBox6.AppendText("Done !" + "\r\n");
                                if (!this.bool_2)
                                {

                                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                    int num = (int)MessageBox.Show("Flashing stabilty test reports stable." + "\n\n" + "Do you wish to Continue ?", "Fix Checksum", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

                                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                    if (num == 7)
                                    {
                                        this.textBox6.AppendText("Fix Checksum Aborted !" + "\r\n");
                                        return;
                                    }
                                }
                                this.method_391(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 9564), 262144);
                                this.method_403(*(ref _Module.struct121_0 + 9564), 2416173056U, 4096U);

                                _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 7172) + 253952, 4096U);
                                this.textBox6.AppendText(string.Concat("Dumping Sector 9003E000:"));
                                if (this.method_393(2375928U, 4U, 1024U, 1U) == 0)
                                {
                                    if (_Module.memcmp(*(ref _Module.struct121_0 + 7172), (void*)(&struct3), 4096U) != null)
                                    {
                                        this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash Spoof ID's Failed" + "\r\n");
                                    }
                                    else
                                    {
                                        this.textBox6.AppendText("\r\n" + "Read back & compare completed, Write Verified!" + "\r\n");
                                        this.textBox6.AppendText("Flash Checksum Complete !" + "\r\n");
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else if (!this.SaveTarget.Enabled)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No Firmware is loaded to Target buffer", "Free Flash", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else if (this.int_14 == 6 && this.method_382() == 0)
            {
                this.textBox6.AppendText(string.Concat("Dumping Flash:"));
                if (this.method_393(uint_, uint_2, uint_3, uint_4) == 0)
                {
                    uint num3 = (uint)this.method_374(*(ref _Module.struct121_0 + 7172));
                    if (this.method_367(num3) == 0)
                    {
                        this.textBox6.AppendText(string.Concat("\r\n"));
                        num3 = (uint)this.method_374(*(ref _Module.struct121_0 + 7172));
                        uint num15 = (uint)this.method_374(*(ref _Module.struct121_0 + 4780));
                        int num;
                        if (num3 != num15)
                        {
                            this.textBox6.AppendText("Rev of Attached Drive and Target buffer do Not Match!" + "\r\n");

                            _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                            num = (int)MessageBox.Show("Rev of Attached Drive and Target buffer do Not Match!" + "\n\n" + "Are you absolutely sure you wish to Continue ?", "Free Flash Firmware", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

                            _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                            if (num == 7)
                            {
                                this.textBox6.AppendText("User Aborted !" + "\r\n");
                                return;
                            }
                            this.textBox6.AppendText("Rev of Attached Drive and Target buffer are a Match!" + "\r\n");
                        }
                        int num16 = this.method_372(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 4780), (int*)(&@struct));
                        string text2 = "Sector Compare detected " + Convert.ToString(num16) + " Differences!";
                        text2 += "\n\n" + "Are you sure you wish to Continue ?";

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        num = (int)MessageBox.Show(text2, "Free Flash Firmware", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        if (num == 7)
                        {
                            this.textBox6.AppendText("Free Flash Aborted by User !" + "\r\n");
                        }
                        else
                        {
                            Struct32 struct2;

                            _Module.memcpy((void*)(&struct2), *(ref _Module.struct121_0 + 7172), 262144U);

                            _Module.memcpy(*(ref _Module.struct121_0 + 7172) + 258096, (void*)(&_Module.struct34_1), 48U);
                            Struct33 struct3;

                            _Module.memcpy((void*)(&struct3), *(ref _Module.struct121_0 + 7172) + 258048, 4096U);
                            this.textBox6.AppendText("Flash Stability Test" + "\r\n");
                            this.method_391(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 9564), 262144);
                            this.method_403(*(ref _Module.struct121_0 + 9564), 2416177152U, 4096U);
                            this.textBox6.AppendText(string.Concat("Dumping Sector 9003F000:"));
                            if (this.method_393(2375932U, 4U, 1024U, 1U) == 0)
                            {
                                if (_Module.memcmp(*(ref _Module.struct121_0 + 7172), (void*)(&struct3), 4096U) != null)
                                {
                                    this.textBox6.AppendText("\r\n" + "Read back mis-compare, Restore Aborted" + "\r\n");
                                }
                                else
                                {
                                    this.textBox6.AppendText("\r\n" + "Read back & compare completed, Flashing Stable!" + "\r\n");
                                    this.textBox6.AppendText("Repairing Test Sector." + "\r\n");

                                    _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct2), 262144U);
                                    this.method_391(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 9564), 262144);
                                    this.method_403(*(ref _Module.struct121_0 + 9564), 2416177152U, 4096U);
                                    this.textBox6.AppendText("Done !" + "\r\n");
                                    if (!this.bool_2)
                                    {

                                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                        num = (int)MessageBox.Show("Flashing stabilty test reports stable." + "\n\n" + "Do you wish to Continue ?", "Restore Firmware", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

                                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                                        if (num == 7)
                                        {
                                            this.textBox6.AppendText("Free Flash Aborted by User !" + "\r\n");
                                            return;
                                        }
                                    }
                                    this.method_391(*(ref _Module.struct121_0 + 4780), *(ref _Module.struct121_0 + 9564), 262144);
                                    for (int i = 0; i < num16; i++)
                                    {
                                        this.method_403(*(ref _Module.struct121_0 + 9564), (uint)(*(ref @struct + i * 4)), 4096U);
                                    }
                                    this.textBox6.AppendText("Done !" + "\r\n");
                                    this.textBox6.AppendText("Write verify test.." + "\r\n");
                                    this.textBox6.AppendText(string.Concat("Dumping Flash:"));
                                    if (this.method_393(uint_, uint_2, uint_3, uint_4) == 0)
                                    {

                                        _Module.memcpy(*(ref _Module.struct121_0 + 4780) + 16384, *(ref _Module.struct121_0 + 7172) + 16384, 4096U);
                                        if (_Module.memcmp(*(ref _Module.struct121_0 + 7172), *(ref _Module.struct121_0 + 4780), 262144U) != null)
                                        {
                                            this.textBox6.AppendText("\r\n" + "Read back mis-compare, Flash process has errors" + "\r\n");
                                        }
                                        else
                                        {
                                            this.textBox6.AppendText("\r\n" + "Read back & compare completed, Write Verified!" + "\r\n");
                                            this.textBox6.AppendText("Flash Complete !" + "\r\n");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        // Token: 0x060003A8 RID: 936 RVA: 0x0014C660 File Offset: 0x0014C660
        private unsafe int method_365(uint uint_0, uint uint_1)
        {
            string text = null;
            string[] commandLineArgs = Environment.GetCommandLineArgs();
            text = Path.GetDirectoryName(commandLineArgs[0]);
            string strB;
            if (uint_0 == 789421430U & uint_1 == 209244429U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0032" + "\r\n");
                text += "\\firmware\\LTPlus-32-2.0.bin";
                strB = "b0967f0c91d94983bdc491b584376164";
            }
            else if (uint_0 == 529584510U & uint_1 == 269849813U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0036" + "\r\n");
                text += "\\firmware\\LTPlus-36-2.0.bin";
                strB = "a7417f533673b4378d5899aa2703f80e";
            }
            else if (uint_0 == 1731285449U & uint_1 == 564514654U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0040" + "\r\n");
                text += "\\firmware\\LTPlus-40-2.0.bin";
                strB = "dbc02297fe8416c10d722e8febef3529";
            }
            else if (uint_0 == 4236510092U & uint_1 == 3746272492U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0046" + "\r\n");
                text += "\\firmware\\LTPlus-46-2.0.bin";
                strB = "7b4277d66791adefca382dda7776c3fb";
            }
            else if (uint_0 == 17588177U & uint_1 == 862461110U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0047" + "\r\n");
                text += "\\firmware\\LTPlus-47-2.0.bin";
                strB = "d0aa72da4a0663ba90dcd464ba70417f";
            }
            else if (uint_0 == 2999884414U & uint_1 == 2132095234U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0058" + "\r\n");
                text += "\\firmware\\LTPlus-58-2.0.bin";
                strB = "3a5b12f9570dea10d5fcceab8f866777";
            }
            else if (uint_0 == 253026502U & uint_1 == 1729595577U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0059" + "\r\n");
                text += "\\firmware\\LTPlus-59-2.0.bin";
                strB = "eddd064142a0fc770bc6077e49de9791";
            }
            else if (uint_0 == 771127765U & uint_1 == 3665783978U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0078" + "\r\n");
                text += "\\firmware\\LTPlus-78-4b00-3.0.bin";
                strB = "8def3de4f7b43c49d5e2c70bbd7ca02f";
            }
            else if (uint_0 == 2680630850U & uint_1 == 372531126U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0078" + "\r\n");
                text += "\\firmware\\LTPlus-78-4c30-3.0.bin";
                strB = "234f01b84a4c1114082e94ebacf856d5";
            }
            else if (uint_0 == 3231213612U & uint_1 == 623629642U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0078" + "\r\n");
                text += "\\firmware\\LTPlus-78-4d20-3.0.bin";
                strB = "56633315e7ad292781dde92b9502682c";
            }
            else if (uint_0 == 1482142839U & uint_1 == 1838511619U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0078" + "\r\n");
                text += "\\firmware\\LTPlus-78-4e10-3.0.bin";
                strB = "5851cf7254417842aa99e8fbdf741a29";
            }
            else if (uint_0 == 2691219462U & uint_1 == 1702627297U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0079" + "\r\n");
                text += "\\firmware\\LTPlus-79-4b00-3.0.bin";
                strB = "ca7d8743b2574f99121791ee3e09d3ed";
            }
            else if (uint_0 == 811045522U & uint_1 == 646507808U)
            {
                this.textBox6.AppendText("\r\n" + "LTPlus is Stock, rev 0079" + "\r\n");
                text += "\\firmware\\LTPlus-79-4c30-3.0.bin";
                strB = "ba28a150680f636fbde8e493def1a51c";
            }
            else if (uint_0 == 1009034336U & uint_1 == 2894005260U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0079" + "\r\n");
                text += "\\firmware\\LTPlus-79-4d20-3.0.bin";
                strB = "a10b48a812341119e1b7b926151ce3d1";
            }
            else if (uint_0 == 3402234535U & uint_1 == 55405718U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is Stock, rev 0079" + "\r\n");
                text += "\\firmware\\LTPlus-79-4e10-3.0.bin";
                strB = "f746451ff81bbf8546449223f9e88a10";
            }
            else
            {
                if (uint_0 == 789421430U & uint_1 != 209244429U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0032 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                if (uint_0 == 529584510U & uint_1 != 269849813U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0036 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                if (uint_0 == 1731285449U & uint_1 != 564514654U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0036 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                if (uint_0 == 4236510092U & uint_1 != 3746272492U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0040 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                if (uint_0 == 17588177U & uint_1 != 862461110U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0047 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                if (uint_0 == 2999884414U & uint_1 != 2132095234U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0058 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                if (uint_0 == 253026502U & uint_1 != 1729595577U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0059 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                if (uint_0 == 771127765U & uint_1 != 3665783978U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0078 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                if (uint_0 == 2680630850U & uint_1 != 372531126U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0078 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                if (uint_0 == 3231213612U & uint_1 != 623629642U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0078 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                if (uint_0 == 1482142839U & uint_1 != 1838511619U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0078 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                if (uint_0 == 2691219462U & uint_1 != 1702627297U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0079 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                if (uint_0 == 811045522U & uint_1 != 646507808U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0079 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                if (uint_0 == 1009034336U & uint_1 != 2894005260U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0079 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                if (uint_0 == 3402234535U & uint_1 != 55405718U)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("Drive is Non-Stock rev 0079 But Master Checksum is not Set" + "\n" + "Use Fix Checksum to set Master Checksum, then" + "\n" + "Use Restore Firmware to Restore to Stock!", "Non-Stock f/w", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    return 1;
                }
                return 1;
            }
            IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
            IntPtr value = intPtr;
            sbyte* pSbyte_ = (sbyte*)((void*)value);
            int result;
            if (_Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_4)) == null)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("Can't open file" + " " + text, "Auto-Load LT-Plus", MessageBoxButtons.OK);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 1;
            }
            else
            {
                GStruct93 gstruct;

                _Module.smethod_111(ref gstruct);
                int result2;
                try
                {
                    GStruct19 gstruct2;
                    GStruct19* pGstruct19_ = _Module.smethod_91(ref gstruct2, (sbyte*)pSbyte_);
                    GStruct19 gstruct3;

                    _Module.smethod_114(ref gstruct, &gstruct3, (GStruct19*)pGstruct19_);
                    try
                    {
                        string strA = new string(_Module.smethod_94(ref gstruct3));
                        if (string.Compare(strA, strB) == 0)
                        {
                            goto IL_58A;
                        }

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("LT-Plus file failed MD5 hash check!", "Flash LT-Plus", MessageBoxButtons.OK);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        result2 = 1;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct3));
                        throw;
                    }

                    _Module.smethod_92(ref gstruct3);
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }

                _Module.smethod_112(ref gstruct);
                return result2;
                int num;
                try
                {
                    GStruct19 gstruct3;
                    try
                    {
                    IL_58A:
                        this.textBox6.AppendText(string.Concat("Auto-"));
                        this.method_36(text, 1);
                        num = 0;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct3));
                        throw;
                    }

                    _Module.smethod_92(ref gstruct3);
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }

                _Module.smethod_112(ref gstruct);
                result = num;
            }
            return result;
        }

        // Token: 0x060003A9 RID: 937 RVA: 0x0014D3A0 File Offset: 0x0014D3A0
        private unsafe int method_366(uint uint_0)
        {
            string text = null;
            string[] commandLineArgs = Environment.GetCommandLineArgs();
            text = Path.GetDirectoryName(commandLineArgs[0]);
            string strB;
            if (uint_0 == 789421430U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0032" + "\r\n");
                text += "\\firmware\\orig32.bin";
                strB = "058074454a168a18129d44c4b504ae51";
            }
            else if (uint_0 == 529584510U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0036" + "\r\n");
                text += "\\firmware\\orig36.bin";
                strB = "0de3e5f4a183ccad27b88c484770511e";
            }
            else if (uint_0 == 1731285449U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0040" + "\r\n");
                text += "\\firmware\\orig40.bin";
                strB = "c7ed7f4594262037abfc1dafd2319e02";
            }
            else if (uint_0 == 4236510092U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0046" + "\r\n");
                text += "\\firmware\\orig46.bin";
                strB = "8d6a1b95ca4ec5862be291446264aae7";
            }
            else if (uint_0 == 17588177U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0047" + "\r\n");
                text += "\\firmware\\orig47.bin";
                strB = "a784664c1e38cb928014c60aa0ddbf9e";
            }
            else if (uint_0 == 2999884414U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0058" + "\r\n");
                text += "\\firmware\\orig58.bin";
                strB = "6c4fb9606c3594e061b09cb90629c149";
            }
            else if (uint_0 == 253026502U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0059" + "\r\n");
                text += "\\firmware\\orig59.bin";
                strB = "8788995e164450f026f7bc0ac828e353";
            }
            else if (uint_0 == 771127765U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4B00" + "\r\n");
                text += "\\firmware\\orig78-4b00.bin";
                strB = "8b77fdc3478e8491da7b84a5225fd5d3";
            }
            else if (uint_0 == 2680630850U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4C30" + "\r\n");
                text += "\\firmware\\orig78-4c30.bin";
                strB = "35cf4723847cdcb3e0fec8ec983058b5";
            }
            else if (uint_0 == 3231213612U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4D20" + "\r\n");
                text += "\\firmware\\orig78-4d20.bin";
                strB = "ec14386c45bcb8f2915a122c0b84ca73";
            }
            else if (uint_0 == 1482142839U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4E10" + "\r\n");
                text += "\\firmware\\orig78-4e10.bin";
                strB = "7446249cfbd63642632e2481e0dc7b7d";
            }
            else if (uint_0 == 2691219462U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4B00" + "\r\n");
                text += "\\firmware\\orig79-4b00.bin";
                strB = "bb08e540dcabb44cb15551d10e6a4b03";
            }
            else if (uint_0 == 811045522U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4C30" + "\r\n");
                text += "\\firmware\\orig79-4c30.bin";
                strB = "53f8bb9c57b2e1f3d643adfe6fa3ff30";
            }
            else if (uint_0 == 1009034336U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4D20" + "\r\n");
                text += "\\firmware\\orig79-4d20.bin";
                strB = "df7bcaa6c29063e3da95800d7694d5d9";
            }
            else
            {
                if (uint_0 != 3402234535U)
                {
                    this.textBox6.AppendText("\r\n" + "Drive rev undetermined, Aborting!" + "\r\n");
                    return 1;
                }
                this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4E10" + "\r\n");
                text += "\\firmware\\orig79-4e10.bin";
                strB = "a61fa8b34dfe21531d1428346d68149d";
            }
            IntPtr intPtr = Marshal.StringToHGlobalAnsi(text);
            IntPtr value = intPtr;
            sbyte* pSbyte_ = (sbyte*)((void*)value);
            int result;
            if (_Module.fopen((sbyte*)pSbyte_, (sbyte*)(&_Module.struct18_4)) == null)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("Can't open file" + " " + text, "Auto-Load Stock f/w", MessageBoxButtons.OK);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 1;
            }
            else
            {
                GStruct93 gstruct;

                _Module.smethod_111(ref gstruct);
                int result2;
                try
                {
                    GStruct19 gstruct2;
                    GStruct19* pGstruct19_ = _Module.smethod_91(ref gstruct2, (sbyte*)pSbyte_);
                    GStruct19 gstruct3;

                    _Module.smethod_114(ref gstruct, &gstruct3, (GStruct19*)pGstruct19_);
                    try
                    {
                        string strA = new string(_Module.smethod_94(ref gstruct3));
                        if (string.Compare(strA, strB) == 0)
                        {
                            goto IL_4DF;
                        }

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Orig bin file failed MD5 hash check!", "Restore Firmware", MessageBoxButtons.OK);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        result2 = 1;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct3));
                        throw;
                    }

                    _Module.smethod_92(ref gstruct3);
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }

                _Module.smethod_112(ref gstruct);
                return result2;
                int num;
                try
                {
                    GStruct19 gstruct3;
                    try
                    {
                    IL_4DF:
                        this.textBox6.AppendText(string.Concat("Auto-"));
                        this.method_36(text, 1);
                        num = 0;
                    }
                    catch
                    {

                        _Module.__CxxCallUnwindDtor(_Module.ppInt_14, (void*)(&gstruct3));
                        throw;
                    }

                    _Module.smethod_92(ref gstruct3);
                }
                catch
                {

                    _Module.__CxxCallUnwindDtor(_Module.ppInt_13, (void*)(&gstruct));
                    throw;
                }

                _Module.smethod_112(ref gstruct);
                result = num;
            }
            return result;
        }

        // Token: 0x060003AA RID: 938 RVA: 0x0014D968 File Offset: 0x0014D968
        private int method_367(uint uint_0)
        {
            string[] commandLineArgs = Environment.GetCommandLineArgs();
            Path.GetDirectoryName(commandLineArgs[0]);
            if (uint_0 == 789421430U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0032" + "\r\n");
            }
            else if (uint_0 == 529584510U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0036" + "\r\n");
            }
            else if (uint_0 == 1731285449U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0040" + "\r\n");
            }
            else if (uint_0 == 4236510092U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0046" + "\r\n");
            }
            else if (uint_0 == 17588177U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0047" + "\r\n");
            }
            else if (uint_0 == 2999884414U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0058" + "\r\n");
            }
            else if (uint_0 == 253026502U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0059" + "\r\n");
            }
            else if (uint_0 == 771127765U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4B00" + "\r\n");
            }
            else if (uint_0 == 2680630850U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4C30" + "\r\n");
            }
            else if (uint_0 == 3231213612U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4D20" + "\r\n");
            }
            else if (uint_0 == 1482142839U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0078-4E10" + "\r\n");
            }
            else if (uint_0 == 2691219462U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4B00" + "\r\n");
            }
            else if (uint_0 == 811045522U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4C30" + "\r\n");
            }
            else if (uint_0 == 1009034336U)
            {
                this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4D20" + "\r\n");
            }
            else
            {
                if (uint_0 != 3402234535U)
                {
                    this.textBox6.AppendText("\r\n" + "Drive rev undetermined, Aborting!" + "\r\n");
                    return 1;
                }
                this.textBox6.AppendText("\r\n" + "Drive is rev 0079-4E10" + "\r\n");
            }
            return 0;
        }

        // Token: 0x060003AB RID: 939 RVA: 0x0014DC44 File Offset: 0x0014DC44
        private void method_368(uint uint_0)
        {
            if (uint_0 == 789421430U | uint_0 == 1731285449U)
            {
                this.radioButton1.Checked = true;
            }
            else if (uint_0 == 529584510U)
            {
                this.radioButton2.Checked = true;
            }
            else if (uint_0 == 4236510092U | uint_0 == 17588177U)
            {
                this.radioButton3.Checked = true;
            }
            else if (uint_0 == 2999884414U | uint_0 == 253026502U)
            {
                this.radioButton4.Checked = true;
            }
            else if (uint_0 == 771127765U | uint_0 == 2680630850U | uint_0 == 3231213612U | uint_0 == 1482142839U | uint_0 == 2691219462U | uint_0 == 811045522U | uint_0 == 1009034336U | uint_0 == 3402234535U)
            {
                this.radioButton5.Checked = true;
            }
        }

        // Token: 0x060003AC RID: 940 RVA: 0x0014DD28 File Offset: 0x0014DD28
        private unsafe int method_369(byte* pByte_0, byte* pByte_1, int* pInt_0)
        {
            int num = 0;
            this.listBox5.Items.Clear();
            if (this.method_375(pByte_0, pByte_1, 253952U) != 0)
            {
                pInt_0[num] = -1878794240;
                num++;
            }
            for (int i = 0; i < 262144; i += 4096)
            {
                if (!(i == 16384 | i == 253952) && this.method_375(pByte_0, pByte_1, (uint)i) != 0)
                {
                    pInt_0[num] = i + -1879048192;
                    num++;
                }
            }
            this.textBox6.AppendText(Convert.ToString(num) + " Sector Differences Found" + "\r\n");
            for (int i = 0; i < num; i++)
            {
                Struct63 @struct;
                *(ref @struct + 3) = (byte)(pInt_0[i] & 255);
                *(ref @struct + 2) = (byte)((pInt_0[i] & 65280) >> 8);
                *(ref @struct + 1) = (byte)((pInt_0[i] & 16711680) >> 16);
                @struct = (uint)(pInt_0[i] & -16777216) >> 24;
                this.listBox5.Items.Add(this.method_171((byte*)(&@struct), 4U, 0U));
            }
            Application.DoEvents();
            return num;
        }

        // Token: 0x060003AD RID: 941 RVA: 0x0014DE48 File Offset: 0x0014DE48
        private unsafe int method_370(byte* pByte_0, byte* pByte_1, int* pInt_0)
        {
            int num = 0;
            this.listBox5.Items.Clear();
            for (int i = 0; i < 262144; i += 4096)
            {
                if (this.method_375(pByte_0, pByte_1, (uint)i) != 0)
                {
                    pInt_0[num] = i + -1879048192;
                    num++;
                }
            }
            this.textBox6.AppendText(Convert.ToString(num) + " Sector Differences Found" + "\r\n");
            for (int i = 0; i < num; i++)
            {
                Struct63 @struct;
                *(ref @struct + 3) = (byte)(pInt_0[i] & 255);
                *(ref @struct + 2) = (byte)((pInt_0[i] & 65280) >> 8);
                *(ref @struct + 1) = (byte)((pInt_0[i] & 16711680) >> 16);
                @struct = (uint)(pInt_0[i] & -16777216) >> 24;
                this.listBox5.Items.Add(this.method_171((byte*)(&@struct), 4U, 0U));
            }
            Application.DoEvents();
            return num;
        }

        // Token: 0x060003AE RID: 942 RVA: 0x0014DF34 File Offset: 0x0014DF34
        private unsafe int method_371(byte* pByte_0, byte* pByte_1, int* pInt_0)
        {
            int num = 0;
            this.listBox5.Items.Clear();
            for (int i = 24576; i < 262144; i += 4096)
            {
                if (!(i == 118784 | i == 147456 | i == 151552 | i == 258048) && this.method_375(pByte_0, pByte_1, (uint)i) != 0)
                {
                    pInt_0[num] = i + -1879048192;
                    num++;
                }
            }
            if (this.method_375(pByte_0, pByte_1, 12288U) != 0)
            {
                pInt_0[num] = -1879035904;
                num++;
            }
            if (this.method_375(pByte_0, pByte_1, 118784U) != 0)
            {
                pInt_0[num] = -1878929408;
                num++;
            }
            if (this.method_375(pByte_0, pByte_1, 147456U) != 0)
            {
                pInt_0[num] = -1878900736;
                num++;
            }
            if (this.method_375(pByte_0, pByte_1, 151552U) != 0)
            {
                pInt_0[num] = -1878896640;
                num++;
            }
            if (this.method_375(pByte_0, pByte_1, 258048U) != 0)
            {
                pInt_0[num] = -1878790144;
                num++;
            }
            if (this.method_375(pByte_0, pByte_1, 20480U) != 0)
            {
                pInt_0[num] = -1879027712;
                num++;
            }
            this.textBox6.AppendText(Convert.ToString(num) + " Sector Differences Found" + "\r\n");
            for (int i = 0; i < num; i++)
            {
                Struct63 @struct;
                *(ref @struct + 3) = (byte)(pInt_0[i] & 255);
                *(ref @struct + 2) = (byte)((pInt_0[i] & 65280) >> 8);
                *(ref @struct + 1) = (byte)((pInt_0[i] & 16711680) >> 16);
                @struct = (uint)(pInt_0[i] & -16777216) >> 24;
                this.listBox5.Items.Add(this.method_171((byte*)(&@struct), 4U, 0U));
            }
            Application.DoEvents();
            return num;
        }

        // Token: 0x060003AF RID: 943 RVA: 0x0014E100 File Offset: 0x0014E100
        private unsafe int method_372(byte* pByte_0, byte* pByte_1, int* pInt_0)
        {
            int num = 0;
            this.listBox5.Items.Clear();
            for (int i = 0; i < 262144; i += 4096)
            {
                if (i == 16384)
                {
                    if (this.method_375(pByte_0, pByte_1, (uint)i) != 0)
                    {

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        int num2 = (int)MessageBox.Show(new string((sbyte*)(&_Module.struct114_0)), "Free Flash Firmware", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                        if (num2 == 6)
                        {
                            pInt_0[num] = i + -1879048192;
                            num++;
                        }
                    }
                }
                else if (this.method_375(pByte_0, pByte_1, (uint)i) != 0)
                {
                    pInt_0[num] = i + -1879048192;
                    num++;
                }
            }
            this.textBox6.AppendText(Convert.ToString(num) + " Sector Differences Found" + "\r\n");
            for (int i = 0; i < num; i++)
            {
                Struct63 @struct;
                *(ref @struct + 3) = (byte)(pInt_0[i] & 255);
                *(ref @struct + 2) = (byte)((pInt_0[i] & 65280) >> 8);
                *(ref @struct + 1) = (byte)((pInt_0[i] & 16711680) >> 16);
                @struct = (uint)(pInt_0[i] & -16777216) >> 24;
                this.listBox5.Items.Add(this.method_171((byte*)(&@struct), 4U, 0U));
            }
            Application.DoEvents();
            return num;
        }

        // Token: 0x060003B0 RID: 944 RVA: 0x0014E26C File Offset: 0x0014E26C
        private unsafe int method_373(byte* pByte_0)
        {
            uint num = 0U;
            uint num2 = 0U;
            for (uint num3 = 24576U; num3 < 256000U; num3 += 4U)
            {
                num2 += num;
                num = (uint)((int)pByte_0[num3 + 3U] << 24 | (int)pByte_0[num3 + 2U] << 16 | (int)pByte_0[num3 + 1U] << 8 | (int)pByte_0[num3]);
            }
            num2 = 0U - num2;
            Struct63 @struct;
            *(ref @struct + 3) = (byte)(num2 & 255U);
            *(ref @struct + 2) = (byte)((num2 & 65280U) >> 8);
            *(ref @struct + 1) = (byte)((num2 & 16711680U) >> 16);
            @struct = (num2 & 4278190080U) >> 24;
            this.textBox6.AppendText("\r\n" + "Calculated Checksum " + this.method_171((byte*)(&@struct), 4U, 0U) + "\r\n");
            *(ref @struct + 3) = pByte_0[255996];
            *(ref @struct + 2) = pByte_0[255997];
            *(ref @struct + 1) = pByte_0[255998];
            @struct = pByte_0[255999];
            this.textBox6.AppendText("Actual Checksum     " + this.method_171((byte*)(&@struct), 4U, 0U) + "\r\n");
            return (int)num2;
        }

        // Token: 0x060003B1 RID: 945 RVA: 0x0014E37C File Offset: 0x0014E37C
        private unsafe int method_374(byte* pByte_0)
        {
            uint num = 0U;
            uint num2 = 0U;
            for (uint num3 = 45056U; num3 < 110592U; num3 += 4U)
            {
                num2 += num;
                num = (uint)((int)pByte_0[num3 + 3U] << 24 | (int)pByte_0[num3 + 2U] << 16 | (int)pByte_0[num3 + 1U] << 8 | (int)pByte_0[num3]);
            }
            return (int)(0U - num2);
        }

        // Token: 0x060003B2 RID: 946 RVA: 0x0014E3D0 File Offset: 0x0014E3D0
        private unsafe int method_375(byte* pByte_0, byte* pByte_1, uint uint_0)
        {
            byte* ptr = pByte_0 + uint_0;
            byte* ptr2 = pByte_1 + uint_0;
            for (int i = 0; i < 4096; i++)
            {
                if (ptr[i] != ptr2[i])
                {
                    return 1;
                }
            }
            return 0;
        }

        // Token: 0x060003B3 RID: 947 RVA: 0x0014E408 File Offset: 0x0014E408
        private void method_376()
        {
            if (this.radioButton1.Checked)
            {
                this.int_12 = 32;
                this.string_19 = "0032/0040";
            }
            else if (this.radioButton2.Checked)
            {
                this.int_12 = 36;
                this.string_19 = "0036";
            }
            else if (this.radioButton3.Checked)
            {
                this.int_12 = 47;
                this.string_19 = "0046/0047";
            }
            else if (this.radioButton4.Checked)
            {
                this.int_12 = 59;
                this.string_19 = "0058/0059";
            }
            else if (this.radioButton5.Checked)
            {
                this.int_12 = 79;
                this.string_19 = "0078/0079";
            }
            if (this.radioButton15.Checked)
            {
                this.int_13 = 0;
                this.string_20 = "Classic Ram Peek";
            }
            else if (this.radioButton14.Checked)
            {
                this.int_13 = 1;
                this.string_20 = "Ram Upload";
            }
            else if (this.radioButton13.Checked)
            {
                this.int_13 = 2;
                this.string_20 = "Mode Select";
            }
            else if (this.radioButton12.Checked)
            {
                this.int_13 = 3;
                this.string_20 = "Ram Poke";
            }
            if (this.radioButton11.Checked)
            {
                this.int_14 = 0;
                this.string_21 = "Dumping f/w of";
            }
            else if (this.radioButton6.Checked)
            {
                this.int_14 = 1;
                this.string_21 = "Flashing Keys to";
            }
            else if (this.radioButton7.Checked)
            {
                this.int_14 = 2;
                this.string_21 = "Flashing Spoof ID's to";
            }
            else if (this.radioButton8.Checked)
            {
                this.int_14 = 3;
                this.string_21 = "Flashing Hacked f/w to";
            }
            else if (this.radioButton9.Checked)
            {
                this.int_14 = 4;
                this.string_21 = "Restoring Stock f/w to";
            }
            else if (this.radioButton10.Checked)
            {
                this.int_14 = 5;
                this.string_21 = "Fixing Checksum of";
            }
            else if (this.radioButton16.Checked)
            {
                this.int_14 = 6;
                this.string_21 = "Free flashing to";
            }
            if (this.int_13 == 0 & this.int_14 == 0 & this.int_12 != 79)
            {
                this.string_19 = "Pre 78";
            }
            if (this.radioButton17.Checked)
            {
                this.int_15 = 0;
                this.string_22 = "Method via WIN32 API";
            }
            else if (this.radioButton18.Checked)
            {
                this.int_15 = 1;
                this.string_22 = "Method over Port IO";
            }
        }

        // Token: 0x060003B4 RID: 948 RVA: 0x0014E6B4 File Offset: 0x0014E6B4
        private unsafe void method_377()
        {
            Struct68 @struct = 0;
            initblk(ref @struct + 1, 0, 259);

            _Module.memcpy(*(ref _Module.struct121_0 + 4780) + 16384, *(ref _Module.struct121_0 + 2388) + 16384, 4096U);

            _Module.memcpy(*(ref _Module.struct123_0 + 4) + 280, _Module.struct123_0 + 280, 16U);

            _Module.memcpy(*(ref _Module.struct123_0 + 4) + 2028, _Module.struct123_0 + 2028, 20U);
            string str = "";

            _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct19_0));
            for (int i = 0; i < 16; i++)
            {

                _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct10_20), ref @struct, *(*(ref _Module.struct123_0 + 4) + 280 + i));
            }
            this.textBox11.Text = str + new string((sbyte*)(&@struct));
            this.textBox1.Text = this.textBox11.Text;
            this.method_5(*(ref _Module.struct123_0 + 4) + 2028, 20U, 0U);
            this.textBox13.Text = this.string_0;
        }

        // Token: 0x060003B5 RID: 949 RVA: 0x0014E7E0 File Offset: 0x0014E7E0
        private void radioButton11_CheckedChanged(object sender, EventArgs e)
        {
            this.button26.Text = "Read to Source";
            this.listBox5.Items.Clear();
            this.button26.Enabled = true;
            this.method_378();
        }

        // Token: 0x060003B6 RID: 950 RVA: 0x0014E820 File Offset: 0x0014E820
        private unsafe void radioButton18_CheckedChanged(object sender, EventArgs e)
        {
            uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
            uint count = (uint)this.comboBox1.Items.Count;
            ushort num = *(ref _Module.struct38_0 + selectedIndex * 72U);
            if (this.bool_1 && num == 0 && count != 0U)
            {
                if (this.radioButton18.Checked)
                {
                    this.method_424(2);
                    this.bool_9 = false;

                    _Module.Sleep(10);
                }
                else if (this.bool_5 && !this.bool_9)
                {
                    this.method_424(1);
                    this.bool_9 = true;

                    _Module.Sleep(10);
                    this.method_424(5);

                    _Module.Sleep(25);
                    this.method_424(7);
                }
            }

            _Module.Sleep(200);
            this.method_378();
        }

        // Token: 0x060003B7 RID: 951 RVA: 0x0014E8D8 File Offset: 0x0014E8D8
        private void radioButton6_CheckedChanged(object sender, EventArgs e)
        {
            if (this.radioButton6.Checked)
            {
                this.button26.Text = "Manual Spoof";
                this.listBox5.Items.Clear();
                this.listBox5.Items.Add("Calculated at");
                this.listBox5.Items.Add("Run time.....");
                this.button26.Enabled = true;
            }
        }

        // Token: 0x060003B8 RID: 952 RVA: 0x0014E94C File Offset: 0x0014E94C
        private void radioButton7_CheckedChanged(object sender, EventArgs e)
        {
            if (this.radioButton7.Checked)
            {
                this.button26.Text = "Auto Spoof";
                this.listBox5.Items.Clear();
                this.listBox5.Items.Add("Calculated at");
                this.listBox5.Items.Add("Run time.....");
                this.button26.Enabled = true;
            }
        }

        // Token: 0x060003B9 RID: 953 RVA: 0x0014E9C0 File Offset: 0x0014E9C0
        private void radioButton8_CheckedChanged(object sender, EventArgs e)
        {
            if (this.radioButton8.Checked)
            {
                this.button26.Text = "Flash LT-Plus";
                this.listBox5.Items.Clear();
                this.listBox5.Items.Add("Calculated at");
                this.listBox5.Items.Add("Run time.....");
                this.button26.Enabled = true;
            }
        }

        // Token: 0x060003BA RID: 954 RVA: 0x0014EA34 File Offset: 0x0014EA34
        private void radioButton9_CheckedChanged(object sender, EventArgs e)
        {
            if (this.radioButton9.Checked)
            {
                this.button26.Text = "Restore to Stock";
                this.listBox5.Items.Clear();
                this.listBox5.Items.Add("Calculated at");
                this.listBox5.Items.Add("Run time.....");
                this.button26.Enabled = true;
            }
        }

        // Token: 0x060003BB RID: 955 RVA: 0x0014EAA8 File Offset: 0x0014EAA8
        private void radioButton10_CheckedChanged(object sender, EventArgs e)
        {
            if (this.radioButton10.Checked)
            {
                this.button26.Text = "Fix Checksum";
                this.listBox5.Items.Clear();
                this.listBox5.Items.Add("0x9003E000");
                this.button26.Enabled = true;
            }
        }

        // Token: 0x060003BC RID: 956 RVA: 0x0014EB08 File Offset: 0x0014EB08
        private void radioButton16_CheckedChanged(object sender, EventArgs e)
        {
            if (this.radioButton16.Checked)
            {
                this.button26.Text = "Free Flash";
                this.listBox5.Items.Clear();
                this.listBox5.Items.Add("Calculated at");
                this.listBox5.Items.Add("Run time.....");
                this.button26.Enabled = true;
            }
        }

        // Token: 0x060003BD RID: 957 RVA: 0x0014EB7C File Offset: 0x0014EB7C
        private void radioButton5_CheckedChanged(object sender, EventArgs e)
        {
            this.method_378();
        }

        // Token: 0x060003BE RID: 958 RVA: 0x003CC2BC File Offset: 0x003142BC
        private void method_378()
        {
            if (this.radioButton5.Checked)
            {
                this.radioButton15.Enabled = false;
                this.radioButton14.Checked = true;
                this.radioButton13.Enabled = false;
                this.radioButton12.Enabled = false;
            }
            else if (!this.radioButton5.Checked & this.radioButton17.Checked)
            {
                if (this.radioButton11.Checked)
                {
                    this.radioButton15.Enabled = true;
                    if (!this.radioButton14.Checked)
                    {
                        this.radioButton15.Checked = true;
                    }
                    this.radioButton13.Enabled = true;
                    if (this.radioButton16.Enabled)
                    {
                        this.radioButton12.Enabled = true;
                    }
                }
                else
                {
                    this.radioButton15.Enabled = false;
                    this.radioButton14.Checked = true;
                    this.radioButton13.Enabled = true;
                    if (this.radioButton16.Enabled)
                    {
                        this.radioButton12.Enabled = true;
                    }
                }
            }
            else if (!this.radioButton5.Checked & this.radioButton18.Checked)
            {
                if (this.radioButton11.Checked)
                {
                    this.radioButton15.Enabled = true;
                    this.radioButton14.Checked = true;
                    this.radioButton13.Enabled = false;
                    this.radioButton12.Enabled = false;
                }
                else
                {
                    this.radioButton15.Enabled = false;
                    this.radioButton14.Checked = true;
                    this.radioButton13.Enabled = false;
                    this.radioButton12.Enabled = false;
                }
            }
        }

        // Token: 0x060003BF RID: 959 RVA: 0x0014ED30 File Offset: 0x0014ED30
        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            if (this.checkBox1.CheckState == CheckState.Checked)
            {
                this.button24.Enabled = false;
                this.button12.Text = "79 Unlock";
                this.textBox6.AppendText("79 Unlock set to Automatic." + "\r\n");
            }
            else
            {
                this.button24.Enabled = true;
                this.button12.Text = "Execute";
                this.textBox6.AppendText("79 Unlock set to manual mode." + "\r\n");
            }
        }

        // Token: 0x060003C0 RID: 960 RVA: 0x0014EDBC File Offset: 0x0014EDBC
        private void button12_Click(object sender, EventArgs e)
        {
            this.method_379();
        }

        // Token: 0x060003C1 RID: 961 RVA: 0x0014EDD0 File Offset: 0x0014EDD0
        private void method_379()
        {
            if (this.checkBox1.CheckState == CheckState.Unchecked)
            {
                if (this.radioButton18.Checked)
                {
                    this.method_388();
                }
                else if (this.radioButton17.Checked)
                {
                    this.method_387();
                }
            }
            if (this.checkBox1.CheckState == CheckState.Checked)
            {
                if (this.radioButton18.Checked)
                {
                    this.method_390();
                }
                else if (this.radioButton17.Checked)
                {
                    this.method_389();
                }
            }
        }

        // Token: 0x060003C2 RID: 962 RVA: 0x0014EE4C File Offset: 0x0014EE4C
        private void button24_Click(object sender, EventArgs e)
        {
            if (this.radioButton18.Checked)
            {
                this.method_386();
            }
            else if (this.radioButton17.Checked)
            {
                this.method_385();
            }
        }

        // Token: 0x060003C3 RID: 963 RVA: 0x0014EE84 File Offset: 0x0014EE84
        private unsafe void method_380()
        {
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 @struct;
                byte* ptr = ref @struct + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct2;

                    _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {

                        _Module.memset((void*)(&@struct), 0, 62U);
                        *(ref @struct + 28) = 27;
                        @struct = 44;
                        *(ref @struct + 6) = 12;
                        *(ref @struct + 7) = 18;
                        *(ref @struct + 8) = 2;
                        *(ref @struct + 16) = 15;
                        *(ref @struct + 24) = 44;
                        uint num;
                        if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num), null) != null && (ptr[2] & 15) == 0)
                        {
                            this.textBox6.AppendText("Stopping the Disk - No disk is required, remove next time..." + "\r\n");

                            _Module.Sleep(7000);
                        }

                        _Module.CloseHandle(ptr3);
                    }
                }
            }
        }

        // Token: 0x060003C4 RID: 964 RVA: 0x0014EFD4 File Offset: 0x0014EFD4
        private unsafe void method_381()
        {
            if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 0;

                _Module.smethod_15((byte*)(&@struct), 12U, (byte)num, 1, &gstruct);

                _Module.memset((void*)(&@struct), 0, 12U);
                Struct41 struct2;

                _Module.memset((void*)(&struct2), 0, 18U);
                @struct = 3;
                *(ref @struct + 4) = 18;
                uint num2;
                if (_Module.smethod_16((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct2), &num2, 18U, 1, &gstruct) != null)
                {
                    this.textBox6.AppendText("Error Grabbing Sence Data..." + "\r\n");
                }
                else if ((*(ref struct2 + 2) & 15) == 2 && *(ref struct2 + 12) == 58 && *(ref struct2 + 13) == 0)
                {
                    this.textBox6.AppendText("No Disc in Drive, proceeding." + "\r\n");
                }
                else
                {
                    if ((*(ref struct2 + 2) & 15) == 2 && *(ref struct2 + 12) == 4 && *(ref struct2 + 13) == 1)
                    {
                        this.textBox6.AppendText("Disc in Tray - No disc is required, Ejecting, remove next time..." + "\r\n");
                    }
                    else if ((*(ref struct2 + 2) & 15) == 0 && *(ref struct2 + 12) == 0 && *(ref struct2 + 13) == 0)
                    {
                        this.textBox6.AppendText("Disc in Tray - No disc is required, Ejecting, remove next time..." + "\r\n");
                    }
                    else
                    {
                        if ((*(ref struct2 + 2) & 15) != 6 || *(ref struct2 + 12) != 40 || *(ref struct2 + 13) != 0)
                        {
                            return;
                        }
                        this.textBox6.AppendText("Unit Not ready... Ejecting" + "\r\n");
                    }
                    @struct = 27;
                    *(ref @struct + 4) = 2;
                    if (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Error Sending Stop Unit Command..." + "\r\n");
                    }
                    else
                    {

                        _Module.Sleep(2000);
                    }
                }
            }
        }

        // Token: 0x060003C5 RID: 965 RVA: 0x0014F1DC File Offset: 0x0014F1DC
        private int method_382()
        {
            return (this.int_15 != 0 || this.method_383() == 0) ? ((this.int_15 != 1 || this.method_384() == 0) ? 0 : 1) : 1;
        }

        // Token: 0x060003C6 RID: 966 RVA: 0x003CC468 File Offset: 0x00314468
        private unsafe int method_383()
        {
            int result;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 1;
            }
            else
            {
                Struct52 @struct;
                if (this.int_12 == 47)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct52_0), 12U);
                }
                else
                {
                    if (this.int_12 != 59)
                    {
                        return 0;
                    }

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct52_1), 12U);
                }
                this.comboBox16.Text.Substring(0, 1);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr = (sbyte*)((void*)value);
                if (*(sbyte*)ptr < 65 | *(sbyte*)ptr > 122)
                {
                    result = 1;
                }
                else
                {
                    Struct109 struct2;

                    _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr);
                    void* ptr2 = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                    if (ptr2 == -1)
                    {
                        result = 1;
                    }
                    else
                    {
                        Struct108 struct3;
                        uint num2;
                        for (uint num = 0U; num < 12U; num += 1U)
                        {

                            _Module.memset((void*)(&struct3), 0, 62U);
                            *(ref struct3 + 28) = 231;
                            *(ref struct3 + 29) = 72;
                            *(ref struct3 + 30) = 73;
                            *(ref struct3 + 31) = 84;
                            *(ref struct3 + 32) = 204;
                            *(ref struct3 + 33) = *(ref @struct + num);
                            *(ref struct3 + 36) = (byte)((num + 2147483648U & 4278190080U) >> 24);
                            *(ref struct3 + 37) = (byte)((num + 2147483648U & 16711680U) >> 16);
                            *(ref struct3 + 38) = (byte)((num + 2147483648U & 65280U) >> 8);
                            *(ref struct3 + 39) = (byte)(num + 2147483648U & 255U);
                            struct3 = 44;
                            *(ref struct3 + 6) = 12;
                            *(ref struct3 + 7) = 18;
                            *(ref struct3 + 8) = 2;
                            *(ref struct3 + 16) = 15;
                            *(ref struct3 + 24) = 44;
                            if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num2), null) == null)
                            {
                                this.textBox6.AppendText("Ram Poke Failed" + "\r\n");

                                _Module.CloseHandle(ptr2);
                                return 1;
                            }
                        }

                        _Module.memset((void*)(&struct3), 0, 62U);
                        *(ref struct3 + 28) = 85;
                        *(ref struct3 + 29) = 16;
                        *(ref struct3 + 36) = 8;
                        Struct103 struct4;

                        _Module.memset((void*)(&struct4), 0, 8U);
                        *(ref struct4 + 1) = 6;
                        struct3 = 44;
                        *(ref struct3 + 6) = 12;
                        *(ref struct3 + 7) = 18;
                        *(ref struct3 + 8) = 0;
                        *(ref struct3 + 12) = 8;
                        *(ref struct3 + 16) = 15;
                        *(ref struct3 + 20) = ref struct4;
                        *(ref struct3 + 24) = 44;
                        if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num2), null) == null && _Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num2), null) == null && _Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num2), null) == null)
                        {
                            this.textBox6.AppendText("Enable Execute Failed" + "\r\n");

                            _Module.CloseHandle(ptr2);
                            result = 1;
                        }
                        else
                        {

                            _Module.memset((void*)(&struct3), 0, 62U);
                            *(ref struct3 + 28) = 85;
                            *(ref struct3 + 29) = 16;
                            *(ref struct3 + 31) = 72;
                            *(ref struct3 + 32) = 76;
                            *(ref struct3 + 34) = 1;
                            *(ref struct3 + 39) = 1;
                            struct3 = 44;
                            *(ref struct3 + 6) = 12;
                            *(ref struct3 + 7) = 18;
                            *(ref struct3 + 8) = 2;
                            *(ref struct3 + 16) = 15;
                            *(ref struct3 + 24) = 44;
                            if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num2), null) == null)
                            {
                                this.textBox6.AppendText("UnLock Failed" + "\r\n");

                                _Module.CloseHandle(ptr2);
                                result = 1;
                            }
                            else
                            {
                                this.textBox6.AppendText("UnLocked!" + "\r\n");

                                _Module.CloseHandle(ptr2);
                                result = 0;
                            }
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x060003C7 RID: 967 RVA: 0x0014F5B4 File Offset: 0x0014F5B4
        private unsafe int method_384()
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct52 @struct;
                if (this.int_12 == 47)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct52_0), 12U);
                }
                else
                {
                    if (this.int_12 != 59)
                    {
                        return 0;
                    }

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct52_1), 12U);
                }
                Struct52 struct2;
                for (uint num2 = 0U; num2 < 12U; num2 += 1U)
                {

                    _Module.memset((void*)(&struct2), 0, 12U);
                    struct2 = 231;
                    *(ref struct2 + 1) = 72;
                    *(ref struct2 + 2) = 73;
                    *(ref struct2 + 3) = 84;
                    *(ref struct2 + 4) = 204;
                    *(ref struct2 + 5) = *(ref @struct + num2);
                    *(ref struct2 + 8) = (byte)((num2 + 2147483648U & 4278190080U) >> 24);
                    *(ref struct2 + 9) = (byte)((num2 + 2147483648U & 16711680U) >> 16);
                    *(ref struct2 + 10) = (byte)((num2 + 2147483648U & 65280U) >> 8);
                    *(ref struct2 + 11) = (byte)(num2 + 2147483648U & 255U);
                    if (_Module.smethod_15((byte*)(&struct2), 12U, (byte)num, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Ram Poke Failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        return 1;
                    }
                }

                _Module.Sleep(100);

                _Module.memset((void*)(&struct2), 0, 12U);
                Struct103 struct3;

                _Module.memset((void*)(&struct3), 0, 8U);
                struct2 = 85;
                *(ref struct2 + 1) = 16;
                *(ref struct2 + 8) = 8;
                *(ref struct3 + 1) = 6;
                uint num3;
                if (_Module.smethod_17((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&struct3), &num3, 8U, 1, &gstruct) != null && _Module.smethod_17((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&struct3), &num3, 8U, 1, &gstruct) != null && _Module.smethod_17((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&struct3), &num3, 8U, 1, &gstruct) != null)
                {
                    this.textBox6.AppendText("Enable Execute Failed" + "\r\n");
                    this.Cursor = Cursors.Arrow;
                    result = 1;
                }
                else
                {

                    _Module.Sleep(100);

                    _Module.memset((void*)(&struct2), 0, 12U);

                    _Module.memset((void*)(&struct3), 0, 8U);
                    struct2 = 85;
                    *(ref struct2 + 1) = 16;
                    *(ref struct2 + 3) = 72;
                    *(ref struct2 + 4) = 76;
                    *(ref struct2 + 8) = 8;
                    *(ref struct3 + 1) = 6;

                    _Module.smethod_17((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&struct3), &num3, 8U, 1, &gstruct);
                    this.textBox6.AppendText("UnLocked!" + "\r\n");

                    _Module.memset((void*)(&struct2), 0, 12U);
                    struct2 = 85;
                    if (_Module.smethod_15((byte*)(&struct2), 12U, (byte)num, 1, &gstruct) != null && _Module.smethod_15((byte*)(&struct2), 12U, (byte)num, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        result = 1;
                    }
                    else
                    {
                        this.Cursor = Cursors.Arrow;
                        result = 0;
                    }
                }
            }
            return result;
        }

        // Token: 0x060003C8 RID: 968 RVA: 0x003CC810 File Offset: 0x00314810
        private unsafe void method_385()
        {
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 @struct;
                byte* ptr = ref @struct + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct2;

                    _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {
                        if (string.Compare(this.button24.Text, "Play") == 0)
                        {

                            _Module.memset((void*)(&@struct), 0, 62U);
                            *(ref @struct + 28) = 165;
                            *(ref @struct + 36) = 1;
                            *(ref @struct + 37) = 43;
                            @struct = 44;
                            *(ref @struct + 6) = 12;
                            *(ref @struct + 7) = 18;
                            *(ref @struct + 8) = 2;
                            *(ref @struct + 16) = 3;
                            *(ref @struct + 24) = 44;
                            uint num;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num), null) != null && (ptr[2] & 15) == 0)
                            {
                                this.textBox6.AppendText("Played 79Unlock Audio CD" + "\r\n");
                                this.button24.Text = "Pause";

                                _Module.CloseHandle(ptr3);

                                _Module.Sleep(200);
                            }
                            else
                            {
                                this.textBox6.AppendText("Failed to Play 79Unlock Audio CD" + "\r\n");

                                _Module.CloseHandle(ptr3);
                            }
                        }
                        else if (string.Compare(this.button24.Text, "Pause") == 0)
                        {

                            _Module.memset((void*)(&@struct), 0, 62U);
                            *(ref @struct + 28) = 75;
                            @struct = 44;
                            *(ref @struct + 6) = 12;
                            *(ref @struct + 7) = 18;
                            *(ref @struct + 8) = 2;
                            *(ref @struct + 16) = 3;
                            *(ref @struct + 24) = 44;
                            uint num;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num), null) != null && (ptr[2] & 15) == 0)
                            {
                                this.button24.Text = "Play";
                                this.textBox6.AppendText("Paused 79Unlock Audio CD" + "\r\n");
                                string text = "" + "Now! You Need to Physically eject the 79Unlock CD, then, click the" + "/n";
                                text = text + "'Unlock' button to execute the unlock code in Ram." + "/n/n";
                                text = text + "Select the IO Port the 79 is on, click 'Open' button in Port Properties" + "/n";

                                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                                MessageBox.Show(text, "79 Unlock", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);

                                _Module.CloseHandle(ptr3);
                            }
                            else
                            {
                                this.textBox6.AppendText("Failed to Pause 79Unlock Audio CD" + "\r\n");

                                _Module.CloseHandle(ptr3);
                            }
                        }
                    }
                }
            }
        }

        // Token: 0x060003C9 RID: 969 RVA: 0x0014FBAC File Offset: 0x0014FBAC
        private unsafe void method_386()
        {
            if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                if (string.Compare(this.button24.Text, "Play") == 0)
                {
                    Struct52 @struct;

                    _Module.memset((void*)(&@struct), 0, 12U);
                    @struct = 165;
                    *(ref @struct + 8) = 1;
                    *(ref @struct + 9) = 43;
                    if (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Failed to Play 79Unlock Audio CD" + "\r\n");
                    }
                    else
                    {
                        this.textBox6.AppendText("Played 79Unlock Audio CD" + "\r\n");
                        this.button24.Text = "Pause";

                        _Module.Sleep(200);
                    }
                }
                else if (string.Compare(this.button24.Text, "Pause") == 0)
                {
                    Struct52 @struct;

                    _Module.memset((void*)(&@struct), 0, 12U);
                    @struct = 75;
                    if (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Failed to Pause 79Unlock Audio CD" + "\r\n");
                    }
                    else
                    {
                        this.button24.Text = "Play";
                        this.textBox6.AppendText("Paused 79Unlock Audio CD" + "\r\n");

                        _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                        MessageBox.Show("Now! You Need to Physically eject the 79Unlock CD, then, click the" + "\n" + "'Unlock' button to execute the unlock code in Ram." + "\n\n" + "Select the IO Port the 79 is on, click 'Open' button in Port Properties.", "79 Unlock", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);

                        _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    }
                }
            }
        }

        // Token: 0x060003CA RID: 970 RVA: 0x0014FD94 File Offset: 0x0014FD94
        private unsafe void method_387()
        {
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 @struct;
                byte* ptr = ref @struct + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct2;

                    _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {
                        this.textBox6.AppendText("\r\n" + "Sending 79 Unlock Command!" + "\r\n");

                        _Module.memset((void*)(&@struct), 0, 62U);
                        *(ref @struct + 28) = 85;
                        *(ref @struct + 29) = 16;
                        *(ref @struct + 36) = 8;
                        Struct103 struct3;

                        _Module.memset((void*)(&struct3), 0, 8U);
                        *(ref struct3 + 1) = 6;
                        @struct = 44;
                        *(ref @struct + 6) = 12;
                        *(ref @struct + 7) = 18;
                        *(ref @struct + 8) = 0;
                        *(ref @struct + 12) = 8;
                        *(ref @struct + 16) = 15;
                        *(ref @struct + 20) = ref struct3;
                        *(ref @struct + 24) = 44;
                        uint num;
                        if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num), null) == null)
                        {
                            this.textBox6.AppendText("Setting bit 3 of 0x5B6 failed" + "\r\n");

                            _Module.CloseHandle(ptr3);
                        }
                        else
                        {

                            _Module.memset((void*)(&@struct), 0, 62U);
                            *(ref @struct + 28) = 231;
                            *(ref @struct + 29) = 72;
                            *(ref @struct + 30) = 73;
                            *(ref @struct + 31) = 84;
                            *(ref @struct + 32) = 59;
                            *(ref @struct + 33) = 7;
                            *(ref @struct + 39) = 1;
                            @struct = 44;
                            *(ref @struct + 6) = 12;
                            *(ref @struct + 7) = 18;
                            *(ref @struct + 8) = 2;
                            *(ref @struct + 16) = 3;
                            *(ref @struct + 24) = 44;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num), null) != null && (ptr[2] & 15) == 0)
                            {
                                this.textBox6.AppendText("Done!" + "\r\n");
                                this.Cursor = Cursors.Arrow;

                                _Module.CloseHandle(ptr3);
                            }
                            else
                            {
                                this.textBox6.AppendText("Ram Execucte command failed" + "\r\n");

                                _Module.CloseHandle(ptr3);
                            }
                        }
                    }
                }
            }
        }

        // Token: 0x060003CB RID: 971 RVA: 0x0014FFE8 File Offset: 0x0014FFE8
        private unsafe void method_388()
        {
            if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct52 @struct;

                _Module.memset((void*)(&@struct), 0, 12U);
                Struct103 struct2;

                _Module.memset((void*)(&struct2), 0, 8U);
                @struct = 85;
                *(ref @struct + 1) = 16;
                *(ref @struct + 8) = 8;
                *(ref struct2 + 1) = 6;
                uint num2;
                if (_Module.smethod_17((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct2), &num2, 8U, 1, &gstruct) != null)
                {
                    this.textBox6.AppendText("UnLock Failed" + "\r\n");
                    this.Cursor = Cursors.Arrow;
                }
                else
                {

                    _Module.memset((void*)(&@struct), 0, 12U);
                    @struct = 231;
                    *(ref @struct + 1) = 72;
                    *(ref @struct + 2) = 73;
                    *(ref @struct + 3) = 84;
                    *(ref @struct + 4) = 59;
                    *(ref @struct + 5) = 7;
                    *(ref @struct + 11) = 1;
                    if (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("UnLock Failed.." + "\r\n");
                    }
                    else
                    {
                        this.textBox6.AppendText("UnLocked!" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                    }
                }
            }
        }

        // Token: 0x060003CC RID: 972 RVA: 0x003CCAFC File Offset: 0x00314AFC
        private unsafe void method_389()
        {
            string value = null;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
            }
            else
            {
                Struct108 @struct;
                byte* ptr = ref @struct + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value2 = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value2);
                if (!(*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122))
                {
                    Struct109 struct2;

                    _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
                    if (registryKey.GetValue("Delay79") != null)
                    {
                        value = registryKey.GetValue("Delay79").ToString();
                    }
                    else if (registryKey.GetValue("Delay79") == null)
                    {
                        registryKey.SetValue("Delay79", "500");
                        value = "500";
                    }
                    registryKey.Close();
                    int num = Convert.ToInt32(value);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 != -1)
                    {
                        this.textBox6.AppendText("Playing 79Unlock Audio CD" + "\r\n");

                        _Module.memset((void*)(&@struct), 0, 62U);
                        *(ref @struct + 28) = 165;
                        *(ref @struct + 36) = 1;
                        *(ref @struct + 37) = 43;
                        @struct = 44;
                        *(ref @struct + 6) = 12;
                        *(ref @struct + 7) = 18;
                        *(ref @struct + 8) = 2;
                        *(ref @struct + 16) = 15;
                        *(ref @struct + 24) = 44;
                        uint num2;
                        if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num2), null) != null && (ptr[2] & 15) == 0)
                        {

                            _Module.Sleep(num);
                            this.textBox6.AppendText("Pausing 79Unlock Audio CD, after " + Convert.ToString(num) + "mS" + "\r\n");

                            _Module.memset((void*)(&@struct), 0, 62U);
                            *(ref @struct + 28) = 75;
                            @struct = 44;
                            *(ref @struct + 6) = 12;
                            *(ref @struct + 7) = 18;
                            *(ref @struct + 8) = 2;
                            *(ref @struct + 16) = 15;
                            *(ref @struct + 24) = 44;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num2), null) != null && (ptr[2] & 15) == 0)
                            {
                                this.textBox6.AppendText("Ejecting 79Unlock Audio CD" + "\r\n");

                                _Module.memset((void*)(&@struct), 0, 62U);
                                *(ref @struct + 28) = 27;
                                *(ref @struct + 32) = 2;
                                @struct = 44;
                                *(ref @struct + 6) = 12;
                                *(ref @struct + 7) = 18;
                                *(ref @struct + 8) = 2;
                                *(ref @struct + 16) = 15;
                                *(ref @struct + 24) = 44;
                                if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num2), null) != null && (ptr[2] & 15) == 0)
                                {

                                    _Module.Sleep(2000);
                                    this.textBox6.AppendText("Setting bit 3 @ 0x5BD" + "\r\n");

                                    _Module.memset((void*)(&@struct), 0, 62U);
                                    *(ref @struct + 28) = 85;
                                    *(ref @struct + 29) = 16;
                                    *(ref @struct + 36) = 8;
                                    Struct103 struct3;

                                    _Module.memset((void*)(&struct3), 0, 8U);
                                    *(ref struct3 + 1) = 6;
                                    @struct = 44;
                                    *(ref @struct + 6) = 12;
                                    *(ref @struct + 7) = 18;
                                    *(ref @struct + 8) = 0;
                                    *(ref @struct + 12) = 8;
                                    *(ref @struct + 16) = 15;
                                    *(ref @struct + 20) = ref struct3;
                                    *(ref @struct + 24) = 44;
                                    if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num2), null) == null)
                                    {
                                        this.textBox6.AppendText("Failed to set bit 3 @ 0x5B6 failed" + "\r\n");

                                        _Module.CloseHandle(ptr3);
                                    }
                                    else
                                    {
                                        this.textBox6.AppendText("Executing code in Ram" + "\r\n");

                                        _Module.memset((void*)(&@struct), 0, 62U);
                                        *(ref @struct + 28) = 231;
                                        *(ref @struct + 29) = 72;
                                        *(ref @struct + 30) = 73;
                                        *(ref @struct + 31) = 84;
                                        *(ref @struct + 32) = 59;
                                        *(ref @struct + 33) = 7;
                                        *(ref @struct + 39) = 1;
                                        @struct = 44;
                                        *(ref @struct + 6) = 12;
                                        *(ref @struct + 7) = 18;
                                        *(ref @struct + 8) = 2;
                                        *(ref @struct + 16) = 15;
                                        *(ref @struct + 24) = 44;
                                        if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num2), null) != null && (ptr[2] & 15) == 0)
                                        {
                                            this.textBox6.AppendText("Done!" + "\r\n");
                                            this.Cursor = Cursors.Arrow;

                                            _Module.CloseHandle(ptr3);
                                        }
                                        else
                                        {
                                            this.textBox6.AppendText("Ram Execute command failed" + "\r\n");

                                            _Module.CloseHandle(ptr3);
                                        }
                                    }
                                }
                                else
                                {
                                    this.textBox6.AppendText("Failed to Eject 79Unlock Audio CD" + "\r\n");

                                    _Module.CloseHandle(ptr3);
                                }
                            }
                            else
                            {
                                this.textBox6.AppendText("Failed to Pause 79Unlock Audio CD" + "\r\n");

                                _Module.CloseHandle(ptr3);
                            }
                        }
                        else
                        {
                            this.textBox6.AppendText("Failed to Play 79Unlock Audio CD" + "\r\n");

                            _Module.CloseHandle(ptr3);
                        }
                    }
                }
            }
        }

        // Token: 0x060003CD RID: 973 RVA: 0x00150610 File Offset: 0x00150610
        private unsafe void method_390()
        {
            string value = null;
            if (this.comboBox1.Items.Count != 0)
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                RegistryKey registryKey = Registry.CurrentUser.CreateSubKey("JungleFlasher");
                if (registryKey.GetValue("Delay79") != null)
                {
                    value = registryKey.GetValue("Delay79").ToString();
                }
                else if (registryKey.GetValue("Delay79") == null)
                {
                    registryKey.SetValue("Delay79", "500");
                    value = "500";
                }
                registryKey.Close();
                int num2 = Convert.ToInt32(value);
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                this.textBox6.AppendText("Playing 79Unlock Audio CD" + "\r\n");
                uint num3 = 0U;
                Struct52 @struct;
                for (; ; )
                {

                    _Module.memset((void*)(&@struct), 0, 12U);
                    @struct = 165;
                    *(ref @struct + 8) = 1;
                    *(ref @struct + 9) = 43;
                    if (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num, 1, &gstruct) == null)
                    {
                        goto IL_139;
                    }
                    if (num3 >= 5U)
                    {
                        break;
                    }
                    num3 += 1U;
                }
                this.textBox6.AppendText("Failed to Play 79Unlock Audio CD" + "\r\n");
                return;
            IL_139:

                _Module.Sleep(num2);
                this.textBox6.AppendText("Pausing 79Unlock Audio CD, after " + Convert.ToString(num2) + "mS" + "\r\n");

                _Module.memset((void*)(&@struct), 0, 12U);
                @struct = 75;
                if (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num, 1, &gstruct) != null)
                {
                    this.textBox6.AppendText("Failed to Pause 79Unlock Audio CD" + "\r\n");
                }
                else
                {
                    this.textBox6.AppendText("Ejecting 79Unlock Audio CD" + "\r\n");

                    _Module.memset((void*)(&@struct), 0, 12U);
                    @struct = 27;
                    *(ref @struct + 4) = 2;
                    if (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Failed to Eject 79Unlock Audio CD" + "\r\n");
                    }
                    else
                    {

                        _Module.Sleep(2000);

                        _Module.memset((void*)(&@struct), 0, 12U);
                        Struct103 struct2;

                        _Module.memset((void*)(&struct2), 0, 8U);
                        @struct = 85;
                        *(ref @struct + 1) = 16;
                        *(ref @struct + 8) = 8;
                        *(ref struct2 + 1) = 6;
                        uint num4;
                        if (_Module.smethod_17((byte*)(&@struct), 12U, (byte)num, 512, (void*)(&struct2), &num4, 8U, 1, &gstruct) != null)
                        {
                            this.textBox6.AppendText("Failed to set bit 3 @ 0x5B6 failed" + "\r\n");
                            this.Cursor = Cursors.Arrow;
                        }
                        else
                        {

                            _Module.memset((void*)(&@struct), 0, 12U);
                            @struct = 231;
                            *(ref @struct + 1) = 72;
                            *(ref @struct + 2) = 73;
                            *(ref @struct + 3) = 84;
                            *(ref @struct + 4) = 59;
                            *(ref @struct + 5) = 7;
                            *(ref @struct + 11) = 1;
                            if (_Module.smethod_15((byte*)(&@struct), 12U, (byte)num, 1, &gstruct) != null)
                            {
                                this.textBox6.AppendText("Ram Execute command failed" + "\r\n");
                            }
                            else
                            {
                                this.textBox6.AppendText("Done!" + "\r\n");
                                this.Cursor = Cursors.Arrow;
                            }
                        }
                    }
                }
            }
        }

        // Token: 0x060003CE RID: 974 RVA: 0x00150968 File Offset: 0x00150968
        private unsafe void method_391(byte* pByte_0, byte* pByte_1, int int_16)
        {
            Struct115 @struct = 22;
            *(ref @struct + 4) = 27;
            *(ref @struct + 8) = 3;
            *(ref @struct + 12) = 10;
            *(ref @struct + 16) = 14;
            *(ref @struct + 20) = 16;
            *(ref @struct + 24) = 1;
            *(ref @struct + 28) = 28;
            *(ref @struct + 32) = 26;
            *(ref @struct + 36) = 7;
            *(ref @struct + 40) = 15;
            *(ref @struct + 44) = 21;
            *(ref @struct + 48) = 5;
            *(ref @struct + 52) = 19;
            *(ref @struct + 56) = 29;
            *(ref @struct + 60) = 12;
            *(ref @struct + 64) = 2;
            *(ref @struct + 68) = 11;
            *(ref @struct + 72) = 24;
            *(ref @struct + 76) = 20;
            *(ref @struct + 80) = 13;
            *(ref @struct + 84) = 18;
            *(ref @struct + 88) = 4;
            *(ref @struct + 92) = 30;
            *(ref @struct + 96) = 9;
            *(ref @struct + 100) = 17;
            *(ref @struct + 104) = 23;
            *(ref @struct + 108) = 0;
            *(ref @struct + 112) = 6;
            *(ref @struct + 116) = 31;
            *(ref @struct + 120) = 8;
            *(ref @struct + 124) = 25;
            for (int i = 0; i < int_16; i += 4)
            {
                uint num = (uint)((int)pByte_0[i] << 24 | (int)pByte_0[i + 1] << 16 | (int)pByte_0[i + 2] << 8 | (int)pByte_0[i + 3]);
                num ^= 2341178251U;
                num = this.method_32(num, (int*)(&@struct));
                pByte_1[i] = (byte)(num >> 24);
                pByte_1[i + 1] = (byte)(num >> 16);
                pByte_1[i + 2] = (byte)(num >> 8);
                pByte_1[i + 3] = (byte)num;
            }
        }

        // Token: 0x060003CF RID: 975 RVA: 0x00150ACC File Offset: 0x00150ACC
        private unsafe void method_392(byte* pByte_0, byte* pByte_1, int int_16)
        {
            Struct115 @struct = 2;
            *(ref @struct + 4) = 8;
            *(ref @struct + 8) = 17;
            *(ref @struct + 12) = 24;
            *(ref @struct + 16) = 30;
            *(ref @struct + 20) = 23;
            *(ref @struct + 24) = 0;
            *(ref @struct + 28) = 13;
            *(ref @struct + 32) = 5;
            *(ref @struct + 36) = 31;
            *(ref @struct + 40) = 20;
            *(ref @struct + 44) = 12;
            *(ref @struct + 48) = 18;
            *(ref @struct + 52) = 10;
            *(ref @struct + 56) = 6;
            *(ref @struct + 60) = 26;
            *(ref @struct + 64) = 21;
            *(ref @struct + 68) = 27;
            *(ref @struct + 72) = 11;
            *(ref @struct + 76) = 16;
            *(ref @struct + 80) = 14;
            *(ref @struct + 84) = 28;
            *(ref @struct + 88) = 7;
            *(ref @struct + 92) = 1;
            *(ref @struct + 96) = 22;
            *(ref @struct + 100) = 3;
            *(ref @struct + 104) = 19;
            *(ref @struct + 108) = 9;
            *(ref @struct + 112) = 29;
            *(ref @struct + 116) = 15;
            *(ref @struct + 120) = 25;
            *(ref @struct + 124) = 4;
            for (int i = 0; i < int_16; i += 4)
            {
                uint num = (uint)((int)pByte_0[i] << 24 | (int)pByte_0[i + 1] << 16 | (int)pByte_0[i + 2] << 8 | (int)pByte_0[i + 3]);
                num = this.method_32(num, (int*)(&@struct));
                num ^= 2341178251U;
                pByte_1[i] = (byte)(num >> 24);
                pByte_1[i + 1] = (byte)(num >> 16);
                pByte_1[i + 2] = (byte)(num >> 8);
                pByte_1[i + 3] = (byte)num;
            }
        }

        // Token: 0x060003D0 RID: 976 RVA: 0x00150C30 File Offset: 0x00150C30
        private int method_393(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
        {
            if (this.int_13 == 1 && this.int_15 == 0)
            {
                if (this.method_396(uint_0, uint_1, uint_2, uint_3) != 0)
                {
                    return 1;
                }
            }
            else if (this.int_13 == 2 && this.int_15 == 0)
            {
                if (this.method_401(uint_0, uint_1, uint_2, uint_3) != 0)
                {
                    return 1;
                }
            }
            else if (this.int_13 == 3 && this.int_15 == 0)
            {
                if (this.method_399(uint_0, uint_1, uint_2, uint_3) != 0)
                {
                    return 1;
                }
            }
            else if (this.int_13 == 1 && this.int_15 == 1)
            {
                if (this.method_398(uint_0, uint_1, uint_2, uint_3) != 0)
                {
                    return 1;
                }
            }
            else if (this.int_13 == 2 && this.int_15 == 1)
            {
                if (this.method_402(uint_0, uint_1, uint_2, uint_3) != 0)
                {
                    return 1;
                }
            }
            else
            {
                if (this.int_13 != 3 || this.int_15 != 1)
                {
                    return 1;
                }
                if (this.method_400(uint_0, uint_1, uint_2, uint_3) != 0)
                {
                    return 1;
                }
            }
            return 0;
        }

        // Token: 0x060003D1 RID: 977 RVA: 0x003CCFC8 File Offset: 0x00314FC8
        private unsafe int method_394(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
        {
            int result;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 1;
            }
            else
            {
                uint num = 0U;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr = (sbyte*)((void*)value);
                if (*(sbyte*)ptr < 65 | *(sbyte*)ptr > 122)
                {
                    result = 1;
                }
                else
                {
                    Struct109 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr);
                    void* ptr2 = _Module.CreateFileA((sbyte*)(&@struct), -1073741824, 3, null, 3, 128, null);
                    if (ptr2 == -1)
                    {
                        result = 1;
                    }
                    else
                    {
                        this.Cursor = Cursors.WaitCursor;
                        Struct32 struct4;
                        for (uint num2 = uint_0; num2 < uint_0 + uint_1; num2 += 1U)
                        {
                            Struct116 struct2;

                            _Module.memset((void*)(&struct2), 48, 32768U);
                            Struct108 struct3;

                            _Module.memset((void*)(&struct3), 0, 62U);
                            *(ref struct3 + 28) = 231;
                            *(ref struct3 + 29) = 72;
                            *(ref struct3 + 30) = 73;
                            *(ref struct3 + 31) = 84;
                            *(ref struct3 + 32) = 1;
                            *(ref struct3 + 34) = (byte)((num2 * uint_2 & 4278190080U) >> 24);
                            *(ref struct3 + 35) = (byte)((num2 * uint_2 & 16711680U) >> 16);
                            *(ref struct3 + 36) = (byte)((num2 * uint_2 & 65280U) >> 8);
                            *(ref struct3 + 37) = (byte)(num2 * uint_2 & 255U);
                            *(ref struct3 + 38) = (byte)((uint_2 & 65280U) >> 8);
                            *(ref struct3 + 39) = (byte)(uint_2 & 255U);
                            struct3 = 44;
                            *(ref struct3 + 6) = 12;
                            *(ref struct3 + 7) = 18;
                            *(ref struct3 + 8) = 1;
                            *(ref struct3 + 12) = (int)uint_2;
                            *(ref struct3 + 16) = 15;
                            *(ref struct3 + 20) = ref struct2;
                            *(ref struct3 + 24) = 44;
                            uint num3;
                            if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num3), null) == null)
                            {
                                this.textBox6.AppendText("Classic Dump Failed" + "\r\n");
                                this.Cursor = Cursors.Arrow;

                                _Module.CloseHandle(ptr2);
                                return 1;
                            }
                            byte* ptr3 = ref struct4 + num * uint_2;

                            _Module.memcpy((void*)ptr3, (void*)(&struct2), uint_2);
                            num += 1U;
                            if (num2 % uint_3 == 0U)
                            {
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                            }
                        }
                        this.Cursor = Cursors.Arrow;

                        _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct4), 262144U);

                        _Module.CloseHandle(ptr2);
                        result = 0;
                    }
                }
            }
            return result;
        }

        // Token: 0x060003D2 RID: 978 RVA: 0x00150F94 File Offset: 0x00150F94
        private unsafe int method_395(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                uint num2 = 0U;
                this.Cursor = Cursors.WaitCursor;
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct32 struct3;
                for (uint num3 = uint_0; num3 < uint_0 + uint_1; num3 += 1U)
                {
                    Struct116 @struct;

                    _Module.memset((void*)(&@struct), 0, 32768U);
                    Struct52 struct2;

                    _Module.memset((void*)(&struct2), 0, 12U);
                    struct2 = 231;
                    *(ref struct2 + 1) = 72;
                    *(ref struct2 + 2) = 73;
                    *(ref struct2 + 3) = 84;
                    *(ref struct2 + 4) = 1;
                    *(ref struct2 + 6) = (byte)((num3 * uint_2 & 4278190080U) >> 24);
                    *(ref struct2 + 7) = (byte)((num3 * uint_2 & 16711680U) >> 16);
                    *(ref struct2 + 8) = (byte)((num3 * uint_2 & 65280U) >> 8);
                    *(ref struct2 + 9) = (byte)(num3 * uint_2 & 255U);
                    *(ref struct2 + 10) = (byte)((uint_2 & 65280U) >> 8);
                    *(ref struct2 + 11) = (byte)(uint_2 & 255U);
                    uint num4;
                    if (_Module.smethod_16((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&@struct), &num4, uint_2, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Classic Dump Failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        return 1;
                    }
                    byte* ptr = ref struct3 + num2 * uint_2;

                    _Module.memcpy((void*)ptr, (void*)(&@struct), uint_2);
                    num2 += 1U;
                    if (num3 % uint_3 == 0U)
                    {
                        this.textBox6.AppendText(".");
                        Application.DoEvents();
                    }
                }
                this.Cursor = Cursors.Arrow;

                _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct3), 262144U);
                result = 0;
            }
            return result;
        }

        // Token: 0x060003D3 RID: 979 RVA: 0x003CD234 File Offset: 0x00315234
        private unsafe int method_396(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
        {
            int result;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 1;
            }
            else
            {
                Struct45 @struct;
                if (this.int_12 == 79)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_0), 384U);
                }
                else if (this.int_12 == 59)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_2), 384U);
                }
                else if (this.int_12 == 47)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_4), 384U);
                }
                else if (this.int_12 == 36)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_1), 384U);
                }
                else if (this.int_12 == 32)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_3), 384U);
                }
                uint num = 0U;
                string str = this.comboBox16.Text.Substring(0, 1);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr = (sbyte*)((void*)value);
                if (*(sbyte*)ptr < 65 | *(sbyte*)ptr > 122)
                {
                    result = 1;
                }
                else
                {
                    Struct109 struct2;

                    _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr);
                    void* ptr2 = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                    if (ptr2 == -1)
                    {
                        this.textBox6.AppendText("Failed to open drive " + str + "\r\n");
                        result = 1;
                    }
                    else
                    {
                        this.Cursor = Cursors.WaitCursor;
                        uint num2 = 384U;
                        Struct32 struct5;
                        for (uint num3 = uint_0; num3 < uint_0 + uint_1; num3 += 1U)
                        {
                            *(ref @struct + 2) = (int)uint_2;
                            *(ref @struct + 11) = (int)(num3 * uint_2);
                            uint num4 = 0U;
                            for (uint num5 = 0U; num5 < num2 - 2U; num5 += 1U)
                            {
                                num4 += (uint)(*(ref @struct + num5));
                            }
                            num4 = 65536U - (num4 & 65535U);
                            *(ref @struct + (num2 - 2U)) = (byte)(num4 & 255U);
                            *(ref @struct + (num2 - 1U)) = (byte)((num4 & 65280U) >> 8);
                            Struct108 struct3;

                            _Module.memset((void*)(&struct3), 0, 62U);
                            *(ref struct3 + 28) = 231;
                            *(ref struct3 + 29) = 72;
                            *(ref struct3 + 30) = 73;
                            *(ref struct3 + 31) = 84;
                            *(ref struct3 + 32) = 59;
                            *(ref struct3 + 33) = 6;
                            *(ref struct3 + 38) = (byte)((num2 & 65280U) >> 8);
                            *(ref struct3 + 39) = (byte)(num2 & 255U);
                            struct3 = 44;
                            *(ref struct3 + 6) = 12;
                            *(ref struct3 + 7) = 18;
                            *(ref struct3 + 8) = 0;
                            *(ref struct3 + 12) = (int)num2;
                            *(ref struct3 + 16) = 15;
                            *(ref struct3 + 20) = ref @struct;
                            *(ref struct3 + 24) = 44;
                            uint num6;
                            if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num6), null) == null)
                            {
                                this.textBox6.AppendText("Ram Upload - Upload Failed" + "\r\n");

                                _Module.CloseHandle(ptr2);
                                return 1;
                            }
                            Struct116 struct4;

                            _Module.memset((void*)(&struct4), 48, 32768U);

                            _Module.memset((void*)(&struct3), 0, 62U);
                            *(ref struct3 + 28) = 231;
                            *(ref struct3 + 29) = 72;
                            *(ref struct3 + 30) = 73;
                            *(ref struct3 + 31) = 84;
                            *(ref struct3 + 32) = 59;
                            *(ref struct3 + 33) = 7;
                            *(ref struct3 + 39) = 1;
                            struct3 = 44;
                            *(ref struct3 + 6) = 12;
                            *(ref struct3 + 7) = 18;
                            *(ref struct3 + 8) = 1;
                            *(ref struct3 + 12) = (int)uint_2;
                            *(ref struct3 + 16) = 15;
                            *(ref struct3 + 20) = ref struct4;
                            *(ref struct3 + 24) = 44;
                            if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num6), null) == null)
                            {
                                this.textBox6.AppendText("Ram Upload - Execute Failed" + "\r\n");

                                _Module.CloseHandle(ptr2);
                                return 1;
                            }
                            num2 = 20U;
                            byte* ptr3 = ref struct5 + num * uint_2;

                            _Module.memcpy((void*)ptr3, (void*)(&struct4), uint_2);
                            num += 1U;
                            if (num3 % uint_3 == 0U)
                            {
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                            }
                        }
                        this.Cursor = Cursors.Arrow;

                        _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct5), 262144U);

                        _Module.CloseHandle(ptr2);
                        result = 0;
                    }
                }
            }
            return result;
        }

        // Token: 0x060003D4 RID: 980 RVA: 0x003CD668 File Offset: 0x00315668
        private unsafe int method_397(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
        {
            int result;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 1;
            }
            else
            {
                Struct45 @struct;
                if (this.int_12 == 79)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_0), 384U);
                }
                else if (this.int_12 == 59)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_2), 384U);
                }
                else if (this.int_12 == 47)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_4), 384U);
                }
                else if (this.int_12 == 36)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_1), 384U);
                }
                else if (this.int_12 == 32)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_3), 384U);
                }
                uint num = 0U;
                string str = this.comboBox16.Text.Substring(0, 1);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr = (sbyte*)((void*)value);
                if (*(sbyte*)ptr < 65 | *(sbyte*)ptr > 122)
                {
                    result = 1;
                }
                else
                {
                    Struct109 struct2;

                    _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr);
                    void* ptr2 = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                    if (ptr2 == -1)
                    {
                        this.textBox6.AppendText("Failed to open drive " + str + "\r\n");
                        result = 1;
                    }
                    else
                    {
                        this.Cursor = Cursors.WaitCursor;
                        uint num2 = 384U;
                        Struct32 struct5;
                        for (uint num3 = uint_0; num3 < uint_0 + uint_1; num3 += 1U)
                        {
                            *(ref @struct + 2) = (int)uint_2;
                            *(ref @struct + 11) = (int)(uint_0 * uint_2);
                            uint num4 = 0U;
                            for (uint num5 = 0U; num5 < num2 - 2U; num5 += 1U)
                            {
                                num4 += (uint)(*(ref @struct + num5));
                            }
                            num4 = 65536U - (num4 & 65535U);
                            *(ref @struct + (num2 - 2U)) = (byte)(num4 & 255U);
                            *(ref @struct + (num2 - 1U)) = (byte)((num4 & 65280U) >> 8);
                            Struct108 struct3;

                            _Module.memset((void*)(&struct3), 0, 62U);
                            *(ref struct3 + 28) = 231;
                            *(ref struct3 + 29) = 72;
                            *(ref struct3 + 30) = 73;
                            *(ref struct3 + 31) = 84;
                            *(ref struct3 + 32) = 59;
                            *(ref struct3 + 33) = 6;
                            *(ref struct3 + 38) = (byte)((num2 & 65280U) >> 8);
                            *(ref struct3 + 39) = (byte)(num2 & 255U);
                            struct3 = 44;
                            *(ref struct3 + 6) = 12;
                            *(ref struct3 + 7) = 18;
                            *(ref struct3 + 8) = 0;
                            *(ref struct3 + 12) = (int)num2;
                            *(ref struct3 + 16) = 15;
                            *(ref struct3 + 20) = ref @struct;
                            *(ref struct3 + 24) = 44;
                            uint num6;
                            if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num6), null) == null)
                            {
                                this.textBox6.AppendText("Ram Upload - Upload Failed" + "\r\n");

                                _Module.CloseHandle(ptr2);
                                return 1;
                            }
                            Struct116 struct4;

                            _Module.memset((void*)(&struct4), 48, 32768U);

                            _Module.memset((void*)(&struct3), 0, 62U);
                            *(ref struct3 + 28) = 231;
                            *(ref struct3 + 29) = 72;
                            *(ref struct3 + 30) = 73;
                            *(ref struct3 + 31) = 84;
                            *(ref struct3 + 32) = 59;
                            *(ref struct3 + 33) = 7;
                            *(ref struct3 + 39) = 1;
                            struct3 = 44;
                            *(ref struct3 + 6) = 12;
                            *(ref struct3 + 7) = 18;
                            *(ref struct3 + 8) = 1;
                            *(ref struct3 + 12) = (int)uint_2;
                            *(ref struct3 + 16) = 15;
                            *(ref struct3 + 20) = ref struct4;
                            *(ref struct3 + 24) = 44;
                            if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num6), null) == null)
                            {
                                this.textBox6.AppendText("Ram Upload - Execute Failed" + "\r\n");

                                _Module.CloseHandle(ptr2);
                                return 1;
                            }
                            num2 = 20U;
                            byte* ptr3 = ref struct5 + num * uint_2;

                            _Module.memcpy((void*)ptr3, (void*)(&struct4), uint_2);
                            num += 1U;
                            if (num3 % uint_3 == 0U)
                            {
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                            }
                        }
                        this.Cursor = Cursors.Arrow;
                        GStruct5* pGstruct5_ = _Module.fopen((sbyte*)(&_Module.struct74_5), (sbyte*)(&_Module.struct18_5));

                        _Module.fwrite((void*)(&struct5), uint_2 * uint_1, 1U, pGstruct5_);

                        _Module.fclose(pGstruct5_);

                        _Module.CloseHandle(ptr2);
                        result = 0;
                    }
                }
            }
            return result;
        }

        // Token: 0x060003D5 RID: 981 RVA: 0x003CDAA8 File Offset: 0x00315AA8
        private unsafe int method_398(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                Struct45 @struct;
                if (this.int_12 == 79)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_0), 384U);
                }
                else if (this.int_12 == 59)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_2), 384U);
                }
                else if (this.int_12 == 47)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_4), 384U);
                }
                else if (this.int_12 == 36)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_1), 384U);
                }
                else if (this.int_12 == 32)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_3), 384U);
                }
                uint num2 = 0U;
                this.Cursor = Cursors.WaitCursor;
                uint num3 = 384U;
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                Struct32 struct4;
                for (uint num4 = uint_0; num4 < uint_0 + uint_1; num4 += 1U)
                {
                    *(ref @struct + 2) = (int)uint_2;
                    *(ref @struct + 11) = (int)(num4 * uint_2);
                    uint num5 = 0U;
                    for (uint num6 = 0U; num6 < num3 - 2U; num6 += 1U)
                    {
                        num5 += (uint)(*(ref @struct + num6));
                    }
                    num5 = 65536U - (num5 & 65535U);
                    *(ref @struct + (num3 - 2U)) = (byte)(num5 & 255U);
                    *(ref @struct + (num3 - 1U)) = (byte)((num5 & 65280U) >> 8);
                    Struct52 struct2;

                    _Module.memset((void*)(&struct2), 0, 12U);
                    struct2 = 231;
                    *(ref struct2 + 1) = 72;
                    *(ref struct2 + 2) = 73;
                    *(ref struct2 + 3) = 84;
                    *(ref struct2 + 4) = 59;
                    *(ref struct2 + 5) = 6;
                    *(ref struct2 + 10) = (byte)((num3 & 65280U) >> 8);
                    *(ref struct2 + 11) = (byte)(num3 & 255U);
                    uint num7;
                    if (_Module.smethod_17((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&@struct), &num7, num3, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Ram Upload - Upload Failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        return 1;
                    }

                    _Module.memset((void*)(&struct2), 0, 12U);
                    Struct116 struct3;

                    _Module.memset((void*)(&struct3), 0, 32768U);
                    struct2 = 231;
                    *(ref struct2 + 1) = 72;
                    *(ref struct2 + 2) = 73;
                    *(ref struct2 + 3) = 84;
                    *(ref struct2 + 4) = 59;
                    *(ref struct2 + 5) = 7;
                    *(ref struct2 + 11) = 1;
                    if (_Module.smethod_16((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&struct3), &num7, uint_2, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Ram Upload - Execute Failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        return 1;
                    }
                    num3 = 20U;
                    byte* ptr = ref struct4 + num2 * uint_2;

                    _Module.memcpy((void*)ptr, (void*)(&struct3), uint_2);
                    num2 += 1U;
                    if (num4 % uint_3 == 0U)
                    {
                        this.textBox6.AppendText(".");
                        Application.DoEvents();
                    }
                }
                this.Cursor = Cursors.Arrow;

                _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct4), 262144U);
                result = 0;
            }
            return result;
        }

        // Token: 0x060003D6 RID: 982 RVA: 0x003CDDC4 File Offset: 0x00315DC4
        private unsafe int method_399(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
        {
            int result;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 1;
            }
            else
            {
                Struct45 @struct;
                if (this.int_12 == 79)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_0), 384U);
                }
                else if (this.int_12 == 59)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_2), 384U);
                }
                else if (this.int_12 == 47)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_4), 384U);
                }
                else if (this.int_12 == 36)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_1), 384U);
                }
                else if (this.int_12 == 32)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_3), 384U);
                }
                uint num = 0U;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr = (sbyte*)((void*)value);
                if (*(sbyte*)ptr < 65 | *(sbyte*)ptr > 122)
                {
                    result = 1;
                }
                else
                {
                    Struct109 struct2;

                    _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr);
                    void* ptr2 = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                    if (ptr2 == -1)
                    {
                        result = 1;
                    }
                    else
                    {
                        this.Cursor = Cursors.WaitCursor;
                        uint num2 = 384U;
                        Struct32 struct6;
                        for (uint num3 = uint_0; num3 < uint_0 + uint_1; num3 += 1U)
                        {
                            *(ref @struct + 2) = (int)uint_2;
                            *(ref @struct + 11) = (int)(num3 * uint_2);
                            uint num4 = 0U;
                            for (uint num5 = 0U; num5 < 382U; num5 += 1U)
                            {
                                num4 += (uint)(*(ref @struct + num5));
                            }
                            num4 = 65536U - (num4 & 65535U);
                            *(ref @struct + 382) = (byte)(num4 & 255U);
                            *(ref @struct + 383) = (byte)((num4 & 65280U) >> 8);
                            Struct108 struct3;
                            uint num7;
                            for (uint num6 = 0U; num6 < num2; num6 += 1U)
                            {

                                _Module.memset((void*)(&struct3), 0, 62U);
                                *(ref struct3 + 28) = 231;
                                *(ref struct3 + 29) = 72;
                                *(ref struct3 + 30) = 73;
                                *(ref struct3 + 31) = 84;
                                *(ref struct3 + 32) = 204;
                                *(ref struct3 + 33) = *(ref @struct + num6);
                                *(ref struct3 + 36) = (byte)((num6 + 2147483648U & 4278190080U) >> 24);
                                *(ref struct3 + 37) = (byte)((num6 + 2147483648U & 16711680U) >> 16);
                                *(ref struct3 + 38) = (byte)((num6 + 2147483648U & 65280U) >> 8);
                                *(ref struct3 + 39) = (byte)(num6 + 2147483648U & 255U);
                                struct3 = 44;
                                *(ref struct3 + 6) = 12;
                                *(ref struct3 + 7) = 18;
                                *(ref struct3 + 8) = 2;
                                *(ref struct3 + 16) = 15;
                                *(ref struct3 + 24) = 44;
                                if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num7), null) == null)
                                {
                                    this.textBox6.AppendText("Ram Poke Failed" + "\r\n");

                                    _Module.CloseHandle(ptr2);
                                    return 1;
                                }
                            }

                            _Module.memset((void*)(&struct3), 0, 62U);
                            *(ref struct3 + 28) = 85;
                            *(ref struct3 + 29) = 16;
                            *(ref struct3 + 36) = 8;
                            Struct103 struct4;

                            _Module.memset((void*)(&struct4), 0, 8U);
                            *(ref struct4 + 1) = 6;
                            struct3 = 44;
                            *(ref struct3 + 6) = 12;
                            *(ref struct3 + 7) = 18;
                            *(ref struct3 + 8) = 0;
                            *(ref struct3 + 12) = 8;
                            *(ref struct3 + 16) = 15;
                            *(ref struct3 + 20) = ref struct4;
                            *(ref struct3 + 24) = 44;
                            if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num7), null) == null && _Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num7), null) == null && _Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num7), null) == null)
                            {
                                this.textBox6.AppendText("Set (59E) bit 3 via Mode Select(10) failed" + "\r\n");

                                _Module.CloseHandle(ptr2);
                                return 1;
                            }
                            Struct116 struct5;

                            _Module.memset((void*)(&struct5), 48, uint_2);

                            _Module.memset((void*)(&struct3), 0, 62U);
                            *(ref struct3 + 28) = 85;
                            *(ref struct3 + 29) = 16;
                            *(ref struct3 + 31) = 72;
                            *(ref struct3 + 32) = 76;
                            *(ref struct3 + 34) = 1;
                            *(ref struct3 + 39) = 1;
                            struct3 = 44;
                            *(ref struct3 + 6) = 12;
                            *(ref struct3 + 7) = 18;
                            *(ref struct3 + 8) = 1;
                            *(ref struct3 + 12) = (int)uint_2;
                            *(ref struct3 + 16) = 15;
                            *(ref struct3 + 20) = ref struct5;
                            *(ref struct3 + 24) = 44;
                            if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num7), null) == null)
                            {
                                this.textBox6.AppendText("Ram Poke Dump Failed" + "\r\n");

                                _Module.CloseHandle(ptr2);
                                return 1;
                            }
                            byte* ptr3 = ref struct6 + num * uint_2;

                            _Module.memcpy((void*)ptr3, (void*)(&struct5), uint_2);
                            num += 1U;
                            if (num3 % uint_3 == 0U)
                            {
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                            }

                            _Module.memset((void*)(&struct3), 0, 62U);
                            *(ref struct3 + 28) = 85;
                            struct3 = 44;
                            *(ref struct3 + 6) = 12;
                            *(ref struct3 + 7) = 18;
                            *(ref struct3 + 8) = 2;
                            *(ref struct3 + 16) = 15;
                            *(ref struct3 + 24) = 44;
                            if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num7), null) == null && _Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num7), null) == null)
                            {
                                this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
                                this.Cursor = Cursors.Arrow;

                                _Module.CloseHandle(ptr2);
                                return 1;
                            }
                            num2 = 16U;
                        }
                        this.Cursor = Cursors.Arrow;

                        _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct6), 262144U);

                        _Module.CloseHandle(ptr2);
                        result = 0;
                    }
                }
            }
            return result;
        }

        // Token: 0x060003D7 RID: 983 RVA: 0x00152208 File Offset: 0x00152208
        private unsafe int method_400(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
        {
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                Struct45 @struct;
                if (this.int_12 == 79)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_0), 384U);
                }
                else if (this.int_12 == 59)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_2), 384U);
                }
                else if (this.int_12 == 47)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_4), 384U);
                }
                else if (this.int_12 == 36)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_1), 384U);
                }
                else if (this.int_12 == 32)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_3), 384U);
                }
                uint num2 = 0U;
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                this.Cursor = Cursors.WaitCursor;
                uint num3 = 384U;
                Struct52 struct2;

                _Module.memset((void*)(&struct2), 0, 12U);
                struct2 = 85;
                if (_Module.smethod_15((byte*)(&struct2), 12U, (byte)num, 1, &gstruct) != null && _Module.smethod_15((byte*)(&struct2), 12U, (byte)num, 1, &gstruct) != null)
                {
                    this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
                    this.Cursor = Cursors.Arrow;
                    result = 1;
                }
                else
                {
                    Struct32 struct5;
                    for (uint num4 = uint_0; num4 < uint_0 + uint_1; num4 += 1U)
                    {
                        *(ref @struct + 2) = (int)uint_2;
                        *(ref @struct + 11) = (int)(num4 * uint_2);
                        uint num5 = 0U;
                        for (uint num6 = 0U; num6 < 382U; num6 += 1U)
                        {
                            num5 += (uint)(*(ref @struct + num6));
                        }
                        num5 = 65536U - (num5 & 65535U);
                        *(ref @struct + 382) = (byte)(num5 & 255U);
                        *(ref @struct + 383) = (byte)((num5 & 65280U) >> 8);
                        for (uint num7 = 0U; num7 < num3; num7 += 1U)
                        {

                            _Module.memset((void*)(&struct2), 0, 12U);
                            struct2 = 231;
                            *(ref struct2 + 1) = 72;
                            *(ref struct2 + 2) = 73;
                            *(ref struct2 + 3) = 84;
                            *(ref struct2 + 4) = 204;
                            *(ref struct2 + 5) = *(ref @struct + num7);
                            *(ref struct2 + 8) = (byte)((num7 + 2147483648U & 4278190080U) >> 24);
                            *(ref struct2 + 9) = (byte)((num7 + 2147483648U & 16711680U) >> 16);
                            *(ref struct2 + 10) = (byte)((num7 + 2147483648U & 65280U) >> 8);
                            *(ref struct2 + 11) = (byte)(num7 + 2147483648U & 255U);
                            if (_Module.smethod_15((byte*)(&struct2), 12U, (byte)num, 1, &gstruct) != null)
                            {
                                this.textBox6.AppendText("Ram Poke Failed" + "\r\n");
                                this.Cursor = Cursors.Arrow;
                                return 1;
                            }
                        }

                        _Module.memset((void*)(&struct2), 0, 12U);
                        Struct103 struct3;

                        _Module.memset((void*)(&struct3), 0, 8U);
                        struct2 = 85;
                        *(ref struct2 + 1) = 16;
                        *(ref struct2 + 8) = 8;
                        *(ref struct3 + 1) = 6;
                        uint num8;
                        if (_Module.smethod_17((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&struct3), &num8, 8U, 1, &gstruct) != null)
                        {
                            this.textBox6.AppendText("Execute Enable Failed" + "\r\n");
                            this.Cursor = Cursors.Arrow;
                            return 1;
                        }

                        _Module.memset((void*)(&struct2), 0, 12U);
                        struct2 = 85;
                        *(ref struct2 + 1) = 16;
                        *(ref struct2 + 3) = 72;
                        *(ref struct2 + 4) = 76;
                        *(ref struct2 + 6) = 1;
                        *(ref struct2 + 11) = 1;
                        Struct116 struct4;
                        if (_Module.smethod_16((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&struct4), &num8, uint_2, 1, &gstruct) != null)
                        {
                            this.textBox6.AppendText("Execute Failed" + "\r\n");
                            this.Cursor = Cursors.Arrow;
                            return 1;
                        }
                        byte* ptr = ref struct5 + num2 * uint_2;

                        _Module.memcpy((void*)ptr, (void*)(&struct4), uint_2);
                        num2 += 1U;
                        if (num4 % uint_3 == 0U)
                        {
                            this.textBox6.AppendText(".");
                            Application.DoEvents();
                        }

                        _Module.memset((void*)(&struct2), 0, 12U);

                        _Module.memset((void*)(&struct3), 0, 8U);
                        struct2 = 85;
                        *(ref struct2 + 1) = 16;
                        *(ref struct2 + 8) = 8;
                        *(ref struct3 + 1) = 6;
                        if (_Module.smethod_17((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&struct3), &num8, 8U, 1, &gstruct) != null)
                        {
                            this.textBox6.AppendText("Execute Disable Failed" + "\r\n");
                            this.Cursor = Cursors.Arrow;
                            return 1;
                        }
                        num3 = 16U;
                    }
                    this.Cursor = Cursors.Arrow;

                    _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct5), 262144U);
                    result = 0;
                }
            }
            return result;
        }

        // Token: 0x060003D8 RID: 984 RVA: 0x003CE34C File Offset: 0x0031634C
        private unsafe int method_401(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
        {
            int result;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 1;
            }
            else
            {
                Struct45 @struct;
                if (this.int_12 == 79)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_0), 384U);
                }
                else if (this.int_12 == 59)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_2), 384U);
                }
                else if (this.int_12 == 47)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_4), 384U);
                }
                else if (this.int_12 == 36)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_1), 384U);
                }
                else if (this.int_12 == 32)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_3), 384U);
                }
                uint num = 0U;
                Struct108 struct2;
                byte* ptr = ref struct2 + 44;
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122)
                {
                    result = 1;
                }
                else
                {
                    Struct109 struct3;

                    _Module.sprintf((sbyte*)(&struct3), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct3), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 == -1)
                    {
                        result = 1;
                    }
                    else
                    {
                        this.Cursor = Cursors.WaitCursor;
                        Struct32 struct6;
                        for (uint num2 = uint_0; num2 < uint_0 + uint_1; num2 += 1U)
                        {
                            *(ref @struct + 2) = (int)uint_2;
                            *(ref @struct + 11) = (int)(num2 * uint_2);
                            uint num3 = 0U;
                            for (uint num4 = 0U; num4 < 382U; num4 += 1U)
                            {
                                num3 += (uint)(*(ref @struct + num4));
                            }
                            num3 = 65536U - (num3 & 65535U);
                            *(ref @struct + 382) = (byte)(num3 & 255U);
                            *(ref @struct + 383) = (byte)((num3 & 65280U) >> 8);

                            _Module.memset((void*)(&struct2), 0, 62U);
                            *(ref struct2 + 28) = 85;
                            struct2 = 44;
                            *(ref struct2 + 6) = 12;
                            *(ref struct2 + 7) = 18;
                            *(ref struct2 + 8) = 2;
                            *(ref struct2 + 16) = 15;
                            *(ref struct2 + 24) = 44;
                            uint num5;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&struct2), 62, (void*)(&struct2), 62, (uint*)(&num5), null) == null && _Module.DeviceIoControl(ptr3, 315412, (void*)(&struct2), 62, (void*)(&struct2), 62, (uint*)(&num5), null) == null)
                            {
                                this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
                                this.Cursor = Cursors.Arrow;

                                _Module.CloseHandle(ptr3);
                                return 1;
                            }

                            _Module.memset((void*)(&struct2), 0, 62U);
                            *(ref struct2 + 28) = 85;
                            *(ref struct2 + 29) = 16;
                            *(ref struct2 + 36) = 16;
                            *(ref struct2 + 39) = 1;
                            Struct28 struct4;

                            _Module.memset((void*)(&struct4), 0, 16U);
                            *(ref struct4 + 9) = 6;
                            *(ref struct4 + 10) = 72;
                            *(ref struct4 + 11) = 76;
                            *(ref struct4 + 12) = 0;
                            *(ref struct4 + 13) = 0;
                            *(ref struct4 + 14) = 1;
                            *(ref struct4 + 15) = 128;
                            struct2 = 44;
                            *(ref struct2 + 6) = 12;
                            *(ref struct2 + 7) = 18;
                            *(ref struct2 + 8) = 0;
                            *(ref struct2 + 12) = 16;
                            *(ref struct2 + 16) = 15;
                            *(ref struct2 + 20) = ref struct4;
                            *(ref struct2 + 24) = 44;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&struct2), 62, (void*)(&struct2), 62, (uint*)(&num5), null) == null || (ptr[2] & 15) != 0)
                            {
                                this.textBox6.AppendText("Configure Upload Failed" + "\r\n");
                                this.Cursor = Cursors.Arrow;

                                _Module.CloseHandle(ptr3);
                                return 1;
                            }

                            _Module.memset((void*)(&struct2), 0, 62U);

                            _Module.memset((void*)(&_Module.struct119_1), 0, 392U);
                            *(ref struct2 + 28) = 85;
                            *(ref struct2 + 29) = 16;
                            *(ref struct2 + 35) = 1;
                            *(ref struct2 + 36) = 136;
                            *(ref struct2 + 39) = 1;

                            _Module.memset((void*)(&_Module.struct119_1), 0, 392U);
                            *(ref _Module.struct119_1 + 4) = 72;
                            *(ref _Module.struct119_1 + 5) = 76;

                            _Module.memcpy(ref _Module.struct119_1 + 8, (void*)(&@struct), 384U);
                            struct2 = 44;
                            *(ref struct2 + 6) = 12;
                            *(ref struct2 + 7) = 18;
                            *(ref struct2 + 8) = 0;
                            *(ref struct2 + 12) = 392;
                            *(ref struct2 + 16) = 15;
                            *(ref struct2 + 20) = ref _Module.struct119_1;
                            *(ref struct2 + 24) = 44;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&struct2), 62, (void*)(&struct2), 62, (uint*)(&num5), null) == null || (ptr[2] & 15) != 0)
                            {
                                this.textBox6.AppendText("Upload buffer failed" + "\r\n");

                                _Module.CloseHandle(ptr3);
                                this.Cursor = Cursors.Arrow;
                                return 1;
                            }
                            Struct116 struct5;

                            _Module.memset((void*)(&struct5), 0, 32768U);

                            _Module.memset((void*)(&struct2), 0, 62U);
                            *(ref struct2 + 28) = 85;
                            *(ref struct2 + 29) = 16;
                            *(ref struct2 + 31) = 72;
                            *(ref struct2 + 32) = 76;
                            *(ref struct2 + 34) = 1;
                            *(ref struct2 + 39) = 1;
                            struct2 = 44;
                            *(ref struct2 + 6) = 12;
                            *(ref struct2 + 7) = 18;
                            *(ref struct2 + 8) = 1;
                            *(ref struct2 + 12) = (int)uint_2;
                            *(ref struct2 + 16) = 15;
                            *(ref struct2 + 20) = ref struct5;
                            *(ref struct2 + 24) = 44;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&struct2), 62, (void*)(&struct2), 62, (uint*)(&num5), null) == null)
                            {
                                this.textBox6.AppendText("Ram Execute Failed" + "\r\n");
                                this.Cursor = Cursors.Arrow;

                                _Module.CloseHandle(ptr3);
                                return 1;
                            }
                            byte* ptr4 = ref struct6 + num * uint_2;

                            _Module.memcpy((void*)ptr4, (void*)(&struct5), uint_2);
                            num += 1U;
                            if (num2 % uint_3 == 0U)
                            {
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                            }
                        }
                        this.Cursor = Cursors.Arrow;

                        _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct6), 262144U);

                        _Module.CloseHandle(ptr3);
                        result = 0;
                    }
                }
            }
            return result;
        }

        // Token: 0x060003D9 RID: 985 RVA: 0x003CE8E4 File Offset: 0x003168E4
        private unsafe int method_402(uint uint_0, uint uint_1, uint uint_2, uint uint_3)
        {
            uint uint_4 = uint_2 * uint_1;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num = 0U;
                }
                else
                {
                    num = 16U;
                }
                Struct45 @struct;
                if (this.int_12 == 79)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_0), 384U);
                }
                else if (this.int_12 == 59)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_2), 384U);
                }
                else if (this.int_12 == 47)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_4), 384U);
                }
                else if (this.int_12 == 36)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_1), 384U);
                }
                else if (this.int_12 == 32)
                {

                    _Module.memcpy((void*)(&@struct), (void*)(&_Module.struct45_3), 384U);
                }
                uint num2 = 0U;
                GStruct3 gstruct;

                _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                this.Cursor = Cursors.WaitCursor;
                Struct32 struct5;
                for (uint num3 = uint_0; num3 < uint_0 + uint_1; num3 += 1U)
                {
                    *(ref @struct + 2) = (int)uint_2;
                    *(ref @struct + 11) = (int)(num3 * uint_2);
                    uint num4 = 0U;
                    for (uint num5 = 0U; num5 < 382U; num5 += 1U)
                    {
                        num4 += (uint)(*(ref @struct + num5));
                    }
                    num4 = 65536U - (num4 & 65535U);
                    *(ref @struct + 382) = (byte)(num4 & 255U);
                    *(ref @struct + 383) = (byte)((num4 & 65280U) >> 8);
                    Struct52 struct2;

                    _Module.memset((void*)(&struct2), 0, 12U);
                    struct2 = 85;
                    if (_Module.smethod_15((byte*)(&struct2), 12U, (byte)num, 1, &gstruct) != null && _Module.smethod_15((byte*)(&struct2), 12U, (byte)num, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        return 1;
                    }

                    _Module.memset((void*)(&struct2), 0, 12U);
                    struct2 = 85;
                    *(ref struct2 + 1) = 16;
                    *(ref struct2 + 8) = 16;
                    *(ref struct2 + 11) = 1;
                    Struct117 struct3;

                    _Module.memset((void*)(&struct3), 0, 22U);
                    *(ref struct3 + 9) = 6;
                    *(ref struct3 + 10) = 72;
                    *(ref struct3 + 11) = 76;
                    *(ref struct3 + 12) = 0;
                    *(ref struct3 + 13) = 0;
                    *(ref struct3 + 14) = 1;
                    *(ref struct3 + 15) = 128;
                    uint num6;
                    if (_Module.smethod_17((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&struct3), &num6, 16U, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Configure Upload Failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        return 1;
                    }

                    _Module.memset((void*)(&struct2), 0, 12U);
                    struct2 = 85;
                    *(ref struct2 + 1) = 16;
                    *(ref struct2 + 7) = 1;
                    *(ref struct2 + 8) = 136;
                    *(ref struct2 + 11) = 1;

                    _Module.memset((void*)(&_Module.struct119_0), 0, 392U);
                    *(ref _Module.struct119_0 + 4) = 72;
                    *(ref _Module.struct119_0 + 5) = 76;

                    _Module.memcpy(ref _Module.struct119_0 + 8, (void*)(&@struct), 384U);
                    if (_Module.smethod_17((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&_Module.struct119_0), &num6, 392U, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Upload buffer failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        return 1;
                    }

                    _Module.memset((void*)(&struct2), 0, 12U);
                    struct2 = 85;
                    *(ref struct2 + 1) = 16;
                    *(ref struct2 + 3) = 72;
                    *(ref struct2 + 4) = 76;
                    *(ref struct2 + 6) = 1;
                    *(ref struct2 + 11) = 1;
                    Struct116 struct4;
                    if (_Module.smethod_16((byte*)(&struct2), 12U, (byte)num, 512, (void*)(&struct4), &num6, uint_2, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Execute Failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        return 1;
                    }
                    byte* ptr = ref struct5 + num2 * uint_2;

                    _Module.memcpy((void*)ptr, (void*)(&struct4), uint_2);
                    num2 += 1U;
                    if (num3 % uint_3 == 0U)
                    {
                        this.textBox6.AppendText(".");
                        Application.DoEvents();
                    }
                }
                this.Cursor = Cursors.Arrow;

                _Module.memcpy(*(ref _Module.struct121_0 + 7172), (void*)(&struct5), uint_4);
                result = 0;
            }
            return result;
        }

        // Token: 0x060003DA RID: 986 RVA: 0x00153040 File Offset: 0x00153040
        private unsafe int method_403(byte* pByte_0, uint uint_0, uint uint_1)
        {
            if (this.int_13 == 1 && this.int_15 == 0)
            {
                if (this.method_404(pByte_0, uint_0, uint_1) != 0)
                {
                    return 1;
                }
            }
            else if (this.int_13 == 2 && this.int_15 == 0)
            {
                if (this.method_406(pByte_0, uint_0, uint_1) != 0)
                {
                    return 1;
                }
            }
            else if (this.int_13 == 3 && this.int_15 == 0)
            {
                if (this.method_408(pByte_0, uint_0, uint_1) != 0)
                {
                    return 1;
                }
            }
            else if (this.int_13 == 1 && this.int_15 == 1)
            {
                if (this.method_405(pByte_0, uint_0, uint_1) != 0)
                {
                    return 1;
                }
            }
            else if (this.int_13 == 2 && this.int_15 == 1)
            {
                if (this.method_407(pByte_0, uint_0, uint_1) != 0)
                {
                    return 1;
                }
            }
            else
            {
                if (this.int_13 != 3 || this.int_15 != 1)
                {
                    return 1;
                }
                if (this.method_409(pByte_0, uint_0, uint_1) != 0)
                {
                    return 1;
                }
            }
            return 0;
        }

        // Token: 0x060003DB RID: 987 RVA: 0x00153128 File Offset: 0x00153128
        private unsafe int method_404(byte* pByte_0, uint uint_0, uint uint_1)
        {
            ushort num = 255;
            int result;
            if (this.comboBox16.Items.Count == 0)
            {
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 1;
            }
            else
            {
                Struct108 @struct;
                byte* ptr = ref @struct + 44;
                string str = this.comboBox16.Text.Substring(0, 1);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122)
                {
                    result = 1;
                }
                else
                {
                    Struct109 struct2;

                    _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 == -1)
                    {
                        this.textBox6.AppendText("Failed to open drive " + str + "\r\n");
                        result = 1;
                    }
                    else
                    {
                        Struct63 struct3;
                        *(ref struct3 + 3) = (byte)(uint_0 & 255U);
                        *(ref struct3 + 2) = (byte)((uint_0 & 65280U) >> 8);
                        *(ref struct3 + 1) = (byte)((uint_0 & 16711680U) >> 16);
                        struct3 = (uint_0 & 4278190080U) >> 24;
                        this.method_6((byte*)(&struct3), 4U, 0U);
                        this.textBox6.AppendText("Flashing Sector" + " " + this.string_0 + "\r\n");
                        uint num2 = uint_1 + 2184U;
                        if ((num2 & 3U) != 0U)
                        {
                            num2 += 4U - (num2 & 3U);
                        }
                        byte* ptr4 = _Module.malloc(num2);
                        if (ptr4 == null)
                        {

                            _Module.CloseHandle(ptr3);
                            result = 1;
                        }
                        else
                        {

                            _Module.memset((void*)ptr4, 0, num2);
                            uint num3;
                            if (num == 0)
                            {
                                num3 = uint_0;
                                uint_0 = (uint)(*(ref num3 + 3));
                                *(ref uint_0 + 1) = *(ref num3 + 2);
                                *(ref uint_0 + 2) = *(ref num3 + 1);
                                *(ref uint_0 + 3) = (byte)num3;
                                num3 = (uint)(*(ref uint_1 + 3));
                                *(ref num3 + 1) = *(ref uint_1 + 2);
                                *(ref num3 + 2) = *(ref uint_1 + 1);
                                *(ref num3 + 3) = (byte)uint_1;
                            }
                            else
                            {
                                num3 = uint_1;
                            }
                            *(ref _Module.struct54_0 + 8) = (int)uint_0;
                            *(ref _Module.struct54_0 + 30) = (int)uint_0;
                            *(ref _Module.struct54_0 + 48) = (int)num3;
                            if (this.int_12 == 79)
                            {
                                *(ref _Module.struct54_0 + 64) = 241;
                            }
                            else if (this.int_12 == 59)
                            {
                                *(ref _Module.struct54_0 + 64) = 221;
                            }
                            else if (this.int_12 == 47)
                            {
                                *(ref _Module.struct54_0 + 64) = 217;
                            }
                            else if (this.int_12 == 36)
                            {
                                *(ref _Module.struct54_0 + 64) = 209;
                            }
                            else if (this.int_12 == 32)
                            {
                                *(ref _Module.struct54_0 + 64) = 213;
                            }

                            _Module.memcpy((void*)ptr4, (void*)(&_Module.struct54_0), 74U);
                            byte* ptr5 = ptr4 + 74;

                            _Module.memcpy((void*)ptr5, (void*)(&_Module.struct44_0), 1136U);
                            ptr5 = ptr4 + 1210;

                            _Module.memcpy((void*)ptr5, (void*)(&_Module.struct57_0), 972U);
                            ptr5 = ptr4 + 2182;
                            byte* ptr6 = pByte_0 + (uint_0 - 2415919104U);

                            _Module.memcpy((void*)ptr5, (void*)ptr6, uint_1);
                            uint num4 = 0U;
                            for (num3 = 0U; num3 < num2 - 2U; num3 += 1U)
                            {
                                num4 += (uint)ptr4[num3];
                            }
                            num4 = 65536U - (num4 & 65535U);
                            ptr4[num2 - 2U] = (byte)(num4 & 255U);
                            ptr4[num2 - 1U] = (byte)((num4 & 65280U) >> 8);

                            _Module.memset((void*)(&@struct), 0, 62U);
                            *(ref @struct + 28) = 231;
                            *(ref @struct + 29) = 72;
                            *(ref @struct + 30) = 73;
                            *(ref @struct + 31) = 84;
                            *(ref @struct + 32) = 59;
                            *(ref @struct + 33) = 6;
                            *(ref @struct + 38) = (byte)((num2 & 65280U) >> 8);
                            *(ref @struct + 39) = (byte)(num2 & 255U);
                            @struct = 44;
                            *(ref @struct + 6) = 12;
                            *(ref @struct + 7) = 18;
                            *(ref @struct + 8) = 0;
                            *(ref @struct + 12) = (int)num2;
                            *(ref @struct + 16) = 15;
                            *(ref @struct + 20) = ptr4;
                            *(ref @struct + 24) = 44;
                            uint num5;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num5), null) == null)
                            {
                                this.textBox6.AppendText("\r\n" + "Sector Upload Failed" + "\r\n");

                                _Module.CloseHandle(ptr3);
                                result = 1;
                            }
                            else
                            {

                                _Module.memset((void*)(&@struct), 0, 62U);
                                *(ref @struct + 28) = 231;
                                *(ref @struct + 29) = 72;
                                *(ref @struct + 30) = 73;
                                *(ref @struct + 31) = 84;
                                *(ref @struct + 32) = 59;
                                *(ref @struct + 33) = 7;
                                *(ref @struct + 39) = 1;
                                @struct = 44;
                                *(ref @struct + 6) = 12;
                                *(ref @struct + 7) = 18;
                                *(ref @struct + 8) = 2;
                                *(ref @struct + 16) = 15;
                                *(ref @struct + 24) = 44;
                                if (_Module.DeviceIoControl(ptr3, 315396, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num5), null) != null && (ptr[2] & 15) == 0)
                                {

                                    _Module.CloseHandle(ptr3);

                                    _Module.free((void*)ptr4);
                                    result = 0;
                                }
                                else
                                {
                                    this.textBox6.AppendText("Flash Code Execute Failed!" + "\r\n");

                                    _Module.CloseHandle(ptr3);
                                    result = 1;
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x060003DC RID: 988 RVA: 0x001535C8 File Offset: 0x001535C8
        private unsafe int method_405(byte* pByte_0, uint uint_0, uint uint_1)
        {
            ushort num = 255;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num2;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num2 = 0U;
                }
                else
                {
                    num2 = 16U;
                }
                Struct63 @struct;
                *(ref @struct + 3) = (byte)(uint_0 & 255U);
                *(ref @struct + 2) = (byte)((uint_0 & 65280U) >> 8);
                *(ref @struct + 1) = (byte)((uint_0 & 16711680U) >> 16);
                @struct = (uint_0 & 4278190080U) >> 24;
                this.method_6((byte*)(&@struct), 4U, 0U);
                this.textBox6.AppendText("Flashing Sector" + " " + this.string_0 + "\r\n");
                uint num3 = uint_1 + 2184U;
                if ((num3 & 3U) != 0U)
                {
                    num3 += 4U - (num3 & 3U);
                }
                byte* ptr = _Module.malloc(num3);
                if (ptr == null)
                {
                    result = 1;
                }
                else
                {

                    _Module.memset((void*)ptr, 0, num3);
                    uint num4;
                    if (num == 0)
                    {
                        num4 = uint_0;
                        uint_0 = (uint)(*(ref num4 + 3));
                        *(ref uint_0 + 1) = *(ref num4 + 2);
                        *(ref uint_0 + 2) = *(ref num4 + 1);
                        *(ref uint_0 + 3) = (byte)num4;
                        num4 = (uint)(*(ref uint_1 + 3));
                        *(ref num4 + 1) = *(ref uint_1 + 2);
                        *(ref num4 + 2) = *(ref uint_1 + 1);
                        *(ref num4 + 3) = (byte)uint_1;
                    }
                    else
                    {
                        num4 = uint_1;
                    }
                    *(ref _Module.struct54_0 + 8) = (int)uint_0;
                    *(ref _Module.struct54_0 + 30) = (int)uint_0;
                    *(ref _Module.struct54_0 + 48) = (int)num4;
                    if (this.int_12 == 79)
                    {
                        *(ref _Module.struct54_0 + 64) = 241;
                    }
                    else if (this.int_12 == 59)
                    {
                        *(ref _Module.struct54_0 + 64) = 221;
                    }
                    else if (this.int_12 == 47)
                    {
                        *(ref _Module.struct54_0 + 64) = 217;
                    }
                    else if (this.int_12 == 36)
                    {
                        *(ref _Module.struct54_0 + 64) = 209;
                    }
                    else if (this.int_12 == 32)
                    {
                        *(ref _Module.struct54_0 + 64) = 213;
                    }

                    _Module.memcpy((void*)ptr, (void*)(&_Module.struct54_0), 74U);
                    byte* ptr2 = ptr + 74;

                    _Module.memcpy((void*)ptr2, (void*)(&_Module.struct44_0), 1136U);
                    ptr2 = ptr + 1210;

                    _Module.memcpy((void*)ptr2, (void*)(&_Module.struct57_0), 972U);
                    ptr2 = ptr + 2182;
                    byte* ptr3 = pByte_0 + (uint_0 - 2415919104U);

                    _Module.memcpy((void*)ptr2, (void*)ptr3, uint_1);
                    uint num5 = 0U;
                    for (num4 = 0U; num4 < num3 - 2U; num4 += 1U)
                    {
                        num5 += (uint)ptr[num4];
                    }
                    num5 = 65536U - (num5 & 65535U);
                    ptr[num3 - 2U] = (byte)(num5 & 255U);
                    ptr[num3 - 1U] = (byte)((num5 & 65280U) >> 8);
                    this.Cursor = Cursors.WaitCursor;
                    GStruct3 gstruct;

                    _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                    Struct52 struct2;

                    _Module.memset((void*)(&struct2), 0, 12U);
                    struct2 = 231;
                    *(ref struct2 + 1) = 72;
                    *(ref struct2 + 2) = 73;
                    *(ref struct2 + 3) = 84;
                    *(ref struct2 + 4) = 59;
                    *(ref struct2 + 5) = 6;
                    *(ref struct2 + 10) = (byte)((num3 & 65280U) >> 8);
                    *(ref struct2 + 11) = (byte)(num3 & 255U);
                    uint num6;
                    if (_Module.smethod_17((byte*)(&struct2), 12U, (byte)num2, 512, (void*)ptr, &num6, num3, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Ram Upload Dump Failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        result = 1;
                    }
                    else
                    {

                        _Module.memset((void*)(&struct2), 0, 12U);
                        struct2 = 231;
                        *(ref struct2 + 1) = 72;
                        *(ref struct2 + 2) = 73;
                        *(ref struct2 + 3) = 84;
                        *(ref struct2 + 4) = 59;
                        *(ref struct2 + 5) = 7;
                        *(ref struct2 + 11) = 1;
                        if (_Module.smethod_15((byte*)(&struct2), 12U, (byte)num2, 1, &gstruct) != null)
                        {
                            this.textBox6.AppendText("Flash Code Execute Failed!" + "\r\n");
                            this.Cursor = Cursors.Arrow;

                            _Module.free((void*)ptr);
                            result = 1;
                        }
                        else
                        {
                            this.Cursor = Cursors.Arrow;

                            _Module.free((void*)ptr);
                            result = 0;
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x060003DD RID: 989 RVA: 0x003CED00 File Offset: 0x00316D00
        private unsafe int method_406(byte* pByte_0, uint uint_0, uint uint_1)
        {
            ushort num = 255;
            int result;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 1;
            }
            else
            {
                string str = this.comboBox16.Text.Substring(0, 1);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr = (sbyte*)((void*)value);
                if (*(sbyte*)ptr < 65 | *(sbyte*)ptr > 122)
                {
                    result = 1;
                }
                else
                {
                    Struct109 @struct;

                    _Module.sprintf((sbyte*)(&@struct), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr);
                    void* ptr2 = _Module.CreateFileA((sbyte*)(&@struct), -1073741824, 3, null, 3, 128, null);
                    if (ptr2 == -1)
                    {
                        this.textBox6.AppendText("Failed to open drive " + str + "\r\n");
                        result = 1;
                    }
                    else
                    {
                        this.Cursor = Cursors.WaitCursor;
                        Struct63 struct2;
                        *(ref struct2 + 3) = (byte)(uint_0 & 255U);
                        *(ref struct2 + 2) = (byte)((uint_0 & 65280U) >> 8);
                        *(ref struct2 + 1) = (byte)((uint_0 & 16711680U) >> 16);
                        struct2 = (uint_0 & 4278190080U) >> 24;
                        this.method_6((byte*)(&struct2), 4U, 0U);
                        this.textBox6.AppendText("Flashing Sector" + " " + this.string_0 + "\r\n");
                        uint num2 = uint_1 + 2184U;
                        if ((num2 & 3U) != 0U)
                        {
                            num2 += 4U - (num2 & 3U);
                        }
                        byte* ptr3 = _Module.malloc(num2);
                        if (ptr3 == null)
                        {
                            this.textBox6.AppendText("Malloc failed!" + "\r\n");

                            _Module.CloseHandle(ptr2);
                            this.Cursor = Cursors.Arrow;
                            result = 1;
                        }
                        else
                        {

                            _Module.memset((void*)ptr3, 0, num2);
                            uint num3;
                            if (num == 0)
                            {
                                num3 = uint_0;
                                uint_0 = (uint)(*(ref num3 + 3));
                                *(ref uint_0 + 1) = *(ref num3 + 2);
                                *(ref uint_0 + 2) = *(ref num3 + 1);
                                *(ref uint_0 + 3) = (byte)num3;
                                num3 = (uint)(*(ref uint_1 + 3));
                                *(ref num3 + 1) = *(ref uint_1 + 2);
                                *(ref num3 + 2) = *(ref uint_1 + 1);
                                *(ref num3 + 3) = (byte)uint_1;
                            }
                            else
                            {
                                num3 = uint_1;
                            }
                            *(ref _Module.struct54_0 + 8) = (int)uint_0;
                            *(ref _Module.struct54_0 + 30) = (int)uint_0;
                            *(ref _Module.struct54_0 + 48) = (int)num3;
                            if (this.int_12 == 79)
                            {
                                *(ref _Module.struct54_0 + 64) = 241;
                            }
                            else if (this.int_12 == 59)
                            {
                                *(ref _Module.struct54_0 + 64) = 221;
                            }
                            else if (this.int_12 == 47)
                            {
                                *(ref _Module.struct54_0 + 64) = 217;
                            }
                            else if (this.int_12 == 36)
                            {
                                *(ref _Module.struct54_0 + 64) = 209;
                            }
                            else if (this.int_12 == 32)
                            {
                                *(ref _Module.struct54_0 + 64) = 213;
                            }

                            _Module.memcpy((void*)ptr3, (void*)(&_Module.struct54_0), 74U);
                            byte* ptr4 = ptr3 + 74;

                            _Module.memcpy((void*)ptr4, (void*)(&_Module.struct44_0), 1136U);
                            ptr4 = ptr3 + 1210;

                            _Module.memcpy((void*)ptr4, (void*)(&_Module.struct57_0), 972U);
                            ptr4 = ptr3 + 2182;
                            byte* ptr5 = pByte_0 + (uint_0 - 2415919104U);

                            _Module.memcpy((void*)ptr4, (void*)ptr5, uint_1);
                            uint num4 = 0U;
                            for (num3 = 0U; num3 < num2 - 2U; num3 += 1U)
                            {
                                num4 += (uint)ptr3[num3];
                            }
                            num4 = 65536U - (num4 & 65535U);
                            ptr3[num2 - 2U] = (byte)(num4 & 255U);
                            ptr3[num2 - 1U] = (byte)((num4 & 65280U) >> 8);
                            Struct108 struct3;
                            uint num6;
                            for (uint num5 = 0U; num5 < num2; num5 += 1U)
                            {

                                _Module.memset((void*)(&struct3), 0, 62U);
                                *(ref struct3 + 28) = 231;
                                *(ref struct3 + 29) = 72;
                                *(ref struct3 + 30) = 73;
                                *(ref struct3 + 31) = 84;
                                *(ref struct3 + 32) = 204;
                                *(ref struct3 + 33) = ptr3[num5];
                                *(ref struct3 + 36) = (byte)((num5 + 2147483648U & 4278190080U) >> 24);
                                *(ref struct3 + 37) = (byte)((num5 + 2147483648U & 16711680U) >> 16);
                                *(ref struct3 + 38) = (byte)((num5 + 2147483648U & 65280U) >> 8);
                                *(ref struct3 + 39) = (byte)(num5 + 2147483648U & 255U);
                                struct3 = 44;
                                *(ref struct3 + 6) = 12;
                                *(ref struct3 + 7) = 18;
                                *(ref struct3 + 8) = 2;
                                *(ref struct3 + 16) = 15;
                                *(ref struct3 + 24) = 44;
                                if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num6), null) == null)
                                {
                                    this.textBox6.AppendText("Ram Poke Upload Failed" + "\r\n");

                                    _Module.CloseHandle(ptr2);
                                    this.Cursor = Cursors.Arrow;

                                    _Module.free((void*)ptr3);
                                    return 1;
                                }
                                if (num5 % 256U == 0U)
                                {
                                    this.textBox6.AppendText(".");
                                    Application.DoEvents();
                                }
                            }

                            _Module.memset((void*)(&struct3), 0, 62U);
                            *(ref struct3 + 28) = 85;
                            *(ref struct3 + 29) = 16;
                            *(ref struct3 + 36) = 8;
                            Struct103 struct4;

                            _Module.memset((void*)(&struct4), 0, 8U);
                            *(ref struct4 + 1) = 6;
                            struct3 = 44;
                            *(ref struct3 + 6) = 12;
                            *(ref struct3 + 7) = 18;
                            *(ref struct3 + 8) = 0;
                            *(ref struct3 + 12) = 8;
                            *(ref struct3 + 16) = 15;
                            *(ref struct3 + 20) = ref struct4;
                            *(ref struct3 + 24) = 44;
                            if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num6), null) == null)
                            {
                                this.textBox6.AppendText("Set (59E) bit 3 via Mode Select(10) failed" + "\r\n");

                                _Module.CloseHandle(ptr2);
                                this.Cursor = Cursors.Arrow;

                                _Module.free((void*)ptr3);
                                result = 1;
                            }
                            else
                            {

                                _Module.memset((void*)(&struct3), 0, 62U);
                                *(ref struct3 + 28) = 85;
                                *(ref struct3 + 29) = 16;
                                *(ref struct3 + 31) = 72;
                                *(ref struct3 + 32) = 76;
                                *(ref struct3 + 34) = 1;
                                *(ref struct3 + 39) = 1;
                                struct3 = 44;
                                *(ref struct3 + 6) = 12;
                                *(ref struct3 + 7) = 18;
                                *(ref struct3 + 8) = 2;
                                *(ref struct3 + 16) = 15;
                                *(ref struct3 + 24) = 44;
                                if (_Module.DeviceIoControl(ptr2, 315412, (void*)(&struct3), 62, (void*)(&struct3), 62, (uint*)(&num6), null) == null)
                                {
                                    this.textBox6.AppendText("Flash Code Execute Failed!" + "\r\n");

                                    _Module.CloseHandle(ptr2);
                                    this.Cursor = Cursors.Arrow;

                                    _Module.free((void*)ptr3);
                                    result = 1;
                                }
                                else
                                {

                                    _Module.CloseHandle(ptr2);
                                    this.Cursor = Cursors.Arrow;

                                    _Module.free((void*)ptr3);
                                    result = 0;
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x060003DE RID: 990 RVA: 0x00153FBC File Offset: 0x00153FBC
        private unsafe int method_407(byte* pByte_0, uint uint_0, uint uint_1)
        {
            ushort num = 255;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num2;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num2 = 0U;
                }
                else
                {
                    num2 = 16U;
                }
                Struct63 @struct;
                *(ref @struct + 3) = (byte)(uint_0 & 255U);
                *(ref @struct + 2) = (byte)((uint_0 & 65280U) >> 8);
                *(ref @struct + 1) = (byte)((uint_0 & 16711680U) >> 16);
                @struct = (uint_0 & 4278190080U) >> 24;
                this.method_6((byte*)(&@struct), 4U, 0U);
                this.textBox6.AppendText("Flashing Sector" + " " + this.string_0 + "\r\n");
                uint num3 = uint_1 + 2184U;
                if ((num3 & 3U) != 0U)
                {
                    num3 += 4U - (num3 & 3U);
                }
                byte* ptr = _Module.malloc(num3);
                if (ptr == null)
                {
                    result = 1;
                }
                else
                {

                    _Module.memset((void*)ptr, 0, num3);
                    uint num4;
                    if (num == 0)
                    {
                        num4 = uint_0;
                        uint_0 = (uint)(*(ref num4 + 3));
                        *(ref uint_0 + 1) = *(ref num4 + 2);
                        *(ref uint_0 + 2) = *(ref num4 + 1);
                        *(ref uint_0 + 3) = (byte)num4;
                        num4 = (uint)(*(ref uint_1 + 3));
                        *(ref num4 + 1) = *(ref uint_1 + 2);
                        *(ref num4 + 2) = *(ref uint_1 + 1);
                        *(ref num4 + 3) = (byte)uint_1;
                    }
                    else
                    {
                        num4 = uint_1;
                    }
                    *(ref _Module.struct54_0 + 8) = (int)uint_0;
                    *(ref _Module.struct54_0 + 30) = (int)uint_0;
                    *(ref _Module.struct54_0 + 48) = (int)num4;
                    if (this.int_12 == 79)
                    {
                        *(ref _Module.struct54_0 + 64) = 241;
                    }
                    else if (this.int_12 == 59)
                    {
                        *(ref _Module.struct54_0 + 64) = 221;
                    }
                    else if (this.int_12 == 47)
                    {
                        *(ref _Module.struct54_0 + 64) = 217;
                    }
                    else if (this.int_12 == 36)
                    {
                        *(ref _Module.struct54_0 + 64) = 209;
                    }
                    else if (this.int_12 == 32)
                    {
                        *(ref _Module.struct54_0 + 64) = 213;
                    }

                    _Module.memcpy((void*)ptr, (void*)(&_Module.struct54_0), 74U);
                    byte* ptr2 = ptr + 74;

                    _Module.memcpy((void*)ptr2, (void*)(&_Module.struct44_0), 1136U);
                    ptr2 = ptr + 1210;

                    _Module.memcpy((void*)ptr2, (void*)(&_Module.struct57_0), 972U);
                    ptr2 = ptr + 2182;
                    byte* ptr3 = pByte_0 + (uint_0 - 2415919104U);

                    _Module.memcpy((void*)ptr2, (void*)ptr3, uint_1);
                    uint num5 = 0U;
                    for (num4 = 0U; num4 < num3 - 2U; num4 += 1U)
                    {
                        num5 += (uint)ptr[num4];
                    }
                    num5 = 65536U - (num5 & 65535U);
                    ptr[num3 - 2U] = (byte)(num5 & 255U);
                    ptr[num3 - 1U] = (byte)((num5 & 65280U) >> 8);
                    this.Cursor = Cursors.WaitCursor;
                    GStruct3 gstruct;

                    _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                    Struct52 struct2;

                    _Module.memset((void*)(&struct2), 0, 12U);
                    struct2 = 85;
                    if (_Module.smethod_15((byte*)(&struct2), 12U, (byte)num2, 1, &gstruct) != null && _Module.smethod_15((byte*)(&struct2), 12U, (byte)num2, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        result = 1;
                    }
                    else
                    {
                        for (uint num6 = 0U; num6 < num3; num6 += 1U)
                        {

                            _Module.memset((void*)(&struct2), 0, 12U);
                            struct2 = 231;
                            *(ref struct2 + 1) = 72;
                            *(ref struct2 + 2) = 73;
                            *(ref struct2 + 3) = 84;
                            *(ref struct2 + 4) = 204;
                            *(ref struct2 + 5) = ptr[num6];
                            *(ref struct2 + 8) = (byte)((num6 + 2147483648U & 4278190080U) >> 24);
                            *(ref struct2 + 9) = (byte)((num6 + 2147483648U & 16711680U) >> 16);
                            *(ref struct2 + 10) = (byte)((num6 + 2147483648U & 65280U) >> 8);
                            *(ref struct2 + 11) = (byte)(num6 + 2147483648U & 255U);
                            if (_Module.smethod_15((byte*)(&struct2), 12U, (byte)num2, 1, &gstruct) != null)
                            {
                                this.textBox6.AppendText("Ram Poke Failed" + "\r\n");
                                this.Cursor = Cursors.Arrow;
                                return 1;
                            }
                            if (num6 % 256U == 0U)
                            {
                                this.textBox6.AppendText(".");
                                Application.DoEvents();
                            }
                        }

                        _Module.memset((void*)(&struct2), 0, 12U);
                        Struct103 struct3;

                        _Module.memset((void*)(&struct3), 0, 8U);
                        struct2 = 85;
                        *(ref struct2 + 1) = 16;
                        *(ref struct2 + 8) = 8;
                        *(ref struct3 + 1) = 6;
                        uint num7;
                        if (_Module.smethod_17((byte*)(&struct2), 12U, (byte)num2, 512, (void*)(&struct3), &num7, 8U, 1, &gstruct) != null)
                        {
                            this.textBox6.AppendText("Execute Enable Failed" + "\r\n");
                            this.Cursor = Cursors.Arrow;
                            result = 1;
                        }
                        else
                        {

                            _Module.memset((void*)(&struct2), 0, 12U);
                            struct2 = 85;
                            *(ref struct2 + 1) = 16;
                            *(ref struct2 + 3) = 72;
                            *(ref struct2 + 4) = 76;
                            *(ref struct2 + 6) = 1;
                            *(ref struct2 + 11) = 1;
                            if (_Module.smethod_15((byte*)(&struct2), 12U, (byte)num2, 1, &gstruct) != null)
                            {
                                this.textBox6.AppendText("Execute Failed.." + "\r\n");
                                this.Cursor = Cursors.Arrow;
                                result = 1;
                            }
                            else
                            {

                                _Module.free((void*)ptr);
                                this.Cursor = Cursors.Arrow;
                                result = 0;
                            }
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x060003DF RID: 991 RVA: 0x001544BC File Offset: 0x001544BC
        private unsafe int method_408(byte* pByte_0, uint uint_0, uint uint_1)
        {
            ushort num = 255;
            int result;
            if (this.comboBox16.Items.Count == 0)
            {

                _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                MessageBox.Show("No drive Selected", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Hand);

                _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                result = 1;
            }
            else
            {
                Struct108 @struct;
                byte* ptr = ref @struct + 44;
                string str = this.comboBox16.Text.Substring(0, 1);
                IntPtr intPtr = Marshal.StringToHGlobalAnsi(this.comboBox16.Text);
                IntPtr value = intPtr;
                sbyte* ptr2 = (sbyte*)((void*)value);
                if (*(sbyte*)ptr2 < 65 | *(sbyte*)ptr2 > 122)
                {
                    result = 1;
                }
                else
                {
                    Struct109 struct2;

                    _Module.sprintf((sbyte*)(&struct2), (sbyte*)(&_Module.struct22_5), *(sbyte*)ptr2);
                    void* ptr3 = _Module.CreateFileA((sbyte*)(&struct2), -1073741824, 3, null, 3, 128, null);
                    if (ptr3 == -1)
                    {
                        this.textBox6.AppendText("Failed to open drive " + str + "\r\n");
                        result = 1;
                    }
                    else
                    {
                        this.Cursor = Cursors.WaitCursor;
                        Struct63 struct3;
                        *(ref struct3 + 3) = (byte)(uint_0 & 255U);
                        *(ref struct3 + 2) = (byte)((uint_0 & 65280U) >> 8);
                        *(ref struct3 + 1) = (byte)((uint_0 & 16711680U) >> 16);
                        struct3 = (uint_0 & 4278190080U) >> 24;
                        this.method_6((byte*)(&struct3), 4U, 0U);
                        this.textBox6.AppendText("Flashing Sector" + " " + this.string_0 + "\r\n");
                        uint num2 = uint_1 + 2184U;
                        if ((num2 & 3U) != 0U)
                        {
                            num2 += 4U - (num2 & 3U);
                        }
                        byte* ptr4 = _Module.malloc(num2);
                        if (ptr4 == null)
                        {

                            _Module.CloseHandle(ptr3);
                            result = 1;
                        }
                        else
                        {

                            _Module.memset((void*)ptr4, 0, num2);
                            uint num3;
                            if (num == 0)
                            {
                                num3 = uint_0;
                                uint_0 = (uint)(*(ref num3 + 3));
                                *(ref uint_0 + 1) = *(ref num3 + 2);
                                *(ref uint_0 + 2) = *(ref num3 + 1);
                                *(ref uint_0 + 3) = (byte)num3;
                                num3 = (uint)(*(ref uint_1 + 3));
                                *(ref num3 + 1) = *(ref uint_1 + 2);
                                *(ref num3 + 2) = *(ref uint_1 + 1);
                                *(ref num3 + 3) = (byte)uint_1;
                            }
                            else
                            {
                                num3 = uint_1;
                            }
                            *(ref _Module.struct54_0 + 8) = (int)uint_0;
                            *(ref _Module.struct54_0 + 30) = (int)uint_0;
                            *(ref _Module.struct54_0 + 48) = (int)num3;
                            if (this.int_12 == 79)
                            {
                                *(ref _Module.struct54_0 + 64) = 241;
                            }
                            else if (this.int_12 == 59)
                            {
                                *(ref _Module.struct54_0 + 64) = 221;
                            }
                            else if (this.int_12 == 47)
                            {
                                *(ref _Module.struct54_0 + 64) = 217;
                            }
                            else if (this.int_12 == 36)
                            {
                                *(ref _Module.struct54_0 + 64) = 209;
                            }
                            else if (this.int_12 == 32)
                            {
                                *(ref _Module.struct54_0 + 64) = 213;
                            }

                            _Module.memcpy((void*)ptr4, (void*)(&_Module.struct54_0), 74U);
                            byte* ptr5 = ptr4 + 74;

                            _Module.memcpy((void*)ptr5, (void*)(&_Module.struct44_0), 1136U);
                            ptr5 = ptr4 + 1210;

                            _Module.memcpy((void*)ptr5, (void*)(&_Module.struct57_0), 972U);
                            ptr5 = ptr4 + 2182;
                            byte* ptr6 = pByte_0 + (uint_0 - 2415919104U);

                            _Module.memcpy((void*)ptr5, (void*)ptr6, uint_1);
                            uint num4 = 0U;
                            for (num3 = 0U; num3 < num2 - 2U; num3 += 1U)
                            {
                                num4 += (uint)ptr4[num3];
                            }
                            num4 = 65536U - (num4 & 65535U);
                            ptr4[num2 - 2U] = (byte)(num4 & 255U);
                            ptr4[num2 - 1U] = (byte)((num4 & 65280U) >> 8);

                            _Module.memset((void*)(&@struct), 0, 62U);
                            *(ref @struct + 28) = 85;
                            @struct = 44;
                            *(ref @struct + 6) = 12;
                            *(ref @struct + 7) = 18;
                            *(ref @struct + 8) = 2;
                            *(ref @struct + 16) = 15;
                            *(ref @struct + 24) = 44;
                            uint num5;
                            if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num5), null) == null && _Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num5), null) == null)
                            {
                                this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
                                this.Cursor = Cursors.Arrow;

                                _Module.CloseHandle(ptr3);

                                _Module.free((void*)ptr4);
                                result = 1;
                            }
                            else
                            {

                                _Module.memset((void*)(&@struct), 0, 62U);
                                *(ref @struct + 28) = 85;
                                *(ref @struct + 29) = 16;
                                *(ref @struct + 36) = 16;
                                *(ref @struct + 39) = 1;
                                Struct28 struct4;

                                _Module.memset((void*)(&struct4), 0, 16U);
                                *(ref struct4 + 9) = 6;
                                *(ref struct4 + 10) = 72;
                                *(ref struct4 + 11) = 76;
                                *(ref struct4 + 12) = (byte)((num2 & 4278190080U) >> 24);
                                *(ref struct4 + 13) = (byte)((num2 & 16711680U) >> 16);
                                *(ref struct4 + 14) = (byte)((num2 & 65280U) >> 8);
                                *(ref struct4 + 15) = (byte)(num2 & 255U);
                                @struct = 44;
                                *(ref @struct + 6) = 12;
                                *(ref @struct + 7) = 18;
                                *(ref @struct + 8) = 0;
                                *(ref @struct + 12) = 16;
                                *(ref @struct + 16) = 15;
                                *(ref @struct + 20) = ref struct4;
                                *(ref @struct + 24) = 44;
                                if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num5), null) != null && (ptr[2] & 15) == 0)
                                {
                                    uint num6 = num2 / 2040U;
                                    if (num2 % 2040U != 0U)
                                    {
                                        num6 += 1U;
                                    }
                                    for (num3 = 0U; num3 < num6; num3 += 1U)
                                    {
                                        uint num7;
                                        if (num3 != num6 - 1U)
                                        {
                                            num7 = 2048U;
                                        }
                                        else
                                        {
                                            num7 = num2 % 2040U + 8U;
                                        }

                                        _Module.memset((void*)(&@struct), 0, 62U);
                                        *(ref @struct + 28) = 85;
                                        *(ref @struct + 29) = 16;
                                        *(ref @struct + 35) = (byte)((num7 & 65280U) >> 8);
                                        *(ref @struct + 36) = (byte)(num7 & 255U);
                                        *(ref @struct + 39) = 1;

                                        _Module.memset((void*)(&_Module.struct120_0), 0, 2048U);
                                        *(ref _Module.struct120_0 + 4) = 72;
                                        *(ref _Module.struct120_0 + 5) = 76;

                                        _Module.memcpy(ref _Module.struct120_0 + 8, (void*)(ptr4 + num3 * 2040U), num7 - 8U);
                                        @struct = 44;
                                        *(ref @struct + 6) = 12;
                                        *(ref @struct + 7) = 18;
                                        *(ref @struct + 8) = 0;
                                        *(ref @struct + 12) = (int)num7;
                                        *(ref @struct + 16) = 15;
                                        *(ref @struct + 20) = ref _Module.struct120_0;
                                        *(ref @struct + 24) = 44;
                                        if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num5), null) == null || (ptr[2] & 15) != 0)
                                        {
                                            this.textBox6.AppendText("Upload buffer failed" + "\r\n");

                                            _Module.CloseHandle(ptr3);
                                            this.Cursor = Cursors.Arrow;

                                            _Module.free((void*)ptr4);
                                            return 1;
                                        }
                                    }

                                    _Module.memset((void*)(&@struct), 0, 62U);
                                    *(ref @struct + 28) = 85;
                                    *(ref @struct + 29) = 16;
                                    *(ref @struct + 31) = 72;
                                    *(ref @struct + 32) = 76;
                                    *(ref @struct + 34) = 1;
                                    *(ref @struct + 39) = 1;
                                    @struct = 44;
                                    *(ref @struct + 6) = 12;
                                    *(ref @struct + 7) = 18;
                                    *(ref @struct + 8) = 2;
                                    *(ref @struct + 16) = 15;
                                    *(ref @struct + 24) = 44;
                                    if (_Module.DeviceIoControl(ptr3, 315412, (void*)(&@struct), 62, (void*)(&@struct), 62, (uint*)(&num5), null) == null)
                                    {
                                        this.textBox6.AppendText("Ram Execute Failed" + "\r\n");
                                        this.Cursor = Cursors.Arrow;

                                        _Module.CloseHandle(ptr3);

                                        _Module.free((void*)ptr4);
                                        result = 1;
                                    }
                                    else
                                    {
                                        this.Cursor = Cursors.Arrow;

                                        _Module.CloseHandle(ptr3);

                                        _Module.free((void*)ptr4);
                                        result = 0;
                                    }
                                }
                                else
                                {
                                    this.textBox6.AppendText("Configure Upload Failed" + "\r\n");
                                    this.Cursor = Cursors.Arrow;

                                    _Module.CloseHandle(ptr3);

                                    _Module.free((void*)ptr4);
                                    result = 1;
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x060003E0 RID: 992 RVA: 0x00154BCC File Offset: 0x00154BCC
        private unsafe int method_409(byte* pByte_0, uint uint_0, uint uint_1)
        {
            ushort num = 255;
            int result;
            if (this.comboBox1.Items.Count == 0)
            {
                result = 0;
            }
            else
            {
                uint selectedIndex = (uint)this.comboBox1.SelectedIndex;
                ushort ushort_ = *(ref _Module.struct38_0 + selectedIndex * 72U);
                uint num2;
                if (*(ref _Module.struct38_0 + selectedIndex * 72U + 4) == 160)
                {
                    num2 = 0U;
                }
                else
                {
                    num2 = 16U;
                }
                Struct63 @struct;
                *(ref @struct + 3) = (byte)(uint_0 & 255U);
                *(ref @struct + 2) = (byte)((uint_0 & 65280U) >> 8);
                *(ref @struct + 1) = (byte)((uint_0 & 16711680U) >> 16);
                @struct = (uint_0 & 4278190080U) >> 24;
                this.method_6((byte*)(&@struct), 4U, 0U);
                this.textBox6.AppendText("Flashing Sector" + " " + this.string_0 + "\r\n");
                uint num3 = uint_1 + 2184U;
                if ((num3 & 3U) != 0U)
                {
                    num3 += 4U - (num3 & 3U);
                }
                byte* ptr = _Module.malloc(num3);
                if (ptr == null)
                {
                    result = 1;
                }
                else
                {

                    _Module.memset((void*)ptr, 0, num3);
                    uint num4;
                    if (num == 0)
                    {
                        num4 = uint_0;
                        uint_0 = (uint)(*(ref num4 + 3));
                        *(ref uint_0 + 1) = *(ref num4 + 2);
                        *(ref uint_0 + 2) = *(ref num4 + 1);
                        *(ref uint_0 + 3) = (byte)num4;
                        num4 = (uint)(*(ref uint_1 + 3));
                        *(ref num4 + 1) = *(ref uint_1 + 2);
                        *(ref num4 + 2) = *(ref uint_1 + 1);
                        *(ref num4 + 3) = (byte)uint_1;
                    }
                    else
                    {
                        num4 = uint_1;
                    }
                    *(ref _Module.struct54_0 + 8) = (int)uint_0;
                    *(ref _Module.struct54_0 + 30) = (int)uint_0;
                    *(ref _Module.struct54_0 + 48) = (int)num4;
                    if (this.int_12 == 79)
                    {
                        *(ref _Module.struct54_0 + 64) = 241;
                    }
                    else if (this.int_12 == 59)
                    {
                        *(ref _Module.struct54_0 + 64) = 221;
                    }
                    else if (this.int_12 == 47)
                    {
                        *(ref _Module.struct54_0 + 64) = 217;
                    }
                    else if (this.int_12 == 36)
                    {
                        *(ref _Module.struct54_0 + 64) = 209;
                    }
                    else if (this.int_12 == 32)
                    {
                        *(ref _Module.struct54_0 + 64) = 213;
                    }

                    _Module.memcpy((void*)ptr, (void*)(&_Module.struct54_0), 74U);
                    byte* ptr2 = ptr + 74;

                    _Module.memcpy((void*)ptr2, (void*)(&_Module.struct44_0), 1136U);
                    ptr2 = ptr + 1210;

                    _Module.memcpy((void*)ptr2, (void*)(&_Module.struct57_0), 972U);
                    ptr2 = ptr + 2182;
                    byte* ptr3 = pByte_0 + (uint_0 - 2415919104U);

                    _Module.memcpy((void*)ptr2, (void*)ptr3, uint_1);
                    uint num5 = 0U;
                    for (num4 = 0U; num4 < num3 - 2U; num4 += 1U)
                    {
                        num5 += (uint)ptr[num4];
                    }
                    num5 = 65536U - (num5 & 65535U);
                    ptr[num3 - 2U] = (byte)(num5 & 255U);
                    ptr[num3 - 1U] = (byte)((num5 & 65280U) >> 8);
                    this.Cursor = Cursors.WaitCursor;
                    GStruct3 gstruct;

                    _Module.smethod_21(&gstruct, ushort_, 0, 1, 10000U);
                    Struct52 struct2;

                    _Module.memset((void*)(&struct2), 0, 12U);
                    struct2 = 85;
                    if (_Module.smethod_15((byte*)(&struct2), 12U, (byte)num2, 1, &gstruct) != null && _Module.smethod_15((byte*)(&struct2), 12U, (byte)num2, 1, &gstruct) != null)
                    {
                        this.textBox6.AppendText("Disable Execute Failed" + "\r\n");
                        this.Cursor = Cursors.Arrow;
                        result = 1;
                    }
                    else
                    {

                        _Module.memset((void*)(&struct2), 0, 12U);
                        struct2 = 85;
                        *(ref struct2 + 1) = 16;
                        *(ref struct2 + 8) = 16;
                        *(ref struct2 + 11) = 1;
                        Struct28 struct3;

                        _Module.memset((void*)(&struct3), 0, 16U);
                        *(ref struct3 + 9) = 6;
                        *(ref struct3 + 10) = 72;
                        *(ref struct3 + 11) = 76;
                        *(ref struct3 + 12) = (byte)((num3 & 4278190080U) >> 24);
                        *(ref struct3 + 13) = (byte)((num3 & 16711680U) >> 16);
                        *(ref struct3 + 14) = (byte)((num3 & 65280U) >> 8);
                        *(ref struct3 + 15) = (byte)(num3 & 255U);
                        uint num6;
                        if (_Module.smethod_17((byte*)(&struct2), 12U, (byte)num2, 512, (void*)(&struct3), &num6, 16U, 1, &gstruct) != null)
                        {
                            this.textBox6.AppendText("Configure Upload Failed" + "\r\n");
                            this.Cursor = Cursors.Arrow;

                            _Module.free((void*)ptr);
                            result = 1;
                        }
                        else
                        {
                            uint num7 = num3 / 2040U;
                            if (num3 % 2040U != 0U)
                            {
                                num7 += 1U;
                            }
                            for (num4 = 0U; num4 < num7; num4 += 1U)
                            {
                                uint num8;
                                if (num4 != num7 - 1U)
                                {
                                    num8 = 2048U;
                                }
                                else
                                {
                                    num8 = num3 % 2040U + 8U;
                                }

                                _Module.memset((void*)(&struct2), 0, 12U);
                                struct2 = 85;
                                *(ref struct2 + 1) = 16;
                                *(ref struct2 + 7) = (byte)((num8 & 65280U) >> 8);
                                *(ref struct2 + 8) = (byte)(num8 & 255U);
                                *(ref struct2 + 11) = 1;

                                _Module.memset((void*)(&_Module.struct120_1), 0, 2048U);
                                *(ref _Module.struct120_1 + 4) = 72;
                                *(ref _Module.struct120_1 + 5) = 76;

                                _Module.memcpy(ref _Module.struct120_1 + 8, (void*)(ptr + num4 * 2040U), num8 - 8U);
                                if (_Module.smethod_17((byte*)(&struct2), 12U, (byte)num2, 512, (void*)(&_Module.struct120_1), &num6, num8, 1, &gstruct) != null)
                                {
                                    this.textBox6.AppendText("Upload buffer failed" + "\r\n");
                                    this.Cursor = Cursors.Arrow;

                                    _Module.free((void*)ptr);
                                    return 1;
                                }
                            }

                            _Module.memset((void*)(&struct2), 0, 12U);

                            _Module.memset((void*)(&struct3), 0, 16U);
                            struct2 = 85;
                            *(ref struct2 + 1) = 16;
                            *(ref struct2 + 3) = 72;
                            *(ref struct2 + 4) = 76;
                            *(ref struct2 + 6) = 1;
                            *(ref struct2 + 11) = 1;
                            if (_Module.smethod_15((byte*)(&struct2), 12U, (byte)num2, 1, &gstruct) != null)
                            {
                                this.textBox6.AppendText("Mode Select Execute Failed!" + "\r\n");
                                this.Cursor = Cursors.Arrow;

                                _Module.free((void*)ptr);
                                result = 1;
                            }
                            else
                            {
                                this.Cursor = Cursors.Arrow;

                                _Module.free((void*)ptr);
                                result = 0;
                            }
                        }
                    }
                }
            }
            return result;
        }

        // Token: 0x060003E1 RID: 993 RVA: 0x00155148 File Offset: 0x00155148
        private unsafe int method_410()
        {

            _Module.usb_init();

            _Module.usb_find_busses();

            _Module.usb_find_devices();
            GStruct8* ptr = _Module.usb_get_busses();

            _Module.usb_set_debug(4);
            for (GStruct8* ptr2 = ptr; ptr2 != null; ptr2 = *(int*)ptr2)
            {
                for (GStruct9* ptr3 = *(int*)(ptr2 + 520 / sizeof(GStruct8)); ptr3 != null; ptr3 = *(int*)ptr3)
                {
                    if (*(ushort*)(ptr3 + 532 / sizeof(GStruct9)) == 4564 && *(ushort*)(ptr3 + 534 / sizeof(GStruct9)) == 33587)
                    {
                        this.bool_5 = true;
                        *(ref _Module.gstruct10_0 + 12) = 1;
                        this.pictureBox8.Visible = true;
                        this.pictureBox9.Visible = true;
                        this.pictureBox10.Visible = false;
                        this.pictureBox11.Visible = false;
                        return 1;
                    }
                }
            }
            this.bool_5 = false;
            *(ref _Module.gstruct10_0 + 12) = 0;
            *(ref _Module.gstruct10_0 + 4) = 0;
            this.pictureBox8.Visible = false;
            this.pictureBox9.Visible = false;
            this.pictureBox10.Visible = true;
            this.pictureBox11.Visible = true;
            return 0;
        }

        // Token: 0x060003E2 RID: 994 RVA: 0x00155258 File Offset: 0x00155258
        private unsafe int method_411()
        {

            _Module.usb_init();

            _Module.usb_find_busses();

            _Module.usb_find_devices();
            GStruct8* ptr = _Module.usb_get_busses();

            _Module.usb_set_debug(4);
            for (GStruct8* ptr2 = ptr; ptr2 != null; ptr2 = *(int*)ptr2)
            {
                for (GStruct9* ptr3 = *(int*)(ptr2 + 520 / sizeof(GStruct8)); ptr3 != null; ptr3 = *(int*)ptr3)
                {
                    if (*(ushort*)(ptr3 + 532 / sizeof(GStruct9)) == 4564 && *(ushort*)(ptr3 + 534 / sizeof(GStruct9)) == 33591)
                    {
                        this.bool_7 = true;
                        *(ref _Module.gstruct10_0 + 13) = 1;
                        if (*(ref _Module.gstruct10_0 + 12) == 0)
                        {
                            this.pictureBox8.Visible = true;
                            this.pictureBox9.Visible = true;
                            this.pictureBox10.Visible = false;
                            this.pictureBox11.Visible = false;
                        }
                        return 1;
                    }
                }
            }
            this.bool_7 = false;
            *(ref _Module.gstruct10_0 + 13) = 0;
            *(ref _Module.gstruct10_0 + 8) = 0;
            if (*(ref _Module.gstruct10_0 + 12) == 0)
            {
                this.pictureBox8.Visible = false;
                this.pictureBox9.Visible = false;
                this.pictureBox10.Visible = true;
                this.pictureBox11.Visible = true;
            }
            return 0;
        }

        // Token: 0x060003E3 RID: 995 RVA: 0x00155384 File Offset: 0x00155384
        private unsafe void method_412()
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            @struct = 0;
            if (this.method_416((sbyte*)(&@struct), 1, (sbyte*)(&struct2), 4) == 1)
            {
                this.textBox6.AppendText("Version " + Convert.ToString((int)(*(ref struct2 + 2))) + ".");
                this.textBox6.AppendText(Convert.ToString((int)(*(ref struct2 + 3))) + "\r\n");
                this.string_23 = Convert.ToString((int)(*(ref struct2 + 2))) + "." + Convert.ToString((int)(*(ref struct2 + 3)));
            }
        }

        // Token: 0x060003E4 RID: 996 RVA: 0x0015542C File Offset: 0x0015542C
        private unsafe void method_413()
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            @struct = 0;
            if (this.method_417((sbyte*)(&@struct), 1, (sbyte*)(&struct2), 4) == 1)
            {
                this.textBox6.AppendText("Version " + Convert.ToString((int)(*(ref struct2 + 2))) + ".");
                this.textBox6.AppendText(Convert.ToString((int)(*(ref struct2 + 3))) + "\r\n");
                this.string_24 = Convert.ToString((int)(*(ref struct2 + 2))) + "." + Convert.ToString((int)(*(ref struct2 + 3)));
            }
        }

        // Token: 0x060003E5 RID: 997 RVA: 0x001554D4 File Offset: 0x001554D4
        private unsafe void method_414()
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            @struct = 0;
            if (this.method_416((sbyte*)(&@struct), 1, (sbyte*)(&struct2), 4) == 1)
            {
                this.string_23 = Convert.ToString((int)(*(ref struct2 + 2))) + "." + Convert.ToString((int)(*(ref struct2 + 3)));
            }
        }

        // Token: 0x060003E6 RID: 998 RVA: 0x00155538 File Offset: 0x00155538
        private unsafe void method_415()
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            @struct = 0;
            if (this.method_417((sbyte*)(&@struct), 1, (sbyte*)(&struct2), 4) == 1)
            {
                this.string_24 = Convert.ToString((int)(*(ref struct2 + 2))) + "." + Convert.ToString((int)(*(ref struct2 + 3)));
            }
        }

        // Token: 0x060003E7 RID: 999 RVA: 0x0015559C File Offset: 0x0015559C
        private unsafe int method_416(sbyte* pSbyte_0, int int_16, sbyte* pSbyte_1, int int_17)
        {
            if (*(ref _Module.gstruct10_0 + 14) == 0)
            {
                if (*(ref _Module.gstruct10_0 + 4) == 0)
                {
                    this.method_420();

                    _Module.gstruct10_0 = *(ref _Module.gstruct10_0 + 4);
                }
            }
            else if (_Module.gstruct10_0 == null)
            {
                this.method_421();

                _Module.gstruct10_0 = *(ref _Module.gstruct10_0 + 8);
            }
            return (_Module.usb_bulk_write(_Module.gstruct10_0, 1, pSbyte_0, int_16, 10000) != int_16) ? 0 : ((int_17 == 0) ? 1 : ((_Module.usb_bulk_read(_Module.gstruct10_0, 129, pSbyte_1, int_17, 5000) != int_17) ? 0 : 1));
        }

        // Token: 0x060003E8 RID: 1000 RVA: 0x00155634 File Offset: 0x00155634
        private unsafe int method_417(sbyte* pSbyte_0, int int_16, sbyte* pSbyte_1, int int_17)
        {
            if (*(ref _Module.gstruct10_0 + 8) == 0)
            {
                this.method_421();
            }
            return (_Module.usb_bulk_write(*(ref _Module.gstruct10_0 + 8), 1, pSbyte_0, int_16, 10000) != int_16) ? 0 : ((int_17 == 0) ? 1 : ((_Module.usb_bulk_read(*(ref _Module.gstruct10_0 + 8), 129, pSbyte_1, int_17, 5000) != int_17) ? 0 : 1));
        }

        // Token: 0x060003E9 RID: 1001 RVA: 0x00155698 File Offset: 0x00155698
        private unsafe int method_418(sbyte sbyte_0, ushort ushort_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int num = 1;
            @struct = sbyte_0 + 16;
            *(ref @struct + 2) = (byte)((ushort_0 & 65280) >> 8);
            *(ref @struct + 1) = (byte)(ushort_0 & 255);
            int result;
            if (this.method_416((sbyte*)(&@struct), 3, (sbyte*)(&struct2), 1) == 1)
            {
                if (num == 1 && struct2 == sbyte_0 + 16)
                {
                    result = 1;
                }
                else
                {

                    _Module.printf((sbyte*)(&_Module.struct98_1));
                    result = 0;
                }
            }
            else
            {

                _Module.printf((sbyte*)(&_Module.struct65_10));
                result = 0;
            }
            return result;
        }

        // Token: 0x060003EA RID: 1002 RVA: 0x00155720 File Offset: 0x00155720
        private unsafe void method_419(sbyte sbyte_0, byte* pByte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int num = 3;
            @struct = sbyte_0 + 32;
            if (this.method_416((sbyte*)(&@struct), 1, (sbyte*)(&struct2), 3) == 1)
            {
                if (num == 3 && struct2 == sbyte_0 + 32)
                {
                    *pByte_0 = (byte)(*(ref struct2 + 1));
                    pByte_0[1] = (byte)(*(ref struct2 + 2));
                }
                else
                {

                    _Module.printf((sbyte*)(&_Module.struct65_11));
                }
            }
            else
            {

                _Module.printf((sbyte*)(&_Module.struct67_3));
            }
        }

        // Token: 0x060003EB RID: 1003 RVA: 0x0015579C File Offset: 0x0015579C
        private unsafe int method_420()
        {
            int result;
            if (*(ref _Module.gstruct10_0 + 12) == 0)
            {
                result = 0;
            }
            else
            {

                _Module.usb_init();

                _Module.usb_find_busses();

                _Module.usb_find_devices();
                GStruct8* ptr = _Module.usb_get_busses();

                _Module.usb_set_debug(4);
                for (GStruct8* ptr2 = ptr; ptr2 != null; ptr2 = *(int*)ptr2)
                {
                    for (GStruct9* ptr3 = *(int*)(ptr2 + 520 / sizeof(GStruct8)); ptr3 != null; ptr3 = *(int*)ptr3)
                    {
                        if (*(ushort*)(ptr3 + 532 / sizeof(GStruct9)) == 4564 && *(ushort*)(ptr3 + 534 / sizeof(GStruct9)) == 33587)
                        {
                            *(ref _Module.gstruct10_0 + 4) = _Module.usb_open(ptr3);

                            _Module.gstruct10_0 = *(ref _Module.gstruct10_0 + 4);
                        }
                    }
                }
                if (*(ref _Module.gstruct10_0 + 4) == 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("error: device not found!", "LibUSB", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    result = 0;
                }
                else if (_Module.usb_set_configuration(*(ref _Module.gstruct10_0 + 4), 1) < 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("error: setting config failed", "LibUSB", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);

                    _Module.usb_close(_Module.gstruct10_0);
                    *(ref _Module.gstruct10_0 + 4) = 0;
                    result = 0;
                }
                else if (_Module.usb_claim_interface(*(ref _Module.gstruct10_0 + 4), 0) < 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("error: claiming interface failed", "LibUSB", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);

                    _Module.usb_close(*(ref _Module.gstruct10_0 + 4));
                    *(ref _Module.gstruct10_0 + 4) = 0;
                    result = 0;
                }
                else
                {
                    this.method_414();
                    this.method_424(2);
                    this.bool_9 = false;
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x060003EC RID: 1004 RVA: 0x00155980 File Offset: 0x00155980
        private unsafe int method_421()
        {
            int result;
            if (*(ref _Module.gstruct10_0 + 13) == 0)
            {
                result = 0;
            }
            else
            {

                _Module.usb_init();

                _Module.usb_find_busses();

                _Module.usb_find_devices();
                GStruct8* ptr = _Module.usb_get_busses();

                _Module.usb_set_debug(4);
                for (GStruct8* ptr2 = ptr; ptr2 != null; ptr2 = *(int*)ptr2)
                {
                    for (GStruct9* ptr3 = *(int*)(ptr2 + 520 / sizeof(GStruct8)); ptr3 != null; ptr3 = *(int*)ptr3)
                    {
                        if (*(ushort*)(ptr3 + 532 / sizeof(GStruct9)) == 4564 && *(ushort*)(ptr3 + 534 / sizeof(GStruct9)) == 33591)
                        {
                            *(ref _Module.gstruct10_0 + 8) = _Module.usb_open(ptr3);

                            _Module.gstruct10_0 = *(ref _Module.gstruct10_0 + 8);
                        }
                    }
                }
                if (*(ref _Module.gstruct10_0 + 8) == 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("error: device not found!", "LibUSB", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);
                    result = 0;
                }
                else if (_Module.usb_set_configuration(*(ref _Module.gstruct10_0 + 8), 1) < 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("error: setting config failed", "LibUSB", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);

                    _Module.usb_close(*(ref _Module.gstruct10_0 + 8));
                    *(ref _Module.gstruct10_0 + 8) = 0;
                    result = 0;
                }
                else if (_Module.usb_claim_interface(*(ref _Module.gstruct10_0 + 8), 0) < 0)
                {

                    _Module.pGstruct14_10 = _Module.SetWindowsHookExA(5, _Module.ppInt_12, _Module.GetWindowLongA(this.pGstruct11_0, -6), _Module.GetCurrentThreadId());
                    MessageBox.Show("error: claiming interface failed", "LibUSB", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

                    _Module.UnhookWindowsHookEx(_Module.pGstruct14_10);

                    _Module.usb_close(*(ref _Module.gstruct10_0 + 8));
                    *(ref _Module.gstruct10_0 + 8) = 0;
                    result = 0;
                }
                else
                {
                    this.method_415();
                    result = 1;
                }
            }
            return result;
        }

        // Token: 0x060003ED RID: 1005 RVA: 0x00155B58 File Offset: 0x00155B58
        private unsafe int method_422()
        {
            int result;
            if (*(ref _Module.gstruct10_0 + 12) == 0)
            {
                result = 1;
            }
            else if (*(ref _Module.gstruct10_0 + 4) == 0)
            {

                _Module.gstruct10_0 = 0;
                result = 1;
            }
            else if (*(ref _Module.gstruct10_0 + 4) == 0)
            {

                _Module.gstruct10_0 = 0;
                result = 1;
            }
            else if (_Module.usb_release_interface(*(ref _Module.gstruct10_0 + 4), 0) < 0)
            {
                result = 0;
            }
            else if (_Module.usb_close(*(ref _Module.gstruct10_0 + 4)) < 0)
            {
                result = 0;
            }
            else
            {
                *(ref _Module.gstruct10_0 + 4) = 0;

                _Module.gstruct10_0 = 0;
                result = 1;
            }
            return result;
        }

        // Token: 0x060003EE RID: 1006 RVA: 0x00155BD8 File Offset: 0x00155BD8
        private unsafe int method_423()
        {
            int result;
            if (*(ref _Module.gstruct10_0 + 13) == 0)
            {
                result = 1;
            }
            else if (*(ref _Module.gstruct10_0 + 8) == 0)
            {

                _Module.gstruct10_0 = 0;
                result = 1;
            }
            else if (*(ref _Module.gstruct10_0 + 8) == 0)
            {

                _Module.gstruct10_0 = 0;
                result = 1;
            }
            else if (_Module.usb_release_interface(*(ref _Module.gstruct10_0 + 8), 0) < 0)
            {
                result = 0;
            }
            else if (_Module.usb_close(*(ref _Module.gstruct10_0 + 8)) < 0)
            {
                result = 0;
            }
            else
            {
                *(ref _Module.gstruct10_0 + 8) = 0;

                _Module.gstruct10_0 = 0;
                result = 1;
            }
            return result;
        }

        // Token: 0x060003EF RID: 1007 RVA: 0x00155C58 File Offset: 0x00155C58
        private unsafe int method_424(byte byte_0)
        {
            Struct3 @struct = 0;
            initblk(ref @struct + 1, 0, 63);
            Struct3 struct2 = 0;
            initblk(ref struct2 + 1, 0, 63);
            int int_ = 1;
            int num = 1;
            if (byte_0 == 1)
            {
                @struct = 1;
            }
            else if (byte_0 == 2)
            {
                @struct = 2;
            }
            else if (byte_0 == 5)
            {
                @struct = 5;
            }
            else if (byte_0 == 6)
            {
                @struct = 6;
            }
            else if (byte_0 == 7)
            {
                @struct = 7;
            }
            else if (byte_0 == 8)
            {
                @struct = 8;
            }
            else if (byte_0 == 88)
            {
                @struct = 9;
            }
            else if (byte_0 == 9)
            {
                @struct = -88;
            }
            else if (byte_0 == 10)
            {
                @struct = -3;
            }
            else
            {
                if (byte_0 != 11)
                {
                    return 0;
                }
                @struct = -2;
            }
            return (this.method_416((sbyte*)(&@struct), int_, (sbyte*)(&struct2), num) != 1) ? 0 : ((num != 1 || struct2 != @struct) ? 0 : 1);
        }

        // Token: 0x0400035B RID: 859
        private TabControl tabControl1;

        // Token: 0x0400035C RID: 860
        private TabControl tabControl2;

        // Token: 0x0400035D RID: 861
        private TabPage tabPage9;

        // Token: 0x0400035E RID: 862
        private Label label3;

        // Token: 0x0400035F RID: 863
        private Label label4;

        // Token: 0x04000360 RID: 864
        private Label label5;

        // Token: 0x04000361 RID: 865
        private Label label6;

        // Token: 0x04000362 RID: 866
        private Label label7;

        // Token: 0x04000363 RID: 867
        private Label label8;

        // Token: 0x04000364 RID: 868
        private TabPage tabPage10;

        // Token: 0x04000365 RID: 869
        private Label label9;

        // Token: 0x04000366 RID: 870
        private Label label10;

        // Token: 0x04000367 RID: 871
        private Label label11;

        // Token: 0x04000368 RID: 872
        private Label label12;

        // Token: 0x04000369 RID: 873
        private Label label13;

        // Token: 0x0400036A RID: 874
        private Label label14;

        // Token: 0x0400036B RID: 875
        private Label label15;

        // Token: 0x0400036C RID: 876
        private Label label16;

        // Token: 0x0400036D RID: 877
        private Label label17;

        // Token: 0x0400036E RID: 878
        private Label label18;

        // Token: 0x0400036F RID: 879
        private Button button6;

        // Token: 0x04000370 RID: 880
        private Button OpenSource;

        // Token: 0x04000371 RID: 881
        private Button DumpDrive;

        // Token: 0x04000372 RID: 882
        private Button SaveTarget;

        // Token: 0x04000373 RID: 883
        private Button OpeniXtreme;

        // Token: 0x04000374 RID: 884
        private TextBox textBox9;

        // Token: 0x04000375 RID: 885
        private Label label19;

        // Token: 0x04000376 RID: 886
        private Label label20;

        // Token: 0x04000377 RID: 887
        private TextBox textBox11;

        // Token: 0x04000378 RID: 888
        private TabControl tabControl3;

        // Token: 0x04000379 RID: 889
        private TabPage tabPage3;

        // Token: 0x0400037A RID: 890
        private Label label21;

        // Token: 0x0400037B RID: 891
        private TextBox textBox3;

        // Token: 0x0400037C RID: 892
        private Label label22;

        // Token: 0x0400037D RID: 893
        private Label label23;

        // Token: 0x0400037E RID: 894
        private Label label24;

        // Token: 0x0400037F RID: 895
        private Label label25;

        // Token: 0x04000380 RID: 896
        private Label label26;

        // Token: 0x04000381 RID: 897
        private Label label27;

        // Token: 0x04000382 RID: 898
        private Label label28;

        // Token: 0x04000383 RID: 899
        private Label label29;

        // Token: 0x04000384 RID: 900
        private TabPage tabPage7;

        // Token: 0x04000385 RID: 901
        private TextBox textBox7;

        // Token: 0x04000386 RID: 902
        private TabPage tabPage11;

        // Token: 0x04000387 RID: 903
        public TextBox textBox10;

        // Token: 0x04000388 RID: 904
        private TabPage tabPage12;

        // Token: 0x04000389 RID: 905
        private TextBox textBox12;

        // Token: 0x0400038A RID: 906
        private TabControl tabControl4;

        // Token: 0x0400038B RID: 907
        private TabPage tabPage1;

        // Token: 0x0400038C RID: 908
        private Label label1;

        // Token: 0x0400038D RID: 909
        private Label label2;

        // Token: 0x0400038E RID: 910
        private Label label30;

        // Token: 0x0400038F RID: 911
        private Label label31;

        // Token: 0x04000390 RID: 912
        private Label label32;

        // Token: 0x04000391 RID: 913
        private Label label33;

        // Token: 0x04000392 RID: 914
        private Label label34;

        // Token: 0x04000393 RID: 915
        private Label label35;

        // Token: 0x04000394 RID: 916
        private Label label36;

        // Token: 0x04000395 RID: 917
        private TextBox textBox1;

        // Token: 0x04000396 RID: 918
        private TabPage tabPage2;

        // Token: 0x04000397 RID: 919
        private TextBox textBox2;

        // Token: 0x04000398 RID: 920
        private TabPage tabPage4;

        // Token: 0x04000399 RID: 921
        private TextBox textBox4;

        // Token: 0x0400039A RID: 922
        private TabPage tabPage13;

        // Token: 0x0400039B RID: 923
        private TextBox textBox13;

        // Token: 0x0400039C RID: 924
        private CheckBox checkBox3;

        // Token: 0x0400039D RID: 925
        private TextBox textBox8;

        // Token: 0x0400039E RID: 926
        private TextBox textBox14;

        // Token: 0x0400039F RID: 927
        private TextBox textBox15;

        // Token: 0x040003A0 RID: 928
        private TextBox textBox16;

        // Token: 0x040003A1 RID: 929
        private Label label37;

        // Token: 0x040003A2 RID: 930
        private Label label38;

        // Token: 0x040003A3 RID: 931
        private Label label39;

        // Token: 0x040003A4 RID: 932
        private Label label40;

        // Token: 0x040003A5 RID: 933
        private Label label41;

        // Token: 0x040003A6 RID: 934
        private Label label42;

        // Token: 0x040003A7 RID: 935
        private Label label43;

        // Token: 0x040003A8 RID: 936
        private Label label44;

        // Token: 0x040003A9 RID: 937
        private Label label45;

        // Token: 0x040003AA RID: 938
        private Label label46;

        // Token: 0x040003AB RID: 939
        public TextBox textBox17;

        // Token: 0x040003AC RID: 940
        private TextBox textBox18;

        // Token: 0x040003AD RID: 941
        private Label label47;

        // Token: 0x040003AE RID: 942
        private Label label48;

        // Token: 0x040003AF RID: 943
        private Label label49;

        // Token: 0x040003B0 RID: 944
        private Label label50;

        // Token: 0x040003B1 RID: 945
        private Label label51;

        // Token: 0x040003B2 RID: 946
        private Label label52;

        // Token: 0x040003B3 RID: 947
        private Label label53;

        // Token: 0x040003B4 RID: 948
        private Label label54;

        // Token: 0x040003B5 RID: 949
        private Label label55;

        // Token: 0x040003B6 RID: 950
        private Label label56;

        // Token: 0x040003B7 RID: 951
        private Button button2;

        // Token: 0x040003B8 RID: 952
        private TabControl tabControl5;

        // Token: 0x040003B9 RID: 953
        public TextBox textBox6;

        // Token: 0x040003BA RID: 954
        private Label label57;

        // Token: 0x040003BB RID: 955
        private GroupBox groupBox2;

        // Token: 0x040003BC RID: 956
        private Label label64;

        // Token: 0x040003BD RID: 957
        private Label label65;

        // Token: 0x040003BE RID: 958
        private Label label66;

        // Token: 0x040003BF RID: 959
        private GroupBox groupBox4;

        // Token: 0x040003C0 RID: 960
        private Label label69;

        // Token: 0x040003C1 RID: 961
        private Label label70;

        // Token: 0x040003C2 RID: 962
        private Button button13;

        // Token: 0x040003C3 RID: 963
        private Button button14;

        // Token: 0x040003C4 RID: 964
        private Button button15;

        // Token: 0x040003C5 RID: 965
        private GroupBox groupBox6;

        // Token: 0x040003C6 RID: 966
        private Label label77;

        // Token: 0x040003C7 RID: 967
        private Label label78;

        // Token: 0x040003C8 RID: 968
        private Label label79;

        // Token: 0x040003C9 RID: 969
        private Label label80;

        // Token: 0x040003CA RID: 970
        private Button button17;

        // Token: 0x040003CB RID: 971
        private Button button18;

        // Token: 0x040003CC RID: 972
        private Label label87;

        // Token: 0x040003CD RID: 973
        private Label label88;

        // Token: 0x040003CE RID: 974
        private Label label102;

        // Token: 0x040003CF RID: 975
        private Label label104;

        // Token: 0x040003D0 RID: 976
        private Label label105;

        // Token: 0x040003D1 RID: 977
        private Label label63;

        // Token: 0x040003D2 RID: 978
        private Label label103;

        // Token: 0x040003D3 RID: 979
        private ListBox listBox5;

        // Token: 0x040003D4 RID: 980
        private Button button26;

        // Token: 0x040003D5 RID: 981
        private Button button29;

        // Token: 0x040003D6 RID: 982
        private TabPage Firmtools;

        // Token: 0x040003D7 RID: 983
        private TabPage Benq;

        // Token: 0x040003D8 RID: 984
        private TabPage DVDKey32;

        // Token: 0x040003D9 RID: 985
        private TabPage Hitachi;

        // Token: 0x040003DA RID: 986
        private Label label114;

        // Token: 0x040003DB RID: 987
        private Label label118;

        // Token: 0x040003DC RID: 988
        private Label label119;

        // Token: 0x040003DD RID: 989
        private Label label120;

        // Token: 0x040003DE RID: 990
        private Label label121;

        // Token: 0x040003DF RID: 991
        private Label label122;

        // Token: 0x040003E0 RID: 992
        private Button button21;

        // Token: 0x040003E1 RID: 993
        private GroupBox groupBox8;

        // Token: 0x040003E2 RID: 994
        private RadioButton radioButton1;

        // Token: 0x040003E3 RID: 995
        private RadioButton radioButton2;

        // Token: 0x040003E4 RID: 996
        private RadioButton radioButton3;

        // Token: 0x040003E5 RID: 997
        private RadioButton radioButton4;

        // Token: 0x040003E6 RID: 998
        private RadioButton radioButton5;

        // Token: 0x040003E7 RID: 999
        private GroupBox groupBox11;

        // Token: 0x040003E8 RID: 1000
        private RadioButton radioButton6;

        // Token: 0x040003E9 RID: 1001
        private RadioButton radioButton7;

        // Token: 0x040003EA RID: 1002
        private RadioButton radioButton8;

        // Token: 0x040003EB RID: 1003
        private RadioButton radioButton9;

        // Token: 0x040003EC RID: 1004
        private RadioButton radioButton10;

        // Token: 0x040003ED RID: 1005
        private Button button3;

        // Token: 0x040003EE RID: 1006
        private GroupBox groupBox13;

        // Token: 0x040003EF RID: 1007
        private Label label82;

        // Token: 0x040003F0 RID: 1008
        private Label label89;

        // Token: 0x040003F1 RID: 1009
        private Label label90;

        // Token: 0x040003F2 RID: 1010
        private Label label91;

        // Token: 0x040003F3 RID: 1011
        private Button button11;

        // Token: 0x040003F4 RID: 1012
        private GroupBox groupBox12;

        // Token: 0x040003F5 RID: 1013
        private GroupBox groupBox14;

        // Token: 0x040003F6 RID: 1014
        private Button button12;

        // Token: 0x040003F7 RID: 1015
        private GroupBox groupBox15;

        // Token: 0x040003F8 RID: 1016
        private ComboBox comboBox16;

        // Token: 0x040003F9 RID: 1017
        private ComboBox comboBox13;

        // Token: 0x040003FA RID: 1018
        private ComboBox comboBox10;

        // Token: 0x040003FB RID: 1019
        private GroupBox groupBox16;

        // Token: 0x040003FC RID: 1020
        private Label label92;

        // Token: 0x040003FD RID: 1021
        private Label label93;

        // Token: 0x040003FE RID: 1022
        private Label label94;

        // Token: 0x040003FF RID: 1023
        private Label label106;

        // Token: 0x04000400 RID: 1024
        private Label label107;

        // Token: 0x04000401 RID: 1025
        private Label label108;

        // Token: 0x04000402 RID: 1026
        private Label label109;

        // Token: 0x04000403 RID: 1027
        private Label label110;

        // Token: 0x04000404 RID: 1028
        private ComboBox comboBox1;

        // Token: 0x04000405 RID: 1029
        private Label label111;

        // Token: 0x04000406 RID: 1030
        private GroupBox groupBox17;

        // Token: 0x04000407 RID: 1031
        private Label label112;

        // Token: 0x04000408 RID: 1032
        private Label label113;

        // Token: 0x04000409 RID: 1033
        private Label label115;

        // Token: 0x0400040A RID: 1034
        private Label label116;

        // Token: 0x0400040B RID: 1035
        private Label label117;

        // Token: 0x0400040C RID: 1036
        private Label label123;

        // Token: 0x0400040D RID: 1037
        private Label label124;

        // Token: 0x0400040E RID: 1038
        private Label label125;

        // Token: 0x0400040F RID: 1039
        private Label label126;

        // Token: 0x04000410 RID: 1040
        private Label label127;

        // Token: 0x04000411 RID: 1041
        private GroupBox groupBox1;

        // Token: 0x04000412 RID: 1042
        private Label label58;

        // Token: 0x04000413 RID: 1043
        private Label label59;

        // Token: 0x04000414 RID: 1044
        private Label label60;

        // Token: 0x04000415 RID: 1045
        private Label label61;

        // Token: 0x04000416 RID: 1046
        private Label label62;

        // Token: 0x04000417 RID: 1047
        private Label label67;

        // Token: 0x04000418 RID: 1048
        private Label label68;

        // Token: 0x04000419 RID: 1049
        private Label label72;

        // Token: 0x0400041A RID: 1050
        private ComboBox comboBox7;

        // Token: 0x0400041B RID: 1051
        private Label label73;

        // Token: 0x0400041C RID: 1052
        private GroupBox groupBox3;

        // Token: 0x0400041D RID: 1053
        private Label label74;

        // Token: 0x0400041E RID: 1054
        private Label label75;

        // Token: 0x0400041F RID: 1055
        private Label label76;

        // Token: 0x04000420 RID: 1056
        private Label label81;

        // Token: 0x04000421 RID: 1057
        private Label label83;

        // Token: 0x04000422 RID: 1058
        private Label label84;

        // Token: 0x04000423 RID: 1059
        private Label label85;

        // Token: 0x04000424 RID: 1060
        private Label label86;

        // Token: 0x04000425 RID: 1061
        private Label label95;

        // Token: 0x04000426 RID: 1062
        private Label label96;

        // Token: 0x04000427 RID: 1063
        private Label label97;

        // Token: 0x04000428 RID: 1064
        private Label label98;

        // Token: 0x04000429 RID: 1065
        private Label label99;

        // Token: 0x0400042A RID: 1066
        private Label label100;

        // Token: 0x0400042B RID: 1067
        private Button button7;

        // Token: 0x0400042C RID: 1068
        private Button button16;

        // Token: 0x0400042D RID: 1069
        private GroupBox groupBox5;

        // Token: 0x0400042E RID: 1070
        private RadioButton radioButton12;

        // Token: 0x0400042F RID: 1071
        private RadioButton radioButton13;

        // Token: 0x04000430 RID: 1072
        private RadioButton radioButton14;

        // Token: 0x04000431 RID: 1073
        private RadioButton radioButton15;

        // Token: 0x04000432 RID: 1074
        private Button button5;

        // Token: 0x04000433 RID: 1075
        private Button button19;

        // Token: 0x04000434 RID: 1076
        private Button button20;

        // Token: 0x04000435 RID: 1077
        private Button button22;

        // Token: 0x04000436 RID: 1078
        private RadioButton radioButton11;

        // Token: 0x04000437 RID: 1079
        private Button button23;

        // Token: 0x04000438 RID: 1080
        private Button button24;

        // Token: 0x04000439 RID: 1081
        private CheckBox checkBox1;

        // Token: 0x0400043A RID: 1082
        private CheckBox checkBox2;

        // Token: 0x0400043B RID: 1083
        private GroupBox groupBox7;

        // Token: 0x0400043C RID: 1084
        private GroupBox groupBox9;

        // Token: 0x0400043D RID: 1085
        private CheckBox checkBox4;

        // Token: 0x0400043E RID: 1086
        private TextBox textBox5;

        // Token: 0x0400043F RID: 1087
        private CheckBox checkBox5;

        // Token: 0x04000440 RID: 1088
        private TextBox textBox19;

        // Token: 0x04000441 RID: 1089
        private Button button27;

        // Token: 0x04000442 RID: 1090
        private CheckBox checkBox6;

        // Token: 0x04000443 RID: 1091
        private CheckBox checkBox7;

        // Token: 0x04000444 RID: 1092
        private Button button28;

        // Token: 0x04000445 RID: 1093
        private LinkLabel linkLabel1;

        // Token: 0x04000446 RID: 1094
        private LinkLabel linkLabel2;

        // Token: 0x04000447 RID: 1095
        private LinkLabel linkLabel3;

        // Token: 0x04000448 RID: 1096
        private RadioButton radioButton16;

        // Token: 0x04000449 RID: 1097
        private Label label71;

        // Token: 0x0400044A RID: 1098
        private Label label101;

        // Token: 0x0400044B RID: 1099
        private Label label128;

        // Token: 0x0400044C RID: 1100
        private Label label129;

        // Token: 0x0400044D RID: 1101
        private RadioButton radioButton17;

        // Token: 0x0400044E RID: 1102
        private RadioButton radioButton18;

        // Token: 0x0400044F RID: 1103
        private ToolTip toolTip_0;

        // Token: 0x04000450 RID: 1104
        private CheckBox checkBox8;

        // Token: 0x04000451 RID: 1105
        private LinkLabel linkLabel4;

        // Token: 0x04000452 RID: 1106
        private PictureBox pictureBox1;

        // Token: 0x04000453 RID: 1107
        private CheckBox checkBox9;

        // Token: 0x04000454 RID: 1108
        private ContextMenu contextMenu_0;

        // Token: 0x04000455 RID: 1109
        private MenuItem menuItem_0;

        // Token: 0x04000456 RID: 1110
        private MenuItem menuItem_1;

        // Token: 0x04000457 RID: 1111
        private ContextMenu contextMenu_1;

        // Token: 0x04000458 RID: 1112
        private MenuItem menuItem_2;

        // Token: 0x04000459 RID: 1113
        private MenuItem menuItem_3;

        // Token: 0x0400045A RID: 1114
        private MenuItem menuItem_4;

        // Token: 0x0400045B RID: 1115
        private ContextMenu contextMenu_2;

        // Token: 0x0400045C RID: 1116
        private MenuItem menuItem_5;

        // Token: 0x0400045D RID: 1117
        private MenuItem menuItem_6;

        // Token: 0x0400045E RID: 1118
        private MenuItem menuItem_7;

        // Token: 0x0400045F RID: 1119
        private TextBox textBox20;

        // Token: 0x04000460 RID: 1120
        private MenuItem menuItem_8;

        // Token: 0x04000461 RID: 1121
        private MenuItem menuItem_9;

        // Token: 0x04000462 RID: 1122
        private MenuItem menuItem_10;

        // Token: 0x04000463 RID: 1123
        private Button button1;

        // Token: 0x04000464 RID: 1124
        private Button button4;

        // Token: 0x04000465 RID: 1125
        private MenuItem menuItem_11;

        // Token: 0x04000466 RID: 1126
        private MenuItem menuItem_12;

        // Token: 0x04000467 RID: 1127
        private Button button8;

        // Token: 0x04000468 RID: 1128
        private CheckBox checkBox10;

        // Token: 0x04000469 RID: 1129
        private CheckBox checkBox11;

        // Token: 0x0400046A RID: 1130
        private MenuItem menuItem_13;

        // Token: 0x0400046B RID: 1131
        private Button button9;

        // Token: 0x0400046C RID: 1132
        private Button button10;

        // Token: 0x0400046D RID: 1133
        private Button button25;

        // Token: 0x0400046E RID: 1134
        private AxWebBrowser axWebBrowser_0;

        // Token: 0x0400046F RID: 1135
        private AxWebBrowser axWebBrowser_1;

        // Token: 0x04000470 RID: 1136
        private PictureBox pictureBox3;

        // Token: 0x04000471 RID: 1137
        private TabPage tabPage5;

        // Token: 0x04000472 RID: 1138
        private Button button30;

        // Token: 0x04000473 RID: 1139
        private Button button31;

        // Token: 0x04000474 RID: 1140
        private PictureBox pictureBox4;

        // Token: 0x04000475 RID: 1141
        private ContextMenu contextMenu_3;

        // Token: 0x04000476 RID: 1142
        private MenuItem menuItem_14;

        // Token: 0x04000477 RID: 1143
        private MenuItem menuItem_15;

        // Token: 0x04000478 RID: 1144
        private MenuItem menuItem_16;

        // Token: 0x04000479 RID: 1145
        private MenuItem menuItem_17;

        // Token: 0x0400047A RID: 1146
        private MenuItem menuItem_18;

        // Token: 0x0400047B RID: 1147
        private PictureBox pictureBox2;

        // Token: 0x0400047C RID: 1148
        private Label label130;

        // Token: 0x0400047D RID: 1149
        private Label label131;

        // Token: 0x0400047E RID: 1150
        private Label label132;

        // Token: 0x0400047F RID: 1151
        private Label label133;

        // Token: 0x04000480 RID: 1152
        private PictureBox pictureBox6;

        // Token: 0x04000481 RID: 1153
        private PictureBox pictureBox7;

        // Token: 0x04000482 RID: 1154
        private PictureBox pictureBox5;

        // Token: 0x04000483 RID: 1155
        private Button button32;

        // Token: 0x04000484 RID: 1156
        private MenuItem menuItem_19;

        // Token: 0x04000485 RID: 1157
        private MenuItem menuItem_20;

        // Token: 0x04000486 RID: 1158
        private ContextMenu contextMenu_4;

        // Token: 0x04000487 RID: 1159
        private MenuItem menuItem_21;

        // Token: 0x04000488 RID: 1160
        private MenuItem menuItem_22;

        // Token: 0x04000489 RID: 1161
        private MenuItem menuItem_23;

        // Token: 0x0400048A RID: 1162
        private MenuItem menuItem_24;

        // Token: 0x0400048B RID: 1163
        private ContextMenu contextMenu_5;

        // Token: 0x0400048C RID: 1164
        private MenuItem menuItem_25;

        // Token: 0x0400048D RID: 1165
        private MenuItem menuItem_26;

        // Token: 0x0400048E RID: 1166
        private MenuItem menuItem_27;

        // Token: 0x0400048F RID: 1167
        private MenuItem menuItem_28;

        // Token: 0x04000490 RID: 1168
        private MenuItem menuItem_29;

        // Token: 0x04000491 RID: 1169
        private MenuItem menuItem_30;

        // Token: 0x04000492 RID: 1170
        private MenuItem menuItem_31;

        // Token: 0x04000493 RID: 1171
        private MenuItem menuItem_32;

        // Token: 0x04000494 RID: 1172
        private Label label135;

        // Token: 0x04000495 RID: 1173
        private PictureBox pictureBox8;

        // Token: 0x04000496 RID: 1174
        private PictureBox pictureBox9;

        // Token: 0x04000497 RID: 1175
        private PictureBox pictureBox10;

        // Token: 0x04000498 RID: 1176
        private PictureBox pictureBox11;

        // Token: 0x04000499 RID: 1177
        private CheckBox checkBox15;

        // Token: 0x0400049A RID: 1178
        private CheckBox checkBox16;

        // Token: 0x0400049B RID: 1179
        private Button button38;

        // Token: 0x0400049C RID: 1180
        private RadioButton radioButton19;

        // Token: 0x0400049D RID: 1181
        private RadioButton radioButton20;

        // Token: 0x0400049E RID: 1182
        private Button button39;

        // Token: 0x0400049F RID: 1183
        private Button button40;

        // Token: 0x040004A0 RID: 1184
        private Button button41;

        // Token: 0x040004A1 RID: 1185
        private Button button42;

        // Token: 0x040004A2 RID: 1186
        private MenuItem menuItem_33;

        // Token: 0x040004A3 RID: 1187
        private GroupBox groupBox18;

        // Token: 0x040004A4 RID: 1188
        private Button button43;

        // Token: 0x040004A5 RID: 1189
        private Button button44;

        // Token: 0x040004A6 RID: 1190
        private Button button45;

        // Token: 0x040004A7 RID: 1191
        private Button button46;

        // Token: 0x040004A8 RID: 1192
        private Button button47;

        // Token: 0x040004A9 RID: 1193
        private Button button48;

        // Token: 0x040004AA RID: 1194
        private ContextMenu contextMenu_6;

        // Token: 0x040004AB RID: 1195
        private MenuItem menuItem_34;

        // Token: 0x040004AC RID: 1196
        private MenuItem menuItem_35;

        // Token: 0x040004AD RID: 1197
        private MenuItem menuItem_36;

        // Token: 0x040004AE RID: 1198
        private RadioButton radioButton21;

        // Token: 0x040004AF RID: 1199
        private MenuItem menuItem_37;

        // Token: 0x040004B0 RID: 1200
        private MenuItem menuItem_38;

        // Token: 0x040004B1 RID: 1201
        private MenuItem menuItem_39;

        // Token: 0x040004B2 RID: 1202
        private MenuItem menuItem_40;

        // Token: 0x040004B3 RID: 1203
        private MenuItem menuItem_41;

        // Token: 0x040004B4 RID: 1204
        private MenuItem menuItem_42;

        // Token: 0x040004B5 RID: 1205
        private MenuItem menuItem_43;

        // Token: 0x040004B6 RID: 1206
        private MenuItem menuItem_44;

        // Token: 0x040004B7 RID: 1207
        private MenuItem menuItem_45;

        // Token: 0x040004B8 RID: 1208
        private MenuItem menuItem_46;

        // Token: 0x040004B9 RID: 1209
        private MenuItem menuItem_47;

        // Token: 0x040004BA RID: 1210
        private MenuItem menuItem_48;

        // Token: 0x040004BB RID: 1211
        private MenuItem menuItem_49;

        // Token: 0x040004BC RID: 1212
        private MenuItem menuItem_50;

        // Token: 0x040004BD RID: 1213
        private MenuItem menuItem_51;

        // Token: 0x040004BE RID: 1214
        private MenuItem menuItem_52;

        // Token: 0x040004BF RID: 1215
        private IContainer icontainer_0;

        // Token: 0x040004C0 RID: 1216
        public string string_0;

        // Token: 0x040004C1 RID: 1217
        public bool bool_0;

        // Token: 0x040004C2 RID: 1218
        public bool bool_1;

        // Token: 0x040004C3 RID: 1219
        public bool bool_2;

        // Token: 0x040004C4 RID: 1220
        public bool bool_3;

        // Token: 0x040004C5 RID: 1221
        public bool bool_4;

        // Token: 0x040004C6 RID: 1222
        public int int_0;

        // Token: 0x040004C7 RID: 1223
        public int int_1;

        // Token: 0x040004C8 RID: 1224
        public int int_2;

        // Token: 0x040004C9 RID: 1225
        public int int_3;

        // Token: 0x040004CA RID: 1226
        public int int_4;

        // Token: 0x040004CB RID: 1227
        public int int_5;

        // Token: 0x040004CC RID: 1228
        public int int_6;

        // Token: 0x040004CD RID: 1229
        public int int_7;

        // Token: 0x040004CE RID: 1230
        public int int_8;

        // Token: 0x040004CF RID: 1231
        public Thread thread_0;

        // Token: 0x040004D0 RID: 1232
        public Thread thread_1;

        // Token: 0x040004D1 RID: 1233
        public string string_1;

        // Token: 0x040004D2 RID: 1234
        public string string_2;

        // Token: 0x040004D3 RID: 1235
        public string string_3;

        // Token: 0x040004D4 RID: 1236
        public string string_4;

        // Token: 0x040004D5 RID: 1237
        public string string_5;

        // Token: 0x040004D6 RID: 1238
        public string string_6;

        // Token: 0x040004D7 RID: 1239
        public string string_7;

        // Token: 0x040004D8 RID: 1240
        public string string_8;

        // Token: 0x040004D9 RID: 1241
        public string string_9;

        // Token: 0x040004DA RID: 1242
        public string string_10;

        // Token: 0x040004DB RID: 1243
        public string string_11;

        // Token: 0x040004DC RID: 1244
        public string string_12;

        // Token: 0x040004DD RID: 1245
        public string string_13;

        // Token: 0x040004DE RID: 1246
        public string string_14;

        // Token: 0x040004DF RID: 1247
        public string string_15;

        // Token: 0x040004E0 RID: 1248
        public string string_16;

        // Token: 0x040004E1 RID: 1249
        public string string_17;

        // Token: 0x040004E2 RID: 1250
        public string string_18;

        // Token: 0x040004E3 RID: 1251
        public bool bool_5;

        // Token: 0x040004E4 RID: 1252
        public bool bool_6;

        // Token: 0x040004E5 RID: 1253
        public bool bool_7;

        // Token: 0x040004E6 RID: 1254
        public bool bool_8;

        // Token: 0x040004E7 RID: 1255
        public bool bool_9;

        // Token: 0x040004E8 RID: 1256
        public int int_9;

        // Token: 0x040004E9 RID: 1257
        public int int_10;

        // Token: 0x040004EA RID: 1258
        public int int_11;

        // Token: 0x040004EB RID: 1259
        public unsafe GStruct11* pGstruct11_0;

        // Token: 0x040004EC RID: 1260
        private bool bool_10;

        // Token: 0x040004ED RID: 1261
        private bool bool_11;

        // Token: 0x040004EE RID: 1262
        private unsafe void* pVoid_0;

        // Token: 0x040004EF RID: 1263
        private unsafe void* pVoid_1;

        // Token: 0x040004F0 RID: 1264
        private unsafe void* pVoid_2;

        // Token: 0x040004F1 RID: 1265
        private int int_12;

        // Token: 0x040004F2 RID: 1266
        public string string_19;

        // Token: 0x040004F3 RID: 1267
        public int int_13;

        // Token: 0x040004F4 RID: 1268
        public string string_20;

        // Token: 0x040004F5 RID: 1269
        public int int_14;

        // Token: 0x040004F6 RID: 1270
        public string string_21;

        // Token: 0x040004F7 RID: 1271
        public int int_15;

        // Token: 0x040004F8 RID: 1272
        public string string_22;

        // Token: 0x040004F9 RID: 1273
        private unsafe void** ppVoid_0;

        // Token: 0x040004FA RID: 1274
        public string string_23;

        // Token: 0x040004FB RID: 1275
        public string string_24;
    }
}
